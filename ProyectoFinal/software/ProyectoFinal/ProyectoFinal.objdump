
ProyectoFinal.elf:     file format elf32-littlenios2
ProyectoFinal.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000041b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001c6c memsz 0x00001c6c flags r-x
    LOAD off    0x00002c8c vaddr 0x00005c8c paddr 0x00005f6c align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x0000324c vaddr 0x0000624c paddr 0x0000624c align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001a8c  000041b4  000041b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00005c40  00005c40  00002c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00005c8c  00005f6c  00002c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0000624c  0000624c  0000324c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004d8  00000000  00000000  00002f98  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000006cb  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008b29  00000000  00000000  00003b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f68  00000000  00000000  0000c664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000058d3  00000000  00000000  0000e5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007b8  00000000  00000000  00013ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b19  00000000  00000000  00014658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c84  00000000  00000000  00015171  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00015df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00015e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000176a6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000176a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000176b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000176b6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000176b7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000176bb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000176bf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000176c3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000176ce  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000176d9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  000176e4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000049  00000000  00000000  000176ee  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000412b4  00000000  00000000  00017737  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
000041b4 l    d  .text	00000000 .text
00005c40 l    d  .rodata	00000000 .rodata
00005c8c l    d  .rwdata	00000000 .rwdata
0000624c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000041ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005c8c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0000449c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00004688 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005d6c l     O .rwdata	0000002c jtag_uart_0
00004760 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000049f0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00004bf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004c6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004d4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005094 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000051e4 l     F .text	000000f8 alt_file_locked
00005468 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000059e4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00005bdc l     F .text	00000040 alt_sim_halt
00004508 g     F .text	0000005c alt_main
00004224 g     F .text	00000090 _puts_r
00006268 g     O .bss	00000100 alt_irq
00005f6c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
0000624c g     O .bss	00000004 errno
00006254 g     O .bss	00000004 alt_argv
0000df40 g       *ABS*	00000000 _gp
00005dc0 g     O .rwdata	00000180 alt_fd_list
00005704 g     F .text	00000094 alt_find_dev
0000516c g     F .text	00000078 alt_io_redirect
000042b4 g     F .text	00000014 puts
00004848 g     F .text	00000104 altera_avalon_jtag_uart_read
00005f58 g     O .rwdata	00000004 alt_max_fd
00005f44 g     O .rwdata	00000004 _global_impure_ptr
00006368 g       *ABS*	00000000 __bss_end
00004f9c g     F .text	000000f8 alt_iic_isr_register
000055d8 g     F .text	0000010c alt_tick
00004f54 g     F .text	00000048 alt_ic_irq_enabled
00005540 g     F .text	00000098 alt_alarm_stop
0000625c g     O .bss	00000004 alt_irq_active
000040ec g     F .exceptions	000000c8 alt_irq_handler
00005d98 g     O .rwdata	00000028 alt_dev_null
00004c50 g     F .text	0000001c alt_dcache_flush_all
00005f6c g       *ABS*	00000000 __ram_rwdata_end
00005f50 g     O .rwdata	00000008 alt_dev_list
00004564 g     F .text	00000124 write
00005c8c g       *ABS*	00000000 __ram_rodata_end
00006368 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004a60 g     F .text	00000090 alt_avalon_timer_sc_init
0000494c g     F .text	000000a4 altera_avalon_jtag_uart_write
000059e8 g     F .text	000001bc __call_exitprocs
000041b4 g     F .text	0000003c _start
00006260 g     O .bss	00000004 _alt_tick_rate
00006264 g     O .bss	00000004 _alt_nticks
0000471c g     F .text	00000044 alt_sys_init
00005ba4 g     F .text	00000038 __mulsi3
00005c8c g       *ABS*	00000000 __ram_rwdata_start
00005c40 g       *ABS*	00000000 __ram_rodata_start
00004798 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000058b8 g     F .text	000000d0 alt_get_fd
000059a8 g     F .text	0000003c memcmp
00006368 g       *ABS*	00000000 __alt_stack_base
00005798 g     F .text	00000120 alt_find_file
00004c98 g     F .text	000000b4 alt_dev_llist_insert
000042e8 g     F .text	000000bc __sfvwrite_small_dev
0000624c g       *ABS*	00000000 __bss_start
000041f0 g     F .text	00000034 main
00004000 g       *ABS*	00000000 __alt_mem_RAM
00006258 g     O .bss	00000004 alt_envp
000047f0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00005f5c g     O .rwdata	00000004 alt_errno
00005c40 g       *ABS*	00000000 __flash_rodata_start
000046e8 g     F .text	00000034 alt_irq_init
000054c8 g     F .text	00000078 alt_release_fd
000043a4 g     F .text	00000078 _write_r
00005f40 g     O .rwdata	00000004 _impure_ptr
00006250 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00005f48 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004dc8 g     F .text	00000050 alt_ic_isr_register
00005f6c g       *ABS*	00000000 _edata
00006368 g       *ABS*	00000000 _end
000041b4 g       *ABS*	00000000 __ram_exceptions_end
00004eb4 g     F .text	000000a0 alt_ic_irq_disable
000056e4 g     F .text	00000020 altera_nios2_qsys_irq_init
00005988 g     F .text	00000020 exit
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00005c1c g     F .text	00000020 _exit
000042c8 g     F .text	00000020 strlen
000052dc g     F .text	0000018c open
00004dac g     F .text	0000001c alt_icache_flush_all
00005f60 g     O .rwdata	00000004 alt_priority_mask
00004e18 g     F .text	0000009c alt_ic_irq_enable
00005f64 g     O .rwdata	00000008 alt_alarm_list
00004af0 g     F .text	00000100 close
0000441c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506d14 	ori	at,at,16820
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    4044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040ec0 	call	40ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000306 	br	4098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    4094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    4098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    40c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    40e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40e8:	ef80083a 	eret

000040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40ec:	defff904 	addi	sp,sp,-28
    40f0:	dfc00615 	stw	ra,24(sp)
    40f4:	df000515 	stw	fp,20(sp)
    40f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    40fc:	0005313a 	rdctl	r2,ipending
    4100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    4104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    4108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4110:	00800044 	movi	r2,1
    4114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    4118:	e0ffff17 	ldw	r3,-4(fp)
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	1884703a 	and	r2,r3,r2
    4124:	1005003a 	cmpeq	r2,r2,zero
    4128:	1000161e 	bne	r2,zero,4184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    412c:	e0bffd17 	ldw	r2,-12(fp)
    4130:	00c00034 	movhi	r3,0
    4134:	18d89a04 	addi	r3,r3,25192
    4138:	100490fa 	slli	r2,r2,3
    413c:	10c5883a 	add	r2,r2,r3
    4140:	11400017 	ldw	r5,0(r2)
    4144:	e0bffd17 	ldw	r2,-12(fp)
    4148:	00c00034 	movhi	r3,0
    414c:	18d89a04 	addi	r3,r3,25192
    4150:	100490fa 	slli	r2,r2,3
    4154:	10c5883a 	add	r2,r2,r3
    4158:	10800104 	addi	r2,r2,4
    415c:	11000017 	ldw	r4,0(r2)
    4160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4164:	0005313a 	rdctl	r2,ipending
    4168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    4170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    4174:	e0bfff17 	ldw	r2,-4(fp)
    4178:	1004c03a 	cmpne	r2,r2,zero
    417c:	103fe31e 	bne	r2,zero,410c <alt_irq_handler+0x20>
    4180:	00000706 	br	41a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4184:	e0bffe17 	ldw	r2,-8(fp)
    4188:	1085883a 	add	r2,r2,r2
    418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    4190:	e0bffd17 	ldw	r2,-12(fp)
    4194:	10800044 	addi	r2,r2,1
    4198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    419c:	003fde06 	br	4118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    41a0:	e037883a 	mov	sp,fp
    41a4:	dfc00117 	ldw	ra,4(sp)
    41a8:	df000017 	ldw	fp,0(sp)
    41ac:	dec00204 	addi	sp,sp,8
    41b0:	f800283a 	ret

Disassembly of section .text:

000041b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    41b4:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    41b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    41bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    41c0:	d6b7d014 	ori	gp,gp,57152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    41c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    41c8:	10989314 	ori	r2,r2,25164

    movhi r3, %hi(__bss_end)
    41cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    41d0:	18d8da14 	ori	r3,r3,25448

    beq r2, r3, 1f
    41d4:	10c00326 	beq	r2,r3,41e4 <_start+0x30>

0:
    stw zero, (r2)
    41d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41e0:	10fffd36 	bltu	r2,r3,41d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41e4:	000441c0 	call	441c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41e8:	00045080 	call	4508 <alt_main>

000041ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41ec:	003fff06 	br	41ec <alt_after_alt_main>

000041f0 <main>:
 */

#include <stdio.h>

int main()
{
    41f0:	defffe04 	addi	sp,sp,-8
    41f4:	dfc00115 	stw	ra,4(sp)
    41f8:	df000015 	stw	fp,0(sp)
    41fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    4200:	01000034 	movhi	r4,0
    4204:	21171004 	addi	r4,r4,23616
    4208:	00042b40 	call	42b4 <puts>

  return 0;
    420c:	0005883a 	mov	r2,zero
}
    4210:	e037883a 	mov	sp,fp
    4214:	dfc00117 	ldw	ra,4(sp)
    4218:	df000017 	ldw	fp,0(sp)
    421c:	dec00204 	addi	sp,sp,8
    4220:	f800283a 	ret

00004224 <_puts_r>:
    4224:	defffd04 	addi	sp,sp,-12
    4228:	dc000015 	stw	r16,0(sp)
    422c:	2021883a 	mov	r16,r4
    4230:	2809883a 	mov	r4,r5
    4234:	dfc00215 	stw	ra,8(sp)
    4238:	dc400115 	stw	r17,4(sp)
    423c:	2823883a 	mov	r17,r5
    4240:	00042c80 	call	42c8 <strlen>
    4244:	80c00217 	ldw	r3,8(r16)
    4248:	02000034 	movhi	r8,0
    424c:	4210ba04 	addi	r8,r8,17128
    4250:	880d883a 	mov	r6,r17
    4254:	100f883a 	mov	r7,r2
    4258:	8009883a 	mov	r4,r16
    425c:	180b883a 	mov	r5,r3
    4260:	1a000115 	stw	r8,4(r3)
    4264:	403ee83a 	callr	r8
    4268:	047fffc4 	movi	r17,-1
    426c:	8009883a 	mov	r4,r16
    4270:	01800034 	movhi	r6,0
    4274:	31971504 	addi	r6,r6,23636
    4278:	01c00044 	movi	r7,1
    427c:	1440071e 	bne	r2,r17,429c <_puts_r+0x78>
    4280:	00ffffc4 	movi	r3,-1
    4284:	1805883a 	mov	r2,r3
    4288:	dfc00217 	ldw	ra,8(sp)
    428c:	dc400117 	ldw	r17,4(sp)
    4290:	dc000017 	ldw	r16,0(sp)
    4294:	dec00304 	addi	sp,sp,12
    4298:	f800283a 	ret
    429c:	81400217 	ldw	r5,8(r16)
    42a0:	28c00117 	ldw	r3,4(r5)
    42a4:	183ee83a 	callr	r3
    42a8:	0007883a 	mov	r3,zero
    42ac:	147ff51e 	bne	r2,r17,4284 <_puts_r+0x60>
    42b0:	003ff306 	br	4280 <_puts_r+0x5c>

000042b4 <puts>:
    42b4:	00800034 	movhi	r2,0
    42b8:	1097d004 	addi	r2,r2,24384
    42bc:	200b883a 	mov	r5,r4
    42c0:	11000017 	ldw	r4,0(r2)
    42c4:	00042241 	jmpi	4224 <_puts_r>

000042c8 <strlen>:
    42c8:	20800007 	ldb	r2,0(r4)
    42cc:	10000526 	beq	r2,zero,42e4 <strlen+0x1c>
    42d0:	2007883a 	mov	r3,r4
    42d4:	18c00044 	addi	r3,r3,1
    42d8:	18800007 	ldb	r2,0(r3)
    42dc:	103ffd1e 	bne	r2,zero,42d4 <strlen+0xc>
    42e0:	1905c83a 	sub	r2,r3,r4
    42e4:	f800283a 	ret

000042e8 <__sfvwrite_small_dev>:
    42e8:	2880000b 	ldhu	r2,0(r5)
    42ec:	defffa04 	addi	sp,sp,-24
    42f0:	dcc00315 	stw	r19,12(sp)
    42f4:	1080020c 	andi	r2,r2,8
    42f8:	dc800215 	stw	r18,8(sp)
    42fc:	dc400115 	stw	r17,4(sp)
    4300:	dfc00515 	stw	ra,20(sp)
    4304:	dd000415 	stw	r20,16(sp)
    4308:	dc000015 	stw	r16,0(sp)
    430c:	2825883a 	mov	r18,r5
    4310:	2027883a 	mov	r19,r4
    4314:	3023883a 	mov	r17,r6
    4318:	10002026 	beq	r2,zero,439c <__sfvwrite_small_dev+0xb4>
    431c:	2940008f 	ldh	r5,2(r5)
    4320:	28000f16 	blt	r5,zero,4360 <__sfvwrite_small_dev+0x78>
    4324:	01c01b0e 	bge	zero,r7,4394 <__sfvwrite_small_dev+0xac>
    4328:	3821883a 	mov	r16,r7
    432c:	05010004 	movi	r20,1024
    4330:	00000206 	br	433c <__sfvwrite_small_dev+0x54>
    4334:	0400170e 	bge	zero,r16,4394 <__sfvwrite_small_dev+0xac>
    4338:	9140008f 	ldh	r5,2(r18)
    433c:	880d883a 	mov	r6,r17
    4340:	9809883a 	mov	r4,r19
    4344:	800f883a 	mov	r7,r16
    4348:	a400010e 	bge	r20,r16,4350 <__sfvwrite_small_dev+0x68>
    434c:	01c10004 	movi	r7,1024
    4350:	00043a40 	call	43a4 <_write_r>
    4354:	88a3883a 	add	r17,r17,r2
    4358:	80a1c83a 	sub	r16,r16,r2
    435c:	00bff516 	blt	zero,r2,4334 <__sfvwrite_small_dev+0x4c>
    4360:	9080000b 	ldhu	r2,0(r18)
    4364:	00ffffc4 	movi	r3,-1
    4368:	10801014 	ori	r2,r2,64
    436c:	9080000d 	sth	r2,0(r18)
    4370:	1805883a 	mov	r2,r3
    4374:	dfc00517 	ldw	ra,20(sp)
    4378:	dd000417 	ldw	r20,16(sp)
    437c:	dcc00317 	ldw	r19,12(sp)
    4380:	dc800217 	ldw	r18,8(sp)
    4384:	dc400117 	ldw	r17,4(sp)
    4388:	dc000017 	ldw	r16,0(sp)
    438c:	dec00604 	addi	sp,sp,24
    4390:	f800283a 	ret
    4394:	0007883a 	mov	r3,zero
    4398:	003ff506 	br	4370 <__sfvwrite_small_dev+0x88>
    439c:	00ffffc4 	movi	r3,-1
    43a0:	003ff306 	br	4370 <__sfvwrite_small_dev+0x88>

000043a4 <_write_r>:
    43a4:	defffd04 	addi	sp,sp,-12
    43a8:	dc000015 	stw	r16,0(sp)
    43ac:	04000034 	movhi	r16,0
    43b0:	84189304 	addi	r16,r16,25164
    43b4:	dc400115 	stw	r17,4(sp)
    43b8:	80000015 	stw	zero,0(r16)
    43bc:	2023883a 	mov	r17,r4
    43c0:	2809883a 	mov	r4,r5
    43c4:	300b883a 	mov	r5,r6
    43c8:	380d883a 	mov	r6,r7
    43cc:	dfc00215 	stw	ra,8(sp)
    43d0:	00045640 	call	4564 <write>
    43d4:	1007883a 	mov	r3,r2
    43d8:	00bfffc4 	movi	r2,-1
    43dc:	18800626 	beq	r3,r2,43f8 <_write_r+0x54>
    43e0:	1805883a 	mov	r2,r3
    43e4:	dfc00217 	ldw	ra,8(sp)
    43e8:	dc400117 	ldw	r17,4(sp)
    43ec:	dc000017 	ldw	r16,0(sp)
    43f0:	dec00304 	addi	sp,sp,12
    43f4:	f800283a 	ret
    43f8:	80800017 	ldw	r2,0(r16)
    43fc:	103ff826 	beq	r2,zero,43e0 <_write_r+0x3c>
    4400:	88800015 	stw	r2,0(r17)
    4404:	1805883a 	mov	r2,r3
    4408:	dfc00217 	ldw	ra,8(sp)
    440c:	dc400117 	ldw	r17,4(sp)
    4410:	dc000017 	ldw	r16,0(sp)
    4414:	dec00304 	addi	sp,sp,12
    4418:	f800283a 	ret

0000441c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    441c:	defffe04 	addi	sp,sp,-8
    4420:	dfc00115 	stw	ra,4(sp)
    4424:	df000015 	stw	fp,0(sp)
    4428:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    442c:	01000034 	movhi	r4,0
    4430:	2117db04 	addi	r4,r4,24428
    4434:	01400034 	movhi	r5,0
    4438:	29572304 	addi	r5,r5,23692
    443c:	01800034 	movhi	r6,0
    4440:	3197db04 	addi	r6,r6,24428
    4444:	000449c0 	call	449c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4448:	01000034 	movhi	r4,0
    444c:	21100804 	addi	r4,r4,16416
    4450:	01400034 	movhi	r5,0
    4454:	29500804 	addi	r5,r5,16416
    4458:	01800034 	movhi	r6,0
    445c:	31906d04 	addi	r6,r6,16820
    4460:	000449c0 	call	449c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4464:	01000034 	movhi	r4,0
    4468:	21171004 	addi	r4,r4,23616
    446c:	01400034 	movhi	r5,0
    4470:	29571004 	addi	r5,r5,23616
    4474:	01800034 	movhi	r6,0
    4478:	31972304 	addi	r6,r6,23692
    447c:	000449c0 	call	449c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4480:	0004c500 	call	4c50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4484:	0004dac0 	call	4dac <alt_icache_flush_all>
}
    4488:	e037883a 	mov	sp,fp
    448c:	dfc00117 	ldw	ra,4(sp)
    4490:	df000017 	ldw	fp,0(sp)
    4494:	dec00204 	addi	sp,sp,8
    4498:	f800283a 	ret

0000449c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    449c:	defffc04 	addi	sp,sp,-16
    44a0:	df000315 	stw	fp,12(sp)
    44a4:	df000304 	addi	fp,sp,12
    44a8:	e13ffd15 	stw	r4,-12(fp)
    44ac:	e17ffe15 	stw	r5,-8(fp)
    44b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    44b4:	e0fffe17 	ldw	r3,-8(fp)
    44b8:	e0bffd17 	ldw	r2,-12(fp)
    44bc:	18800e26 	beq	r3,r2,44f8 <alt_load_section+0x5c>
  {
    while( to != end )
    44c0:	00000a06 	br	44ec <alt_load_section+0x50>
    {
      *to++ = *from++;
    44c4:	e0bffd17 	ldw	r2,-12(fp)
    44c8:	10c00017 	ldw	r3,0(r2)
    44cc:	e0bffe17 	ldw	r2,-8(fp)
    44d0:	10c00015 	stw	r3,0(r2)
    44d4:	e0bffe17 	ldw	r2,-8(fp)
    44d8:	10800104 	addi	r2,r2,4
    44dc:	e0bffe15 	stw	r2,-8(fp)
    44e0:	e0bffd17 	ldw	r2,-12(fp)
    44e4:	10800104 	addi	r2,r2,4
    44e8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    44ec:	e0fffe17 	ldw	r3,-8(fp)
    44f0:	e0bfff17 	ldw	r2,-4(fp)
    44f4:	18bff31e 	bne	r3,r2,44c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    44f8:	e037883a 	mov	sp,fp
    44fc:	df000017 	ldw	fp,0(sp)
    4500:	dec00104 	addi	sp,sp,4
    4504:	f800283a 	ret

00004508 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4508:	defffd04 	addi	sp,sp,-12
    450c:	dfc00215 	stw	ra,8(sp)
    4510:	df000115 	stw	fp,4(sp)
    4514:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4518:	0009883a 	mov	r4,zero
    451c:	00046e80 	call	46e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4520:	000471c0 	call	471c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4524:	01000034 	movhi	r4,0
    4528:	21171604 	addi	r4,r4,23640
    452c:	01400034 	movhi	r5,0
    4530:	29571604 	addi	r5,r5,23640
    4534:	01800034 	movhi	r6,0
    4538:	31971604 	addi	r6,r6,23640
    453c:	000516c0 	call	516c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4540:	d120c417 	ldw	r4,-31984(gp)
    4544:	d160c517 	ldw	r5,-31980(gp)
    4548:	d1a0c617 	ldw	r6,-31976(gp)
    454c:	00041f00 	call	41f0 <main>
    4550:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4554:	01000044 	movi	r4,1
    4558:	0004af00 	call	4af0 <close>
  exit (result);
    455c:	e13fff17 	ldw	r4,-4(fp)
    4560:	00059880 	call	5988 <exit>

00004564 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4564:	defff704 	addi	sp,sp,-36
    4568:	dfc00815 	stw	ra,32(sp)
    456c:	df000715 	stw	fp,28(sp)
    4570:	df000704 	addi	fp,sp,28
    4574:	e13ffb15 	stw	r4,-20(fp)
    4578:	e17ffc15 	stw	r5,-16(fp)
    457c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4580:	e0bffb17 	ldw	r2,-20(fp)
    4584:	1004803a 	cmplt	r2,r2,zero
    4588:	1000091e 	bne	r2,zero,45b0 <write+0x4c>
    458c:	e13ffb17 	ldw	r4,-20(fp)
    4590:	01400304 	movi	r5,12
    4594:	0005ba40 	call	5ba4 <__mulsi3>
    4598:	1007883a 	mov	r3,r2
    459c:	00800034 	movhi	r2,0
    45a0:	10977004 	addi	r2,r2,24000
    45a4:	1887883a 	add	r3,r3,r2
    45a8:	e0ffff15 	stw	r3,-4(fp)
    45ac:	00000106 	br	45b4 <write+0x50>
    45b0:	e03fff15 	stw	zero,-4(fp)
    45b4:	e0bfff17 	ldw	r2,-4(fp)
    45b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    45bc:	e0bffa17 	ldw	r2,-24(fp)
    45c0:	1005003a 	cmpeq	r2,r2,zero
    45c4:	1000241e 	bne	r2,zero,4658 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    45c8:	e0bffa17 	ldw	r2,-24(fp)
    45cc:	10800217 	ldw	r2,8(r2)
    45d0:	108000cc 	andi	r2,r2,3
    45d4:	1005003a 	cmpeq	r2,r2,zero
    45d8:	10001a1e 	bne	r2,zero,4644 <write+0xe0>
    45dc:	e0bffa17 	ldw	r2,-24(fp)
    45e0:	10800017 	ldw	r2,0(r2)
    45e4:	10800617 	ldw	r2,24(r2)
    45e8:	1005003a 	cmpeq	r2,r2,zero
    45ec:	1000151e 	bne	r2,zero,4644 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    45f0:	e0bffa17 	ldw	r2,-24(fp)
    45f4:	10800017 	ldw	r2,0(r2)
    45f8:	10800617 	ldw	r2,24(r2)
    45fc:	e17ffc17 	ldw	r5,-16(fp)
    4600:	e1bffd17 	ldw	r6,-12(fp)
    4604:	e13ffa17 	ldw	r4,-24(fp)
    4608:	103ee83a 	callr	r2
    460c:	e0bff915 	stw	r2,-28(fp)
    4610:	e0bff917 	ldw	r2,-28(fp)
    4614:	1004403a 	cmpge	r2,r2,zero
    4618:	1000071e 	bne	r2,zero,4638 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    461c:	00046880 	call	4688 <alt_get_errno>
    4620:	e0fff917 	ldw	r3,-28(fp)
    4624:	00c7c83a 	sub	r3,zero,r3
    4628:	10c00015 	stw	r3,0(r2)
        return -1;
    462c:	00bfffc4 	movi	r2,-1
    4630:	e0bffe15 	stw	r2,-8(fp)
    4634:	00000e06 	br	4670 <write+0x10c>
      }
      return rval;
    4638:	e0bff917 	ldw	r2,-28(fp)
    463c:	e0bffe15 	stw	r2,-8(fp)
    4640:	00000b06 	br	4670 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    4644:	00046880 	call	4688 <alt_get_errno>
    4648:	1007883a 	mov	r3,r2
    464c:	00800344 	movi	r2,13
    4650:	18800015 	stw	r2,0(r3)
    4654:	00000406 	br	4668 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    4658:	00046880 	call	4688 <alt_get_errno>
    465c:	1007883a 	mov	r3,r2
    4660:	00801444 	movi	r2,81
    4664:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4668:	00bfffc4 	movi	r2,-1
    466c:	e0bffe15 	stw	r2,-8(fp)
    4670:	e0bffe17 	ldw	r2,-8(fp)
}
    4674:	e037883a 	mov	sp,fp
    4678:	dfc00117 	ldw	ra,4(sp)
    467c:	df000017 	ldw	fp,0(sp)
    4680:	dec00204 	addi	sp,sp,8
    4684:	f800283a 	ret

00004688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4688:	defffd04 	addi	sp,sp,-12
    468c:	dfc00215 	stw	ra,8(sp)
    4690:	df000115 	stw	fp,4(sp)
    4694:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4698:	00800034 	movhi	r2,0
    469c:	1097d704 	addi	r2,r2,24412
    46a0:	10800017 	ldw	r2,0(r2)
    46a4:	1005003a 	cmpeq	r2,r2,zero
    46a8:	1000061e 	bne	r2,zero,46c4 <alt_get_errno+0x3c>
    46ac:	00800034 	movhi	r2,0
    46b0:	1097d704 	addi	r2,r2,24412
    46b4:	10800017 	ldw	r2,0(r2)
    46b8:	103ee83a 	callr	r2
    46bc:	e0bfff15 	stw	r2,-4(fp)
    46c0:	00000306 	br	46d0 <alt_get_errno+0x48>
    46c4:	00800034 	movhi	r2,0
    46c8:	10989304 	addi	r2,r2,25164
    46cc:	e0bfff15 	stw	r2,-4(fp)
    46d0:	e0bfff17 	ldw	r2,-4(fp)
}
    46d4:	e037883a 	mov	sp,fp
    46d8:	dfc00117 	ldw	ra,4(sp)
    46dc:	df000017 	ldw	fp,0(sp)
    46e0:	dec00204 	addi	sp,sp,8
    46e4:	f800283a 	ret

000046e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    46e8:	defffd04 	addi	sp,sp,-12
    46ec:	dfc00215 	stw	ra,8(sp)
    46f0:	df000115 	stw	fp,4(sp)
    46f4:	df000104 	addi	fp,sp,4
    46f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    46fc:	00056e40 	call	56e4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4700:	00800044 	movi	r2,1
    4704:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4708:	e037883a 	mov	sp,fp
    470c:	dfc00117 	ldw	ra,4(sp)
    4710:	df000017 	ldw	fp,0(sp)
    4714:	dec00204 	addi	sp,sp,8
    4718:	f800283a 	ret

0000471c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    471c:	defffe04 	addi	sp,sp,-8
    4720:	dfc00115 	stw	ra,4(sp)
    4724:	df000015 	stw	fp,0(sp)
    4728:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    472c:	01240014 	movui	r4,36864
    4730:	000b883a 	mov	r5,zero
    4734:	000d883a 	mov	r6,zero
    4738:	01c0fa04 	movi	r7,1000
    473c:	0004a600 	call	4a60 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    4740:	01000034 	movhi	r4,0
    4744:	21175b04 	addi	r4,r4,23916
    4748:	00047600 	call	4760 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    474c:	e037883a 	mov	sp,fp
    4750:	dfc00117 	ldw	ra,4(sp)
    4754:	df000017 	ldw	fp,0(sp)
    4758:	dec00204 	addi	sp,sp,8
    475c:	f800283a 	ret

00004760 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4760:	defffd04 	addi	sp,sp,-12
    4764:	dfc00215 	stw	ra,8(sp)
    4768:	df000115 	stw	fp,4(sp)
    476c:	df000104 	addi	fp,sp,4
    4770:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4774:	e13fff17 	ldw	r4,-4(fp)
    4778:	01400034 	movhi	r5,0
    477c:	2957d404 	addi	r5,r5,24400
    4780:	0004c980 	call	4c98 <alt_dev_llist_insert>
}
    4784:	e037883a 	mov	sp,fp
    4788:	dfc00117 	ldw	ra,4(sp)
    478c:	df000017 	ldw	fp,0(sp)
    4790:	dec00204 	addi	sp,sp,8
    4794:	f800283a 	ret

00004798 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4798:	defffa04 	addi	sp,sp,-24
    479c:	dfc00515 	stw	ra,20(sp)
    47a0:	df000415 	stw	fp,16(sp)
    47a4:	df000404 	addi	fp,sp,16
    47a8:	e13ffd15 	stw	r4,-12(fp)
    47ac:	e17ffe15 	stw	r5,-8(fp)
    47b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    47b4:	e0bffd17 	ldw	r2,-12(fp)
    47b8:	10800017 	ldw	r2,0(r2)
    47bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    47c0:	e0bffc17 	ldw	r2,-16(fp)
    47c4:	11000a04 	addi	r4,r2,40
    47c8:	e0bffd17 	ldw	r2,-12(fp)
    47cc:	11c00217 	ldw	r7,8(r2)
    47d0:	e17ffe17 	ldw	r5,-8(fp)
    47d4:	e1bfff17 	ldw	r6,-4(fp)
    47d8:	00048480 	call	4848 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    47dc:	e037883a 	mov	sp,fp
    47e0:	dfc00117 	ldw	ra,4(sp)
    47e4:	df000017 	ldw	fp,0(sp)
    47e8:	dec00204 	addi	sp,sp,8
    47ec:	f800283a 	ret

000047f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    47f0:	defffa04 	addi	sp,sp,-24
    47f4:	dfc00515 	stw	ra,20(sp)
    47f8:	df000415 	stw	fp,16(sp)
    47fc:	df000404 	addi	fp,sp,16
    4800:	e13ffd15 	stw	r4,-12(fp)
    4804:	e17ffe15 	stw	r5,-8(fp)
    4808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    480c:	e0bffd17 	ldw	r2,-12(fp)
    4810:	10800017 	ldw	r2,0(r2)
    4814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4818:	e0bffc17 	ldw	r2,-16(fp)
    481c:	11000a04 	addi	r4,r2,40
    4820:	e0bffd17 	ldw	r2,-12(fp)
    4824:	11c00217 	ldw	r7,8(r2)
    4828:	e17ffe17 	ldw	r5,-8(fp)
    482c:	e1bfff17 	ldw	r6,-4(fp)
    4830:	000494c0 	call	494c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4834:	e037883a 	mov	sp,fp
    4838:	dfc00117 	ldw	ra,4(sp)
    483c:	df000017 	ldw	fp,0(sp)
    4840:	dec00204 	addi	sp,sp,8
    4844:	f800283a 	ret

00004848 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    4848:	defff604 	addi	sp,sp,-40
    484c:	df000915 	stw	fp,36(sp)
    4850:	df000904 	addi	fp,sp,36
    4854:	e13ffb15 	stw	r4,-20(fp)
    4858:	e17ffc15 	stw	r5,-16(fp)
    485c:	e1bffd15 	stw	r6,-12(fp)
    4860:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    4864:	e0bffb17 	ldw	r2,-20(fp)
    4868:	10800017 	ldw	r2,0(r2)
    486c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    4870:	e0bffc17 	ldw	r2,-16(fp)
    4874:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    4878:	e0bffd17 	ldw	r2,-12(fp)
    487c:	1007883a 	mov	r3,r2
    4880:	e0bffc17 	ldw	r2,-16(fp)
    4884:	10c5883a 	add	r2,r2,r3
    4888:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    488c:	00001606 	br	48e8 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4890:	e0bffa17 	ldw	r2,-24(fp)
    4894:	10800037 	ldwio	r2,0(r2)
    4898:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    489c:	e0bff717 	ldw	r2,-36(fp)
    48a0:	10a0000c 	andi	r2,r2,32768
    48a4:	1005003a 	cmpeq	r2,r2,zero
    48a8:	1000081e 	bne	r2,zero,48cc <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    48ac:	e0bff717 	ldw	r2,-36(fp)
    48b0:	1007883a 	mov	r3,r2
    48b4:	e0bff917 	ldw	r2,-28(fp)
    48b8:	10c00005 	stb	r3,0(r2)
    48bc:	e0bff917 	ldw	r2,-28(fp)
    48c0:	10800044 	addi	r2,r2,1
    48c4:	e0bff915 	stw	r2,-28(fp)
    48c8:	00000706 	br	48e8 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    48cc:	e0fff917 	ldw	r3,-28(fp)
    48d0:	e0bffc17 	ldw	r2,-16(fp)
    48d4:	1880071e 	bne	r3,r2,48f4 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	1090000c 	andi	r2,r2,16384
    48e0:	1004c03a 	cmpne	r2,r2,zero
    48e4:	1000031e 	bne	r2,zero,48f4 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    48e8:	e0fff917 	ldw	r3,-28(fp)
    48ec:	e0bff817 	ldw	r2,-32(fp)
    48f0:	18bfe736 	bltu	r3,r2,4890 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    48f4:	e0fff917 	ldw	r3,-28(fp)
    48f8:	e0bffc17 	ldw	r2,-16(fp)
    48fc:	18800526 	beq	r3,r2,4914 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    4900:	e0fff917 	ldw	r3,-28(fp)
    4904:	e0bffc17 	ldw	r2,-16(fp)
    4908:	1887c83a 	sub	r3,r3,r2
    490c:	e0ffff15 	stw	r3,-4(fp)
    4910:	00000906 	br	4938 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    4914:	e0bffe17 	ldw	r2,-8(fp)
    4918:	1090000c 	andi	r2,r2,16384
    491c:	1005003a 	cmpeq	r2,r2,zero
    4920:	1000031e 	bne	r2,zero,4930 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    4924:	00bffd44 	movi	r2,-11
    4928:	e0bfff15 	stw	r2,-4(fp)
    492c:	00000206 	br	4938 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    4930:	00bffec4 	movi	r2,-5
    4934:	e0bfff15 	stw	r2,-4(fp)
    4938:	e0bfff17 	ldw	r2,-4(fp)
}
    493c:	e037883a 	mov	sp,fp
    4940:	df000017 	ldw	fp,0(sp)
    4944:	dec00104 	addi	sp,sp,4
    4948:	f800283a 	ret

0000494c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    494c:	defff904 	addi	sp,sp,-28
    4950:	df000615 	stw	fp,24(sp)
    4954:	df000604 	addi	fp,sp,24
    4958:	e13ffc15 	stw	r4,-16(fp)
    495c:	e17ffd15 	stw	r5,-12(fp)
    4960:	e1bffe15 	stw	r6,-8(fp)
    4964:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    4968:	e0bffc17 	ldw	r2,-16(fp)
    496c:	10800017 	ldw	r2,0(r2)
    4970:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    4974:	e0bffe17 	ldw	r2,-8(fp)
    4978:	1007883a 	mov	r3,r2
    497c:	e0bffd17 	ldw	r2,-12(fp)
    4980:	10c5883a 	add	r2,r2,r3
    4984:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    4988:	00001106 	br	49d0 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    498c:	e0bffb17 	ldw	r2,-20(fp)
    4990:	10800104 	addi	r2,r2,4
    4994:	10800037 	ldwio	r2,0(r2)
    4998:	10bfffec 	andhi	r2,r2,65535
    499c:	1005003a 	cmpeq	r2,r2,zero
    49a0:	10000b1e 	bne	r2,zero,49d0 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    49a4:	e13ffb17 	ldw	r4,-20(fp)
    49a8:	e0bffd17 	ldw	r2,-12(fp)
    49ac:	10800003 	ldbu	r2,0(r2)
    49b0:	10c03fcc 	andi	r3,r2,255
    49b4:	18c0201c 	xori	r3,r3,128
    49b8:	18ffe004 	addi	r3,r3,-128
    49bc:	e0bffd17 	ldw	r2,-12(fp)
    49c0:	10800044 	addi	r2,r2,1
    49c4:	e0bffd15 	stw	r2,-12(fp)
    49c8:	2005883a 	mov	r2,r4
    49cc:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    49d0:	e0fffd17 	ldw	r3,-12(fp)
    49d4:	e0bffa17 	ldw	r2,-24(fp)
    49d8:	18bfec36 	bltu	r3,r2,498c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    49dc:	e0bffe17 	ldw	r2,-8(fp)
}
    49e0:	e037883a 	mov	sp,fp
    49e4:	df000017 	ldw	fp,0(sp)
    49e8:	dec00104 	addi	sp,sp,4
    49ec:	f800283a 	ret

000049f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    49f0:	defffa04 	addi	sp,sp,-24
    49f4:	dfc00515 	stw	ra,20(sp)
    49f8:	df000415 	stw	fp,16(sp)
    49fc:	df000404 	addi	fp,sp,16
    4a00:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4a04:	e0bfff17 	ldw	r2,-4(fp)
    4a08:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4a0c:	e0bfff17 	ldw	r2,-4(fp)
    4a10:	10800104 	addi	r2,r2,4
    4a14:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a18:	0005303a 	rdctl	r2,status
    4a1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a20:	e0fffd17 	ldw	r3,-12(fp)
    4a24:	00bfff84 	movi	r2,-2
    4a28:	1884703a 	and	r2,r3,r2
    4a2c:	1001703a 	wrctl	status,r2
  
  return context;
    4a30:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4a34:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    4a38:	00055d80 	call	55d8 <alt_tick>
    4a3c:	e0bffe17 	ldw	r2,-8(fp)
    4a40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a44:	e0bffc17 	ldw	r2,-16(fp)
    4a48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4a4c:	e037883a 	mov	sp,fp
    4a50:	dfc00117 	ldw	ra,4(sp)
    4a54:	df000017 	ldw	fp,0(sp)
    4a58:	dec00204 	addi	sp,sp,8
    4a5c:	f800283a 	ret

00004a60 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4a60:	defff804 	addi	sp,sp,-32
    4a64:	dfc00715 	stw	ra,28(sp)
    4a68:	df000615 	stw	fp,24(sp)
    4a6c:	df000604 	addi	fp,sp,24
    4a70:	e13ffc15 	stw	r4,-16(fp)
    4a74:	e17ffd15 	stw	r5,-12(fp)
    4a78:	e1bffe15 	stw	r6,-8(fp)
    4a7c:	e1ffff15 	stw	r7,-4(fp)
    4a80:	e0bfff17 	ldw	r2,-4(fp)
    4a84:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4a88:	00800034 	movhi	r2,0
    4a8c:	10989804 	addi	r2,r2,25184
    4a90:	10800017 	ldw	r2,0(r2)
    4a94:	1004c03a 	cmpne	r2,r2,zero
    4a98:	1000041e 	bne	r2,zero,4aac <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    4a9c:	00c00034 	movhi	r3,0
    4aa0:	18d89804 	addi	r3,r3,25184
    4aa4:	e0bffb17 	ldw	r2,-20(fp)
    4aa8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4aac:	e0bffc17 	ldw	r2,-16(fp)
    4ab0:	10800104 	addi	r2,r2,4
    4ab4:	1007883a 	mov	r3,r2
    4ab8:	008001c4 	movi	r2,7
    4abc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4ac0:	d8000015 	stw	zero,0(sp)
    4ac4:	e13ffd17 	ldw	r4,-12(fp)
    4ac8:	e17ffe17 	ldw	r5,-8(fp)
    4acc:	01800034 	movhi	r6,0
    4ad0:	31927c04 	addi	r6,r6,18928
    4ad4:	e1fffc17 	ldw	r7,-16(fp)
    4ad8:	0004dc80 	call	4dc8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4adc:	e037883a 	mov	sp,fp
    4ae0:	dfc00117 	ldw	ra,4(sp)
    4ae4:	df000017 	ldw	fp,0(sp)
    4ae8:	dec00204 	addi	sp,sp,8
    4aec:	f800283a 	ret

00004af0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4af0:	defff804 	addi	sp,sp,-32
    4af4:	dfc00715 	stw	ra,28(sp)
    4af8:	df000615 	stw	fp,24(sp)
    4afc:	df000604 	addi	fp,sp,24
    4b00:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4b04:	e0bffc17 	ldw	r2,-16(fp)
    4b08:	1004803a 	cmplt	r2,r2,zero
    4b0c:	1000091e 	bne	r2,zero,4b34 <close+0x44>
    4b10:	e13ffc17 	ldw	r4,-16(fp)
    4b14:	01400304 	movi	r5,12
    4b18:	0005ba40 	call	5ba4 <__mulsi3>
    4b1c:	1007883a 	mov	r3,r2
    4b20:	00800034 	movhi	r2,0
    4b24:	10977004 	addi	r2,r2,24000
    4b28:	1887883a 	add	r3,r3,r2
    4b2c:	e0ffff15 	stw	r3,-4(fp)
    4b30:	00000106 	br	4b38 <close+0x48>
    4b34:	e03fff15 	stw	zero,-4(fp)
    4b38:	e0bfff17 	ldw	r2,-4(fp)
    4b3c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    4b40:	e0bffb17 	ldw	r2,-20(fp)
    4b44:	1005003a 	cmpeq	r2,r2,zero
    4b48:	10001d1e 	bne	r2,zero,4bc0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4b4c:	e0bffb17 	ldw	r2,-20(fp)
    4b50:	10800017 	ldw	r2,0(r2)
    4b54:	10800417 	ldw	r2,16(r2)
    4b58:	1005003a 	cmpeq	r2,r2,zero
    4b5c:	1000071e 	bne	r2,zero,4b7c <close+0x8c>
    4b60:	e0bffb17 	ldw	r2,-20(fp)
    4b64:	10800017 	ldw	r2,0(r2)
    4b68:	10800417 	ldw	r2,16(r2)
    4b6c:	e13ffb17 	ldw	r4,-20(fp)
    4b70:	103ee83a 	callr	r2
    4b74:	e0bffe15 	stw	r2,-8(fp)
    4b78:	00000106 	br	4b80 <close+0x90>
    4b7c:	e03ffe15 	stw	zero,-8(fp)
    4b80:	e0bffe17 	ldw	r2,-8(fp)
    4b84:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    4b88:	e13ffc17 	ldw	r4,-16(fp)
    4b8c:	00054c80 	call	54c8 <alt_release_fd>
    if (rval < 0)
    4b90:	e0bffa17 	ldw	r2,-24(fp)
    4b94:	1004403a 	cmpge	r2,r2,zero
    4b98:	1000071e 	bne	r2,zero,4bb8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    4b9c:	0004bf00 	call	4bf0 <alt_get_errno>
    4ba0:	e0fffa17 	ldw	r3,-24(fp)
    4ba4:	00c7c83a 	sub	r3,zero,r3
    4ba8:	10c00015 	stw	r3,0(r2)
      return -1;
    4bac:	00bfffc4 	movi	r2,-1
    4bb0:	e0bffd15 	stw	r2,-12(fp)
    4bb4:	00000806 	br	4bd8 <close+0xe8>
    }
    return 0;
    4bb8:	e03ffd15 	stw	zero,-12(fp)
    4bbc:	00000606 	br	4bd8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4bc0:	0004bf00 	call	4bf0 <alt_get_errno>
    4bc4:	1007883a 	mov	r3,r2
    4bc8:	00801444 	movi	r2,81
    4bcc:	18800015 	stw	r2,0(r3)
    return -1;
    4bd0:	00bfffc4 	movi	r2,-1
    4bd4:	e0bffd15 	stw	r2,-12(fp)
    4bd8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    4bdc:	e037883a 	mov	sp,fp
    4be0:	dfc00117 	ldw	ra,4(sp)
    4be4:	df000017 	ldw	fp,0(sp)
    4be8:	dec00204 	addi	sp,sp,8
    4bec:	f800283a 	ret

00004bf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4bf0:	defffd04 	addi	sp,sp,-12
    4bf4:	dfc00215 	stw	ra,8(sp)
    4bf8:	df000115 	stw	fp,4(sp)
    4bfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4c00:	00800034 	movhi	r2,0
    4c04:	1097d704 	addi	r2,r2,24412
    4c08:	10800017 	ldw	r2,0(r2)
    4c0c:	1005003a 	cmpeq	r2,r2,zero
    4c10:	1000061e 	bne	r2,zero,4c2c <alt_get_errno+0x3c>
    4c14:	00800034 	movhi	r2,0
    4c18:	1097d704 	addi	r2,r2,24412
    4c1c:	10800017 	ldw	r2,0(r2)
    4c20:	103ee83a 	callr	r2
    4c24:	e0bfff15 	stw	r2,-4(fp)
    4c28:	00000306 	br	4c38 <alt_get_errno+0x48>
    4c2c:	00800034 	movhi	r2,0
    4c30:	10989304 	addi	r2,r2,25164
    4c34:	e0bfff15 	stw	r2,-4(fp)
    4c38:	e0bfff17 	ldw	r2,-4(fp)
}
    4c3c:	e037883a 	mov	sp,fp
    4c40:	dfc00117 	ldw	ra,4(sp)
    4c44:	df000017 	ldw	fp,0(sp)
    4c48:	dec00204 	addi	sp,sp,8
    4c4c:	f800283a 	ret

00004c50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4c50:	deffff04 	addi	sp,sp,-4
    4c54:	df000015 	stw	fp,0(sp)
    4c58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4c5c:	e037883a 	mov	sp,fp
    4c60:	df000017 	ldw	fp,0(sp)
    4c64:	dec00104 	addi	sp,sp,4
    4c68:	f800283a 	ret

00004c6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4c6c:	defffc04 	addi	sp,sp,-16
    4c70:	df000315 	stw	fp,12(sp)
    4c74:	df000304 	addi	fp,sp,12
    4c78:	e13ffd15 	stw	r4,-12(fp)
    4c7c:	e17ffe15 	stw	r5,-8(fp)
    4c80:	e1bfff15 	stw	r6,-4(fp)
  return len;
    4c84:	e0bfff17 	ldw	r2,-4(fp)
}
    4c88:	e037883a 	mov	sp,fp
    4c8c:	df000017 	ldw	fp,0(sp)
    4c90:	dec00104 	addi	sp,sp,4
    4c94:	f800283a 	ret

00004c98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4c98:	defff904 	addi	sp,sp,-28
    4c9c:	dfc00615 	stw	ra,24(sp)
    4ca0:	df000515 	stw	fp,20(sp)
    4ca4:	df000504 	addi	fp,sp,20
    4ca8:	e13ffd15 	stw	r4,-12(fp)
    4cac:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4cb0:	e0bffd17 	ldw	r2,-12(fp)
    4cb4:	1005003a 	cmpeq	r2,r2,zero
    4cb8:	1000041e 	bne	r2,zero,4ccc <alt_dev_llist_insert+0x34>
    4cbc:	e0bffd17 	ldw	r2,-12(fp)
    4cc0:	10800217 	ldw	r2,8(r2)
    4cc4:	1004c03a 	cmpne	r2,r2,zero
    4cc8:	1000071e 	bne	r2,zero,4ce8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    4ccc:	0004d4c0 	call	4d4c <alt_get_errno>
    4cd0:	1007883a 	mov	r3,r2
    4cd4:	00800584 	movi	r2,22
    4cd8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4cdc:	00bffa84 	movi	r2,-22
    4ce0:	e0bfff15 	stw	r2,-4(fp)
    4ce4:	00001306 	br	4d34 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4ce8:	e0fffd17 	ldw	r3,-12(fp)
    4cec:	e0bffe17 	ldw	r2,-8(fp)
    4cf0:	e0bffb15 	stw	r2,-20(fp)
    4cf4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4cf8:	e0fffc17 	ldw	r3,-16(fp)
    4cfc:	e0bffb17 	ldw	r2,-20(fp)
    4d00:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    4d04:	e0bffb17 	ldw	r2,-20(fp)
    4d08:	10c00017 	ldw	r3,0(r2)
    4d0c:	e0bffc17 	ldw	r2,-16(fp)
    4d10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4d14:	e0bffb17 	ldw	r2,-20(fp)
    4d18:	10c00017 	ldw	r3,0(r2)
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    4d24:	e0fffb17 	ldw	r3,-20(fp)
    4d28:	e0bffc17 	ldw	r2,-16(fp)
    4d2c:	18800015 	stw	r2,0(r3)

  return 0;  
    4d30:	e03fff15 	stw	zero,-4(fp)
    4d34:	e0bfff17 	ldw	r2,-4(fp)
}
    4d38:	e037883a 	mov	sp,fp
    4d3c:	dfc00117 	ldw	ra,4(sp)
    4d40:	df000017 	ldw	fp,0(sp)
    4d44:	dec00204 	addi	sp,sp,8
    4d48:	f800283a 	ret

00004d4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4d4c:	defffd04 	addi	sp,sp,-12
    4d50:	dfc00215 	stw	ra,8(sp)
    4d54:	df000115 	stw	fp,4(sp)
    4d58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4d5c:	00800034 	movhi	r2,0
    4d60:	1097d704 	addi	r2,r2,24412
    4d64:	10800017 	ldw	r2,0(r2)
    4d68:	1005003a 	cmpeq	r2,r2,zero
    4d6c:	1000061e 	bne	r2,zero,4d88 <alt_get_errno+0x3c>
    4d70:	00800034 	movhi	r2,0
    4d74:	1097d704 	addi	r2,r2,24412
    4d78:	10800017 	ldw	r2,0(r2)
    4d7c:	103ee83a 	callr	r2
    4d80:	e0bfff15 	stw	r2,-4(fp)
    4d84:	00000306 	br	4d94 <alt_get_errno+0x48>
    4d88:	00800034 	movhi	r2,0
    4d8c:	10989304 	addi	r2,r2,25164
    4d90:	e0bfff15 	stw	r2,-4(fp)
    4d94:	e0bfff17 	ldw	r2,-4(fp)
}
    4d98:	e037883a 	mov	sp,fp
    4d9c:	dfc00117 	ldw	ra,4(sp)
    4da0:	df000017 	ldw	fp,0(sp)
    4da4:	dec00204 	addi	sp,sp,8
    4da8:	f800283a 	ret

00004dac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4dac:	deffff04 	addi	sp,sp,-4
    4db0:	df000015 	stw	fp,0(sp)
    4db4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4db8:	e037883a 	mov	sp,fp
    4dbc:	df000017 	ldw	fp,0(sp)
    4dc0:	dec00104 	addi	sp,sp,4
    4dc4:	f800283a 	ret

00004dc8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4dc8:	defff904 	addi	sp,sp,-28
    4dcc:	dfc00615 	stw	ra,24(sp)
    4dd0:	df000515 	stw	fp,20(sp)
    4dd4:	df000504 	addi	fp,sp,20
    4dd8:	e13ffc15 	stw	r4,-16(fp)
    4ddc:	e17ffd15 	stw	r5,-12(fp)
    4de0:	e1bffe15 	stw	r6,-8(fp)
    4de4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4de8:	e0800217 	ldw	r2,8(fp)
    4dec:	d8800015 	stw	r2,0(sp)
    4df0:	e13ffc17 	ldw	r4,-16(fp)
    4df4:	e17ffd17 	ldw	r5,-12(fp)
    4df8:	e1bffe17 	ldw	r6,-8(fp)
    4dfc:	e1ffff17 	ldw	r7,-4(fp)
    4e00:	0004f9c0 	call	4f9c <alt_iic_isr_register>
}  
    4e04:	e037883a 	mov	sp,fp
    4e08:	dfc00117 	ldw	ra,4(sp)
    4e0c:	df000017 	ldw	fp,0(sp)
    4e10:	dec00204 	addi	sp,sp,8
    4e14:	f800283a 	ret

00004e18 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4e18:	defff904 	addi	sp,sp,-28
    4e1c:	df000615 	stw	fp,24(sp)
    4e20:	df000604 	addi	fp,sp,24
    4e24:	e13ffe15 	stw	r4,-8(fp)
    4e28:	e17fff15 	stw	r5,-4(fp)
    4e2c:	e0bfff17 	ldw	r2,-4(fp)
    4e30:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4e34:	0005303a 	rdctl	r2,status
    4e38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e3c:	e0fffb17 	ldw	r3,-20(fp)
    4e40:	00bfff84 	movi	r2,-2
    4e44:	1884703a 	and	r2,r3,r2
    4e48:	1001703a 	wrctl	status,r2
  
  return context;
    4e4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4e50:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    4e54:	e0fffc17 	ldw	r3,-16(fp)
    4e58:	00800044 	movi	r2,1
    4e5c:	10c4983a 	sll	r2,r2,r3
    4e60:	1007883a 	mov	r3,r2
    4e64:	00800034 	movhi	r2,0
    4e68:	10989704 	addi	r2,r2,25180
    4e6c:	10800017 	ldw	r2,0(r2)
    4e70:	1886b03a 	or	r3,r3,r2
    4e74:	00800034 	movhi	r2,0
    4e78:	10989704 	addi	r2,r2,25180
    4e7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4e80:	00800034 	movhi	r2,0
    4e84:	10989704 	addi	r2,r2,25180
    4e88:	10800017 	ldw	r2,0(r2)
    4e8c:	100170fa 	wrctl	ienable,r2
    4e90:	e0bffd17 	ldw	r2,-12(fp)
    4e94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4e98:	e0bffa17 	ldw	r2,-24(fp)
    4e9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4ea0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    4ea4:	e037883a 	mov	sp,fp
    4ea8:	df000017 	ldw	fp,0(sp)
    4eac:	dec00104 	addi	sp,sp,4
    4eb0:	f800283a 	ret

00004eb4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    4eb4:	defff904 	addi	sp,sp,-28
    4eb8:	df000615 	stw	fp,24(sp)
    4ebc:	df000604 	addi	fp,sp,24
    4ec0:	e13ffe15 	stw	r4,-8(fp)
    4ec4:	e17fff15 	stw	r5,-4(fp)
    4ec8:	e0bfff17 	ldw	r2,-4(fp)
    4ecc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ed0:	0005303a 	rdctl	r2,status
    4ed4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ed8:	e0fffb17 	ldw	r3,-20(fp)
    4edc:	00bfff84 	movi	r2,-2
    4ee0:	1884703a 	and	r2,r3,r2
    4ee4:	1001703a 	wrctl	status,r2
  
  return context;
    4ee8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4eec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    4ef0:	e0fffc17 	ldw	r3,-16(fp)
    4ef4:	00800044 	movi	r2,1
    4ef8:	10c4983a 	sll	r2,r2,r3
    4efc:	0084303a 	nor	r2,zero,r2
    4f00:	1007883a 	mov	r3,r2
    4f04:	00800034 	movhi	r2,0
    4f08:	10989704 	addi	r2,r2,25180
    4f0c:	10800017 	ldw	r2,0(r2)
    4f10:	1886703a 	and	r3,r3,r2
    4f14:	00800034 	movhi	r2,0
    4f18:	10989704 	addi	r2,r2,25180
    4f1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4f20:	00800034 	movhi	r2,0
    4f24:	10989704 	addi	r2,r2,25180
    4f28:	10800017 	ldw	r2,0(r2)
    4f2c:	100170fa 	wrctl	ienable,r2
    4f30:	e0bffd17 	ldw	r2,-12(fp)
    4f34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f38:	e0bffa17 	ldw	r2,-24(fp)
    4f3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4f40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    4f44:	e037883a 	mov	sp,fp
    4f48:	df000017 	ldw	fp,0(sp)
    4f4c:	dec00104 	addi	sp,sp,4
    4f50:	f800283a 	ret

00004f54 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4f54:	defffc04 	addi	sp,sp,-16
    4f58:	df000315 	stw	fp,12(sp)
    4f5c:	df000304 	addi	fp,sp,12
    4f60:	e13ffe15 	stw	r4,-8(fp)
    4f64:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4f68:	000530fa 	rdctl	r2,ienable
    4f6c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4f70:	e0ffff17 	ldw	r3,-4(fp)
    4f74:	00800044 	movi	r2,1
    4f78:	10c4983a 	sll	r2,r2,r3
    4f7c:	1007883a 	mov	r3,r2
    4f80:	e0bffd17 	ldw	r2,-12(fp)
    4f84:	1884703a 	and	r2,r3,r2
    4f88:	1004c03a 	cmpne	r2,r2,zero
}
    4f8c:	e037883a 	mov	sp,fp
    4f90:	df000017 	ldw	fp,0(sp)
    4f94:	dec00104 	addi	sp,sp,4
    4f98:	f800283a 	ret

00004f9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4f9c:	defff404 	addi	sp,sp,-48
    4fa0:	dfc00b15 	stw	ra,44(sp)
    4fa4:	df000a15 	stw	fp,40(sp)
    4fa8:	df000a04 	addi	fp,sp,40
    4fac:	e13ffb15 	stw	r4,-20(fp)
    4fb0:	e17ffc15 	stw	r5,-16(fp)
    4fb4:	e1bffd15 	stw	r6,-12(fp)
    4fb8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    4fbc:	00bffa84 	movi	r2,-22
    4fc0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4fc4:	e0bffc17 	ldw	r2,-16(fp)
    4fc8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4fcc:	e0bff917 	ldw	r2,-28(fp)
    4fd0:	10800808 	cmpgei	r2,r2,32
    4fd4:	1000291e 	bne	r2,zero,507c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4fd8:	0005303a 	rdctl	r2,status
    4fdc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4fe0:	e0fff717 	ldw	r3,-36(fp)
    4fe4:	00bfff84 	movi	r2,-2
    4fe8:	1884703a 	and	r2,r3,r2
    4fec:	1001703a 	wrctl	status,r2
  
  return context;
    4ff0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4ff4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    4ff8:	e0bff917 	ldw	r2,-28(fp)
    4ffc:	00c00034 	movhi	r3,0
    5000:	18d89a04 	addi	r3,r3,25192
    5004:	100490fa 	slli	r2,r2,3
    5008:	10c7883a 	add	r3,r2,r3
    500c:	e0bffd17 	ldw	r2,-12(fp)
    5010:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    5014:	e0bff917 	ldw	r2,-28(fp)
    5018:	00c00034 	movhi	r3,0
    501c:	18d89a04 	addi	r3,r3,25192
    5020:	100490fa 	slli	r2,r2,3
    5024:	10c5883a 	add	r2,r2,r3
    5028:	10c00104 	addi	r3,r2,4
    502c:	e0bffe17 	ldw	r2,-8(fp)
    5030:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5034:	e0bffd17 	ldw	r2,-12(fp)
    5038:	1005003a 	cmpeq	r2,r2,zero
    503c:	1000051e 	bne	r2,zero,5054 <alt_iic_isr_register+0xb8>
    5040:	e17ff917 	ldw	r5,-28(fp)
    5044:	e13ffb17 	ldw	r4,-20(fp)
    5048:	0004e180 	call	4e18 <alt_ic_irq_enable>
    504c:	e0bfff15 	stw	r2,-4(fp)
    5050:	00000406 	br	5064 <alt_iic_isr_register+0xc8>
    5054:	e17ff917 	ldw	r5,-28(fp)
    5058:	e13ffb17 	ldw	r4,-20(fp)
    505c:	0004eb40 	call	4eb4 <alt_ic_irq_disable>
    5060:	e0bfff15 	stw	r2,-4(fp)
    5064:	e0bfff17 	ldw	r2,-4(fp)
    5068:	e0bffa15 	stw	r2,-24(fp)
    506c:	e0bff817 	ldw	r2,-32(fp)
    5070:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5074:	e0bff617 	ldw	r2,-40(fp)
    5078:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    507c:	e0bffa17 	ldw	r2,-24(fp)
}
    5080:	e037883a 	mov	sp,fp
    5084:	dfc00117 	ldw	ra,4(sp)
    5088:	df000017 	ldw	fp,0(sp)
    508c:	dec00204 	addi	sp,sp,8
    5090:	f800283a 	ret

00005094 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5094:	defff804 	addi	sp,sp,-32
    5098:	dfc00715 	stw	ra,28(sp)
    509c:	df000615 	stw	fp,24(sp)
    50a0:	dc000515 	stw	r16,20(sp)
    50a4:	df000504 	addi	fp,sp,20
    50a8:	e13ffc15 	stw	r4,-16(fp)
    50ac:	e17ffd15 	stw	r5,-12(fp)
    50b0:	e1bffe15 	stw	r6,-8(fp)
    50b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    50b8:	e13ffd17 	ldw	r4,-12(fp)
    50bc:	e17ffe17 	ldw	r5,-8(fp)
    50c0:	e1bfff17 	ldw	r6,-4(fp)
    50c4:	00052dc0 	call	52dc <open>
    50c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    50cc:	e0bffb17 	ldw	r2,-20(fp)
    50d0:	1004803a 	cmplt	r2,r2,zero
    50d4:	10001f1e 	bne	r2,zero,5154 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    50d8:	e13ffb17 	ldw	r4,-20(fp)
    50dc:	04000034 	movhi	r16,0
    50e0:	84177004 	addi	r16,r16,24000
    50e4:	01400304 	movi	r5,12
    50e8:	0005ba40 	call	5ba4 <__mulsi3>
    50ec:	1405883a 	add	r2,r2,r16
    50f0:	10c00017 	ldw	r3,0(r2)
    50f4:	e0bffc17 	ldw	r2,-16(fp)
    50f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    50fc:	e13ffb17 	ldw	r4,-20(fp)
    5100:	04000034 	movhi	r16,0
    5104:	84177004 	addi	r16,r16,24000
    5108:	01400304 	movi	r5,12
    510c:	0005ba40 	call	5ba4 <__mulsi3>
    5110:	1405883a 	add	r2,r2,r16
    5114:	10800104 	addi	r2,r2,4
    5118:	10c00017 	ldw	r3,0(r2)
    511c:	e0bffc17 	ldw	r2,-16(fp)
    5120:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5124:	e13ffb17 	ldw	r4,-20(fp)
    5128:	04000034 	movhi	r16,0
    512c:	84177004 	addi	r16,r16,24000
    5130:	01400304 	movi	r5,12
    5134:	0005ba40 	call	5ba4 <__mulsi3>
    5138:	1405883a 	add	r2,r2,r16
    513c:	10800204 	addi	r2,r2,8
    5140:	10c00017 	ldw	r3,0(r2)
    5144:	e0bffc17 	ldw	r2,-16(fp)
    5148:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    514c:	e13ffb17 	ldw	r4,-20(fp)
    5150:	00054c80 	call	54c8 <alt_release_fd>
  }
} 
    5154:	e037883a 	mov	sp,fp
    5158:	dfc00217 	ldw	ra,8(sp)
    515c:	df000117 	ldw	fp,4(sp)
    5160:	dc000017 	ldw	r16,0(sp)
    5164:	dec00304 	addi	sp,sp,12
    5168:	f800283a 	ret

0000516c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    516c:	defffb04 	addi	sp,sp,-20
    5170:	dfc00415 	stw	ra,16(sp)
    5174:	df000315 	stw	fp,12(sp)
    5178:	df000304 	addi	fp,sp,12
    517c:	e13ffd15 	stw	r4,-12(fp)
    5180:	e17ffe15 	stw	r5,-8(fp)
    5184:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5188:	01000034 	movhi	r4,0
    518c:	21177304 	addi	r4,r4,24012
    5190:	e17ffd17 	ldw	r5,-12(fp)
    5194:	01800044 	movi	r6,1
    5198:	01c07fc4 	movi	r7,511
    519c:	00050940 	call	5094 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    51a0:	01000034 	movhi	r4,0
    51a4:	21177004 	addi	r4,r4,24000
    51a8:	e17ffe17 	ldw	r5,-8(fp)
    51ac:	000d883a 	mov	r6,zero
    51b0:	01c07fc4 	movi	r7,511
    51b4:	00050940 	call	5094 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    51b8:	01000034 	movhi	r4,0
    51bc:	21177604 	addi	r4,r4,24024
    51c0:	e17fff17 	ldw	r5,-4(fp)
    51c4:	01800044 	movi	r6,1
    51c8:	01c07fc4 	movi	r7,511
    51cc:	00050940 	call	5094 <alt_open_fd>
}  
    51d0:	e037883a 	mov	sp,fp
    51d4:	dfc00117 	ldw	ra,4(sp)
    51d8:	df000017 	ldw	fp,0(sp)
    51dc:	dec00204 	addi	sp,sp,8
    51e0:	f800283a 	ret

000051e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    51e4:	defffa04 	addi	sp,sp,-24
    51e8:	dfc00515 	stw	ra,20(sp)
    51ec:	df000415 	stw	fp,16(sp)
    51f0:	dc000315 	stw	r16,12(sp)
    51f4:	df000304 	addi	fp,sp,12
    51f8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    51fc:	e0bffe17 	ldw	r2,-8(fp)
    5200:	10800217 	ldw	r2,8(r2)
    5204:	10d00034 	orhi	r3,r2,16384
    5208:	e0bffe17 	ldw	r2,-8(fp)
    520c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5210:	e03ffd15 	stw	zero,-12(fp)
    5214:	00002306 	br	52a4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5218:	e13ffd17 	ldw	r4,-12(fp)
    521c:	04000034 	movhi	r16,0
    5220:	84177004 	addi	r16,r16,24000
    5224:	01400304 	movi	r5,12
    5228:	0005ba40 	call	5ba4 <__mulsi3>
    522c:	1405883a 	add	r2,r2,r16
    5230:	10c00017 	ldw	r3,0(r2)
    5234:	e0bffe17 	ldw	r2,-8(fp)
    5238:	10800017 	ldw	r2,0(r2)
    523c:	1880161e 	bne	r3,r2,5298 <alt_file_locked+0xb4>
    5240:	e13ffd17 	ldw	r4,-12(fp)
    5244:	04000034 	movhi	r16,0
    5248:	84177004 	addi	r16,r16,24000
    524c:	01400304 	movi	r5,12
    5250:	0005ba40 	call	5ba4 <__mulsi3>
    5254:	1405883a 	add	r2,r2,r16
    5258:	10800204 	addi	r2,r2,8
    525c:	10800017 	ldw	r2,0(r2)
    5260:	1004403a 	cmpge	r2,r2,zero
    5264:	10000c1e 	bne	r2,zero,5298 <alt_file_locked+0xb4>
    5268:	e13ffd17 	ldw	r4,-12(fp)
    526c:	01400304 	movi	r5,12
    5270:	0005ba40 	call	5ba4 <__mulsi3>
    5274:	1007883a 	mov	r3,r2
    5278:	00800034 	movhi	r2,0
    527c:	10977004 	addi	r2,r2,24000
    5280:	1887883a 	add	r3,r3,r2
    5284:	e0bffe17 	ldw	r2,-8(fp)
    5288:	18800326 	beq	r3,r2,5298 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    528c:	00bffcc4 	movi	r2,-13
    5290:	e0bfff15 	stw	r2,-4(fp)
    5294:	00000a06 	br	52c0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5298:	e0bffd17 	ldw	r2,-12(fp)
    529c:	10800044 	addi	r2,r2,1
    52a0:	e0bffd15 	stw	r2,-12(fp)
    52a4:	00800034 	movhi	r2,0
    52a8:	1097d604 	addi	r2,r2,24408
    52ac:	10800017 	ldw	r2,0(r2)
    52b0:	1007883a 	mov	r3,r2
    52b4:	e0bffd17 	ldw	r2,-12(fp)
    52b8:	18bfd72e 	bgeu	r3,r2,5218 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    52bc:	e03fff15 	stw	zero,-4(fp)
    52c0:	e0bfff17 	ldw	r2,-4(fp)
}
    52c4:	e037883a 	mov	sp,fp
    52c8:	dfc00217 	ldw	ra,8(sp)
    52cc:	df000117 	ldw	fp,4(sp)
    52d0:	dc000017 	ldw	r16,0(sp)
    52d4:	dec00304 	addi	sp,sp,12
    52d8:	f800283a 	ret

000052dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    52dc:	defff404 	addi	sp,sp,-48
    52e0:	dfc00b15 	stw	ra,44(sp)
    52e4:	df000a15 	stw	fp,40(sp)
    52e8:	df000a04 	addi	fp,sp,40
    52ec:	e13ffb15 	stw	r4,-20(fp)
    52f0:	e17ffc15 	stw	r5,-16(fp)
    52f4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    52f8:	00bfffc4 	movi	r2,-1
    52fc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    5300:	00bffb44 	movi	r2,-19
    5304:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    5308:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    530c:	e13ffb17 	ldw	r4,-20(fp)
    5310:	01400034 	movhi	r5,0
    5314:	2957d404 	addi	r5,r5,24400
    5318:	00057040 	call	5704 <alt_find_dev>
    531c:	e0bffa15 	stw	r2,-24(fp)
    5320:	e0bffa17 	ldw	r2,-24(fp)
    5324:	1004c03a 	cmpne	r2,r2,zero
    5328:	1000051e 	bne	r2,zero,5340 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    532c:	e13ffb17 	ldw	r4,-20(fp)
    5330:	00057980 	call	5798 <alt_find_file>
    5334:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    5338:	00800044 	movi	r2,1
    533c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5340:	e0bffa17 	ldw	r2,-24(fp)
    5344:	1005003a 	cmpeq	r2,r2,zero
    5348:	1000311e 	bne	r2,zero,5410 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    534c:	e13ffa17 	ldw	r4,-24(fp)
    5350:	00058b80 	call	58b8 <alt_get_fd>
    5354:	e0bff815 	stw	r2,-32(fp)
    5358:	e0bff817 	ldw	r2,-32(fp)
    535c:	1004403a 	cmpge	r2,r2,zero
    5360:	1000031e 	bne	r2,zero,5370 <open+0x94>
    {
      status = index;
    5364:	e0bff817 	ldw	r2,-32(fp)
    5368:	e0bff715 	stw	r2,-36(fp)
    536c:	00002a06 	br	5418 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    5370:	e13ff817 	ldw	r4,-32(fp)
    5374:	01400304 	movi	r5,12
    5378:	0005ba40 	call	5ba4 <__mulsi3>
    537c:	1007883a 	mov	r3,r2
    5380:	00800034 	movhi	r2,0
    5384:	10977004 	addi	r2,r2,24000
    5388:	1885883a 	add	r2,r3,r2
    538c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5390:	e0fffc17 	ldw	r3,-16(fp)
    5394:	00900034 	movhi	r2,16384
    5398:	10bfffc4 	addi	r2,r2,-1
    539c:	1886703a 	and	r3,r3,r2
    53a0:	e0bff917 	ldw	r2,-28(fp)
    53a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    53a8:	e0bff617 	ldw	r2,-40(fp)
    53ac:	1004c03a 	cmpne	r2,r2,zero
    53b0:	1000061e 	bne	r2,zero,53cc <open+0xf0>
    53b4:	e13ff917 	ldw	r4,-28(fp)
    53b8:	00051e40 	call	51e4 <alt_file_locked>
    53bc:	e0bff715 	stw	r2,-36(fp)
    53c0:	e0bff717 	ldw	r2,-36(fp)
    53c4:	1004803a 	cmplt	r2,r2,zero
    53c8:	1000131e 	bne	r2,zero,5418 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    53cc:	e0bffa17 	ldw	r2,-24(fp)
    53d0:	10800317 	ldw	r2,12(r2)
    53d4:	1005003a 	cmpeq	r2,r2,zero
    53d8:	1000091e 	bne	r2,zero,5400 <open+0x124>
    53dc:	e0bffa17 	ldw	r2,-24(fp)
    53e0:	10800317 	ldw	r2,12(r2)
    53e4:	e13ff917 	ldw	r4,-28(fp)
    53e8:	e17ffb17 	ldw	r5,-20(fp)
    53ec:	e1bffc17 	ldw	r6,-16(fp)
    53f0:	e1fffd17 	ldw	r7,-12(fp)
    53f4:	103ee83a 	callr	r2
    53f8:	e0bfff15 	stw	r2,-4(fp)
    53fc:	00000106 	br	5404 <open+0x128>
    5400:	e03fff15 	stw	zero,-4(fp)
    5404:	e0bfff17 	ldw	r2,-4(fp)
    5408:	e0bff715 	stw	r2,-36(fp)
    540c:	00000206 	br	5418 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5410:	00bffb44 	movi	r2,-19
    5414:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5418:	e0bff717 	ldw	r2,-36(fp)
    541c:	1004403a 	cmpge	r2,r2,zero
    5420:	1000091e 	bne	r2,zero,5448 <open+0x16c>
  {
    alt_release_fd (index);  
    5424:	e13ff817 	ldw	r4,-32(fp)
    5428:	00054c80 	call	54c8 <alt_release_fd>
    ALT_ERRNO = -status;
    542c:	00054680 	call	5468 <alt_get_errno>
    5430:	e0fff717 	ldw	r3,-36(fp)
    5434:	00c7c83a 	sub	r3,zero,r3
    5438:	10c00015 	stw	r3,0(r2)
    return -1;
    543c:	00bfffc4 	movi	r2,-1
    5440:	e0bffe15 	stw	r2,-8(fp)
    5444:	00000206 	br	5450 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    5448:	e0bff817 	ldw	r2,-32(fp)
    544c:	e0bffe15 	stw	r2,-8(fp)
    5450:	e0bffe17 	ldw	r2,-8(fp)
}
    5454:	e037883a 	mov	sp,fp
    5458:	dfc00117 	ldw	ra,4(sp)
    545c:	df000017 	ldw	fp,0(sp)
    5460:	dec00204 	addi	sp,sp,8
    5464:	f800283a 	ret

00005468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5468:	defffd04 	addi	sp,sp,-12
    546c:	dfc00215 	stw	ra,8(sp)
    5470:	df000115 	stw	fp,4(sp)
    5474:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5478:	00800034 	movhi	r2,0
    547c:	1097d704 	addi	r2,r2,24412
    5480:	10800017 	ldw	r2,0(r2)
    5484:	1005003a 	cmpeq	r2,r2,zero
    5488:	1000061e 	bne	r2,zero,54a4 <alt_get_errno+0x3c>
    548c:	00800034 	movhi	r2,0
    5490:	1097d704 	addi	r2,r2,24412
    5494:	10800017 	ldw	r2,0(r2)
    5498:	103ee83a 	callr	r2
    549c:	e0bfff15 	stw	r2,-4(fp)
    54a0:	00000306 	br	54b0 <alt_get_errno+0x48>
    54a4:	00800034 	movhi	r2,0
    54a8:	10989304 	addi	r2,r2,25164
    54ac:	e0bfff15 	stw	r2,-4(fp)
    54b0:	e0bfff17 	ldw	r2,-4(fp)
}
    54b4:	e037883a 	mov	sp,fp
    54b8:	dfc00117 	ldw	ra,4(sp)
    54bc:	df000017 	ldw	fp,0(sp)
    54c0:	dec00204 	addi	sp,sp,8
    54c4:	f800283a 	ret

000054c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    54c8:	defffc04 	addi	sp,sp,-16
    54cc:	dfc00315 	stw	ra,12(sp)
    54d0:	df000215 	stw	fp,8(sp)
    54d4:	dc000115 	stw	r16,4(sp)
    54d8:	df000104 	addi	fp,sp,4
    54dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    54e0:	e0bfff17 	ldw	r2,-4(fp)
    54e4:	108000d0 	cmplti	r2,r2,3
    54e8:	10000f1e 	bne	r2,zero,5528 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    54ec:	e13fff17 	ldw	r4,-4(fp)
    54f0:	04000034 	movhi	r16,0
    54f4:	84177004 	addi	r16,r16,24000
    54f8:	01400304 	movi	r5,12
    54fc:	0005ba40 	call	5ba4 <__mulsi3>
    5500:	1405883a 	add	r2,r2,r16
    5504:	10800204 	addi	r2,r2,8
    5508:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    550c:	e13fff17 	ldw	r4,-4(fp)
    5510:	04000034 	movhi	r16,0
    5514:	84177004 	addi	r16,r16,24000
    5518:	01400304 	movi	r5,12
    551c:	0005ba40 	call	5ba4 <__mulsi3>
    5520:	1405883a 	add	r2,r2,r16
    5524:	10000015 	stw	zero,0(r2)
  }
}
    5528:	e037883a 	mov	sp,fp
    552c:	dfc00217 	ldw	ra,8(sp)
    5530:	df000117 	ldw	fp,4(sp)
    5534:	dc000017 	ldw	r16,0(sp)
    5538:	dec00304 	addi	sp,sp,12
    553c:	f800283a 	ret

00005540 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5540:	defffa04 	addi	sp,sp,-24
    5544:	df000515 	stw	fp,20(sp)
    5548:	df000504 	addi	fp,sp,20
    554c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5550:	0005303a 	rdctl	r2,status
    5554:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5558:	e0fffd17 	ldw	r3,-12(fp)
    555c:	00bfff84 	movi	r2,-2
    5560:	1884703a 	and	r2,r3,r2
    5564:	1001703a 	wrctl	status,r2
  
  return context;
    5568:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    556c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    5570:	e0bfff17 	ldw	r2,-4(fp)
    5574:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5578:	e0bffc17 	ldw	r2,-16(fp)
    557c:	10c00017 	ldw	r3,0(r2)
    5580:	e0bffc17 	ldw	r2,-16(fp)
    5584:	10800117 	ldw	r2,4(r2)
    5588:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    558c:	e0bffc17 	ldw	r2,-16(fp)
    5590:	10c00117 	ldw	r3,4(r2)
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	10800017 	ldw	r2,0(r2)
    559c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    55a0:	e0fffc17 	ldw	r3,-16(fp)
    55a4:	e0bffc17 	ldw	r2,-16(fp)
    55a8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    55ac:	e0fffc17 	ldw	r3,-16(fp)
    55b0:	e0bffc17 	ldw	r2,-16(fp)
    55b4:	18800015 	stw	r2,0(r3)
    55b8:	e0bffe17 	ldw	r2,-8(fp)
    55bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55c0:	e0bffb17 	ldw	r2,-20(fp)
    55c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    55c8:	e037883a 	mov	sp,fp
    55cc:	df000017 	ldw	fp,0(sp)
    55d0:	dec00104 	addi	sp,sp,4
    55d4:	f800283a 	ret

000055d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    55d8:	defffb04 	addi	sp,sp,-20
    55dc:	dfc00415 	stw	ra,16(sp)
    55e0:	df000315 	stw	fp,12(sp)
    55e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    55e8:	d0a00917 	ldw	r2,-32732(gp)
    55ec:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    55f0:	d0a0c917 	ldw	r2,-31964(gp)
    55f4:	10800044 	addi	r2,r2,1
    55f8:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    55fc:	00003106 	br	56c4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    5600:	e0bffe17 	ldw	r2,-8(fp)
    5604:	10800017 	ldw	r2,0(r2)
    5608:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    560c:	e0bffe17 	ldw	r2,-8(fp)
    5610:	10800403 	ldbu	r2,16(r2)
    5614:	10803fcc 	andi	r2,r2,255
    5618:	1005003a 	cmpeq	r2,r2,zero
    561c:	1000051e 	bne	r2,zero,5634 <alt_tick+0x5c>
    5620:	d0a0c917 	ldw	r2,-31964(gp)
    5624:	1004c03a 	cmpne	r2,r2,zero
    5628:	1000021e 	bne	r2,zero,5634 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    562c:	e0bffe17 	ldw	r2,-8(fp)
    5630:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5634:	e0bffe17 	ldw	r2,-8(fp)
    5638:	10c00217 	ldw	r3,8(r2)
    563c:	d0a0c917 	ldw	r2,-31964(gp)
    5640:	10c01e36 	bltu	r2,r3,56bc <alt_tick+0xe4>
    5644:	e0bffe17 	ldw	r2,-8(fp)
    5648:	10800403 	ldbu	r2,16(r2)
    564c:	10803fcc 	andi	r2,r2,255
    5650:	1004c03a 	cmpne	r2,r2,zero
    5654:	1000191e 	bne	r2,zero,56bc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    5658:	e0bffe17 	ldw	r2,-8(fp)
    565c:	10c00317 	ldw	r3,12(r2)
    5660:	e0bffe17 	ldw	r2,-8(fp)
    5664:	11000517 	ldw	r4,20(r2)
    5668:	183ee83a 	callr	r3
    566c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5670:	e0bffd17 	ldw	r2,-12(fp)
    5674:	1004c03a 	cmpne	r2,r2,zero
    5678:	1000031e 	bne	r2,zero,5688 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    567c:	e13ffe17 	ldw	r4,-8(fp)
    5680:	00055400 	call	5540 <alt_alarm_stop>
    5684:	00000d06 	br	56bc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    5688:	e0bffe17 	ldw	r2,-8(fp)
    568c:	10c00217 	ldw	r3,8(r2)
    5690:	e0bffd17 	ldw	r2,-12(fp)
    5694:	1887883a 	add	r3,r3,r2
    5698:	e0bffe17 	ldw	r2,-8(fp)
    569c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    56a0:	e0bffe17 	ldw	r2,-8(fp)
    56a4:	10c00217 	ldw	r3,8(r2)
    56a8:	d0a0c917 	ldw	r2,-31964(gp)
    56ac:	1880032e 	bgeu	r3,r2,56bc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    56b0:	e0fffe17 	ldw	r3,-8(fp)
    56b4:	00800044 	movi	r2,1
    56b8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    56bc:	e0bfff17 	ldw	r2,-4(fp)
    56c0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    56c4:	d0e00904 	addi	r3,gp,-32732
    56c8:	e0bffe17 	ldw	r2,-8(fp)
    56cc:	10ffcc1e 	bne	r2,r3,5600 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    56d0:	e037883a 	mov	sp,fp
    56d4:	dfc00117 	ldw	ra,4(sp)
    56d8:	df000017 	ldw	fp,0(sp)
    56dc:	dec00204 	addi	sp,sp,8
    56e0:	f800283a 	ret

000056e4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    56e4:	deffff04 	addi	sp,sp,-4
    56e8:	df000015 	stw	fp,0(sp)
    56ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    56f0:	000170fa 	wrctl	ienable,zero
}
    56f4:	e037883a 	mov	sp,fp
    56f8:	df000017 	ldw	fp,0(sp)
    56fc:	dec00104 	addi	sp,sp,4
    5700:	f800283a 	ret

00005704 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5704:	defff904 	addi	sp,sp,-28
    5708:	dfc00615 	stw	ra,24(sp)
    570c:	df000515 	stw	fp,20(sp)
    5710:	df000504 	addi	fp,sp,20
    5714:	e13ffd15 	stw	r4,-12(fp)
    5718:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    571c:	e0bffe17 	ldw	r2,-8(fp)
    5720:	10800017 	ldw	r2,0(r2)
    5724:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5728:	e13ffd17 	ldw	r4,-12(fp)
    572c:	00042c80 	call	42c8 <strlen>
    5730:	10800044 	addi	r2,r2,1
    5734:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5738:	00000d06 	br	5770 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    573c:	e0bffc17 	ldw	r2,-16(fp)
    5740:	11000217 	ldw	r4,8(r2)
    5744:	e1bffb17 	ldw	r6,-20(fp)
    5748:	e17ffd17 	ldw	r5,-12(fp)
    574c:	00059a80 	call	59a8 <memcmp>
    5750:	1004c03a 	cmpne	r2,r2,zero
    5754:	1000031e 	bne	r2,zero,5764 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5758:	e0bffc17 	ldw	r2,-16(fp)
    575c:	e0bfff15 	stw	r2,-4(fp)
    5760:	00000706 	br	5780 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5764:	e0bffc17 	ldw	r2,-16(fp)
    5768:	10800017 	ldw	r2,0(r2)
    576c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5770:	e0fffe17 	ldw	r3,-8(fp)
    5774:	e0bffc17 	ldw	r2,-16(fp)
    5778:	10fff01e 	bne	r2,r3,573c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    577c:	e03fff15 	stw	zero,-4(fp)
    5780:	e0bfff17 	ldw	r2,-4(fp)
}
    5784:	e037883a 	mov	sp,fp
    5788:	dfc00117 	ldw	ra,4(sp)
    578c:	df000017 	ldw	fp,0(sp)
    5790:	dec00204 	addi	sp,sp,8
    5794:	f800283a 	ret

00005798 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5798:	defffa04 	addi	sp,sp,-24
    579c:	dfc00515 	stw	ra,20(sp)
    57a0:	df000415 	stw	fp,16(sp)
    57a4:	df000404 	addi	fp,sp,16
    57a8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    57ac:	00800034 	movhi	r2,0
    57b0:	1097d204 	addi	r2,r2,24392
    57b4:	10800017 	ldw	r2,0(r2)
    57b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    57bc:	00003306 	br	588c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    57c0:	e0bffd17 	ldw	r2,-12(fp)
    57c4:	11000217 	ldw	r4,8(r2)
    57c8:	00042c80 	call	42c8 <strlen>
    57cc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    57d0:	e0bffd17 	ldw	r2,-12(fp)
    57d4:	10c00217 	ldw	r3,8(r2)
    57d8:	e0bffc17 	ldw	r2,-16(fp)
    57dc:	1885883a 	add	r2,r3,r2
    57e0:	10bfffc4 	addi	r2,r2,-1
    57e4:	10800003 	ldbu	r2,0(r2)
    57e8:	10803fcc 	andi	r2,r2,255
    57ec:	1080201c 	xori	r2,r2,128
    57f0:	10bfe004 	addi	r2,r2,-128
    57f4:	10800bd8 	cmpnei	r2,r2,47
    57f8:	1000031e 	bne	r2,zero,5808 <alt_find_file+0x70>
    {
      len -= 1;
    57fc:	e0bffc17 	ldw	r2,-16(fp)
    5800:	10bfffc4 	addi	r2,r2,-1
    5804:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5808:	e0bffc17 	ldw	r2,-16(fp)
    580c:	1007883a 	mov	r3,r2
    5810:	e0bffe17 	ldw	r2,-8(fp)
    5814:	1885883a 	add	r2,r3,r2
    5818:	10800003 	ldbu	r2,0(r2)
    581c:	10803fcc 	andi	r2,r2,255
    5820:	1080201c 	xori	r2,r2,128
    5824:	10bfe004 	addi	r2,r2,-128
    5828:	10800be0 	cmpeqi	r2,r2,47
    582c:	10000a1e 	bne	r2,zero,5858 <alt_find_file+0xc0>
    5830:	e0bffc17 	ldw	r2,-16(fp)
    5834:	1007883a 	mov	r3,r2
    5838:	e0bffe17 	ldw	r2,-8(fp)
    583c:	1885883a 	add	r2,r3,r2
    5840:	10800003 	ldbu	r2,0(r2)
    5844:	10803fcc 	andi	r2,r2,255
    5848:	1080201c 	xori	r2,r2,128
    584c:	10bfe004 	addi	r2,r2,-128
    5850:	1004c03a 	cmpne	r2,r2,zero
    5854:	10000a1e 	bne	r2,zero,5880 <alt_find_file+0xe8>
    5858:	e0bffd17 	ldw	r2,-12(fp)
    585c:	11000217 	ldw	r4,8(r2)
    5860:	e1bffc17 	ldw	r6,-16(fp)
    5864:	e17ffe17 	ldw	r5,-8(fp)
    5868:	00059a80 	call	59a8 <memcmp>
    586c:	1004c03a 	cmpne	r2,r2,zero
    5870:	1000031e 	bne	r2,zero,5880 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5874:	e0bffd17 	ldw	r2,-12(fp)
    5878:	e0bfff15 	stw	r2,-4(fp)
    587c:	00000806 	br	58a0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    5880:	e0bffd17 	ldw	r2,-12(fp)
    5884:	10800017 	ldw	r2,0(r2)
    5888:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    588c:	00c00034 	movhi	r3,0
    5890:	18d7d204 	addi	r3,r3,24392
    5894:	e0bffd17 	ldw	r2,-12(fp)
    5898:	10ffc91e 	bne	r2,r3,57c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    589c:	e03fff15 	stw	zero,-4(fp)
    58a0:	e0bfff17 	ldw	r2,-4(fp)
}
    58a4:	e037883a 	mov	sp,fp
    58a8:	dfc00117 	ldw	ra,4(sp)
    58ac:	df000017 	ldw	fp,0(sp)
    58b0:	dec00204 	addi	sp,sp,8
    58b4:	f800283a 	ret

000058b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    58b8:	defffa04 	addi	sp,sp,-24
    58bc:	dfc00515 	stw	ra,20(sp)
    58c0:	df000415 	stw	fp,16(sp)
    58c4:	dc000315 	stw	r16,12(sp)
    58c8:	df000304 	addi	fp,sp,12
    58cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    58d0:	00bffa04 	movi	r2,-24
    58d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    58d8:	e03ffe15 	stw	zero,-8(fp)
    58dc:	00002006 	br	5960 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    58e0:	e13ffe17 	ldw	r4,-8(fp)
    58e4:	04000034 	movhi	r16,0
    58e8:	84177004 	addi	r16,r16,24000
    58ec:	01400304 	movi	r5,12
    58f0:	0005ba40 	call	5ba4 <__mulsi3>
    58f4:	1405883a 	add	r2,r2,r16
    58f8:	10800017 	ldw	r2,0(r2)
    58fc:	1004c03a 	cmpne	r2,r2,zero
    5900:	1000141e 	bne	r2,zero,5954 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    5904:	e13ffe17 	ldw	r4,-8(fp)
    5908:	04000034 	movhi	r16,0
    590c:	84177004 	addi	r16,r16,24000
    5910:	01400304 	movi	r5,12
    5914:	0005ba40 	call	5ba4 <__mulsi3>
    5918:	1407883a 	add	r3,r2,r16
    591c:	e0bfff17 	ldw	r2,-4(fp)
    5920:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    5924:	00800034 	movhi	r2,0
    5928:	1097d604 	addi	r2,r2,24408
    592c:	10c00017 	ldw	r3,0(r2)
    5930:	e0bffe17 	ldw	r2,-8(fp)
    5934:	1880040e 	bge	r3,r2,5948 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    5938:	00c00034 	movhi	r3,0
    593c:	18d7d604 	addi	r3,r3,24408
    5940:	e0bffe17 	ldw	r2,-8(fp)
    5944:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    5948:	e0bffe17 	ldw	r2,-8(fp)
    594c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    5950:	00000606 	br	596c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5954:	e0bffe17 	ldw	r2,-8(fp)
    5958:	10800044 	addi	r2,r2,1
    595c:	e0bffe15 	stw	r2,-8(fp)
    5960:	e0bffe17 	ldw	r2,-8(fp)
    5964:	10800810 	cmplti	r2,r2,32
    5968:	103fdd1e 	bne	r2,zero,58e0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    596c:	e0bffd17 	ldw	r2,-12(fp)
}
    5970:	e037883a 	mov	sp,fp
    5974:	dfc00217 	ldw	ra,8(sp)
    5978:	df000117 	ldw	fp,4(sp)
    597c:	dc000017 	ldw	r16,0(sp)
    5980:	dec00304 	addi	sp,sp,12
    5984:	f800283a 	ret

00005988 <exit>:
    5988:	defffe04 	addi	sp,sp,-8
    598c:	dc400015 	stw	r17,0(sp)
    5990:	000b883a 	mov	r5,zero
    5994:	2023883a 	mov	r17,r4
    5998:	dfc00115 	stw	ra,4(sp)
    599c:	00059e80 	call	59e8 <__call_exitprocs>
    59a0:	8809883a 	mov	r4,r17
    59a4:	0005c1c0 	call	5c1c <_exit>

000059a8 <memcmp>:
    59a8:	31ffffc4 	addi	r7,r6,-1
    59ac:	3000061e 	bne	r6,zero,59c8 <memcmp+0x20>
    59b0:	00000a06 	br	59dc <memcmp+0x34>
    59b4:	39ffffc4 	addi	r7,r7,-1
    59b8:	00bfffc4 	movi	r2,-1
    59bc:	21000044 	addi	r4,r4,1
    59c0:	29400044 	addi	r5,r5,1
    59c4:	38800526 	beq	r7,r2,59dc <memcmp+0x34>
    59c8:	20c00003 	ldbu	r3,0(r4)
    59cc:	28800003 	ldbu	r2,0(r5)
    59d0:	18bff826 	beq	r3,r2,59b4 <memcmp+0xc>
    59d4:	1885c83a 	sub	r2,r3,r2
    59d8:	f800283a 	ret
    59dc:	0005883a 	mov	r2,zero
    59e0:	f800283a 	ret

000059e4 <register_fini>:
    59e4:	f800283a 	ret

000059e8 <__call_exitprocs>:
    59e8:	defff304 	addi	sp,sp,-52
    59ec:	00800034 	movhi	r2,0
    59f0:	1097d104 	addi	r2,r2,24388
    59f4:	df000b15 	stw	fp,44(sp)
    59f8:	17000017 	ldw	fp,0(r2)
    59fc:	00800034 	movhi	r2,0
    5a00:	10800004 	addi	r2,r2,0
    5a04:	1005003a 	cmpeq	r2,r2,zero
    5a08:	d8800215 	stw	r2,8(sp)
    5a0c:	e0800c04 	addi	r2,fp,48
    5a10:	dd800915 	stw	r22,36(sp)
    5a14:	dd400815 	stw	r21,32(sp)
    5a18:	dfc00c15 	stw	ra,48(sp)
    5a1c:	ddc00a15 	stw	r23,40(sp)
    5a20:	dd000715 	stw	r20,28(sp)
    5a24:	dcc00615 	stw	r19,24(sp)
    5a28:	dc800515 	stw	r18,20(sp)
    5a2c:	dc400415 	stw	r17,16(sp)
    5a30:	dc000315 	stw	r16,12(sp)
    5a34:	282d883a 	mov	r22,r5
    5a38:	d9000115 	stw	r4,4(sp)
    5a3c:	d8800015 	stw	r2,0(sp)
    5a40:	282b003a 	cmpeq	r21,r5,zero
    5a44:	e4400c17 	ldw	r17,48(fp)
    5a48:	88001226 	beq	r17,zero,5a94 <__call_exitprocs+0xac>
    5a4c:	ddc00017 	ldw	r23,0(sp)
    5a50:	88800117 	ldw	r2,4(r17)
    5a54:	8c802217 	ldw	r18,136(r17)
    5a58:	143fffc4 	addi	r16,r2,-1
    5a5c:	80000b16 	blt	r16,zero,5a8c <__call_exitprocs+0xa4>
    5a60:	9027003a 	cmpeq	r19,r18,zero
    5a64:	a800171e 	bne	r21,zero,5ac4 <__call_exitprocs+0xdc>
    5a68:	9800051e 	bne	r19,zero,5a80 <__call_exitprocs+0x98>
    5a6c:	8409883a 	add	r4,r16,r16
    5a70:	2105883a 	add	r2,r4,r4
    5a74:	1485883a 	add	r2,r2,r18
    5a78:	10c02017 	ldw	r3,128(r2)
    5a7c:	b0c01226 	beq	r22,r3,5ac8 <__call_exitprocs+0xe0>
    5a80:	843fffc4 	addi	r16,r16,-1
    5a84:	00bfffc4 	movi	r2,-1
    5a88:	80bff61e 	bne	r16,r2,5a64 <__call_exitprocs+0x7c>
    5a8c:	d8800217 	ldw	r2,8(sp)
    5a90:	10003226 	beq	r2,zero,5b5c <__call_exitprocs+0x174>
    5a94:	dfc00c17 	ldw	ra,48(sp)
    5a98:	df000b17 	ldw	fp,44(sp)
    5a9c:	ddc00a17 	ldw	r23,40(sp)
    5aa0:	dd800917 	ldw	r22,36(sp)
    5aa4:	dd400817 	ldw	r21,32(sp)
    5aa8:	dd000717 	ldw	r20,28(sp)
    5aac:	dcc00617 	ldw	r19,24(sp)
    5ab0:	dc800517 	ldw	r18,20(sp)
    5ab4:	dc400417 	ldw	r17,16(sp)
    5ab8:	dc000317 	ldw	r16,12(sp)
    5abc:	dec00d04 	addi	sp,sp,52
    5ac0:	f800283a 	ret
    5ac4:	8409883a 	add	r4,r16,r16
    5ac8:	88c00117 	ldw	r3,4(r17)
    5acc:	2105883a 	add	r2,r4,r4
    5ad0:	1445883a 	add	r2,r2,r17
    5ad4:	18ffffc4 	addi	r3,r3,-1
    5ad8:	11800217 	ldw	r6,8(r2)
    5adc:	1c001826 	beq	r3,r16,5b40 <__call_exitprocs+0x158>
    5ae0:	10000215 	stw	zero,8(r2)
    5ae4:	303fe626 	beq	r6,zero,5a80 <__call_exitprocs+0x98>
    5ae8:	8d000117 	ldw	r20,4(r17)
    5aec:	9800121e 	bne	r19,zero,5b38 <__call_exitprocs+0x150>
    5af0:	00c00044 	movi	r3,1
    5af4:	1c06983a 	sll	r3,r3,r16
    5af8:	90804017 	ldw	r2,256(r18)
    5afc:	1884703a 	and	r2,r3,r2
    5b00:	10000d26 	beq	r2,zero,5b38 <__call_exitprocs+0x150>
    5b04:	90804117 	ldw	r2,260(r18)
    5b08:	1884703a 	and	r2,r3,r2
    5b0c:	10000e1e 	bne	r2,zero,5b48 <__call_exitprocs+0x160>
    5b10:	2105883a 	add	r2,r4,r4
    5b14:	1485883a 	add	r2,r2,r18
    5b18:	11400017 	ldw	r5,0(r2)
    5b1c:	d9000117 	ldw	r4,4(sp)
    5b20:	303ee83a 	callr	r6
    5b24:	88800117 	ldw	r2,4(r17)
    5b28:	a0bfc61e 	bne	r20,r2,5a44 <__call_exitprocs+0x5c>
    5b2c:	b8800017 	ldw	r2,0(r23)
    5b30:	147fd326 	beq	r2,r17,5a80 <__call_exitprocs+0x98>
    5b34:	003fc306 	br	5a44 <__call_exitprocs+0x5c>
    5b38:	303ee83a 	callr	r6
    5b3c:	003ff906 	br	5b24 <__call_exitprocs+0x13c>
    5b40:	8c000115 	stw	r16,4(r17)
    5b44:	003fe706 	br	5ae4 <__call_exitprocs+0xfc>
    5b48:	2105883a 	add	r2,r4,r4
    5b4c:	1485883a 	add	r2,r2,r18
    5b50:	11000017 	ldw	r4,0(r2)
    5b54:	303ee83a 	callr	r6
    5b58:	003ff206 	br	5b24 <__call_exitprocs+0x13c>
    5b5c:	88800117 	ldw	r2,4(r17)
    5b60:	10000b1e 	bne	r2,zero,5b90 <__call_exitprocs+0x1a8>
    5b64:	89000017 	ldw	r4,0(r17)
    5b68:	20000a26 	beq	r4,zero,5b94 <__call_exitprocs+0x1ac>
    5b6c:	b9000015 	stw	r4,0(r23)
    5b70:	90000226 	beq	r18,zero,5b7c <__call_exitprocs+0x194>
    5b74:	9009883a 	mov	r4,r18
    5b78:	00000000 	call	0 <__reset-0x4000>
    5b7c:	8809883a 	mov	r4,r17
    5b80:	00000000 	call	0 <__reset-0x4000>
    5b84:	bc400017 	ldw	r17,0(r23)
    5b88:	883fb11e 	bne	r17,zero,5a50 <__call_exitprocs+0x68>
    5b8c:	003fc106 	br	5a94 <__call_exitprocs+0xac>
    5b90:	89000017 	ldw	r4,0(r17)
    5b94:	882f883a 	mov	r23,r17
    5b98:	2023883a 	mov	r17,r4
    5b9c:	883fac1e 	bne	r17,zero,5a50 <__call_exitprocs+0x68>
    5ba0:	003fbc06 	br	5a94 <__call_exitprocs+0xac>

00005ba4 <__mulsi3>:
    5ba4:	20000a26 	beq	r4,zero,5bd0 <__mulsi3+0x2c>
    5ba8:	0007883a 	mov	r3,zero
    5bac:	2080004c 	andi	r2,r4,1
    5bb0:	1005003a 	cmpeq	r2,r2,zero
    5bb4:	2008d07a 	srli	r4,r4,1
    5bb8:	1000011e 	bne	r2,zero,5bc0 <__mulsi3+0x1c>
    5bbc:	1947883a 	add	r3,r3,r5
    5bc0:	294b883a 	add	r5,r5,r5
    5bc4:	203ff91e 	bne	r4,zero,5bac <__mulsi3+0x8>
    5bc8:	1805883a 	mov	r2,r3
    5bcc:	f800283a 	ret
    5bd0:	0007883a 	mov	r3,zero
    5bd4:	1805883a 	mov	r2,r3
    5bd8:	f800283a 	ret

00005bdc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    5bdc:	defffd04 	addi	sp,sp,-12
    5be0:	df000215 	stw	fp,8(sp)
    5be4:	df000204 	addi	fp,sp,8
    5be8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    5bec:	e0bfff17 	ldw	r2,-4(fp)
    5bf0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5bf4:	e0bffe17 	ldw	r2,-8(fp)
    5bf8:	1005003a 	cmpeq	r2,r2,zero
    5bfc:	1000021e 	bne	r2,zero,5c08 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    5c00:	002af070 	cmpltui	zero,zero,43969
    5c04:	00000106 	br	5c0c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    5c08:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    5c0c:	e037883a 	mov	sp,fp
    5c10:	df000017 	ldw	fp,0(sp)
    5c14:	dec00104 	addi	sp,sp,4
    5c18:	f800283a 	ret

00005c1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5c1c:	defffd04 	addi	sp,sp,-12
    5c20:	dfc00215 	stw	ra,8(sp)
    5c24:	df000115 	stw	fp,4(sp)
    5c28:	df000104 	addi	fp,sp,4
    5c2c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    5c30:	e13fff17 	ldw	r4,-4(fp)
    5c34:	0005bdc0 	call	5bdc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5c38:	003fff06 	br	5c38 <_exit+0x1c>
    5c3c:	000059e4 	muli	zero,zero,359
