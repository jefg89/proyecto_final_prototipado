
980u.elf:     file format elf32-littlenios2
980u.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000ed38 memsz 0x0000ed38 flags r-x
    LOAD off    0x0000fd58 vaddr 0x0002ed58 paddr 0x000307b4 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00012210 vaddr 0x00032210 paddr 0x00032210 align 2**12
         filesz 0x00000000 memsz 0x00000300 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e51c  000201b4  000201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000688  0002e6d0  0002e6d0  0000f6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0002ed58  000307b4  0000fd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00032210  00032210  00012210  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000117b4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e78  00000000  00000000  000117e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000015c9  00000000  00000000  00012658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026a42  00000000  00000000  00013c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008f73  00000000  00000000  0003a663  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000158e2  00000000  00000000  000435d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b5c  00000000  00000000  00058eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002519  00000000  00000000  0005aa14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cb9b  00000000  00000000  0005cf2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00069ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b90  00000000  00000000  00069ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d8d7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0006d8da  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d8de  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d8df  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006d8e0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006d8e4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006d8e8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006d8ec  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006d8f7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006d902  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006d90d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  0006d910  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0002d756  00000000  00000000  0006d92f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b4 l    d  .text	00000000 .text
0002e6d0 l    d  .rodata	00000000 .rodata
0002ed58 l    d  .rwdata	00000000 .rwdata
00032210 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000201ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
0002e6d0 l     O .rodata	00000300 C.29.3268
00000000 l    df *ABS*	00000000 s_tanh.c
00000000 l    df *ABS*	00000000 s_expm1.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 fp-bit.c
00021964 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0002205c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00024168 l     F .text	00000058 __sprint_r
0002eb9a l     O .rodata	00000010 blanks.3452
0002eb8a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000261cc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00027bc8 l     F .text	00000058 std
00027cd4 l     F .text	00000008 __fp_lock
00027cdc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0002f160 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00030788 l     O .rwdata	00000004 charset
0002ebd0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002ed18 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002ba2c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0002bc74 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002bcd4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002bdd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002c0fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002c1dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002c338 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002c564 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000307a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0002c9a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002f714 l     O .rwdata	00001060 jtag_uart_0
0002ca7c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002ccbc l     F .text	00000228 altera_avalon_jtag_uart_irq
0002cee4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002d784 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002dba8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002dce4 l     F .text	000000dc alt_file_locked
0002df48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002e4b8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0002e66c l     F .text	00000040 alt_sim_halt
00029218 g     F .text	00000094 _mprec_log10
00029304 g     F .text	00000088 __any_on
0002aa14 g     F .text	00000070 _isatty_r
0002ecf0 g     O .rodata	00000028 __mprec_tinytens
0002c398 g     F .text	0000006c alt_main
0002105c g     F .text	000008f0 expm1
00032280 g     O .bss	00000100 alt_irq
0002194c g     F .text	00000018 fabs
0002aa84 g     F .text	00000078 _lseek_r
000307b4 g       *ABS*	00000000 __flash_rwdata_start
0002b700 g     F .text	00000088 __eqdf2
000288e4 g     F .text	00000074 _gettimeofday_r
00032510 g       *ABS*	00000000 __alt_heap_start
00023f90 g     F .text	00000044 printf
0002a46c g     F .text	00000068 __sseek
00027c30 g     F .text	000000a4 __sinit
0002897c g     F .text	00000084 _setlocale_r
00027d30 g     F .text	00000068 __sfmoreglue
0002c424 g     F .text	00000020 __malloc_unlock
00021dfc g     F .text	00000174 __divsf3
00028c94 g     F .text	000000e0 memmove
00027d20 g     F .text	00000010 _cleanup
0002938c g     F .text	000000bc _Balloc
00022b7c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002a9a0 g     F .text	00000074 _fstat_r
00032220 g     O .bss	00000004 errno
00022e5c g     F .text	00000038 __make_dp
00023248 g     F .text	0000002c __make_fp
00032244 g     O .bss	00000004 alt_argv
00038774 g       *ABS*	00000000 _gp
00021b48 g     F .text	00000070 __subsf3
0002f594 g     O .rwdata	00000180 alt_fd_list
0002dfc8 g     F .text	00000094 alt_find_dev
00023ef0 g     F .text	000000a0 memcpy
00027d14 g     F .text	0000000c _cleanup_r
00022c8c g     F .text	000000f8 __floatsidf
0002dc6c g     F .text	00000078 alt_io_redirect
00022c04 g     F .text	00000088 __ltdf2
0002e6d0 g       *ABS*	00000000 __DTOR_END__
00029168 g     F .text	000000b0 __ratio
0002d0fc g     F .text	00000224 altera_avalon_jtag_uart_read
0002379c g     F .text	00000014 malloc
00023fd4 g     F .text	00000034 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002bb68 g     F .text	00000008 __udivsi3
0002c03c g     F .text	000000c0 isatty
0002ec00 g     O .rodata	000000c8 __mprec_tens
00020220 g     F .text	00000258 hidden_layer_1_D
00028958 g     F .text	00000008 __locale_charset
00032230 g     O .bss	00000008 alt_timezone
0002e234 g     F .text	00000090 alt_icache_flush
00032214 g     O .bss	00000004 __malloc_top_pad
00030784 g     O .rwdata	00000004 __mb_cur_max
00028960 g     F .text	0000000c _localeconv_r
00029a84 g     F .text	0000003c __i2b
000282c8 g     F .text	0000049c __sfvwrite_r
0002409c g     F .text	00000070 _sbrk_r
0002aafc g     F .text	00000078 _read_r
0002f560 g     O .rwdata	0000000c __lc_ctype
0003079c g     O .rwdata	00000004 alt_max_fd
00023588 g     F .text	00000138 __unpack_d
0002a87c g     F .text	00000110 _fclose_r
00027b94 g     F .text	00000034 fflush
00032218 g     O .bss	00000004 __malloc_max_sbrked_mem
00022008 g     F .text	00000054 __extendsfdf2
000224ec g     F .text	00000074 __adddf3
00029048 g     F .text	00000120 __b2d
0002b150 g     F .text	000005b0 __umoddi3
0002c248 g     F .text	000000f0 lseek
00030780 g     O .rwdata	00000004 _global_impure_ptr
00029e00 g     F .text	000005f4 _realloc_r
00032510 g       *ABS*	00000000 __bss_end
0002dab0 g     F .text	000000f8 alt_iic_isr_register
0002c778 g     F .text	0000010c alt_tick
0002ab74 g     F .text	000005dc __udivdi3
0002ecc8 g     O .rodata	00000028 __mprec_bigtens
00029ce0 g     F .text	00000120 __s2b
0002b898 g     F .text	00000194 __floatunsidf
00028f68 g     F .text	00000060 __mcmp
00027cfc g     F .text	00000018 __fp_lock_all
0002da68 g     F .text	00000048 alt_ic_irq_enabled
0002c6e0 g     F .text	00000098 alt_alarm_stop
00032254 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000c8 alt_irq_handler
0002f56c g     O .rwdata	00000028 alt_dev_null
00023180 g     F .text	000000c8 __unpack_f
0002d6b4 g     F .text	0000001c alt_dcache_flush_all
00028e34 g     F .text	00000070 __hi0bits
00022d84 g     F .text	000000d8 __fixdfsi
000307b4 g       *ABS*	00000000 __ram_rwdata_end
00032210 g     O .bss	00000004 N_hidden
00030794 g     O .rwdata	00000008 alt_dev_list
0002c884 g     F .text	00000120 write
0002ed58 g       *ABS*	00000000 __ram_rodata_end
0002bd00 g     F .text	000000d4 fstat
000201f0 g     F .text	00000030 input_layer_1_D
00029bc0 g     F .text	00000120 __pow5mult
00032224 g     O .bss	00000004 __nlocale_changed
0002bb70 g     F .text	00000008 __umodsi3
00032510 g       *ABS*	00000000 end
00023020 g     F .text	00000160 __pack_f
0002cbfc g     F .text	000000c0 altera_avalon_jtag_uart_init
0002e6cc g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00022fa0 g     F .text	00000080 __clzsi2
0002d320 g     F .text	00000240 altera_avalon_jtag_uart_write
00020e10 g     F .text	0000024c tanh
00027c20 g     F .text	00000004 __sfp_lock_acquire
00028bb0 g     F .text	000000e4 memchr
000241c0 g     F .text	00001eac ___vfprintf_internal_r
00027fb4 g     F .text	00000314 _free_r
0002e4bc g     F .text	000001b0 __call_exitprocs
00032228 g     O .bss	00000004 __mlocale_changed
00030778 g     O .rwdata	00000004 __malloc_sbrk_base
000201b4 g     F .text	0000003c _start
0003224c g     O .bss	00000004 _alt_tick_rate
00024024 g     F .text	00000078 rand
00029750 g     F .text	0000014c __lshift
00032250 g     O .bss	00000004 _alt_nticks
0002c444 g     F .text	00000120 read
0002ca38 g     F .text	00000044 alt_sys_init
00021f70 g     F .text	00000098 __floatsisf
0002e384 g     F .text	00000134 __register_exitproc
0002989c g     F .text	000001e8 __multiply
0002cf94 g     F .text	00000074 altera_avalon_jtag_uart_close
0002ed58 g       *ABS*	00000000 __ram_rwdata_start
0002e6d0 g       *ABS*	00000000 __ram_rodata_start
00032258 g     O .bss	00000028 __malloc_current_mallinfo
00029448 g     F .text	0000017c __d2b
0002cab4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0002e17c g     F .text	000000b8 alt_get_fd
000236c0 g     F .text	000000c8 __fpcmp_parts_d
0002a80c g     F .text	00000070 _close_r
0002e310 g     F .text	00000074 memcmp
0002cb64 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00032510 g       *ABS*	00000000 __alt_stack_base
0002cbac g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00026090 g     F .text	0000013c __swsetup_r
00022924 g     F .text	00000258 __divdf3
00027d98 g     F .text	000000f0 __sfp
000292ac g     F .text	00000058 __copybits
0002ed58 g     O .rwdata	00000408 __malloc_av_
00027c2c g     F .text	00000004 __sinit_lock_release
00022560 g     F .text	000003c4 __muldf3
0002a550 g     F .text	00000060 __sread
0002ea08 g     O .rodata	00000010 __thenan_sf
0002e05c g     F .text	00000120 alt_find_file
0002d6d0 g     F .text	000000b4 alt_dev_llist_insert
0002c404 g     F .text	00000020 __malloc_lock
0002c624 g     F .text	000000bc sbrk
00027998 g     F .text	000001fc _fflush_r
0002a758 g     F .text	000000b4 _calloc_r
0002be34 g     F .text	00000208 gettimeofday
00032210 g       *ABS*	00000000 __bss_start
00028d74 g     F .text	00000098 memset
00020a5c g     F .text	000003b4 main
00032248 g     O .bss	00000004 alt_envp
0003221c g     O .bss	00000004 __malloc_max_total_mem
0002cb0c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00024008 g     F .text	0000001c srand
0002a464 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0002a98c g     F .text	00000014 fclose
00022e94 g     F .text	00000074 __truncdfsf2
00032380 g     O .bss	00000190 _atexit0
000263e4 g     F .text	000015b4 _dtoa_r
000237b0 g     F .text	00000740 _malloc_r
0002410c g     F .text	0000005c time
000307a0 g     O .rwdata	00000004 alt_errno
0002882c g     F .text	000000b8 _fwalk
0002baa8 g     F .text	00000060 __divsi3
0002ea18 g     O .rodata	00000014 __thenan_df
00027e88 g     F .text	0000012c _malloc_trim_r
0002e6d0 g       *ABS*	00000000 __CTOR_END__
00021c1c g     F .text	000001e0 __mulsf3
0002a5b0 g     F .text	000000bc strcmp
0002e6d0 g       *ABS*	00000000 __flash_rodata_start
0002e6d0 g       *ABS*	00000000 __DTOR_LIST__
0002b788 g     F .text	00000088 __nedf2
0002ca04 g     F .text	00000034 alt_irq_init
0002c5c4 g     F .text	00000060 alt_release_fd
0002ea2c g     O .rodata	00000100 __clz_tab
0003222c g     O .bss	00000004 _PathLocale
00020478 g     F .text	000000cc output_layer_1_D
0002e2c4 g     F .text	00000014 atexit
0002a6e0 g     F .text	00000078 _write_r
00028a00 g     F .text	0000001c setlocale
0003077c g     O .rwdata	00000004 _impure_ptr
00032240 g     O .bss	00000004 alt_argc
0002d848 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00028fc8 g     F .text	00000080 __ulp
0002a3f4 g     F .text	00000040 __isinfd
00027ce4 g     F .text	00000018 __fp_unlock_all
0003078c g     O .rwdata	00000008 alt_fs_list
00032238 g     O .bss	00000008 alt_resettime
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002896c g     F .text	00000010 localeconv
0002d8dc g     F .text	00000050 alt_ic_isr_register
000307b4 g       *ABS*	00000000 _edata
00032510 g       *ABS*	00000000 _end
000201b4 g       *ABS*	00000000 __ram_exceptions_end
0002d008 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002d9c8 g     F .text	000000a0 alt_ic_irq_disable
0002a4d4 g     F .text	0000007c __swrite
00030774 g     O .rwdata	00000004 __malloc_trim_threshold
0002dfa8 g     F .text	00000020 altera_nios2_qsys_irq_init
0002e2d8 g     F .text	00000038 exit
00028764 g     F .text	000000c8 _fwalk_reent
000295c4 g     F .text	0000018c __mdiff
0002bb08 g     F .text	00000060 __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00027c24 g     F .text	00000004 __sfp_lock_release
0002e6ac g     F .text	00000020 _exit
0002a434 g     F .text	00000030 __isnand
0002d560 g     F .text	00000154 alt_alarm_start
00022f08 g     F .text	00000098 __muldi3
000205bc g     F .text	000004a0 BPA
00028a1c g     F .text	00000194 __smakebuf_r
0002a66c g     F .text	00000074 strlen
0002ddc0 g     F .text	00000188 open
0002b810 g     F .text	00000088 __gedf2
0002d8ac g     F .text	00000030 alt_icache_flush_all
000307b0 g     O .rwdata	00000004 alt_priority_mask
0002d92c g     F .text	0000009c alt_ic_irq_enable
0002606c g     F .text	00000024 __vfprintf_internal
0002246c g     F .text	00000080 __subdf3
00028ea4 g     F .text	000000c4 __lo0bits
000307a8 g     O .rwdata	00000008 alt_alarm_list
0002d7e4 g     F .text	00000064 _do_ctors
0002bb78 g     F .text	000000fc close
00021bb8 g     F .text	00000064 __addsf3
00020544 g     F .text	00000078 ANN
0002c15c g     F .text	00000080 alt_load
00023274 g     F .text	00000314 __pack_d
00023788 g     F .text	00000014 free
00027c28 g     F .text	00000004 __sinit_lock_acquire
00029ac0 g     F .text	00000100 __multadd
00028e0c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08406d14 	ori	at,at,436
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   20044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   200fc:	0005313a 	rdctl	r2,ipending
   20100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   20108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   2010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20110:	00800044 	movi	r2,1
   20114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20118:	e0ffff17 	ldw	r3,-4(fp)
   2011c:	e0bffe17 	ldw	r2,-8(fp)
   20120:	1884703a 	and	r2,r3,r2
   20124:	1005003a 	cmpeq	r2,r2,zero
   20128:	1000161e 	bne	r2,zero,20184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	e0bffd17 	ldw	r2,-12(fp)
   20130:	00c000f4 	movhi	r3,3
   20134:	18c8a004 	addi	r3,r3,8832
   20138:	100490fa 	slli	r2,r2,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	11400017 	ldw	r5,0(r2)
   20144:	e0bffd17 	ldw	r2,-12(fp)
   20148:	00c000f4 	movhi	r3,3
   2014c:	18c8a004 	addi	r3,r3,8832
   20150:	100490fa 	slli	r2,r2,3
   20154:	10c5883a 	add	r2,r2,r3
   20158:	10800104 	addi	r2,r2,4
   2015c:	11000017 	ldw	r4,0(r2)
   20160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20164:	0005313a 	rdctl	r2,ipending
   20168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   2016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	1004c03a 	cmpne	r2,r2,zero
   2017c:	103fe31e 	bne	r2,zero,2010c <alt_irq_handler+0x20>
   20180:	00000706 	br	201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20184:	e0bffe17 	ldw	r2,-8(fp)
   20188:	1085883a 	add	r2,r2,r2
   2018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10800044 	addi	r2,r2,1
   20198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   2019c:	003fde06 	br	20118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a0:	e037883a 	mov	sp,fp
   201a4:	dfc00117 	ldw	ra,4(sp)
   201a8:	df000017 	ldw	fp,0(sp)
   201ac:	dec00204 	addi	sp,sp,8
   201b0:	f800283a 	ret

Disassembly of section .text:

000201b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b4:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   201bc:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201c0:	d6a1dd14 	ori	gp,gp,34676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c4:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   201c8:	10888414 	ori	r2,r2,8720

    movhi r3, %hi(__bss_end)
   201cc:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201d0:	18c94414 	ori	r3,r3,9488

    beq r2, r3, 1f
   201d4:	10c00326 	beq	r2,r3,201e4 <_start+0x30>

0:
    stw zero, (r2)
   201d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e0:	10fffd36 	bltu	r2,r3,201d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e4:	002c15c0 	call	2c15c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201e8:	002c3980 	call	2c398 <alt_main>

000201ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201ec:	003fff06 	br	201ec <alt_after_alt_main>

000201f0 <input_layer_1_D>:
#include "ann.h"
#include<time.h>
#define RAND_MAX 2147483647 /* 2^31-1*/

// ------------------Input Layer----------------------------------------------
void input_layer_1_D(float in, float *out) {
   201f0:	defffd04 	addi	sp,sp,-12
   201f4:	df000215 	stw	fp,8(sp)
   201f8:	df000204 	addi	fp,sp,8
   201fc:	e13ffe15 	stw	r4,-8(fp)
   20200:	e17fff15 	stw	r5,-4(fp)
     *out=in;
   20204:	e0ffff17 	ldw	r3,-4(fp)
   20208:	e0bffe17 	ldw	r2,-8(fp)
   2020c:	18800015 	stw	r2,0(r3)
     }
   20210:	e037883a 	mov	sp,fp
   20214:	df000017 	ldw	fp,0(sp)
   20218:	dec00104 	addi	sp,sp,4
   2021c:	f800283a 	ret

00020220 <hidden_layer_1_D>:
//--------------------------------------------------------------------------------

// ----------------Hidden Layer-------------------------------------------------
void hidden_layer_1_D(int N_hidden,float x_pi, float * w_ji, float * y_pj, int actFunc){
   20220:	defff504 	addi	sp,sp,-44
   20224:	dfc00a15 	stw	ra,40(sp)
   20228:	df000915 	stw	fp,36(sp)
   2022c:	dc800815 	stw	r18,32(sp)
   20230:	dc400715 	stw	r17,28(sp)
   20234:	dc000615 	stw	r16,24(sp)
   20238:	df000604 	addi	fp,sp,24
   2023c:	e13ffb15 	stw	r4,-20(fp)
   20240:	e17ffc15 	stw	r5,-16(fp)
   20244:	e1bffd15 	stw	r6,-12(fp)
   20248:	e1fffe15 	stw	r7,-8(fp)
	int n=0;
   2024c:	e03ffa15 	stw	zero,-24(fp)

	for (n=0;n<N_hidden;n++) {
   20250:	e03ffa15 	stw	zero,-24(fp)
   20254:	00007d06 	br	2044c <hidden_layer_1_D+0x22c>

		switch (actFunc){
   20258:	e0800517 	ldw	r2,20(fp)
   2025c:	e0bfff15 	stw	r2,-4(fp)
   20260:	e0ffff17 	ldw	r3,-4(fp)
   20264:	1805003a 	cmpeq	r2,r3,zero
   20268:	1000041e 	bne	r2,zero,2027c <hidden_layer_1_D+0x5c>
   2026c:	e0ffff17 	ldw	r3,-4(fp)
   20270:	18800060 	cmpeqi	r2,r3,1
   20274:	1000311e 	bne	r2,zero,2033c <hidden_layer_1_D+0x11c>
   20278:	00004106 	br	20380 <hidden_layer_1_D+0x160>

		case 0: /*logsig activation function*/
			{
				y_pj[n]= tanh(x_pi/12.0 * w_ji[n]); //mejorar esto//
   2027c:	e0bffa17 	ldw	r2,-24(fp)
   20280:	1085883a 	add	r2,r2,r2
   20284:	1085883a 	add	r2,r2,r2
   20288:	1007883a 	mov	r3,r2
   2028c:	e0bffe17 	ldw	r2,-8(fp)
   20290:	18a5883a 	add	r18,r3,r2
   20294:	e13ffc17 	ldw	r4,-16(fp)
   20298:	00220080 	call	22008 <__extendsfdf2>
   2029c:	100b883a 	mov	r5,r2
   202a0:	180d883a 	mov	r6,r3
   202a4:	2809883a 	mov	r4,r5
   202a8:	300b883a 	mov	r5,r6
   202ac:	000d883a 	mov	r6,zero
   202b0:	01d00a34 	movhi	r7,16424
   202b4:	00229240 	call	22924 <__divdf3>
   202b8:	1009883a 	mov	r4,r2
   202bc:	180b883a 	mov	r5,r3
   202c0:	2021883a 	mov	r16,r4
   202c4:	2823883a 	mov	r17,r5
   202c8:	e0bffa17 	ldw	r2,-24(fp)
   202cc:	1085883a 	add	r2,r2,r2
   202d0:	1085883a 	add	r2,r2,r2
   202d4:	1007883a 	mov	r3,r2
   202d8:	e0bffd17 	ldw	r2,-12(fp)
   202dc:	1885883a 	add	r2,r3,r2
   202e0:	10800017 	ldw	r2,0(r2)
   202e4:	1009883a 	mov	r4,r2
   202e8:	00220080 	call	22008 <__extendsfdf2>
   202ec:	100f883a 	mov	r7,r2
   202f0:	1811883a 	mov	r8,r3
   202f4:	8009883a 	mov	r4,r16
   202f8:	880b883a 	mov	r5,r17
   202fc:	380d883a 	mov	r6,r7
   20300:	400f883a 	mov	r7,r8
   20304:	00225600 	call	22560 <__muldf3>
   20308:	1009883a 	mov	r4,r2
   2030c:	180b883a 	mov	r5,r3
   20310:	2005883a 	mov	r2,r4
   20314:	2807883a 	mov	r3,r5
   20318:	1009883a 	mov	r4,r2
   2031c:	180b883a 	mov	r5,r3
   20320:	0020e100 	call	20e10 <tanh>
   20324:	100b883a 	mov	r5,r2
   20328:	180d883a 	mov	r6,r3
   2032c:	2809883a 	mov	r4,r5
   20330:	300b883a 	mov	r5,r6
   20334:	0022e940 	call	22e94 <__truncdfsf2>
   20338:	90800015 	stw	r2,0(r18)
			}

		case 1: /*linear activation function*/
			{
				y_pj[n]=x_pi * w_ji[n];
   2033c:	e0bffa17 	ldw	r2,-24(fp)
   20340:	1085883a 	add	r2,r2,r2
   20344:	1085883a 	add	r2,r2,r2
   20348:	1007883a 	mov	r3,r2
   2034c:	e0bffe17 	ldw	r2,-8(fp)
   20350:	18a1883a 	add	r16,r3,r2
   20354:	e0bffa17 	ldw	r2,-24(fp)
   20358:	1085883a 	add	r2,r2,r2
   2035c:	1085883a 	add	r2,r2,r2
   20360:	1007883a 	mov	r3,r2
   20364:	e0bffd17 	ldw	r2,-12(fp)
   20368:	1885883a 	add	r2,r3,r2
   2036c:	10800017 	ldw	r2,0(r2)
   20370:	1009883a 	mov	r4,r2
   20374:	e17ffc17 	ldw	r5,-16(fp)
   20378:	0021c1c0 	call	21c1c <__mulsf3>
   2037c:	80800015 	stw	r2,0(r16)
			}
		default:
			{
				y_pj[n]= tanh(x_pi/12.0 * w_ji[n]); // y esto//
   20380:	e0bffa17 	ldw	r2,-24(fp)
   20384:	1085883a 	add	r2,r2,r2
   20388:	1085883a 	add	r2,r2,r2
   2038c:	1007883a 	mov	r3,r2
   20390:	e0bffe17 	ldw	r2,-8(fp)
   20394:	18a5883a 	add	r18,r3,r2
   20398:	e13ffc17 	ldw	r4,-16(fp)
   2039c:	00220080 	call	22008 <__extendsfdf2>
   203a0:	100b883a 	mov	r5,r2
   203a4:	180d883a 	mov	r6,r3
   203a8:	2809883a 	mov	r4,r5
   203ac:	300b883a 	mov	r5,r6
   203b0:	000d883a 	mov	r6,zero
   203b4:	01d00a34 	movhi	r7,16424
   203b8:	00229240 	call	22924 <__divdf3>
   203bc:	1009883a 	mov	r4,r2
   203c0:	180b883a 	mov	r5,r3
   203c4:	2021883a 	mov	r16,r4
   203c8:	2823883a 	mov	r17,r5
   203cc:	e0bffa17 	ldw	r2,-24(fp)
   203d0:	1085883a 	add	r2,r2,r2
   203d4:	1085883a 	add	r2,r2,r2
   203d8:	1007883a 	mov	r3,r2
   203dc:	e0bffd17 	ldw	r2,-12(fp)
   203e0:	1885883a 	add	r2,r3,r2
   203e4:	10800017 	ldw	r2,0(r2)
   203e8:	1009883a 	mov	r4,r2
   203ec:	00220080 	call	22008 <__extendsfdf2>
   203f0:	100f883a 	mov	r7,r2
   203f4:	1811883a 	mov	r8,r3
   203f8:	8009883a 	mov	r4,r16
   203fc:	880b883a 	mov	r5,r17
   20400:	380d883a 	mov	r6,r7
   20404:	400f883a 	mov	r7,r8
   20408:	00225600 	call	22560 <__muldf3>
   2040c:	1009883a 	mov	r4,r2
   20410:	180b883a 	mov	r5,r3
   20414:	2005883a 	mov	r2,r4
   20418:	2807883a 	mov	r3,r5
   2041c:	1009883a 	mov	r4,r2
   20420:	180b883a 	mov	r5,r3
   20424:	0020e100 	call	20e10 <tanh>
   20428:	100b883a 	mov	r5,r2
   2042c:	180d883a 	mov	r6,r3
   20430:	2809883a 	mov	r4,r5
   20434:	300b883a 	mov	r5,r6
   20438:	0022e940 	call	22e94 <__truncdfsf2>
   2043c:	90800015 	stw	r2,0(r18)

// ----------------Hidden Layer-------------------------------------------------
void hidden_layer_1_D(int N_hidden,float x_pi, float * w_ji, float * y_pj, int actFunc){
	int n=0;

	for (n=0;n<N_hidden;n++) {
   20440:	e0bffa17 	ldw	r2,-24(fp)
   20444:	10800044 	addi	r2,r2,1
   20448:	e0bffa15 	stw	r2,-24(fp)
   2044c:	e0fffa17 	ldw	r3,-24(fp)
   20450:	e0bffb17 	ldw	r2,-20(fp)
   20454:	18bf8016 	blt	r3,r2,20258 <hidden_layer_1_D+0x38>
		}

	}


}
   20458:	e037883a 	mov	sp,fp
   2045c:	dfc00417 	ldw	ra,16(sp)
   20460:	df000317 	ldw	fp,12(sp)
   20464:	dc800217 	ldw	r18,8(sp)
   20468:	dc400117 	ldw	r17,4(sp)
   2046c:	dc000017 	ldw	r16,0(sp)
   20470:	dec00504 	addi	sp,sp,20
   20474:	f800283a 	ret

00020478 <output_layer_1_D>:
//-------------------------------------------------------------------------------------

//--------------------Output Layer-----------------------------------------------------
void output_layer_1_D(int N_hidden, float *x , float *w_kj,float *b, float *Y )
{
   20478:	defff804 	addi	sp,sp,-32
   2047c:	dfc00715 	stw	ra,28(sp)
   20480:	df000615 	stw	fp,24(sp)
   20484:	df000604 	addi	fp,sp,24
   20488:	e13ffc15 	stw	r4,-16(fp)
   2048c:	e17ffd15 	stw	r5,-12(fp)
   20490:	e1bffe15 	stw	r6,-8(fp)
   20494:	e1ffff15 	stw	r7,-4(fp)
     int n=0;
   20498:	e03ffb15 	stw	zero,-20(fp)
     float add=0.0;
   2049c:	e03ffa15 	stw	zero,-24(fp)
     for (n=0; n<N_hidden; n++)
   204a0:	e03ffb15 	stw	zero,-20(fp)
   204a4:	00001706 	br	20504 <output_layer_1_D+0x8c>
	{
		add= add + x[n] * w_kj[n];
   204a8:	e0bffb17 	ldw	r2,-20(fp)
   204ac:	1085883a 	add	r2,r2,r2
   204b0:	1085883a 	add	r2,r2,r2
   204b4:	1007883a 	mov	r3,r2
   204b8:	e0bffd17 	ldw	r2,-12(fp)
   204bc:	1885883a 	add	r2,r3,r2
   204c0:	11000017 	ldw	r4,0(r2)
   204c4:	e0bffb17 	ldw	r2,-20(fp)
   204c8:	1085883a 	add	r2,r2,r2
   204cc:	1085883a 	add	r2,r2,r2
   204d0:	1007883a 	mov	r3,r2
   204d4:	e0bffe17 	ldw	r2,-8(fp)
   204d8:	1885883a 	add	r2,r3,r2
   204dc:	10800017 	ldw	r2,0(r2)
   204e0:	100b883a 	mov	r5,r2
   204e4:	0021c1c0 	call	21c1c <__mulsf3>
   204e8:	e13ffa17 	ldw	r4,-24(fp)
   204ec:	100b883a 	mov	r5,r2
   204f0:	0021bb80 	call	21bb8 <__addsf3>
   204f4:	e0bffa15 	stw	r2,-24(fp)
//--------------------Output Layer-----------------------------------------------------
void output_layer_1_D(int N_hidden, float *x , float *w_kj,float *b, float *Y )
{
     int n=0;
     float add=0.0;
     for (n=0; n<N_hidden; n++)
   204f8:	e0bffb17 	ldw	r2,-20(fp)
   204fc:	10800044 	addi	r2,r2,1
   20500:	e0bffb15 	stw	r2,-20(fp)
   20504:	e0fffb17 	ldw	r3,-20(fp)
   20508:	e0bffc17 	ldw	r2,-16(fp)
   2050c:	18bfe616 	blt	r3,r2,204a8 <output_layer_1_D+0x30>
	{
		add= add + x[n] * w_kj[n];
     }
     *Y=add + *b;
   20510:	e0bfff17 	ldw	r2,-4(fp)
   20514:	10800017 	ldw	r2,0(r2)
   20518:	1009883a 	mov	r4,r2
   2051c:	e17ffa17 	ldw	r5,-24(fp)
   20520:	0021bb80 	call	21bb8 <__addsf3>
   20524:	1007883a 	mov	r3,r2
   20528:	e0800217 	ldw	r2,8(fp)
   2052c:	10c00015 	stw	r3,0(r2)
}
   20530:	e037883a 	mov	sp,fp
   20534:	dfc00117 	ldw	ra,4(sp)
   20538:	df000017 	ldw	fp,0(sp)
   2053c:	dec00204 	addi	sp,sp,8
   20540:	f800283a 	ret

00020544 <ANN>:

//-----------------------------------------------------------------------------

//------------------ANN construction------------------------------------------
void ANN (int N_hidden,float In, float * w_ji, float  * w_kj, float *b, float * y_pj,float * y_pk)  {
   20544:	defff804 	addi	sp,sp,-32
   20548:	dfc00715 	stw	ra,28(sp)
   2054c:	df000615 	stw	fp,24(sp)
   20550:	df000604 	addi	fp,sp,24
   20554:	e13ffc15 	stw	r4,-16(fp)
   20558:	e17ffd15 	stw	r5,-12(fp)
   2055c:	e1bffe15 	stw	r6,-8(fp)
   20560:	e1ffff15 	stw	r7,-4(fp)
float x_pi;

input_layer_1_D(In,&x_pi);
   20564:	e13ffd17 	ldw	r4,-12(fp)
   20568:	e17ffb04 	addi	r5,fp,-20
   2056c:	00201f00 	call	201f0 <input_layer_1_D>

hidden_layer_1_D(N_hidden,x_pi, w_ji, y_pj,0);
   20570:	e0bffb17 	ldw	r2,-20(fp)
   20574:	d8000015 	stw	zero,0(sp)
   20578:	e13ffc17 	ldw	r4,-16(fp)
   2057c:	100b883a 	mov	r5,r2
   20580:	e1bffe17 	ldw	r6,-8(fp)
   20584:	e1c00317 	ldw	r7,12(fp)
   20588:	00202200 	call	20220 <hidden_layer_1_D>

output_layer_1_D(N_hidden,y_pj,w_kj,b,y_pk);
   2058c:	e0800417 	ldw	r2,16(fp)
   20590:	d8800015 	stw	r2,0(sp)
   20594:	e13ffc17 	ldw	r4,-16(fp)
   20598:	e1400317 	ldw	r5,12(fp)
   2059c:	e1bfff17 	ldw	r6,-4(fp)
   205a0:	e1c00217 	ldw	r7,8(fp)
   205a4:	00204780 	call	20478 <output_layer_1_D>

}
   205a8:	e037883a 	mov	sp,fp
   205ac:	dfc00117 	ldw	ra,4(sp)
   205b0:	df000017 	ldw	fp,0(sp)
   205b4:	dec00204 	addi	sp,sp,8
   205b8:	f800283a 	ret

000205bc <BPA>:
//-------------------------------------------------------------

//------------Backpropagation algorithm-------------------------


void BPA (int N_hidden, int N_dat,float eta, float *In,float *d_pk, float *w_ji, float *w_kj, float * b) {
   205bc:	deffec04 	addi	sp,sp,-80
   205c0:	dfc01315 	stw	ra,76(sp)
   205c4:	df001215 	stw	fp,72(sp)
   205c8:	dc801115 	stw	r18,68(sp)
   205cc:	dc401015 	stw	r17,64(sp)
   205d0:	dc000f15 	stw	r16,60(sp)
   205d4:	df000f04 	addi	fp,sp,60
   205d8:	e13ffc15 	stw	r4,-16(fp)
   205dc:	e17ffd15 	stw	r5,-12(fp)
   205e0:	e1bffe15 	stw	r6,-8(fp)
   205e4:	e1ffff15 	stw	r7,-4(fp)

float *y_pj; //hidden out
float *y_pk; // output out
float delta_pk; //output layer delta
float * delta_pj; //hidden layer delta
int x = 0;
   205e8:	e03ff715 	stw	zero,-36(fp)

//memory allocation for hidden output and delta
y_pj = (float*)malloc(N_hidden* sizeof(float));
   205ec:	e0bffc17 	ldw	r2,-16(fp)
   205f0:	1085883a 	add	r2,r2,r2
   205f4:	1085883a 	add	r2,r2,r2
   205f8:	1009883a 	mov	r4,r2
   205fc:	002379c0 	call	2379c <malloc>
   20600:	e0bffb15 	stw	r2,-20(fp)
delta_pj = (float*)malloc(N_hidden* sizeof(float));
   20604:	e0bffc17 	ldw	r2,-16(fp)
   20608:	1085883a 	add	r2,r2,r2
   2060c:	1085883a 	add	r2,r2,r2
   20610:	1009883a 	mov	r4,r2
   20614:	002379c0 	call	2379c <malloc>
   20618:	e0bff815 	stw	r2,-32(fp)
y_pk = (float*)malloc(1* sizeof(float));
   2061c:	01000104 	movi	r4,4
   20620:	002379c0 	call	2379c <malloc>
   20624:	e0bffa15 	stw	r2,-24(fp)



//------------ Initial random weights generation//

srand ((unsigned) (time(0)));
   20628:	0009883a 	mov	r4,zero
   2062c:	002410c0 	call	2410c <time>
   20630:	1009883a 	mov	r4,r2
   20634:	00240080 	call	24008 <srand>
for (x=0;x<N_hidden;x++)
   20638:	e03ff715 	stw	zero,-36(fp)
   2063c:	00001d06 	br	206b4 <BPA+0xf8>
	{
        w_ji [x] =(float) (rand()) / (float) (RAND_MAX);
   20640:	e0bff717 	ldw	r2,-36(fp)
   20644:	1085883a 	add	r2,r2,r2
   20648:	1085883a 	add	r2,r2,r2
   2064c:	1007883a 	mov	r3,r2
   20650:	e0800617 	ldw	r2,24(fp)
   20654:	18a1883a 	add	r16,r3,r2
   20658:	00240240 	call	24024 <rand>
   2065c:	1009883a 	mov	r4,r2
   20660:	0021f700 	call	21f70 <__floatsisf>
   20664:	1009883a 	mov	r4,r2
   20668:	0153c034 	movhi	r5,20224
   2066c:	0021dfc0 	call	21dfc <__divsf3>
   20670:	80800015 	stw	r2,0(r16)

	    w_kj [x] =(float) (rand()) / (float) (RAND_MAX);
   20674:	e0bff717 	ldw	r2,-36(fp)
   20678:	1085883a 	add	r2,r2,r2
   2067c:	1085883a 	add	r2,r2,r2
   20680:	1007883a 	mov	r3,r2
   20684:	e0800717 	ldw	r2,28(fp)
   20688:	18a1883a 	add	r16,r3,r2
   2068c:	00240240 	call	24024 <rand>
   20690:	1009883a 	mov	r4,r2
   20694:	0021f700 	call	21f70 <__floatsisf>
   20698:	1009883a 	mov	r4,r2
   2069c:	0153c034 	movhi	r5,20224
   206a0:	0021dfc0 	call	21dfc <__divsf3>
   206a4:	80800015 	stw	r2,0(r16)


//------------ Initial random weights generation//

srand ((unsigned) (time(0)));
for (x=0;x<N_hidden;x++)
   206a8:	e0bff717 	ldw	r2,-36(fp)
   206ac:	10800044 	addi	r2,r2,1
   206b0:	e0bff715 	stw	r2,-36(fp)
   206b4:	e0fff717 	ldw	r3,-36(fp)
   206b8:	e0bffc17 	ldw	r2,-16(fp)
   206bc:	18bfe016 	blt	r3,r2,20640 <BPA+0x84>
	}

//bias random generation

//b= static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
*b=-1.72;
   206c0:	e0c00817 	ldw	r3,32(fp)
   206c4:	00aff734 	movhi	r2,49116
   206c8:	108a3d84 	addi	r2,r2,10486
   206cc:	18800015 	stw	r2,0(r3)





int iter=0;
   206d0:	e03ff615 	stw	zero,-40(fp)
for (iter=0;iter<15;iter++) {
   206d4:	e03ff615 	stw	zero,-40(fp)
   206d8:	0000d506 	br	20a30 <BPA+0x474>
	int pos =0;
   206dc:	e03ff515 	stw	zero,-44(fp)

for (pos=0;pos<N_dat;pos++){
   206e0:	e03ff515 	stw	zero,-44(fp)
   206e4:	0000cc06 	br	20a18 <BPA+0x45c>
	int y=0;
   206e8:	e03ff415 	stw	zero,-48(fp)
	ANN (N_hidden,In[pos], w_ji, w_kj,b,y_pj,y_pk);//ANN run
   206ec:	e0bff517 	ldw	r2,-44(fp)
   206f0:	1085883a 	add	r2,r2,r2
   206f4:	1085883a 	add	r2,r2,r2
   206f8:	1007883a 	mov	r3,r2
   206fc:	e0bfff17 	ldw	r2,-4(fp)
   20700:	1885883a 	add	r2,r3,r2
   20704:	10c00017 	ldw	r3,0(r2)
   20708:	e0800817 	ldw	r2,32(fp)
   2070c:	d8800015 	stw	r2,0(sp)
   20710:	e0bffb17 	ldw	r2,-20(fp)
   20714:	d8800115 	stw	r2,4(sp)
   20718:	e0bffa17 	ldw	r2,-24(fp)
   2071c:	d8800215 	stw	r2,8(sp)
   20720:	e13ffc17 	ldw	r4,-16(fp)
   20724:	180b883a 	mov	r5,r3
   20728:	e1800617 	ldw	r6,24(fp)
   2072c:	e1c00717 	ldw	r7,28(fp)
   20730:	00205440 	call	20544 <ANN>

	//output delta computing
	delta_pk=(d_pk[pos]-*y_pk);
   20734:	e0bff517 	ldw	r2,-44(fp)
   20738:	1085883a 	add	r2,r2,r2
   2073c:	1085883a 	add	r2,r2,r2
   20740:	1007883a 	mov	r3,r2
   20744:	e0800517 	ldw	r2,20(fp)
   20748:	1885883a 	add	r2,r3,r2
   2074c:	10c00017 	ldw	r3,0(r2)
   20750:	e0bffa17 	ldw	r2,-24(fp)
   20754:	10800017 	ldw	r2,0(r2)
   20758:	1809883a 	mov	r4,r3
   2075c:	100b883a 	mov	r5,r2
   20760:	0021b480 	call	21b48 <__subsf3>
   20764:	e0bff915 	stw	r2,-28(fp)


	//hidden delta computing
	 for (y=0;y<N_hidden;y++) {
   20768:	e03ff415 	stw	zero,-48(fp)
   2076c:	00009906 	br	209d4 <BPA+0x418>

         delta_pj[y]= y_pj[y] *( 1.0 - y_pj[y])* delta_pk * w_kj[y];
   20770:	e0bff417 	ldw	r2,-48(fp)
   20774:	1085883a 	add	r2,r2,r2
   20778:	1085883a 	add	r2,r2,r2
   2077c:	1007883a 	mov	r3,r2
   20780:	e0bff817 	ldw	r2,-32(fp)
   20784:	18a5883a 	add	r18,r3,r2
   20788:	e0bff417 	ldw	r2,-48(fp)
   2078c:	1085883a 	add	r2,r2,r2
   20790:	1085883a 	add	r2,r2,r2
   20794:	1007883a 	mov	r3,r2
   20798:	e0bffb17 	ldw	r2,-20(fp)
   2079c:	1885883a 	add	r2,r3,r2
   207a0:	10800017 	ldw	r2,0(r2)
   207a4:	1009883a 	mov	r4,r2
   207a8:	00220080 	call	22008 <__extendsfdf2>
   207ac:	1021883a 	mov	r16,r2
   207b0:	1823883a 	mov	r17,r3
   207b4:	e0bff417 	ldw	r2,-48(fp)
   207b8:	1085883a 	add	r2,r2,r2
   207bc:	1085883a 	add	r2,r2,r2
   207c0:	1007883a 	mov	r3,r2
   207c4:	e0bffb17 	ldw	r2,-20(fp)
   207c8:	1885883a 	add	r2,r3,r2
   207cc:	10800017 	ldw	r2,0(r2)
   207d0:	1009883a 	mov	r4,r2
   207d4:	00220080 	call	22008 <__extendsfdf2>
   207d8:	100f883a 	mov	r7,r2
   207dc:	1811883a 	mov	r8,r3
   207e0:	0009883a 	mov	r4,zero
   207e4:	014ffc34 	movhi	r5,16368
   207e8:	380d883a 	mov	r6,r7
   207ec:	400f883a 	mov	r7,r8
   207f0:	002246c0 	call	2246c <__subdf3>
   207f4:	1009883a 	mov	r4,r2
   207f8:	180b883a 	mov	r5,r3
   207fc:	2005883a 	mov	r2,r4
   20800:	2807883a 	mov	r3,r5
   20804:	8009883a 	mov	r4,r16
   20808:	880b883a 	mov	r5,r17
   2080c:	100d883a 	mov	r6,r2
   20810:	180f883a 	mov	r7,r3
   20814:	00225600 	call	22560 <__muldf3>
   20818:	1009883a 	mov	r4,r2
   2081c:	180b883a 	mov	r5,r3
   20820:	2021883a 	mov	r16,r4
   20824:	2823883a 	mov	r17,r5
   20828:	e13ff917 	ldw	r4,-28(fp)
   2082c:	00220080 	call	22008 <__extendsfdf2>
   20830:	100f883a 	mov	r7,r2
   20834:	1811883a 	mov	r8,r3
   20838:	8009883a 	mov	r4,r16
   2083c:	880b883a 	mov	r5,r17
   20840:	380d883a 	mov	r6,r7
   20844:	400f883a 	mov	r7,r8
   20848:	00225600 	call	22560 <__muldf3>
   2084c:	1009883a 	mov	r4,r2
   20850:	180b883a 	mov	r5,r3
   20854:	2021883a 	mov	r16,r4
   20858:	2823883a 	mov	r17,r5
   2085c:	e0bff417 	ldw	r2,-48(fp)
   20860:	1085883a 	add	r2,r2,r2
   20864:	1085883a 	add	r2,r2,r2
   20868:	1007883a 	mov	r3,r2
   2086c:	e0800717 	ldw	r2,28(fp)
   20870:	1885883a 	add	r2,r3,r2
   20874:	10800017 	ldw	r2,0(r2)
   20878:	1009883a 	mov	r4,r2
   2087c:	00220080 	call	22008 <__extendsfdf2>
   20880:	100f883a 	mov	r7,r2
   20884:	1811883a 	mov	r8,r3
   20888:	8009883a 	mov	r4,r16
   2088c:	880b883a 	mov	r5,r17
   20890:	380d883a 	mov	r6,r7
   20894:	400f883a 	mov	r7,r8
   20898:	00225600 	call	22560 <__muldf3>
   2089c:	1009883a 	mov	r4,r2
   208a0:	180b883a 	mov	r5,r3
   208a4:	2005883a 	mov	r2,r4
   208a8:	2807883a 	mov	r3,r5
   208ac:	1009883a 	mov	r4,r2
   208b0:	180b883a 	mov	r5,r3
   208b4:	0022e940 	call	22e94 <__truncdfsf2>
   208b8:	90800015 	stw	r2,0(r18)
         w_kj[y] =  w_kj[y] + eta * delta_pk * y_pj[y];  //output weights adjustment
   208bc:	e0bff417 	ldw	r2,-48(fp)
   208c0:	1085883a 	add	r2,r2,r2
   208c4:	1085883a 	add	r2,r2,r2
   208c8:	1007883a 	mov	r3,r2
   208cc:	e0800717 	ldw	r2,28(fp)
   208d0:	18a1883a 	add	r16,r3,r2
   208d4:	e0bff417 	ldw	r2,-48(fp)
   208d8:	1085883a 	add	r2,r2,r2
   208dc:	1085883a 	add	r2,r2,r2
   208e0:	1007883a 	mov	r3,r2
   208e4:	e0800717 	ldw	r2,28(fp)
   208e8:	1885883a 	add	r2,r3,r2
   208ec:	14400017 	ldw	r17,0(r2)
   208f0:	e13ffe17 	ldw	r4,-8(fp)
   208f4:	e17ff917 	ldw	r5,-28(fp)
   208f8:	0021c1c0 	call	21c1c <__mulsf3>
   208fc:	1009883a 	mov	r4,r2
   20900:	e0bff417 	ldw	r2,-48(fp)
   20904:	1085883a 	add	r2,r2,r2
   20908:	1085883a 	add	r2,r2,r2
   2090c:	1007883a 	mov	r3,r2
   20910:	e0bffb17 	ldw	r2,-20(fp)
   20914:	1885883a 	add	r2,r3,r2
   20918:	10800017 	ldw	r2,0(r2)
   2091c:	100b883a 	mov	r5,r2
   20920:	0021c1c0 	call	21c1c <__mulsf3>
   20924:	8809883a 	mov	r4,r17
   20928:	100b883a 	mov	r5,r2
   2092c:	0021bb80 	call	21bb8 <__addsf3>
   20930:	80800015 	stw	r2,0(r16)
         w_ji[y] =  w_ji[y] + eta * delta_pj[y] * In[pos]; // hidden weight adjustment
   20934:	e0bff417 	ldw	r2,-48(fp)
   20938:	1085883a 	add	r2,r2,r2
   2093c:	1085883a 	add	r2,r2,r2
   20940:	1007883a 	mov	r3,r2
   20944:	e0800617 	ldw	r2,24(fp)
   20948:	18a1883a 	add	r16,r3,r2
   2094c:	e0bff417 	ldw	r2,-48(fp)
   20950:	1085883a 	add	r2,r2,r2
   20954:	1085883a 	add	r2,r2,r2
   20958:	1007883a 	mov	r3,r2
   2095c:	e0800617 	ldw	r2,24(fp)
   20960:	1885883a 	add	r2,r3,r2
   20964:	14400017 	ldw	r17,0(r2)
   20968:	e0bff417 	ldw	r2,-48(fp)
   2096c:	1085883a 	add	r2,r2,r2
   20970:	1085883a 	add	r2,r2,r2
   20974:	1007883a 	mov	r3,r2
   20978:	e0bff817 	ldw	r2,-32(fp)
   2097c:	1885883a 	add	r2,r3,r2
   20980:	10800017 	ldw	r2,0(r2)
   20984:	1009883a 	mov	r4,r2
   20988:	e17ffe17 	ldw	r5,-8(fp)
   2098c:	0021c1c0 	call	21c1c <__mulsf3>
   20990:	1009883a 	mov	r4,r2
   20994:	e0bff517 	ldw	r2,-44(fp)
   20998:	1085883a 	add	r2,r2,r2
   2099c:	1085883a 	add	r2,r2,r2
   209a0:	1007883a 	mov	r3,r2
   209a4:	e0bfff17 	ldw	r2,-4(fp)
   209a8:	1885883a 	add	r2,r3,r2
   209ac:	10800017 	ldw	r2,0(r2)
   209b0:	100b883a 	mov	r5,r2
   209b4:	0021c1c0 	call	21c1c <__mulsf3>
   209b8:	8809883a 	mov	r4,r17
   209bc:	100b883a 	mov	r5,r2
   209c0:	0021bb80 	call	21bb8 <__addsf3>
   209c4:	80800015 	stw	r2,0(r16)
	//output delta computing
	delta_pk=(d_pk[pos]-*y_pk);


	//hidden delta computing
	 for (y=0;y<N_hidden;y++) {
   209c8:	e0bff417 	ldw	r2,-48(fp)
   209cc:	10800044 	addi	r2,r2,1
   209d0:	e0bff415 	stw	r2,-48(fp)
   209d4:	e0fff417 	ldw	r3,-48(fp)
   209d8:	e0bffc17 	ldw	r2,-16(fp)
   209dc:	18bf6416 	blt	r3,r2,20770 <BPA+0x1b4>

         delta_pj[y]= y_pj[y] *( 1.0 - y_pj[y])* delta_pk * w_kj[y];
         w_kj[y] =  w_kj[y] + eta * delta_pk * y_pj[y];  //output weights adjustment
         w_ji[y] =  w_ji[y] + eta * delta_pj[y] * In[pos]; // hidden weight adjustment
		}
	*b=*b + eta * delta_pk ;
   209e0:	e0800817 	ldw	r2,32(fp)
   209e4:	14000017 	ldw	r16,0(r2)
   209e8:	e13ffe17 	ldw	r4,-8(fp)
   209ec:	e17ff917 	ldw	r5,-28(fp)
   209f0:	0021c1c0 	call	21c1c <__mulsf3>
   209f4:	8009883a 	mov	r4,r16
   209f8:	100b883a 	mov	r5,r2
   209fc:	0021bb80 	call	21bb8 <__addsf3>
   20a00:	1007883a 	mov	r3,r2
   20a04:	e0800817 	ldw	r2,32(fp)
   20a08:	10c00015 	stw	r3,0(r2)

int iter=0;
for (iter=0;iter<15;iter++) {
	int pos =0;

for (pos=0;pos<N_dat;pos++){
   20a0c:	e0bff517 	ldw	r2,-44(fp)
   20a10:	10800044 	addi	r2,r2,1
   20a14:	e0bff515 	stw	r2,-44(fp)
   20a18:	e0fff517 	ldw	r3,-44(fp)
   20a1c:	e0bffd17 	ldw	r2,-12(fp)
   20a20:	18bf3116 	blt	r3,r2,206e8 <BPA+0x12c>




int iter=0;
for (iter=0;iter<15;iter++) {
   20a24:	e0bff617 	ldw	r2,-40(fp)
   20a28:	10800044 	addi	r2,r2,1
   20a2c:	e0bff615 	stw	r2,-40(fp)
   20a30:	e0bff617 	ldw	r2,-40(fp)
   20a34:	108003d0 	cmplti	r2,r2,15
   20a38:	103f281e 	bne	r2,zero,206dc <BPA+0x120>
	*b=*b + eta * delta_pk ;

	}
}

}
   20a3c:	e037883a 	mov	sp,fp
   20a40:	dfc00417 	ldw	ra,16(sp)
   20a44:	df000317 	ldw	fp,12(sp)
   20a48:	dc800217 	ldw	r18,8(sp)
   20a4c:	dc400117 	ldw	r17,4(sp)
   20a50:	dc000017 	ldw	r16,0(sp)
   20a54:	dec00504 	addi	sp,sp,20
   20a58:	f800283a 	ret

00020a5c <main>:


int main()
{
   20a5c:	defe6e04 	addi	sp,sp,-1608
   20a60:	dfc19115 	stw	ra,1604(sp)
   20a64:	df019015 	stw	fp,1600(sp)
   20a68:	df019004 	addi	fp,sp,1600
	double pi=pow(2,-24) + pow(2,-23);
   20a6c:	e03e7e15 	stw	zero,-1544(fp)
   20a70:	008fa234 	movhi	r2,16008
   20a74:	e0be7f15 	stw	r2,-1540(fp)
  printf("Hello from Nios II! %e\n", pi);
   20a78:	010000f4 	movhi	r4,3
   20a7c:	213a7404 	addi	r4,r4,-5680
   20a80:	e17e7e17 	ldw	r5,-1544(fp)
   20a84:	e1be7f17 	ldw	r6,-1540(fp)
   20a88:	0023f900 	call	23f90 <printf>
  int N=10; // number of hidden layers
   20a8c:	00800284 	movi	r2,10
   20a90:	e0be7d15 	stw	r2,-1548(fp)
  int N_dat = 102; // number of training data
   20a94:	00801984 	movi	r2,102
   20a98:	e0be7c15 	stw	r2,-1552(fp)
  int c=0;
   20a9c:	e03e7b15 	stw	zero,-1556(fp)
  float *b;
  float *y_pk;



  y_pj= (float*)malloc(N * sizeof(float));
   20aa0:	e0be7d17 	ldw	r2,-1548(fp)
   20aa4:	1085883a 	add	r2,r2,r2
   20aa8:	1085883a 	add	r2,r2,r2
   20aac:	1009883a 	mov	r4,r2
   20ab0:	002379c0 	call	2379c <malloc>
   20ab4:	e0be7815 	stw	r2,-1568(fp)
  w_ji = (float*)malloc(N* sizeof(float));;//memory allocation  for hidden w
   20ab8:	e0be7d17 	ldw	r2,-1548(fp)
   20abc:	1085883a 	add	r2,r2,r2
   20ac0:	1085883a 	add	r2,r2,r2
   20ac4:	1009883a 	mov	r4,r2
   20ac8:	002379c0 	call	2379c <malloc>
   20acc:	e0be7a15 	stw	r2,-1560(fp)
  w_kj = (float*)malloc(N* sizeof(float));;//memory allocation  for output w
   20ad0:	e0be7d17 	ldw	r2,-1548(fp)
   20ad4:	1085883a 	add	r2,r2,r2
   20ad8:	1085883a 	add	r2,r2,r2
   20adc:	1009883a 	mov	r4,r2
   20ae0:	002379c0 	call	2379c <malloc>
   20ae4:	e0be7915 	stw	r2,-1564(fp)
  b=(float*)malloc(1* sizeof(float));
   20ae8:	01000104 	movi	r4,4
   20aec:	002379c0 	call	2379c <malloc>
   20af0:	e0be7715 	stw	r2,-1572(fp)
  y_pk=(float*)malloc(1* sizeof(float));
   20af4:	01000104 	movi	r4,4
   20af8:	002379c0 	call	2379c <malloc>
   20afc:	e0be7615 	stw	r2,-1576(fp)
  32.200081,1.800000,32.200081,16.200026,13.800016,33.200066,13.600016,16.400026,35.000038,14.200018,13.600016,16.400026,1.800000,11.800009,12.200010,12.200010,15.000021,1.800000,17.000029,
  16.800028,13.600016,1.800000,1.800000,17.200029,32.200081,13.800016,14.200018,13.600016,14.200018,16.400026,17.200029,32.400078,12.200010,1.800000,1.800000,11.600008,13.600016,13.600016,11.000006,
  13.600016,32.600075,32.400078,1.800000,14.200018,2.000000,11.600008,1.800000,13.600016,32.000084,17.200029,13.600016,39.399971,14.000017,2.000000,33.200066,15.000021,14.000017,11.600008,32.200081,
  13.400015,1.800000,33.600060,19.600039,1.800000,14.200018,17.400030,17.200029,13.600016,17.200029,17.200029,14.200018,13.600016,14.400019,16.400026,17.200029,16.600027,16.400026,13.800016,13.600016,
  6.999996,17.200029,16.400026,32.200081,17.200029,16.400026,14.000017,2.000000,16.400026,17.600031,32.600075,13.800016,17.600031,20.600042,21.000044,2.000000,14.000017,15.000021,13.600016,17.400030,
  14.000017,20.600042,15.000021,11.000006,9.199999,13.600016,12.200010,14.200018,14.200018,13.600016,14.200018,32.200081,23.800055,13.400015,32.200081,17.200029,14.200018,13.600016,17.600031,17.200029,20.800043};
   20b00:	008000f4 	movhi	r2,3
   20b04:	10b9b404 	addi	r2,r2,-6448
   20b08:	e13e8004 	addi	r4,fp,-1536
   20b0c:	100b883a 	mov	r5,r2
   20b10:	0180c004 	movi	r6,768
   20b14:	0023ef00 	call	23ef0 <memcpy>
  float d_pk [192] ;

  for (c=0;c<192;c++) {
   20b18:	e03e7b15 	stw	zero,-1556(fp)
   20b1c:	00002906 	br	20bc4 <main+0x168>
  	if (In [c] < 11.6) d_pk[c]=-1;
   20b20:	e0be7b17 	ldw	r2,-1556(fp)
   20b24:	1085883a 	add	r2,r2,r2
   20b28:	1085883a 	add	r2,r2,r2
   20b2c:	e0fe7404 	addi	r3,fp,-1584
   20b30:	10c5883a 	add	r2,r2,r3
   20b34:	10800c04 	addi	r2,r2,48
   20b38:	10800017 	ldw	r2,0(r2)
   20b3c:	1009883a 	mov	r4,r2
   20b40:	00220080 	call	22008 <__extendsfdf2>
   20b44:	100b883a 	mov	r5,r2
   20b48:	180d883a 	mov	r6,r3
   20b4c:	2809883a 	mov	r4,r5
   20b50:	300b883a 	mov	r5,r6
   20b54:	018cccf4 	movhi	r6,13107
   20b58:	318cccc4 	addi	r6,r6,13107
   20b5c:	01d009f4 	movhi	r7,16423
   20b60:	39ccccc4 	addi	r7,r7,13107
   20b64:	0022c040 	call	22c04 <__ltdf2>
   20b68:	1004803a 	cmplt	r2,r2,zero
   20b6c:	1000011e 	bne	r2,zero,20b74 <main+0x118>
   20b70:	00000906 	br	20b98 <main+0x13c>
   20b74:	e0be7b17 	ldw	r2,-1556(fp)
   20b78:	1085883a 	add	r2,r2,r2
   20b7c:	1085883a 	add	r2,r2,r2
   20b80:	e0fe7404 	addi	r3,fp,-1584
   20b84:	10c5883a 	add	r2,r2,r3
   20b88:	10c0cc04 	addi	r3,r2,816
   20b8c:	00afe034 	movhi	r2,49024
   20b90:	18800015 	stw	r2,0(r3)
   20b94:	00000806 	br	20bb8 <main+0x15c>
  	else d_pk[c]=1;
   20b98:	e0be7b17 	ldw	r2,-1556(fp)
   20b9c:	1085883a 	add	r2,r2,r2
   20ba0:	1085883a 	add	r2,r2,r2
   20ba4:	e0fe7404 	addi	r3,fp,-1584
   20ba8:	10c5883a 	add	r2,r2,r3
   20bac:	10c0cc04 	addi	r3,r2,816
   20bb0:	008fe034 	movhi	r2,16256
   20bb4:	18800015 	stw	r2,0(r3)
  13.400015,1.800000,33.600060,19.600039,1.800000,14.200018,17.400030,17.200029,13.600016,17.200029,17.200029,14.200018,13.600016,14.400019,16.400026,17.200029,16.600027,16.400026,13.800016,13.600016,
  6.999996,17.200029,16.400026,32.200081,17.200029,16.400026,14.000017,2.000000,16.400026,17.600031,32.600075,13.800016,17.600031,20.600042,21.000044,2.000000,14.000017,15.000021,13.600016,17.400030,
  14.000017,20.600042,15.000021,11.000006,9.199999,13.600016,12.200010,14.200018,14.200018,13.600016,14.200018,32.200081,23.800055,13.400015,32.200081,17.200029,14.200018,13.600016,17.600031,17.200029,20.800043};
  float d_pk [192] ;

  for (c=0;c<192;c++) {
   20bb8:	e0be7b17 	ldw	r2,-1556(fp)
   20bbc:	10800044 	addi	r2,r2,1
   20bc0:	e0be7b15 	stw	r2,-1556(fp)
   20bc4:	e0be7b17 	ldw	r2,-1556(fp)
   20bc8:	10803010 	cmplti	r2,r2,192
   20bcc:	103fd41e 	bne	r2,zero,20b20 <main+0xc4>
  	if (In [c] < 11.6) d_pk[c]=-1;
  	else d_pk[c]=1;
  }
  float eta = 0.0000002;  // 0.0000272
   20bd0:	008d15f4 	movhi	r2,13399
   20bd4:	10afe544 	addi	r2,r2,-16491
   20bd8:	e0be7515 	stw	r2,-1580(fp)



  BPA (N,N_dat,eta, In,d_pk, w_ji, w_kj,b);
   20bdc:	e1fe8004 	addi	r7,fp,-1536
   20be0:	e0bf4004 	addi	r2,fp,-768
   20be4:	d8800015 	stw	r2,0(sp)
   20be8:	e0be7a17 	ldw	r2,-1560(fp)
   20bec:	d8800115 	stw	r2,4(sp)
   20bf0:	e0be7917 	ldw	r2,-1564(fp)
   20bf4:	d8800215 	stw	r2,8(sp)
   20bf8:	e0be7717 	ldw	r2,-1572(fp)
   20bfc:	d8800315 	stw	r2,12(sp)
   20c00:	e13e7d17 	ldw	r4,-1548(fp)
   20c04:	e17e7c17 	ldw	r5,-1552(fp)
   20c08:	e1be7517 	ldw	r6,-1580(fp)
   20c0c:	00205bc0 	call	205bc <BPA>


  //testing
  int c2=0;
   20c10:	e03e7415 	stw	zero,-1584(fp)
  for (c2=0;c2<192;c2++) {
   20c14:	e03e7415 	stw	zero,-1584(fp)
   20c18:	00004006 	br	20d1c <main+0x2c0>
  	printf("%f \t", In [c2]);
   20c1c:	e0be7417 	ldw	r2,-1584(fp)
   20c20:	1085883a 	add	r2,r2,r2
   20c24:	1085883a 	add	r2,r2,r2
   20c28:	e0fe7404 	addi	r3,fp,-1584
   20c2c:	10c5883a 	add	r2,r2,r3
   20c30:	10800c04 	addi	r2,r2,48
   20c34:	10800017 	ldw	r2,0(r2)
   20c38:	1009883a 	mov	r4,r2
   20c3c:	00220080 	call	22008 <__extendsfdf2>
   20c40:	100d883a 	mov	r6,r2
   20c44:	180f883a 	mov	r7,r3
   20c48:	010000f4 	movhi	r4,3
   20c4c:	213a7a04 	addi	r4,r4,-5656
   20c50:	300b883a 	mov	r5,r6
   20c54:	380d883a 	mov	r6,r7
   20c58:	0023f900 	call	23f90 <printf>
  	ANN (N,In[c2], w_ji, w_kj,b, y_pj,y_pk);
   20c5c:	e0be7417 	ldw	r2,-1584(fp)
   20c60:	1085883a 	add	r2,r2,r2
   20c64:	1085883a 	add	r2,r2,r2
   20c68:	e0fe7404 	addi	r3,fp,-1584
   20c6c:	10c5883a 	add	r2,r2,r3
   20c70:	10800c04 	addi	r2,r2,48
   20c74:	10c00017 	ldw	r3,0(r2)
   20c78:	e0be7717 	ldw	r2,-1572(fp)
   20c7c:	d8800015 	stw	r2,0(sp)
   20c80:	e0be7817 	ldw	r2,-1568(fp)
   20c84:	d8800115 	stw	r2,4(sp)
   20c88:	e0be7617 	ldw	r2,-1576(fp)
   20c8c:	d8800215 	stw	r2,8(sp)
   20c90:	e13e7d17 	ldw	r4,-1548(fp)
   20c94:	180b883a 	mov	r5,r3
   20c98:	e1be7a17 	ldw	r6,-1560(fp)
   20c9c:	e1fe7917 	ldw	r7,-1564(fp)
   20ca0:	00205440 	call	20544 <ANN>
  	printf ("%f \t", *y_pk);
   20ca4:	e0be7617 	ldw	r2,-1576(fp)
   20ca8:	10800017 	ldw	r2,0(r2)
   20cac:	1009883a 	mov	r4,r2
   20cb0:	00220080 	call	22008 <__extendsfdf2>
   20cb4:	100d883a 	mov	r6,r2
   20cb8:	180f883a 	mov	r7,r3
   20cbc:	010000f4 	movhi	r4,3
   20cc0:	213a7a04 	addi	r4,r4,-5656
   20cc4:	300b883a 	mov	r5,r6
   20cc8:	380d883a 	mov	r6,r7
   20ccc:	0023f900 	call	23f90 <printf>
  	printf ("%f \n", d_pk[c2]);
   20cd0:	e0be7417 	ldw	r2,-1584(fp)
   20cd4:	1085883a 	add	r2,r2,r2
   20cd8:	1085883a 	add	r2,r2,r2
   20cdc:	e0fe7404 	addi	r3,fp,-1584
   20ce0:	10c5883a 	add	r2,r2,r3
   20ce4:	1080cc04 	addi	r2,r2,816
   20ce8:	10800017 	ldw	r2,0(r2)
   20cec:	1009883a 	mov	r4,r2
   20cf0:	00220080 	call	22008 <__extendsfdf2>
   20cf4:	100d883a 	mov	r6,r2
   20cf8:	180f883a 	mov	r7,r3
   20cfc:	010000f4 	movhi	r4,3
   20d00:	213a7c04 	addi	r4,r4,-5648
   20d04:	300b883a 	mov	r5,r6
   20d08:	380d883a 	mov	r6,r7
   20d0c:	0023f900 	call	23f90 <printf>
  BPA (N,N_dat,eta, In,d_pk, w_ji, w_kj,b);


  //testing
  int c2=0;
  for (c2=0;c2<192;c2++) {
   20d10:	e0be7417 	ldw	r2,-1584(fp)
   20d14:	10800044 	addi	r2,r2,1
   20d18:	e0be7415 	stw	r2,-1584(fp)
   20d1c:	e0be7417 	ldw	r2,-1584(fp)
   20d20:	10803010 	cmplti	r2,r2,192
   20d24:	103fbd1e 	bne	r2,zero,20c1c <main+0x1c0>
  	ANN (N,In[c2], w_ji, w_kj,b, y_pj,y_pk);
  	printf ("%f \t", *y_pk);
  	printf ("%f \n", d_pk[c2]);
  }

  c=0;
   20d28:	e03e7b15 	stw	zero,-1556(fp)

  for (c=0;c<N;c++) {
   20d2c:	e03e7b15 	stw	zero,-1556(fp)
   20d30:	00002306 	br	20dc0 <main+0x364>
  	printf (" %f \t", w_ji[c]);
   20d34:	e0be7b17 	ldw	r2,-1556(fp)
   20d38:	1085883a 	add	r2,r2,r2
   20d3c:	1085883a 	add	r2,r2,r2
   20d40:	1007883a 	mov	r3,r2
   20d44:	e0be7a17 	ldw	r2,-1560(fp)
   20d48:	1885883a 	add	r2,r3,r2
   20d4c:	10800017 	ldw	r2,0(r2)
   20d50:	1009883a 	mov	r4,r2
   20d54:	00220080 	call	22008 <__extendsfdf2>
   20d58:	100d883a 	mov	r6,r2
   20d5c:	180f883a 	mov	r7,r3
   20d60:	010000f4 	movhi	r4,3
   20d64:	213a7e04 	addi	r4,r4,-5640
   20d68:	300b883a 	mov	r5,r6
   20d6c:	380d883a 	mov	r6,r7
   20d70:	0023f900 	call	23f90 <printf>
  	printf ("%f \n", w_kj[c]);
   20d74:	e0be7b17 	ldw	r2,-1556(fp)
   20d78:	1085883a 	add	r2,r2,r2
   20d7c:	1085883a 	add	r2,r2,r2
   20d80:	1007883a 	mov	r3,r2
   20d84:	e0be7917 	ldw	r2,-1564(fp)
   20d88:	1885883a 	add	r2,r3,r2
   20d8c:	10800017 	ldw	r2,0(r2)
   20d90:	1009883a 	mov	r4,r2
   20d94:	00220080 	call	22008 <__extendsfdf2>
   20d98:	100d883a 	mov	r6,r2
   20d9c:	180f883a 	mov	r7,r3
   20da0:	010000f4 	movhi	r4,3
   20da4:	213a7c04 	addi	r4,r4,-5648
   20da8:	300b883a 	mov	r5,r6
   20dac:	380d883a 	mov	r6,r7
   20db0:	0023f900 	call	23f90 <printf>
  	printf ("%f \n", d_pk[c2]);
  }

  c=0;

  for (c=0;c<N;c++) {
   20db4:	e0be7b17 	ldw	r2,-1556(fp)
   20db8:	10800044 	addi	r2,r2,1
   20dbc:	e0be7b15 	stw	r2,-1556(fp)
   20dc0:	e0fe7b17 	ldw	r3,-1556(fp)
   20dc4:	e0be7d17 	ldw	r2,-1548(fp)
   20dc8:	18bfda16 	blt	r3,r2,20d34 <main+0x2d8>
  	printf (" %f \t", w_ji[c]);
  	printf ("%f \n", w_kj[c]);
  }
  printf("b= %f \n",*b);
   20dcc:	e0be7717 	ldw	r2,-1572(fp)
   20dd0:	10800017 	ldw	r2,0(r2)
   20dd4:	1009883a 	mov	r4,r2
   20dd8:	00220080 	call	22008 <__extendsfdf2>
   20ddc:	100d883a 	mov	r6,r2
   20de0:	180f883a 	mov	r7,r3
   20de4:	010000f4 	movhi	r4,3
   20de8:	213a8004 	addi	r4,r4,-5632
   20dec:	300b883a 	mov	r5,r6
   20df0:	380d883a 	mov	r6,r7
   20df4:	0023f900 	call	23f90 <printf>


  return 0;
   20df8:	0005883a 	mov	r2,zero
}
   20dfc:	e037883a 	mov	sp,fp
   20e00:	dfc00117 	ldw	ra,4(sp)
   20e04:	df000017 	ldw	fp,0(sp)
   20e08:	dec00204 	addi	sp,sp,8
   20e0c:	f800283a 	ret

00020e10 <tanh>:
   20e10:	00a00034 	movhi	r2,32768
   20e14:	10bfffc4 	addi	r2,r2,-1
   20e18:	defffa04 	addi	sp,sp,-24
   20e1c:	288c703a 	and	r6,r5,r2
   20e20:	009ffc34 	movhi	r2,32752
   20e24:	10bfffc4 	addi	r2,r2,-1
   20e28:	dd000415 	stw	r20,16(sp)
   20e2c:	dcc00315 	stw	r19,12(sp)
   20e30:	dc800215 	stw	r18,8(sp)
   20e34:	dfc00515 	stw	ra,20(sp)
   20e38:	dc400115 	stw	r17,4(sp)
   20e3c:	dc000015 	stw	r16,0(sp)
   20e40:	2025883a 	mov	r18,r4
   20e44:	2827883a 	mov	r19,r5
   20e48:	2829883a 	mov	r20,r5
   20e4c:	1180190e 	bge	r2,r6,20eb4 <tanh+0xa4>
   20e50:	28005616 	blt	r5,zero,20fac <tanh+0x19c>
   20e54:	044ffc34 	movhi	r17,16368
   20e58:	0021883a 	mov	r16,zero
   20e5c:	280f883a 	mov	r7,r5
   20e60:	8009883a 	mov	r4,r16
   20e64:	880b883a 	mov	r5,r17
   20e68:	900d883a 	mov	r6,r18
   20e6c:	00229240 	call	22924 <__divdf3>
   20e70:	180b883a 	mov	r5,r3
   20e74:	000d883a 	mov	r6,zero
   20e78:	880f883a 	mov	r7,r17
   20e7c:	1009883a 	mov	r4,r2
   20e80:	00224ec0 	call	224ec <__adddf3>
   20e84:	100d883a 	mov	r6,r2
   20e88:	180f883a 	mov	r7,r3
   20e8c:	3005883a 	mov	r2,r6
   20e90:	3807883a 	mov	r3,r7
   20e94:	dfc00517 	ldw	ra,20(sp)
   20e98:	dd000417 	ldw	r20,16(sp)
   20e9c:	dcc00317 	ldw	r19,12(sp)
   20ea0:	dc800217 	ldw	r18,8(sp)
   20ea4:	dc400117 	ldw	r17,4(sp)
   20ea8:	dc000017 	ldw	r16,0(sp)
   20eac:	dec00604 	addi	sp,sp,24
   20eb0:	f800283a 	ret
   20eb4:	00900db4 	movhi	r2,16438
   20eb8:	10bfffc4 	addi	r2,r2,-1
   20ebc:	11802a16 	blt	r2,r6,20f68 <tanh+0x158>
   20ec0:	008f2034 	movhi	r2,15488
   20ec4:	10bfffc4 	addi	r2,r2,-1
   20ec8:	11802b0e 	bge	r2,r6,20f78 <tanh+0x168>
   20ecc:	008ffc34 	movhi	r2,16368
   20ed0:	10bfffc4 	addi	r2,r2,-1
   20ed4:	1180440e 	bge	r2,r6,20fe8 <tanh+0x1d8>
   20ed8:	002194c0 	call	2194c <fabs>
   20edc:	180f883a 	mov	r7,r3
   20ee0:	100d883a 	mov	r6,r2
   20ee4:	1009883a 	mov	r4,r2
   20ee8:	180b883a 	mov	r5,r3
   20eec:	00224ec0 	call	224ec <__adddf3>
   20ef0:	180b883a 	mov	r5,r3
   20ef4:	1009883a 	mov	r4,r2
   20ef8:	002105c0 	call	2105c <expm1>
   20efc:	0011883a 	mov	r8,zero
   20f00:	02500034 	movhi	r9,16384
   20f04:	480f883a 	mov	r7,r9
   20f08:	400d883a 	mov	r6,r8
   20f0c:	180b883a 	mov	r5,r3
   20f10:	1009883a 	mov	r4,r2
   20f14:	00224ec0 	call	224ec <__adddf3>
   20f18:	0011883a 	mov	r8,zero
   20f1c:	02700034 	movhi	r9,49152
   20f20:	480b883a 	mov	r5,r9
   20f24:	4009883a 	mov	r4,r8
   20f28:	180f883a 	mov	r7,r3
   20f2c:	100d883a 	mov	r6,r2
   20f30:	00229240 	call	22924 <__divdf3>
   20f34:	0011883a 	mov	r8,zero
   20f38:	024ffc34 	movhi	r9,16368
   20f3c:	480f883a 	mov	r7,r9
   20f40:	400d883a 	mov	r6,r8
   20f44:	180b883a 	mov	r5,r3
   20f48:	1009883a 	mov	r4,r2
   20f4c:	00224ec0 	call	224ec <__adddf3>
   20f50:	100d883a 	mov	r6,r2
   20f54:	180f883a 	mov	r7,r3
   20f58:	a03fcc0e 	bge	r20,zero,20e8c <tanh+0x7c>
   20f5c:	38e0003c 	xorhi	r3,r7,32768
   20f60:	180f883a 	mov	r7,r3
   20f64:	003fc906 	br	20e8c <tanh+0x7c>
   20f68:	000d883a 	mov	r6,zero
   20f6c:	01cffc34 	movhi	r7,16368
   20f70:	a03fc60e 	bge	r20,zero,20e8c <tanh+0x7c>
   20f74:	003ff906 	br	20f5c <tanh+0x14c>
   20f78:	0005883a 	mov	r2,zero
   20f7c:	00cffc34 	movhi	r3,16368
   20f80:	180f883a 	mov	r7,r3
   20f84:	100d883a 	mov	r6,r2
   20f88:	00224ec0 	call	224ec <__adddf3>
   20f8c:	180f883a 	mov	r7,r3
   20f90:	100d883a 	mov	r6,r2
   20f94:	980b883a 	mov	r5,r19
   20f98:	9009883a 	mov	r4,r18
   20f9c:	00225600 	call	22560 <__muldf3>
   20fa0:	100d883a 	mov	r6,r2
   20fa4:	180f883a 	mov	r7,r3
   20fa8:	003fb806 	br	20e8c <tanh+0x7c>
   20fac:	044ffc34 	movhi	r17,16368
   20fb0:	0021883a 	mov	r16,zero
   20fb4:	280f883a 	mov	r7,r5
   20fb8:	8009883a 	mov	r4,r16
   20fbc:	880b883a 	mov	r5,r17
   20fc0:	900d883a 	mov	r6,r18
   20fc4:	00229240 	call	22924 <__divdf3>
   20fc8:	180b883a 	mov	r5,r3
   20fcc:	000d883a 	mov	r6,zero
   20fd0:	880f883a 	mov	r7,r17
   20fd4:	1009883a 	mov	r4,r2
   20fd8:	002246c0 	call	2246c <__subdf3>
   20fdc:	100d883a 	mov	r6,r2
   20fe0:	180f883a 	mov	r7,r3
   20fe4:	003fa906 	br	20e8c <tanh+0x7c>
   20fe8:	002194c0 	call	2194c <fabs>
   20fec:	0011883a 	mov	r8,zero
   20ff0:	02700034 	movhi	r9,49152
   20ff4:	480f883a 	mov	r7,r9
   20ff8:	400d883a 	mov	r6,r8
   20ffc:	180b883a 	mov	r5,r3
   21000:	1009883a 	mov	r4,r2
   21004:	00225600 	call	22560 <__muldf3>
   21008:	180b883a 	mov	r5,r3
   2100c:	1009883a 	mov	r4,r2
   21010:	002105c0 	call	2105c <expm1>
   21014:	0015883a 	mov	r10,zero
   21018:	02d00034 	movhi	r11,16384
   2101c:	580f883a 	mov	r7,r11
   21020:	500d883a 	mov	r6,r10
   21024:	180b883a 	mov	r5,r3
   21028:	1009883a 	mov	r4,r2
   2102c:	1021883a 	mov	r16,r2
   21030:	1c60003c 	xorhi	r17,r3,32768
   21034:	00224ec0 	call	224ec <__adddf3>
   21038:	180f883a 	mov	r7,r3
   2103c:	100d883a 	mov	r6,r2
   21040:	880b883a 	mov	r5,r17
   21044:	8009883a 	mov	r4,r16
   21048:	00229240 	call	22924 <__divdf3>
   2104c:	100d883a 	mov	r6,r2
   21050:	180f883a 	mov	r7,r3
   21054:	a03f8d0e 	bge	r20,zero,20e8c <tanh+0x7c>
   21058:	003fc006 	br	20f5c <tanh+0x14c>

0002105c <expm1>:
   2105c:	deffea04 	addi	sp,sp,-88
   21060:	00a00034 	movhi	r2,32768
   21064:	10bfffc4 	addi	r2,r2,-1
   21068:	d9000415 	stw	r4,16(sp)
   2106c:	2890703a 	and	r8,r5,r2
   21070:	0009883a 	mov	r4,zero
   21074:	009010f4 	movhi	r2,16451
   21078:	109a1e44 	addi	r2,r2,26745
   2107c:	dc000c15 	stw	r16,48(sp)
   21080:	dfc01515 	stw	ra,84(sp)
   21084:	df001415 	stw	fp,80(sp)
   21088:	ddc01315 	stw	r23,76(sp)
   2108c:	dd801215 	stw	r22,72(sp)
   21090:	dd401115 	stw	r21,68(sp)
   21094:	dd001015 	stw	r20,64(sp)
   21098:	dcc00f15 	stw	r19,60(sp)
   2109c:	dc800e15 	stw	r18,56(sp)
   210a0:	dc400d15 	stw	r17,52(sp)
   210a4:	d9400515 	stw	r5,20(sp)
   210a8:	d9000215 	stw	r4,8(sp)
   210ac:	d9000315 	stw	r4,12(sp)
   210b0:	2c20002c 	andhi	r16,r5,32768
   210b4:	12010a2e 	bgeu	r2,r8,214e0 <expm1+0x484>
   210b8:	009021b4 	movhi	r2,16518
   210bc:	108b9044 	addi	r2,r2,11841
   210c0:	12012036 	bltu	r2,r8,21544 <expm1+0x4e8>
   210c4:	80012e26 	beq	r16,zero,21580 <expm1+0x524>
   210c8:	d9000417 	ldw	r4,16(sp)
   210cc:	d9400517 	ldw	r5,20(sp)
   210d0:	00b0be74 	movhi	r2,49913
   210d4:	10bcd644 	addi	r2,r2,-3239
   210d8:	00c06974 	movhi	r3,421
   210dc:	18db87c4 	addi	r3,r3,28191
   210e0:	180f883a 	mov	r7,r3
   210e4:	100d883a 	mov	r6,r2
   210e8:	00224ec0 	call	224ec <__adddf3>
   210ec:	180b883a 	mov	r5,r3
   210f0:	000d883a 	mov	r6,zero
   210f4:	000f883a 	mov	r7,zero
   210f8:	1009883a 	mov	r4,r2
   210fc:	0022c040 	call	22c04 <__ltdf2>
   21100:	1001e616 	blt	r2,zero,2189c <expm1+0x840>
   21104:	d9000417 	ldw	r4,16(sp)
   21108:	d9400517 	ldw	r5,20(sp)
   2110c:	00994b34 	movhi	r2,25900
   21110:	10a0bf84 	addi	r2,r2,-32002
   21114:	00cffdf4 	movhi	r3,16375
   21118:	18c551c4 	addi	r3,r3,5447
   2111c:	180f883a 	mov	r7,r3
   21120:	100d883a 	mov	r6,r2
   21124:	00225600 	call	22560 <__muldf3>
   21128:	1011883a 	mov	r8,r2
   2112c:	1813883a 	mov	r9,r3
   21130:	0005883a 	mov	r2,zero
   21134:	00eff834 	movhi	r3,49120
   21138:	480f883a 	mov	r7,r9
   2113c:	400d883a 	mov	r6,r8
   21140:	180b883a 	mov	r5,r3
   21144:	1009883a 	mov	r4,r2
   21148:	00224ec0 	call	224ec <__adddf3>
   2114c:	180b883a 	mov	r5,r3
   21150:	1009883a 	mov	r4,r2
   21154:	0022d840 	call	22d84 <__fixdfsi>
   21158:	1009883a 	mov	r4,r2
   2115c:	1039883a 	mov	fp,r2
   21160:	0022c8c0 	call	22c8c <__floatsidf>
   21164:	1021883a 	mov	r16,r2
   21168:	1823883a 	mov	r17,r3
   2116c:	00bfb834 	movhi	r2,65248
   21170:	00eff9b4 	movhi	r3,49126
   21174:	18cb9084 	addi	r3,r3,11842
   21178:	8009883a 	mov	r4,r16
   2117c:	880b883a 	mov	r5,r17
   21180:	180f883a 	mov	r7,r3
   21184:	100d883a 	mov	r6,r2
   21188:	00225600 	call	22560 <__muldf3>
   2118c:	d9400517 	ldw	r5,20(sp)
   21190:	d9000417 	ldw	r4,16(sp)
   21194:	180f883a 	mov	r7,r3
   21198:	100d883a 	mov	r6,r2
   2119c:	00224ec0 	call	224ec <__adddf3>
   211a0:	020d5e74 	movhi	r8,13689
   211a4:	420f1d84 	addi	r8,r8,15478
   211a8:	024f7ab4 	movhi	r9,15850
   211ac:	4a4e7bc4 	addi	r9,r9,14831
   211b0:	8009883a 	mov	r4,r16
   211b4:	880b883a 	mov	r5,r17
   211b8:	480f883a 	mov	r7,r9
   211bc:	400d883a 	mov	r6,r8
   211c0:	1025883a 	mov	r18,r2
   211c4:	1827883a 	mov	r19,r3
   211c8:	00225600 	call	22560 <__muldf3>
   211cc:	1021883a 	mov	r16,r2
   211d0:	1823883a 	mov	r17,r3
   211d4:	9009883a 	mov	r4,r18
   211d8:	980b883a 	mov	r5,r19
   211dc:	800d883a 	mov	r6,r16
   211e0:	880f883a 	mov	r7,r17
   211e4:	002246c0 	call	2246c <__subdf3>
   211e8:	180f883a 	mov	r7,r3
   211ec:	980b883a 	mov	r5,r19
   211f0:	9009883a 	mov	r4,r18
   211f4:	100d883a 	mov	r6,r2
   211f8:	d8800415 	stw	r2,16(sp)
   211fc:	d8c00515 	stw	r3,20(sp)
   21200:	002246c0 	call	2246c <__subdf3>
   21204:	180b883a 	mov	r5,r3
   21208:	880f883a 	mov	r7,r17
   2120c:	1009883a 	mov	r4,r2
   21210:	800d883a 	mov	r6,r16
   21214:	002246c0 	call	2246c <__subdf3>
   21218:	d8800215 	stw	r2,8(sp)
   2121c:	d8c00315 	stw	r3,12(sp)
   21220:	018ff834 	movhi	r6,16352
   21224:	d9800715 	stw	r6,28(sp)
   21228:	0009883a 	mov	r4,zero
   2122c:	d9000615 	stw	r4,24(sp)
   21230:	d9400517 	ldw	r5,20(sp)
   21234:	d9000417 	ldw	r4,16(sp)
   21238:	d9c00717 	ldw	r7,28(sp)
   2123c:	000d883a 	mov	r6,zero
   21240:	00225600 	call	22560 <__muldf3>
   21244:	d9000417 	ldw	r4,16(sp)
   21248:	d9400517 	ldw	r5,20(sp)
   2124c:	100d883a 	mov	r6,r2
   21250:	180f883a 	mov	r7,r3
   21254:	1021883a 	mov	r16,r2
   21258:	1823883a 	mov	r17,r3
   2125c:	00225600 	call	22560 <__muldf3>
   21260:	1009883a 	mov	r4,r2
   21264:	180d883a 	mov	r6,r3
   21268:	d8800815 	stw	r2,32(sp)
   2126c:	d8c00915 	stw	r3,36(sp)
   21270:	d8800015 	stw	r2,0(sp)
   21274:	d8c00115 	stw	r3,4(sp)
   21278:	009b82b4 	movhi	r2,28170
   2127c:	10b0cb44 	addi	r2,r2,-15571
   21280:	00efa2f4 	movhi	r3,48779
   21284:	18ff6dc4 	addi	r3,r3,-585
   21288:	300b883a 	mov	r5,r6
   2128c:	180f883a 	mov	r7,r3
   21290:	100d883a 	mov	r6,r2
   21294:	00225600 	call	22560 <__muldf3>
   21298:	0221b9b4 	movhi	r8,34534
   2129c:	42148e44 	addi	r8,r8,21049
   212a0:	024fb474 	movhi	r9,16081
   212a4:	4a73f284 	addi	r9,r9,-12342
   212a8:	480f883a 	mov	r7,r9
   212ac:	400d883a 	mov	r6,r8
   212b0:	180b883a 	mov	r5,r3
   212b4:	1009883a 	mov	r4,r2
   212b8:	00224ec0 	call	224ec <__adddf3>
   212bc:	d9000017 	ldw	r4,0(sp)
   212c0:	d9400917 	ldw	r5,36(sp)
   212c4:	180f883a 	mov	r7,r3
   212c8:	100d883a 	mov	r6,r2
   212cc:	00225600 	call	22560 <__muldf3>
   212d0:	0227aaf4 	movhi	r8,40619
   212d4:	4236edc4 	addi	r8,r8,-9289
   212d8:	024fc574 	movhi	r9,16149
   212dc:	4a738644 	addi	r9,r9,-12775
   212e0:	480f883a 	mov	r7,r9
   212e4:	400d883a 	mov	r6,r8
   212e8:	180b883a 	mov	r5,r3
   212ec:	1009883a 	mov	r4,r2
   212f0:	002246c0 	call	2246c <__subdf3>
   212f4:	d9000017 	ldw	r4,0(sp)
   212f8:	d9400917 	ldw	r5,36(sp)
   212fc:	180f883a 	mov	r7,r3
   21300:	100d883a 	mov	r6,r2
   21304:	00225600 	call	22560 <__muldf3>
   21308:	02067fb4 	movhi	r8,6654
   2130c:	42156144 	addi	r8,r8,21893
   21310:	024fd6b4 	movhi	r9,16218
   21314:	4a406804 	addi	r9,r9,416
   21318:	480f883a 	mov	r7,r9
   2131c:	400d883a 	mov	r6,r8
   21320:	180b883a 	mov	r5,r3
   21324:	1009883a 	mov	r4,r2
   21328:	00224ec0 	call	224ec <__adddf3>
   2132c:	d9000017 	ldw	r4,0(sp)
   21330:	d9400917 	ldw	r5,36(sp)
   21334:	180f883a 	mov	r7,r3
   21338:	100d883a 	mov	r6,r2
   2133c:	00225600 	call	22560 <__muldf3>
   21340:	02044474 	movhi	r8,4369
   21344:	42043d04 	addi	r8,r8,4340
   21348:	024fe874 	movhi	r9,16289
   2134c:	4a444444 	addi	r9,r9,4369
   21350:	480f883a 	mov	r7,r9
   21354:	400d883a 	mov	r6,r8
   21358:	180b883a 	mov	r5,r3
   2135c:	1009883a 	mov	r4,r2
   21360:	002246c0 	call	2246c <__subdf3>
   21364:	d9000017 	ldw	r4,0(sp)
   21368:	d9400917 	ldw	r5,36(sp)
   2136c:	180f883a 	mov	r7,r3
   21370:	100d883a 	mov	r6,r2
   21374:	00225600 	call	22560 <__muldf3>
   21378:	010ffc34 	movhi	r4,16368
   2137c:	d9000b15 	stw	r4,44(sp)
   21380:	d9c00b17 	ldw	r7,44(sp)
   21384:	100d883a 	mov	r6,r2
   21388:	3009883a 	mov	r4,r6
   2138c:	0005883a 	mov	r2,zero
   21390:	180b883a 	mov	r5,r3
   21394:	000d883a 	mov	r6,zero
   21398:	d8800a15 	stw	r2,40(sp)
   2139c:	00224ec0 	call	224ec <__adddf3>
   213a0:	100d883a 	mov	r6,r2
   213a4:	8009883a 	mov	r4,r16
   213a8:	880b883a 	mov	r5,r17
   213ac:	180f883a 	mov	r7,r3
   213b0:	1029883a 	mov	r20,r2
   213b4:	182b883a 	mov	r21,r3
   213b8:	00225600 	call	22560 <__muldf3>
   213bc:	0011883a 	mov	r8,zero
   213c0:	02500234 	movhi	r9,16392
   213c4:	480b883a 	mov	r5,r9
   213c8:	4009883a 	mov	r4,r8
   213cc:	180f883a 	mov	r7,r3
   213d0:	100d883a 	mov	r6,r2
   213d4:	002246c0 	call	2246c <__subdf3>
   213d8:	100d883a 	mov	r6,r2
   213dc:	a009883a 	mov	r4,r20
   213e0:	a80b883a 	mov	r5,r21
   213e4:	180f883a 	mov	r7,r3
   213e8:	1021883a 	mov	r16,r2
   213ec:	1823883a 	mov	r17,r3
   213f0:	002246c0 	call	2246c <__subdf3>
   213f4:	d9000417 	ldw	r4,16(sp)
   213f8:	d9400517 	ldw	r5,20(sp)
   213fc:	800d883a 	mov	r6,r16
   21400:	880f883a 	mov	r7,r17
   21404:	1021883a 	mov	r16,r2
   21408:	1823883a 	mov	r17,r3
   2140c:	00225600 	call	22560 <__muldf3>
   21410:	0011883a 	mov	r8,zero
   21414:	02500634 	movhi	r9,16408
   21418:	480b883a 	mov	r5,r9
   2141c:	4009883a 	mov	r4,r8
   21420:	180f883a 	mov	r7,r3
   21424:	100d883a 	mov	r6,r2
   21428:	002246c0 	call	2246c <__subdf3>
   2142c:	180f883a 	mov	r7,r3
   21430:	880b883a 	mov	r5,r17
   21434:	8009883a 	mov	r4,r16
   21438:	100d883a 	mov	r6,r2
   2143c:	00229240 	call	22924 <__divdf3>
   21440:	d9000017 	ldw	r4,0(sp)
   21444:	d9400917 	ldw	r5,36(sp)
   21448:	180f883a 	mov	r7,r3
   2144c:	100d883a 	mov	r6,r2
   21450:	00225600 	call	22560 <__muldf3>
   21454:	1009883a 	mov	r4,r2
   21458:	e0008d1e 	bne	fp,zero,21690 <expm1+0x634>
   2145c:	d9000417 	ldw	r4,16(sp)
   21460:	d9400517 	ldw	r5,20(sp)
   21464:	100d883a 	mov	r6,r2
   21468:	180f883a 	mov	r7,r3
   2146c:	00225600 	call	22560 <__muldf3>
   21470:	d9800017 	ldw	r6,0(sp)
   21474:	d9c00917 	ldw	r7,36(sp)
   21478:	180b883a 	mov	r5,r3
   2147c:	1009883a 	mov	r4,r2
   21480:	002246c0 	call	2246c <__subdf3>
   21484:	d9400517 	ldw	r5,20(sp)
   21488:	d9000417 	ldw	r4,16(sp)
   2148c:	180f883a 	mov	r7,r3
   21490:	100d883a 	mov	r6,r2
   21494:	002246c0 	call	2246c <__subdf3>
   21498:	d8800415 	stw	r2,16(sp)
   2149c:	d8c00515 	stw	r3,20(sp)
   214a0:	d9000417 	ldw	r4,16(sp)
   214a4:	d9800517 	ldw	r6,20(sp)
   214a8:	2005883a 	mov	r2,r4
   214ac:	3007883a 	mov	r3,r6
   214b0:	dfc01517 	ldw	ra,84(sp)
   214b4:	df001417 	ldw	fp,80(sp)
   214b8:	ddc01317 	ldw	r23,76(sp)
   214bc:	dd801217 	ldw	r22,72(sp)
   214c0:	dd401117 	ldw	r21,68(sp)
   214c4:	dd001017 	ldw	r20,64(sp)
   214c8:	dcc00f17 	ldw	r19,60(sp)
   214cc:	dc800e17 	ldw	r18,56(sp)
   214d0:	dc400d17 	ldw	r17,52(sp)
   214d4:	dc000c17 	ldw	r16,48(sp)
   214d8:	dec01604 	addi	sp,sp,88
   214dc:	f800283a 	ret
   214e0:	008ff5b4 	movhi	r2,16342
   214e4:	108b9084 	addi	r2,r2,11842
   214e8:	12000536 	bltu	r2,r8,21500 <expm1+0x4a4>
   214ec:	008f2434 	movhi	r2,15504
   214f0:	10bfffc4 	addi	r2,r2,-1
   214f4:	1200432e 	bgeu	r2,r8,21604 <expm1+0x5a8>
   214f8:	0039883a 	mov	fp,zero
   214fc:	003f4806 	br	21220 <expm1+0x1c4>
   21500:	008ffc74 	movhi	r2,16369
   21504:	10a8ac44 	addi	r2,r2,-23887
   21508:	1200512e 	bgeu	r2,r8,21650 <expm1+0x5f4>
   2150c:	d9000417 	ldw	r4,16(sp)
   21510:	00994b34 	movhi	r2,25900
   21514:	10a0bf84 	addi	r2,r2,-32002
   21518:	00cffdf4 	movhi	r3,16375
   2151c:	18c551c4 	addi	r3,r3,5447
   21520:	180f883a 	mov	r7,r3
   21524:	100d883a 	mov	r6,r2
   21528:	00225600 	call	22560 <__muldf3>
   2152c:	1011883a 	mov	r8,r2
   21530:	1813883a 	mov	r9,r3
   21534:	80001d26 	beq	r16,zero,215ac <expm1+0x550>
   21538:	0005883a 	mov	r2,zero
   2153c:	00eff834 	movhi	r3,49120
   21540:	003efd06 	br	21138 <expm1+0xdc>
   21544:	009ffc34 	movhi	r2,32752
   21548:	10bfffc4 	addi	r2,r2,-1
   2154c:	12001a2e 	bgeu	r2,r8,215b8 <expm1+0x55c>
   21550:	d9800417 	ldw	r6,16(sp)
   21554:	01000434 	movhi	r4,16
   21558:	213fffc4 	addi	r4,r4,-1
   2155c:	4108703a 	and	r4,r8,r4
   21560:	2188b03a 	or	r4,r4,r6
   21564:	2000cc26 	beq	r4,zero,21898 <expm1+0x83c>
   21568:	280f883a 	mov	r7,r5
   2156c:	3009883a 	mov	r4,r6
   21570:	00224ec0 	call	224ec <__adddf3>
   21574:	d8800415 	stw	r2,16(sp)
   21578:	d8c00515 	stw	r3,20(sp)
   2157c:	003fc806 	br	214a0 <expm1+0x444>
   21580:	d9000417 	ldw	r4,16(sp)
   21584:	d9400517 	ldw	r5,20(sp)
   21588:	00994b34 	movhi	r2,25900
   2158c:	10a0bf84 	addi	r2,r2,-32002
   21590:	00cffdf4 	movhi	r3,16375
   21594:	18c551c4 	addi	r3,r3,5447
   21598:	180f883a 	mov	r7,r3
   2159c:	100d883a 	mov	r6,r2
   215a0:	00225600 	call	22560 <__muldf3>
   215a4:	1011883a 	mov	r8,r2
   215a8:	1813883a 	mov	r9,r3
   215ac:	0005883a 	mov	r2,zero
   215b0:	00cff834 	movhi	r3,16352
   215b4:	003ee006 	br	21138 <expm1+0xdc>
   215b8:	d9000417 	ldw	r4,16(sp)
   215bc:	00bfbeb4 	movhi	r2,65274
   215c0:	108e7bc4 	addi	r2,r2,14831
   215c4:	00d021b4 	movhi	r3,16518
   215c8:	18cb9084 	addi	r3,r3,11842
   215cc:	180f883a 	mov	r7,r3
   215d0:	100d883a 	mov	r6,r2
   215d4:	0022b7c0 	call	22b7c <__gtdf2>
   215d8:	00beba0e 	bge	zero,r2,210c4 <expm1+0x68>
   215dc:	00a20034 	movhi	r2,34816
   215e0:	109d6704 	addi	r2,r2,30108
   215e4:	00df8e34 	movhi	r3,32312
   215e8:	18f90f04 	addi	r3,r3,-7108
   215ec:	100d883a 	mov	r6,r2
   215f0:	180f883a 	mov	r7,r3
   215f4:	1009883a 	mov	r4,r2
   215f8:	180b883a 	mov	r5,r3
   215fc:	00225600 	call	22560 <__muldf3>
   21600:	003fdc06 	br	21574 <expm1+0x518>
   21604:	d9000417 	ldw	r4,16(sp)
   21608:	00a20034 	movhi	r2,34816
   2160c:	109d6704 	addi	r2,r2,30108
   21610:	00df8e34 	movhi	r3,32312
   21614:	18f90f04 	addi	r3,r3,-7108
   21618:	180f883a 	mov	r7,r3
   2161c:	100d883a 	mov	r6,r2
   21620:	00224ec0 	call	224ec <__adddf3>
   21624:	1009883a 	mov	r4,r2
   21628:	180b883a 	mov	r5,r3
   2162c:	100d883a 	mov	r6,r2
   21630:	180f883a 	mov	r7,r3
   21634:	002246c0 	call	2246c <__subdf3>
   21638:	d9400517 	ldw	r5,20(sp)
   2163c:	d9000417 	ldw	r4,16(sp)
   21640:	180f883a 	mov	r7,r3
   21644:	100d883a 	mov	r6,r2
   21648:	002246c0 	call	2246c <__subdf3>
   2164c:	003fc906 	br	21574 <expm1+0x518>
   21650:	8000821e 	bne	r16,zero,2185c <expm1+0x800>
   21654:	d9000417 	ldw	r4,16(sp)
   21658:	00bfb834 	movhi	r2,65248
   2165c:	00cff9b4 	movhi	r3,16358
   21660:	18cb9084 	addi	r3,r3,11842
   21664:	180f883a 	mov	r7,r3
   21668:	100d883a 	mov	r6,r2
   2166c:	002246c0 	call	2246c <__subdf3>
   21670:	1025883a 	mov	r18,r2
   21674:	040d5e74 	movhi	r16,13689
   21678:	840f1d84 	addi	r16,r16,15478
   2167c:	1827883a 	mov	r19,r3
   21680:	044f7ab4 	movhi	r17,15850
   21684:	8c4e7bc4 	addi	r17,r17,14831
   21688:	07000044 	movi	fp,1
   2168c:	003ed106 	br	211d4 <expm1+0x178>
   21690:	d9800217 	ldw	r6,8(sp)
   21694:	d9c00317 	ldw	r7,12(sp)
   21698:	180b883a 	mov	r5,r3
   2169c:	002246c0 	call	2246c <__subdf3>
   216a0:	d9000417 	ldw	r4,16(sp)
   216a4:	d9400517 	ldw	r5,20(sp)
   216a8:	180f883a 	mov	r7,r3
   216ac:	100d883a 	mov	r6,r2
   216b0:	00225600 	call	22560 <__muldf3>
   216b4:	d9c00317 	ldw	r7,12(sp)
   216b8:	d9800217 	ldw	r6,8(sp)
   216bc:	180b883a 	mov	r5,r3
   216c0:	1009883a 	mov	r4,r2
   216c4:	002246c0 	call	2246c <__subdf3>
   216c8:	d9800017 	ldw	r6,0(sp)
   216cc:	d9c00917 	ldw	r7,36(sp)
   216d0:	1009883a 	mov	r4,r2
   216d4:	180b883a 	mov	r5,r3
   216d8:	002246c0 	call	2246c <__subdf3>
   216dc:	1025883a 	mov	r18,r2
   216e0:	00bfffc4 	movi	r2,-1
   216e4:	1827883a 	mov	r19,r3
   216e8:	e0801a26 	beq	fp,r2,21754 <expm1+0x6f8>
   216ec:	00800044 	movi	r2,1
   216f0:	e0804026 	beq	fp,r2,217f4 <expm1+0x798>
   216f4:	e0c00044 	addi	r3,fp,1
   216f8:	00800e44 	movi	r2,57
   216fc:	10c0282e 	bgeu	r2,r3,217a0 <expm1+0x744>
   21700:	d9c00517 	ldw	r7,20(sp)
   21704:	d9800417 	ldw	r6,16(sp)
   21708:	9009883a 	mov	r4,r18
   2170c:	980b883a 	mov	r5,r19
   21710:	002246c0 	call	2246c <__subdf3>
   21714:	1011883a 	mov	r8,r2
   21718:	d8800b17 	ldw	r2,44(sp)
   2171c:	400d883a 	mov	r6,r8
   21720:	0009883a 	mov	r4,zero
   21724:	100b883a 	mov	r5,r2
   21728:	180f883a 	mov	r7,r3
   2172c:	002246c0 	call	2246c <__subdf3>
   21730:	e016953a 	slli	r11,fp,20
   21734:	1009883a 	mov	r4,r2
   21738:	d8800b17 	ldw	r2,44(sp)
   2173c:	58d7883a 	add	r11,r11,r3
   21740:	000d883a 	mov	r6,zero
   21744:	580b883a 	mov	r5,r11
   21748:	100f883a 	mov	r7,r2
   2174c:	002246c0 	call	2246c <__subdf3>
   21750:	003f5106 	br	21498 <expm1+0x43c>
   21754:	d9400517 	ldw	r5,20(sp)
   21758:	d9000417 	ldw	r4,16(sp)
   2175c:	900d883a 	mov	r6,r18
   21760:	180f883a 	mov	r7,r3
   21764:	002246c0 	call	2246c <__subdf3>
   21768:	1011883a 	mov	r8,r2
   2176c:	d8800717 	ldw	r2,28(sp)
   21770:	4009883a 	mov	r4,r8
   21774:	000d883a 	mov	r6,zero
   21778:	100f883a 	mov	r7,r2
   2177c:	180b883a 	mov	r5,r3
   21780:	00225600 	call	22560 <__muldf3>
   21784:	d9000717 	ldw	r4,28(sp)
   21788:	000d883a 	mov	r6,zero
   2178c:	180b883a 	mov	r5,r3
   21790:	200f883a 	mov	r7,r4
   21794:	1009883a 	mov	r4,r2
   21798:	002246c0 	call	2246c <__subdf3>
   2179c:	003f3e06 	br	21498 <expm1+0x43c>
   217a0:	008004c4 	movi	r2,19
   217a4:	17004216 	blt	r2,fp,218b0 <expm1+0x854>
   217a8:	04400834 	movhi	r17,32
   217ac:	d9c00517 	ldw	r7,20(sp)
   217b0:	d9800417 	ldw	r6,16(sp)
   217b4:	d8800b17 	ldw	r2,44(sp)
   217b8:	8f23d83a 	sra	r17,r17,fp
   217bc:	9009883a 	mov	r4,r18
   217c0:	980b883a 	mov	r5,r19
   217c4:	1463c83a 	sub	r17,r2,r17
   217c8:	002246c0 	call	2246c <__subdf3>
   217cc:	180f883a 	mov	r7,r3
   217d0:	0009883a 	mov	r4,zero
   217d4:	880b883a 	mov	r5,r17
   217d8:	100d883a 	mov	r6,r2
   217dc:	002246c0 	call	2246c <__subdf3>
   217e0:	e010953a 	slli	r8,fp,20
   217e4:	d8800415 	stw	r2,16(sp)
   217e8:	40d1883a 	add	r8,r8,r3
   217ec:	da000515 	stw	r8,20(sp)
   217f0:	003f2b06 	br	214a0 <expm1+0x444>
   217f4:	d9000417 	ldw	r4,16(sp)
   217f8:	d9400517 	ldw	r5,20(sp)
   217fc:	0005883a 	mov	r2,zero
   21800:	00eff434 	movhi	r3,49104
   21804:	180f883a 	mov	r7,r3
   21808:	100d883a 	mov	r6,r2
   2180c:	0022c040 	call	22c04 <__ltdf2>
   21810:	10003b16 	blt	r2,zero,21900 <expm1+0x8a4>
   21814:	d9400517 	ldw	r5,20(sp)
   21818:	d9000417 	ldw	r4,16(sp)
   2181c:	900d883a 	mov	r6,r18
   21820:	980f883a 	mov	r7,r19
   21824:	002246c0 	call	2246c <__subdf3>
   21828:	180f883a 	mov	r7,r3
   2182c:	1009883a 	mov	r4,r2
   21830:	180b883a 	mov	r5,r3
   21834:	100d883a 	mov	r6,r2
   21838:	00224ec0 	call	224ec <__adddf3>
   2183c:	1011883a 	mov	r8,r2
   21840:	d8800b17 	ldw	r2,44(sp)
   21844:	000d883a 	mov	r6,zero
   21848:	180b883a 	mov	r5,r3
   2184c:	100f883a 	mov	r7,r2
   21850:	4009883a 	mov	r4,r8
   21854:	00224ec0 	call	224ec <__adddf3>
   21858:	003f0f06 	br	21498 <expm1+0x43c>
   2185c:	d9000417 	ldw	r4,16(sp)
   21860:	00bfb834 	movhi	r2,65248
   21864:	00cff9b4 	movhi	r3,16358
   21868:	18cb9084 	addi	r3,r3,11842
   2186c:	180f883a 	mov	r7,r3
   21870:	100d883a 	mov	r6,r2
   21874:	00224ec0 	call	224ec <__adddf3>
   21878:	1025883a 	mov	r18,r2
   2187c:	040d5e74 	movhi	r16,13689
   21880:	840f1d84 	addi	r16,r16,15478
   21884:	1827883a 	mov	r19,r3
   21888:	046f7ab4 	movhi	r17,48618
   2188c:	8c4e7bc4 	addi	r17,r17,14831
   21890:	073fffc4 	movi	fp,-1
   21894:	003e4f06 	br	211d4 <expm1+0x178>
   21898:	803f0126 	beq	r16,zero,214a0 <expm1+0x444>
   2189c:	0009883a 	mov	r4,zero
   218a0:	01affc34 	movhi	r6,49136
   218a4:	d9000415 	stw	r4,16(sp)
   218a8:	d9800515 	stw	r6,20(sp)
   218ac:	003efc06 	br	214a0 <expm1+0x444>
   218b0:	00c0ffc4 	movi	r3,1023
   218b4:	1f07c83a 	sub	r3,r3,fp
   218b8:	1806953a 	slli	r3,r3,20
   218bc:	9009883a 	mov	r4,r18
   218c0:	980b883a 	mov	r5,r19
   218c4:	000d883a 	mov	r6,zero
   218c8:	180f883a 	mov	r7,r3
   218cc:	00224ec0 	call	224ec <__adddf3>
   218d0:	d9400517 	ldw	r5,20(sp)
   218d4:	d9000417 	ldw	r4,16(sp)
   218d8:	180f883a 	mov	r7,r3
   218dc:	100d883a 	mov	r6,r2
   218e0:	002246c0 	call	2246c <__subdf3>
   218e4:	1009883a 	mov	r4,r2
   218e8:	d8800b17 	ldw	r2,44(sp)
   218ec:	000d883a 	mov	r6,zero
   218f0:	180b883a 	mov	r5,r3
   218f4:	100f883a 	mov	r7,r2
   218f8:	00224ec0 	call	224ec <__adddf3>
   218fc:	003fb806 	br	217e0 <expm1+0x784>
   21900:	d8800717 	ldw	r2,28(sp)
   21904:	d9400517 	ldw	r5,20(sp)
   21908:	d9000417 	ldw	r4,16(sp)
   2190c:	000d883a 	mov	r6,zero
   21910:	100f883a 	mov	r7,r2
   21914:	00224ec0 	call	224ec <__adddf3>
   21918:	180f883a 	mov	r7,r3
   2191c:	9009883a 	mov	r4,r18
   21920:	980b883a 	mov	r5,r19
   21924:	100d883a 	mov	r6,r2
   21928:	002246c0 	call	2246c <__subdf3>
   2192c:	0011883a 	mov	r8,zero
   21930:	02700034 	movhi	r9,49152
   21934:	180b883a 	mov	r5,r3
   21938:	480f883a 	mov	r7,r9
   2193c:	1009883a 	mov	r4,r2
   21940:	400d883a 	mov	r6,r8
   21944:	00225600 	call	22560 <__muldf3>
   21948:	003ed306 	br	21498 <expm1+0x43c>

0002194c <fabs>:
   2194c:	01e00034 	movhi	r7,32768
   21950:	39ffffc4 	addi	r7,r7,-1
   21954:	394e703a 	and	r7,r7,r5
   21958:	2005883a 	mov	r2,r4
   2195c:	3807883a 	mov	r3,r7
   21960:	f800283a 	ret

00021964 <_fpadd_parts>:
   21964:	21c00017 	ldw	r7,0(r4)
   21968:	02000044 	movi	r8,1
   2196c:	41c0332e 	bgeu	r8,r7,21a3c <_fpadd_parts+0xd8>
   21970:	28800017 	ldw	r2,0(r5)
   21974:	4080462e 	bgeu	r8,r2,21a90 <_fpadd_parts+0x12c>
   21978:	00c00104 	movi	r3,4
   2197c:	38c06b26 	beq	r7,r3,21b2c <_fpadd_parts+0x1c8>
   21980:	10c04326 	beq	r2,r3,21a90 <_fpadd_parts+0x12c>
   21984:	00c00084 	movi	r3,2
   21988:	10c02e26 	beq	r2,r3,21a44 <_fpadd_parts+0xe0>
   2198c:	38c04026 	beq	r7,r3,21a90 <_fpadd_parts+0x12c>
   21990:	22800217 	ldw	r10,8(r4)
   21994:	28c00217 	ldw	r3,8(r5)
   21998:	23000317 	ldw	r12,12(r4)
   2199c:	2a400317 	ldw	r9,12(r5)
   219a0:	50cfc83a 	sub	r7,r10,r3
   219a4:	3817883a 	mov	r11,r7
   219a8:	38004f16 	blt	r7,zero,21ae8 <_fpadd_parts+0x184>
   219ac:	008007c4 	movi	r2,31
   219b0:	11c03316 	blt	r2,r7,21a80 <_fpadd_parts+0x11c>
   219b4:	02c0540e 	bge	zero,r11,21b08 <_fpadd_parts+0x1a4>
   219b8:	41c4983a 	sll	r2,r8,r7
   219bc:	49c6d83a 	srl	r3,r9,r7
   219c0:	10bfffc4 	addi	r2,r2,-1
   219c4:	4884703a 	and	r2,r9,r2
   219c8:	1004c03a 	cmpne	r2,r2,zero
   219cc:	1892b03a 	or	r9,r3,r2
   219d0:	20c00117 	ldw	r3,4(r4)
   219d4:	28800117 	ldw	r2,4(r5)
   219d8:	18803c26 	beq	r3,r2,21acc <_fpadd_parts+0x168>
   219dc:	18002f26 	beq	r3,zero,21a9c <_fpadd_parts+0x138>
   219e0:	4b05c83a 	sub	r2,r9,r12
   219e4:	10004216 	blt	r2,zero,21af0 <_fpadd_parts+0x18c>
   219e8:	32800215 	stw	r10,8(r6)
   219ec:	30800315 	stw	r2,12(r6)
   219f0:	30000115 	stw	zero,4(r6)
   219f4:	31000317 	ldw	r4,12(r6)
   219f8:	01d00034 	movhi	r7,16384
   219fc:	39ffff84 	addi	r7,r7,-2
   21a00:	20bfffc4 	addi	r2,r4,-1
   21a04:	2007883a 	mov	r3,r4
   21a08:	38800836 	bltu	r7,r2,21a2c <_fpadd_parts+0xc8>
   21a0c:	31400217 	ldw	r5,8(r6)
   21a10:	18c9883a 	add	r4,r3,r3
   21a14:	20bfffc4 	addi	r2,r4,-1
   21a18:	297fffc4 	addi	r5,r5,-1
   21a1c:	2007883a 	mov	r3,r4
   21a20:	38bffb2e 	bgeu	r7,r2,21a10 <_fpadd_parts+0xac>
   21a24:	31400215 	stw	r5,8(r6)
   21a28:	31000315 	stw	r4,12(r6)
   21a2c:	008000c4 	movi	r2,3
   21a30:	30800015 	stw	r2,0(r6)
   21a34:	20001b16 	blt	r4,zero,21aa4 <_fpadd_parts+0x140>
   21a38:	3009883a 	mov	r4,r6
   21a3c:	2005883a 	mov	r2,r4
   21a40:	f800283a 	ret
   21a44:	38fffd1e 	bne	r7,r3,21a3c <_fpadd_parts+0xd8>
   21a48:	31c00015 	stw	r7,0(r6)
   21a4c:	20800117 	ldw	r2,4(r4)
   21a50:	30800115 	stw	r2,4(r6)
   21a54:	20c00217 	ldw	r3,8(r4)
   21a58:	30c00215 	stw	r3,8(r6)
   21a5c:	20800317 	ldw	r2,12(r4)
   21a60:	30800315 	stw	r2,12(r6)
   21a64:	20c00117 	ldw	r3,4(r4)
   21a68:	28800117 	ldw	r2,4(r5)
   21a6c:	3009883a 	mov	r4,r6
   21a70:	1886703a 	and	r3,r3,r2
   21a74:	2005883a 	mov	r2,r4
   21a78:	30c00115 	stw	r3,4(r6)
   21a7c:	f800283a 	ret
   21a80:	1a801716 	blt	r3,r10,21ae0 <_fpadd_parts+0x17c>
   21a84:	1815883a 	mov	r10,r3
   21a88:	0019883a 	mov	r12,zero
   21a8c:	003fd006 	br	219d0 <_fpadd_parts+0x6c>
   21a90:	2809883a 	mov	r4,r5
   21a94:	2005883a 	mov	r2,r4
   21a98:	f800283a 	ret
   21a9c:	6245c83a 	sub	r2,r12,r9
   21aa0:	003fd006 	br	219e4 <_fpadd_parts+0x80>
   21aa4:	30800217 	ldw	r2,8(r6)
   21aa8:	2006d07a 	srli	r3,r4,1
   21aac:	2100004c 	andi	r4,r4,1
   21ab0:	10800044 	addi	r2,r2,1
   21ab4:	1906b03a 	or	r3,r3,r4
   21ab8:	3009883a 	mov	r4,r6
   21abc:	30800215 	stw	r2,8(r6)
   21ac0:	2005883a 	mov	r2,r4
   21ac4:	30c00315 	stw	r3,12(r6)
   21ac8:	f800283a 	ret
   21acc:	4b09883a 	add	r4,r9,r12
   21ad0:	30c00115 	stw	r3,4(r6)
   21ad4:	32800215 	stw	r10,8(r6)
   21ad8:	31000315 	stw	r4,12(r6)
   21adc:	003fd306 	br	21a2c <_fpadd_parts+0xc8>
   21ae0:	0013883a 	mov	r9,zero
   21ae4:	003fba06 	br	219d0 <_fpadd_parts+0x6c>
   21ae8:	01cfc83a 	sub	r7,zero,r7
   21aec:	003faf06 	br	219ac <_fpadd_parts+0x48>
   21af0:	0089c83a 	sub	r4,zero,r2
   21af4:	00800044 	movi	r2,1
   21af8:	30800115 	stw	r2,4(r6)
   21afc:	32800215 	stw	r10,8(r6)
   21b00:	31000315 	stw	r4,12(r6)
   21b04:	003fbb06 	br	219f4 <_fpadd_parts+0x90>
   21b08:	583fb126 	beq	r11,zero,219d0 <_fpadd_parts+0x6c>
   21b0c:	41c4983a 	sll	r2,r8,r7
   21b10:	61c6d83a 	srl	r3,r12,r7
   21b14:	51d5883a 	add	r10,r10,r7
   21b18:	10bfffc4 	addi	r2,r2,-1
   21b1c:	6084703a 	and	r2,r12,r2
   21b20:	1004c03a 	cmpne	r2,r2,zero
   21b24:	1898b03a 	or	r12,r3,r2
   21b28:	003fa906 	br	219d0 <_fpadd_parts+0x6c>
   21b2c:	11ffc31e 	bne	r2,r7,21a3c <_fpadd_parts+0xd8>
   21b30:	28c00117 	ldw	r3,4(r5)
   21b34:	20800117 	ldw	r2,4(r4)
   21b38:	10ffc026 	beq	r2,r3,21a3c <_fpadd_parts+0xd8>
   21b3c:	010000f4 	movhi	r4,3
   21b40:	213a8204 	addi	r4,r4,-5624
   21b44:	003fbd06 	br	21a3c <_fpadd_parts+0xd8>

00021b48 <__subsf3>:
   21b48:	deffef04 	addi	sp,sp,-68
   21b4c:	dcc00f15 	stw	r19,60(sp)
   21b50:	dcc00204 	addi	r19,sp,8
   21b54:	dc400e15 	stw	r17,56(sp)
   21b58:	d9000015 	stw	r4,0(sp)
   21b5c:	d9400115 	stw	r5,4(sp)
   21b60:	d809883a 	mov	r4,sp
   21b64:	980b883a 	mov	r5,r19
   21b68:	dc400604 	addi	r17,sp,24
   21b6c:	dfc01015 	stw	ra,64(sp)
   21b70:	00231800 	call	23180 <__unpack_f>
   21b74:	d9000104 	addi	r4,sp,4
   21b78:	880b883a 	mov	r5,r17
   21b7c:	00231800 	call	23180 <__unpack_f>
   21b80:	d8800717 	ldw	r2,28(sp)
   21b84:	9809883a 	mov	r4,r19
   21b88:	880b883a 	mov	r5,r17
   21b8c:	d9800a04 	addi	r6,sp,40
   21b90:	1080005c 	xori	r2,r2,1
   21b94:	d8800715 	stw	r2,28(sp)
   21b98:	00219640 	call	21964 <_fpadd_parts>
   21b9c:	1009883a 	mov	r4,r2
   21ba0:	00230200 	call	23020 <__pack_f>
   21ba4:	dfc01017 	ldw	ra,64(sp)
   21ba8:	dcc00f17 	ldw	r19,60(sp)
   21bac:	dc400e17 	ldw	r17,56(sp)
   21bb0:	dec01104 	addi	sp,sp,68
   21bb4:	f800283a 	ret

00021bb8 <__addsf3>:
   21bb8:	deffef04 	addi	sp,sp,-68
   21bbc:	dcc00f15 	stw	r19,60(sp)
   21bc0:	dcc00204 	addi	r19,sp,8
   21bc4:	dc400e15 	stw	r17,56(sp)
   21bc8:	d9000015 	stw	r4,0(sp)
   21bcc:	d9400115 	stw	r5,4(sp)
   21bd0:	d809883a 	mov	r4,sp
   21bd4:	980b883a 	mov	r5,r19
   21bd8:	dc400604 	addi	r17,sp,24
   21bdc:	dfc01015 	stw	ra,64(sp)
   21be0:	00231800 	call	23180 <__unpack_f>
   21be4:	d9000104 	addi	r4,sp,4
   21be8:	880b883a 	mov	r5,r17
   21bec:	00231800 	call	23180 <__unpack_f>
   21bf0:	d9800a04 	addi	r6,sp,40
   21bf4:	9809883a 	mov	r4,r19
   21bf8:	880b883a 	mov	r5,r17
   21bfc:	00219640 	call	21964 <_fpadd_parts>
   21c00:	1009883a 	mov	r4,r2
   21c04:	00230200 	call	23020 <__pack_f>
   21c08:	dfc01017 	ldw	ra,64(sp)
   21c0c:	dcc00f17 	ldw	r19,60(sp)
   21c10:	dc400e17 	ldw	r17,56(sp)
   21c14:	dec01104 	addi	sp,sp,68
   21c18:	f800283a 	ret

00021c1c <__mulsf3>:
   21c1c:	deffef04 	addi	sp,sp,-68
   21c20:	dc400f15 	stw	r17,60(sp)
   21c24:	dc400204 	addi	r17,sp,8
   21c28:	dc000e15 	stw	r16,56(sp)
   21c2c:	d9000015 	stw	r4,0(sp)
   21c30:	d9400115 	stw	r5,4(sp)
   21c34:	d809883a 	mov	r4,sp
   21c38:	880b883a 	mov	r5,r17
   21c3c:	dc000604 	addi	r16,sp,24
   21c40:	dfc01015 	stw	ra,64(sp)
   21c44:	00231800 	call	23180 <__unpack_f>
   21c48:	d9000104 	addi	r4,sp,4
   21c4c:	800b883a 	mov	r5,r16
   21c50:	00231800 	call	23180 <__unpack_f>
   21c54:	d9000217 	ldw	r4,8(sp)
   21c58:	00800044 	movi	r2,1
   21c5c:	01400104 	movi	r5,4
   21c60:	1100142e 	bgeu	r2,r4,21cb4 <__mulsf3+0x98>
   21c64:	d8c00617 	ldw	r3,24(sp)
   21c68:	10c0052e 	bgeu	r2,r3,21c80 <__mulsf3+0x64>
   21c6c:	21400f26 	beq	r4,r5,21cac <__mulsf3+0x90>
   21c70:	19405d26 	beq	r3,r5,21de8 <__mulsf3+0x1cc>
   21c74:	00800084 	movi	r2,2
   21c78:	20800e26 	beq	r4,r2,21cb4 <__mulsf3+0x98>
   21c7c:	1880181e 	bne	r3,r2,21ce0 <__mulsf3+0xc4>
   21c80:	d8c00717 	ldw	r3,28(sp)
   21c84:	d8800317 	ldw	r2,12(sp)
   21c88:	8009883a 	mov	r4,r16
   21c8c:	10c4c03a 	cmpne	r2,r2,r3
   21c90:	d8800715 	stw	r2,28(sp)
   21c94:	00230200 	call	23020 <__pack_f>
   21c98:	dfc01017 	ldw	ra,64(sp)
   21c9c:	dc400f17 	ldw	r17,60(sp)
   21ca0:	dc000e17 	ldw	r16,56(sp)
   21ca4:	dec01104 	addi	sp,sp,68
   21ca8:	f800283a 	ret
   21cac:	00800084 	movi	r2,2
   21cb0:	18804f26 	beq	r3,r2,21df0 <__mulsf3+0x1d4>
   21cb4:	d8800317 	ldw	r2,12(sp)
   21cb8:	d8c00717 	ldw	r3,28(sp)
   21cbc:	8809883a 	mov	r4,r17
   21cc0:	10c4c03a 	cmpne	r2,r2,r3
   21cc4:	d8800315 	stw	r2,12(sp)
   21cc8:	00230200 	call	23020 <__pack_f>
   21ccc:	dfc01017 	ldw	ra,64(sp)
   21cd0:	dc400f17 	ldw	r17,60(sp)
   21cd4:	dc000e17 	ldw	r16,56(sp)
   21cd8:	dec01104 	addi	sp,sp,68
   21cdc:	f800283a 	ret
   21ce0:	d8800517 	ldw	r2,20(sp)
   21ce4:	da000917 	ldw	r8,36(sp)
   21ce8:	0013883a 	mov	r9,zero
   21cec:	0007883a 	mov	r3,zero
   21cf0:	480f883a 	mov	r7,r9
   21cf4:	180b883a 	mov	r5,r3
   21cf8:	400d883a 	mov	r6,r8
   21cfc:	1009883a 	mov	r4,r2
   21d00:	0022f080 	call	22f08 <__muldi3>
   21d04:	da800417 	ldw	r10,16(sp)
   21d08:	d9800817 	ldw	r6,32(sp)
   21d0c:	da400317 	ldw	r9,12(sp)
   21d10:	52800084 	addi	r10,r10,2
   21d14:	3295883a 	add	r10,r6,r10
   21d18:	d9800717 	ldw	r6,28(sp)
   21d1c:	180b883a 	mov	r5,r3
   21d20:	180f883a 	mov	r7,r3
   21d24:	4992c03a 	cmpne	r9,r9,r6
   21d28:	da400b15 	stw	r9,44(sp)
   21d2c:	1007883a 	mov	r3,r2
   21d30:	da800c15 	stw	r10,48(sp)
   21d34:	2800070e 	bge	r5,zero,21d54 <__mulsf3+0x138>
   21d38:	2880004c 	andi	r2,r5,1
   21d3c:	1005003a 	cmpeq	r2,r2,zero
   21d40:	500d883a 	mov	r6,r10
   21d44:	10001e26 	beq	r2,zero,21dc0 <__mulsf3+0x1a4>
   21d48:	380ed07a 	srli	r7,r7,1
   21d4c:	31800044 	addi	r6,r6,1
   21d50:	d9800c15 	stw	r6,48(sp)
   21d54:	01100034 	movhi	r4,16384
   21d58:	213fffc4 	addi	r4,r4,-1
   21d5c:	21c00b36 	bltu	r4,r7,21d8c <__mulsf3+0x170>
   21d60:	d8800c17 	ldw	r2,48(sp)
   21d64:	00000206 	br	21d70 <__mulsf3+0x154>
   21d68:	18c7883a 	add	r3,r3,r3
   21d6c:	21c00636 	bltu	r4,r7,21d88 <__mulsf3+0x16c>
   21d70:	10bfffc4 	addi	r2,r2,-1
   21d74:	39cf883a 	add	r7,r7,r7
   21d78:	183ffb0e 	bge	r3,zero,21d68 <__mulsf3+0x14c>
   21d7c:	39c00054 	ori	r7,r7,1
   21d80:	18c7883a 	add	r3,r3,r3
   21d84:	21fffa2e 	bgeu	r4,r7,21d70 <__mulsf3+0x154>
   21d88:	d8800c15 	stw	r2,48(sp)
   21d8c:	39001fcc 	andi	r4,r7,127
   21d90:	00801004 	movi	r2,64
   21d94:	20800d26 	beq	r4,r2,21dcc <__mulsf3+0x1b0>
   21d98:	008000c4 	movi	r2,3
   21d9c:	d9000a04 	addi	r4,sp,40
   21da0:	d9c00d15 	stw	r7,52(sp)
   21da4:	d8800a15 	stw	r2,40(sp)
   21da8:	00230200 	call	23020 <__pack_f>
   21dac:	dfc01017 	ldw	ra,64(sp)
   21db0:	dc400f17 	ldw	r17,60(sp)
   21db4:	dc000e17 	ldw	r16,56(sp)
   21db8:	dec01104 	addi	sp,sp,68
   21dbc:	f800283a 	ret
   21dc0:	1804d07a 	srli	r2,r3,1
   21dc4:	10e00034 	orhi	r3,r2,32768
   21dc8:	003fdf06 	br	21d48 <__mulsf3+0x12c>
   21dcc:	3880200c 	andi	r2,r7,128
   21dd0:	103ff11e 	bne	r2,zero,21d98 <__mulsf3+0x17c>
   21dd4:	183ff026 	beq	r3,zero,21d98 <__mulsf3+0x17c>
   21dd8:	3907883a 	add	r3,r7,r4
   21ddc:	00bfe004 	movi	r2,-128
   21de0:	188e703a 	and	r7,r3,r2
   21de4:	003fec06 	br	21d98 <__mulsf3+0x17c>
   21de8:	00800084 	movi	r2,2
   21dec:	20bfa41e 	bne	r4,r2,21c80 <__mulsf3+0x64>
   21df0:	010000f4 	movhi	r4,3
   21df4:	213a8204 	addi	r4,r4,-5624
   21df8:	003fb306 	br	21cc8 <__mulsf3+0xac>

00021dfc <__divsf3>:
   21dfc:	defff304 	addi	sp,sp,-52
   21e00:	dc400b15 	stw	r17,44(sp)
   21e04:	dc400204 	addi	r17,sp,8
   21e08:	dc000a15 	stw	r16,40(sp)
   21e0c:	d9000015 	stw	r4,0(sp)
   21e10:	d9400115 	stw	r5,4(sp)
   21e14:	d809883a 	mov	r4,sp
   21e18:	880b883a 	mov	r5,r17
   21e1c:	dc000604 	addi	r16,sp,24
   21e20:	dfc00c15 	stw	ra,48(sp)
   21e24:	00231800 	call	23180 <__unpack_f>
   21e28:	d9000104 	addi	r4,sp,4
   21e2c:	800b883a 	mov	r5,r16
   21e30:	00231800 	call	23180 <__unpack_f>
   21e34:	d9000217 	ldw	r4,8(sp)
   21e38:	00800044 	movi	r2,1
   21e3c:	01800104 	movi	r6,4
   21e40:	11000a2e 	bgeu	r2,r4,21e6c <__divsf3+0x70>
   21e44:	d9400617 	ldw	r5,24(sp)
   21e48:	1140432e 	bgeu	r2,r5,21f58 <__divsf3+0x15c>
   21e4c:	d8800317 	ldw	r2,12(sp)
   21e50:	d8c00717 	ldw	r3,28(sp)
   21e54:	10c4f03a 	xor	r2,r2,r3
   21e58:	d8800315 	stw	r2,12(sp)
   21e5c:	21800226 	beq	r4,r6,21e68 <__divsf3+0x6c>
   21e60:	00800084 	movi	r2,2
   21e64:	2080101e 	bne	r4,r2,21ea8 <__divsf3+0xac>
   21e68:	29000726 	beq	r5,r4,21e88 <__divsf3+0x8c>
   21e6c:	8809883a 	mov	r4,r17
   21e70:	00230200 	call	23020 <__pack_f>
   21e74:	dfc00c17 	ldw	ra,48(sp)
   21e78:	dc400b17 	ldw	r17,44(sp)
   21e7c:	dc000a17 	ldw	r16,40(sp)
   21e80:	dec00d04 	addi	sp,sp,52
   21e84:	f800283a 	ret
   21e88:	010000f4 	movhi	r4,3
   21e8c:	213a8204 	addi	r4,r4,-5624
   21e90:	00230200 	call	23020 <__pack_f>
   21e94:	dfc00c17 	ldw	ra,48(sp)
   21e98:	dc400b17 	ldw	r17,44(sp)
   21e9c:	dc000a17 	ldw	r16,40(sp)
   21ea0:	dec00d04 	addi	sp,sp,52
   21ea4:	f800283a 	ret
   21ea8:	29802d26 	beq	r5,r6,21f60 <__divsf3+0x164>
   21eac:	28801a26 	beq	r5,r2,21f18 <__divsf3+0x11c>
   21eb0:	d8c00417 	ldw	r3,16(sp)
   21eb4:	d8800817 	ldw	r2,32(sp)
   21eb8:	d9000517 	ldw	r4,20(sp)
   21ebc:	d9800917 	ldw	r6,36(sp)
   21ec0:	1885c83a 	sub	r2,r3,r2
   21ec4:	d8800415 	stw	r2,16(sp)
   21ec8:	2180032e 	bgeu	r4,r6,21ed8 <__divsf3+0xdc>
   21ecc:	10bfffc4 	addi	r2,r2,-1
   21ed0:	d8800415 	stw	r2,16(sp)
   21ed4:	2109883a 	add	r4,r4,r4
   21ed8:	01500034 	movhi	r5,16384
   21edc:	0007883a 	mov	r3,zero
   21ee0:	0005883a 	mov	r2,zero
   21ee4:	01c007c4 	movi	r7,31
   21ee8:	10800044 	addi	r2,r2,1
   21eec:	21800236 	bltu	r4,r6,21ef8 <__divsf3+0xfc>
   21ef0:	1946b03a 	or	r3,r3,r5
   21ef4:	2189c83a 	sub	r4,r4,r6
   21ef8:	280ad07a 	srli	r5,r5,1
   21efc:	2109883a 	add	r4,r4,r4
   21f00:	11fff91e 	bne	r2,r7,21ee8 <__divsf3+0xec>
   21f04:	19401fcc 	andi	r5,r3,127
   21f08:	00801004 	movi	r2,64
   21f0c:	28800a26 	beq	r5,r2,21f38 <__divsf3+0x13c>
   21f10:	d8c00515 	stw	r3,20(sp)
   21f14:	003fd506 	br	21e6c <__divsf3+0x70>
   21f18:	8809883a 	mov	r4,r17
   21f1c:	d9800215 	stw	r6,8(sp)
   21f20:	00230200 	call	23020 <__pack_f>
   21f24:	dfc00c17 	ldw	ra,48(sp)
   21f28:	dc400b17 	ldw	r17,44(sp)
   21f2c:	dc000a17 	ldw	r16,40(sp)
   21f30:	dec00d04 	addi	sp,sp,52
   21f34:	f800283a 	ret
   21f38:	1880200c 	andi	r2,r3,128
   21f3c:	103ff41e 	bne	r2,zero,21f10 <__divsf3+0x114>
   21f40:	203ff326 	beq	r4,zero,21f10 <__divsf3+0x114>
   21f44:	1947883a 	add	r3,r3,r5
   21f48:	00bfe004 	movi	r2,-128
   21f4c:	1886703a 	and	r3,r3,r2
   21f50:	d8c00515 	stw	r3,20(sp)
   21f54:	003fc506 	br	21e6c <__divsf3+0x70>
   21f58:	8009883a 	mov	r4,r16
   21f5c:	003fc406 	br	21e70 <__divsf3+0x74>
   21f60:	8809883a 	mov	r4,r17
   21f64:	d8000515 	stw	zero,20(sp)
   21f68:	d8000415 	stw	zero,16(sp)
   21f6c:	003fc006 	br	21e70 <__divsf3+0x74>

00021f70 <__floatsisf>:
   21f70:	2006d7fa 	srli	r3,r4,31
   21f74:	defffa04 	addi	sp,sp,-24
   21f78:	008000c4 	movi	r2,3
   21f7c:	dfc00515 	stw	ra,20(sp)
   21f80:	dc000415 	stw	r16,16(sp)
   21f84:	d8800015 	stw	r2,0(sp)
   21f88:	d8c00115 	stw	r3,4(sp)
   21f8c:	2000081e 	bne	r4,zero,21fb0 <__floatsisf+0x40>
   21f90:	00800084 	movi	r2,2
   21f94:	d8800015 	stw	r2,0(sp)
   21f98:	d809883a 	mov	r4,sp
   21f9c:	00230200 	call	23020 <__pack_f>
   21fa0:	dfc00517 	ldw	ra,20(sp)
   21fa4:	dc000417 	ldw	r16,16(sp)
   21fa8:	dec00604 	addi	sp,sp,24
   21fac:	f800283a 	ret
   21fb0:	00800784 	movi	r2,30
   21fb4:	1807003a 	cmpeq	r3,r3,zero
   21fb8:	d8800215 	stw	r2,8(sp)
   21fbc:	18000e1e 	bne	r3,zero,21ff8 <__floatsisf+0x88>
   21fc0:	00a00034 	movhi	r2,32768
   21fc4:	20800e26 	beq	r4,r2,22000 <__floatsisf+0x90>
   21fc8:	0121c83a 	sub	r16,zero,r4
   21fcc:	8009883a 	mov	r4,r16
   21fd0:	dc000315 	stw	r16,12(sp)
   21fd4:	0022fa00 	call	22fa0 <__clzsi2>
   21fd8:	117fffc4 	addi	r5,r2,-1
   21fdc:	017fee0e 	bge	zero,r5,21f98 <__floatsisf+0x28>
   21fe0:	d8800217 	ldw	r2,8(sp)
   21fe4:	8146983a 	sll	r3,r16,r5
   21fe8:	1145c83a 	sub	r2,r2,r5
   21fec:	d8c00315 	stw	r3,12(sp)
   21ff0:	d8800215 	stw	r2,8(sp)
   21ff4:	003fe806 	br	21f98 <__floatsisf+0x28>
   21ff8:	2021883a 	mov	r16,r4
   21ffc:	003ff306 	br	21fcc <__floatsisf+0x5c>
   22000:	00b3c034 	movhi	r2,52992
   22004:	003fe606 	br	21fa0 <__floatsisf+0x30>

00022008 <__extendsfdf2>:
   22008:	defff904 	addi	sp,sp,-28
   2200c:	d9000115 	stw	r4,4(sp)
   22010:	d9400204 	addi	r5,sp,8
   22014:	d9000104 	addi	r4,sp,4
   22018:	dfc00615 	stw	ra,24(sp)
   2201c:	00231800 	call	23180 <__unpack_f>
   22020:	d9c00517 	ldw	r7,20(sp)
   22024:	0011883a 	mov	r8,zero
   22028:	400697ba 	slli	r3,r8,30
   2202c:	3812d0ba 	srli	r9,r7,2
   22030:	380497ba 	slli	r2,r7,30
   22034:	d9000217 	ldw	r4,8(sp)
   22038:	d9400317 	ldw	r5,12(sp)
   2203c:	d9800417 	ldw	r6,16(sp)
   22040:	48c6b03a 	or	r3,r9,r3
   22044:	100f883a 	mov	r7,r2
   22048:	d8c00015 	stw	r3,0(sp)
   2204c:	0022e5c0 	call	22e5c <__make_dp>
   22050:	dfc00617 	ldw	ra,24(sp)
   22054:	dec00704 	addi	sp,sp,28
   22058:	f800283a 	ret

0002205c <_fpadd_parts>:
   2205c:	defff804 	addi	sp,sp,-32
   22060:	dcc00315 	stw	r19,12(sp)
   22064:	2027883a 	mov	r19,r4
   22068:	21000017 	ldw	r4,0(r4)
   2206c:	00c00044 	movi	r3,1
   22070:	dd400515 	stw	r21,20(sp)
   22074:	dd000415 	stw	r20,16(sp)
   22078:	ddc00715 	stw	r23,28(sp)
   2207c:	dd800615 	stw	r22,24(sp)
   22080:	dc800215 	stw	r18,8(sp)
   22084:	dc400115 	stw	r17,4(sp)
   22088:	dc000015 	stw	r16,0(sp)
   2208c:	282b883a 	mov	r21,r5
   22090:	3029883a 	mov	r20,r6
   22094:	1900632e 	bgeu	r3,r4,22224 <_fpadd_parts+0x1c8>
   22098:	28800017 	ldw	r2,0(r5)
   2209c:	1880812e 	bgeu	r3,r2,222a4 <_fpadd_parts+0x248>
   220a0:	00c00104 	movi	r3,4
   220a4:	20c0dc26 	beq	r4,r3,22418 <_fpadd_parts+0x3bc>
   220a8:	10c07e26 	beq	r2,r3,222a4 <_fpadd_parts+0x248>
   220ac:	00c00084 	movi	r3,2
   220b0:	10c06726 	beq	r2,r3,22250 <_fpadd_parts+0x1f4>
   220b4:	20c07b26 	beq	r4,r3,222a4 <_fpadd_parts+0x248>
   220b8:	9dc00217 	ldw	r23,8(r19)
   220bc:	28c00217 	ldw	r3,8(r5)
   220c0:	9c400317 	ldw	r17,12(r19)
   220c4:	2bc00317 	ldw	r15,12(r5)
   220c8:	b8cdc83a 	sub	r6,r23,r3
   220cc:	9c800417 	ldw	r18,16(r19)
   220d0:	2c000417 	ldw	r16,16(r5)
   220d4:	3009883a 	mov	r4,r6
   220d8:	30009716 	blt	r6,zero,22338 <_fpadd_parts+0x2dc>
   220dc:	00800fc4 	movi	r2,63
   220e0:	11806b16 	blt	r2,r6,22290 <_fpadd_parts+0x234>
   220e4:	0100a40e 	bge	zero,r4,22378 <_fpadd_parts+0x31c>
   220e8:	35bff804 	addi	r22,r6,-32
   220ec:	b000bc16 	blt	r22,zero,223e0 <_fpadd_parts+0x384>
   220f0:	8596d83a 	srl	r11,r16,r22
   220f4:	0019883a 	mov	r12,zero
   220f8:	0013883a 	mov	r9,zero
   220fc:	01000044 	movi	r4,1
   22100:	0015883a 	mov	r10,zero
   22104:	b000be16 	blt	r22,zero,22400 <_fpadd_parts+0x3a4>
   22108:	2590983a 	sll	r8,r4,r22
   2210c:	000f883a 	mov	r7,zero
   22110:	00bfffc4 	movi	r2,-1
   22114:	3889883a 	add	r4,r7,r2
   22118:	408b883a 	add	r5,r8,r2
   2211c:	21cd803a 	cmpltu	r6,r4,r7
   22120:	314b883a 	add	r5,r6,r5
   22124:	7904703a 	and	r2,r15,r4
   22128:	8146703a 	and	r3,r16,r5
   2212c:	10c4b03a 	or	r2,r2,r3
   22130:	10000226 	beq	r2,zero,2213c <_fpadd_parts+0xe0>
   22134:	02400044 	movi	r9,1
   22138:	0015883a 	mov	r10,zero
   2213c:	5a5eb03a 	or	r15,r11,r9
   22140:	62a0b03a 	or	r16,r12,r10
   22144:	99400117 	ldw	r5,4(r19)
   22148:	a8800117 	ldw	r2,4(r21)
   2214c:	28806e26 	beq	r5,r2,22308 <_fpadd_parts+0x2ac>
   22150:	28006626 	beq	r5,zero,222ec <_fpadd_parts+0x290>
   22154:	7c45c83a 	sub	r2,r15,r17
   22158:	7889803a 	cmpltu	r4,r15,r2
   2215c:	8487c83a 	sub	r3,r16,r18
   22160:	1909c83a 	sub	r4,r3,r4
   22164:	100d883a 	mov	r6,r2
   22168:	200f883a 	mov	r7,r4
   2216c:	38007716 	blt	r7,zero,2234c <_fpadd_parts+0x2f0>
   22170:	a5c00215 	stw	r23,8(r20)
   22174:	a1c00415 	stw	r7,16(r20)
   22178:	a0000115 	stw	zero,4(r20)
   2217c:	a1800315 	stw	r6,12(r20)
   22180:	a2000317 	ldw	r8,12(r20)
   22184:	a2400417 	ldw	r9,16(r20)
   22188:	00bfffc4 	movi	r2,-1
   2218c:	408b883a 	add	r5,r8,r2
   22190:	2a09803a 	cmpltu	r4,r5,r8
   22194:	488d883a 	add	r6,r9,r2
   22198:	01c40034 	movhi	r7,4096
   2219c:	39ffffc4 	addi	r7,r7,-1
   221a0:	218d883a 	add	r6,r4,r6
   221a4:	39801736 	bltu	r7,r6,22204 <_fpadd_parts+0x1a8>
   221a8:	31c06526 	beq	r6,r7,22340 <_fpadd_parts+0x2e4>
   221ac:	a3000217 	ldw	r12,8(r20)
   221b0:	4209883a 	add	r4,r8,r8
   221b4:	00bfffc4 	movi	r2,-1
   221b8:	220f803a 	cmpltu	r7,r4,r8
   221bc:	4a4b883a 	add	r5,r9,r9
   221c0:	394f883a 	add	r7,r7,r5
   221c4:	2095883a 	add	r10,r4,r2
   221c8:	3897883a 	add	r11,r7,r2
   221cc:	510d803a 	cmpltu	r6,r10,r4
   221d0:	6099883a 	add	r12,r12,r2
   221d4:	32d7883a 	add	r11,r6,r11
   221d8:	00840034 	movhi	r2,4096
   221dc:	10bfffc4 	addi	r2,r2,-1
   221e0:	2011883a 	mov	r8,r4
   221e4:	3813883a 	mov	r9,r7
   221e8:	a1000315 	stw	r4,12(r20)
   221ec:	a1c00415 	stw	r7,16(r20)
   221f0:	a3000215 	stw	r12,8(r20)
   221f4:	12c00336 	bltu	r2,r11,22204 <_fpadd_parts+0x1a8>
   221f8:	58bfed1e 	bne	r11,r2,221b0 <_fpadd_parts+0x154>
   221fc:	00bfff84 	movi	r2,-2
   22200:	12bfeb2e 	bgeu	r2,r10,221b0 <_fpadd_parts+0x154>
   22204:	a2800417 	ldw	r10,16(r20)
   22208:	008000c4 	movi	r2,3
   2220c:	00c80034 	movhi	r3,8192
   22210:	18ffffc4 	addi	r3,r3,-1
   22214:	a2400317 	ldw	r9,12(r20)
   22218:	a0800015 	stw	r2,0(r20)
   2221c:	1a802336 	bltu	r3,r10,222ac <_fpadd_parts+0x250>
   22220:	a027883a 	mov	r19,r20
   22224:	9805883a 	mov	r2,r19
   22228:	ddc00717 	ldw	r23,28(sp)
   2222c:	dd800617 	ldw	r22,24(sp)
   22230:	dd400517 	ldw	r21,20(sp)
   22234:	dd000417 	ldw	r20,16(sp)
   22238:	dcc00317 	ldw	r19,12(sp)
   2223c:	dc800217 	ldw	r18,8(sp)
   22240:	dc400117 	ldw	r17,4(sp)
   22244:	dc000017 	ldw	r16,0(sp)
   22248:	dec00804 	addi	sp,sp,32
   2224c:	f800283a 	ret
   22250:	20fff41e 	bne	r4,r3,22224 <_fpadd_parts+0x1c8>
   22254:	31000015 	stw	r4,0(r6)
   22258:	98800117 	ldw	r2,4(r19)
   2225c:	30800115 	stw	r2,4(r6)
   22260:	98c00217 	ldw	r3,8(r19)
   22264:	30c00215 	stw	r3,8(r6)
   22268:	98800317 	ldw	r2,12(r19)
   2226c:	30800315 	stw	r2,12(r6)
   22270:	98c00417 	ldw	r3,16(r19)
   22274:	30c00415 	stw	r3,16(r6)
   22278:	98800117 	ldw	r2,4(r19)
   2227c:	28c00117 	ldw	r3,4(r5)
   22280:	3027883a 	mov	r19,r6
   22284:	10c4703a 	and	r2,r2,r3
   22288:	30800115 	stw	r2,4(r6)
   2228c:	003fe506 	br	22224 <_fpadd_parts+0x1c8>
   22290:	1dc02616 	blt	r3,r23,2232c <_fpadd_parts+0x2d0>
   22294:	0023883a 	mov	r17,zero
   22298:	182f883a 	mov	r23,r3
   2229c:	0025883a 	mov	r18,zero
   222a0:	003fa806 	br	22144 <_fpadd_parts+0xe8>
   222a4:	a827883a 	mov	r19,r21
   222a8:	003fde06 	br	22224 <_fpadd_parts+0x1c8>
   222ac:	01800044 	movi	r6,1
   222b0:	500497fa 	slli	r2,r10,31
   222b4:	4808d07a 	srli	r4,r9,1
   222b8:	518ad83a 	srl	r5,r10,r6
   222bc:	a2000217 	ldw	r8,8(r20)
   222c0:	1108b03a 	or	r4,r2,r4
   222c4:	0007883a 	mov	r3,zero
   222c8:	4984703a 	and	r2,r9,r6
   222cc:	208cb03a 	or	r6,r4,r2
   222d0:	28ceb03a 	or	r7,r5,r3
   222d4:	42000044 	addi	r8,r8,1
   222d8:	a027883a 	mov	r19,r20
   222dc:	a1c00415 	stw	r7,16(r20)
   222e0:	a2000215 	stw	r8,8(r20)
   222e4:	a1800315 	stw	r6,12(r20)
   222e8:	003fce06 	br	22224 <_fpadd_parts+0x1c8>
   222ec:	8bc5c83a 	sub	r2,r17,r15
   222f0:	8889803a 	cmpltu	r4,r17,r2
   222f4:	9407c83a 	sub	r3,r18,r16
   222f8:	1909c83a 	sub	r4,r3,r4
   222fc:	100d883a 	mov	r6,r2
   22300:	200f883a 	mov	r7,r4
   22304:	003f9906 	br	2216c <_fpadd_parts+0x110>
   22308:	7c45883a 	add	r2,r15,r17
   2230c:	13c9803a 	cmpltu	r4,r2,r15
   22310:	8487883a 	add	r3,r16,r18
   22314:	20c9883a 	add	r4,r4,r3
   22318:	a1400115 	stw	r5,4(r20)
   2231c:	a5c00215 	stw	r23,8(r20)
   22320:	a0800315 	stw	r2,12(r20)
   22324:	a1000415 	stw	r4,16(r20)
   22328:	003fb606 	br	22204 <_fpadd_parts+0x1a8>
   2232c:	001f883a 	mov	r15,zero
   22330:	0021883a 	mov	r16,zero
   22334:	003f8306 	br	22144 <_fpadd_parts+0xe8>
   22338:	018dc83a 	sub	r6,zero,r6
   2233c:	003f6706 	br	220dc <_fpadd_parts+0x80>
   22340:	00bfff84 	movi	r2,-2
   22344:	117faf36 	bltu	r2,r5,22204 <_fpadd_parts+0x1a8>
   22348:	003f9806 	br	221ac <_fpadd_parts+0x150>
   2234c:	0005883a 	mov	r2,zero
   22350:	1189c83a 	sub	r4,r2,r6
   22354:	1105803a 	cmpltu	r2,r2,r4
   22358:	01cbc83a 	sub	r5,zero,r7
   2235c:	2885c83a 	sub	r2,r5,r2
   22360:	01800044 	movi	r6,1
   22364:	a1800115 	stw	r6,4(r20)
   22368:	a5c00215 	stw	r23,8(r20)
   2236c:	a1000315 	stw	r4,12(r20)
   22370:	a0800415 	stw	r2,16(r20)
   22374:	003f8206 	br	22180 <_fpadd_parts+0x124>
   22378:	203f7226 	beq	r4,zero,22144 <_fpadd_parts+0xe8>
   2237c:	35bff804 	addi	r22,r6,-32
   22380:	b9af883a 	add	r23,r23,r6
   22384:	b0003116 	blt	r22,zero,2244c <_fpadd_parts+0x3f0>
   22388:	959ad83a 	srl	r13,r18,r22
   2238c:	001d883a 	mov	r14,zero
   22390:	000f883a 	mov	r7,zero
   22394:	01000044 	movi	r4,1
   22398:	0011883a 	mov	r8,zero
   2239c:	b0002516 	blt	r22,zero,22434 <_fpadd_parts+0x3d8>
   223a0:	2594983a 	sll	r10,r4,r22
   223a4:	0013883a 	mov	r9,zero
   223a8:	00bfffc4 	movi	r2,-1
   223ac:	4889883a 	add	r4,r9,r2
   223b0:	508b883a 	add	r5,r10,r2
   223b4:	224d803a 	cmpltu	r6,r4,r9
   223b8:	314b883a 	add	r5,r6,r5
   223bc:	8904703a 	and	r2,r17,r4
   223c0:	9146703a 	and	r3,r18,r5
   223c4:	10c4b03a 	or	r2,r2,r3
   223c8:	10000226 	beq	r2,zero,223d4 <_fpadd_parts+0x378>
   223cc:	01c00044 	movi	r7,1
   223d0:	0011883a 	mov	r8,zero
   223d4:	69e2b03a 	or	r17,r13,r7
   223d8:	7224b03a 	or	r18,r14,r8
   223dc:	003f5906 	br	22144 <_fpadd_parts+0xe8>
   223e0:	8407883a 	add	r3,r16,r16
   223e4:	008007c4 	movi	r2,31
   223e8:	1185c83a 	sub	r2,r2,r6
   223ec:	1886983a 	sll	r3,r3,r2
   223f0:	7996d83a 	srl	r11,r15,r6
   223f4:	8198d83a 	srl	r12,r16,r6
   223f8:	1ad6b03a 	or	r11,r3,r11
   223fc:	003f3e06 	br	220f8 <_fpadd_parts+0x9c>
   22400:	2006d07a 	srli	r3,r4,1
   22404:	008007c4 	movi	r2,31
   22408:	1185c83a 	sub	r2,r2,r6
   2240c:	1890d83a 	srl	r8,r3,r2
   22410:	218e983a 	sll	r7,r4,r6
   22414:	003f3e06 	br	22110 <_fpadd_parts+0xb4>
   22418:	113f821e 	bne	r2,r4,22224 <_fpadd_parts+0x1c8>
   2241c:	28c00117 	ldw	r3,4(r5)
   22420:	98800117 	ldw	r2,4(r19)
   22424:	10ff7f26 	beq	r2,r3,22224 <_fpadd_parts+0x1c8>
   22428:	04c000f4 	movhi	r19,3
   2242c:	9cfa8604 	addi	r19,r19,-5608
   22430:	003f7c06 	br	22224 <_fpadd_parts+0x1c8>
   22434:	2006d07a 	srli	r3,r4,1
   22438:	008007c4 	movi	r2,31
   2243c:	1185c83a 	sub	r2,r2,r6
   22440:	1894d83a 	srl	r10,r3,r2
   22444:	2192983a 	sll	r9,r4,r6
   22448:	003fd706 	br	223a8 <_fpadd_parts+0x34c>
   2244c:	9487883a 	add	r3,r18,r18
   22450:	008007c4 	movi	r2,31
   22454:	1185c83a 	sub	r2,r2,r6
   22458:	1886983a 	sll	r3,r3,r2
   2245c:	899ad83a 	srl	r13,r17,r6
   22460:	919cd83a 	srl	r14,r18,r6
   22464:	1b5ab03a 	or	r13,r3,r13
   22468:	003fc906 	br	22390 <_fpadd_parts+0x334>

0002246c <__subdf3>:
   2246c:	deffea04 	addi	sp,sp,-88
   22470:	dcc01415 	stw	r19,80(sp)
   22474:	dcc00404 	addi	r19,sp,16
   22478:	2011883a 	mov	r8,r4
   2247c:	2813883a 	mov	r9,r5
   22480:	dc401315 	stw	r17,76(sp)
   22484:	d809883a 	mov	r4,sp
   22488:	980b883a 	mov	r5,r19
   2248c:	dc400904 	addi	r17,sp,36
   22490:	dfc01515 	stw	ra,84(sp)
   22494:	da400115 	stw	r9,4(sp)
   22498:	d9c00315 	stw	r7,12(sp)
   2249c:	da000015 	stw	r8,0(sp)
   224a0:	d9800215 	stw	r6,8(sp)
   224a4:	00235880 	call	23588 <__unpack_d>
   224a8:	d9000204 	addi	r4,sp,8
   224ac:	880b883a 	mov	r5,r17
   224b0:	00235880 	call	23588 <__unpack_d>
   224b4:	d8800a17 	ldw	r2,40(sp)
   224b8:	880b883a 	mov	r5,r17
   224bc:	9809883a 	mov	r4,r19
   224c0:	d9800e04 	addi	r6,sp,56
   224c4:	1080005c 	xori	r2,r2,1
   224c8:	d8800a15 	stw	r2,40(sp)
   224cc:	002205c0 	call	2205c <_fpadd_parts>
   224d0:	1009883a 	mov	r4,r2
   224d4:	00232740 	call	23274 <__pack_d>
   224d8:	dfc01517 	ldw	ra,84(sp)
   224dc:	dcc01417 	ldw	r19,80(sp)
   224e0:	dc401317 	ldw	r17,76(sp)
   224e4:	dec01604 	addi	sp,sp,88
   224e8:	f800283a 	ret

000224ec <__adddf3>:
   224ec:	deffea04 	addi	sp,sp,-88
   224f0:	dcc01415 	stw	r19,80(sp)
   224f4:	dcc00404 	addi	r19,sp,16
   224f8:	2011883a 	mov	r8,r4
   224fc:	2813883a 	mov	r9,r5
   22500:	dc401315 	stw	r17,76(sp)
   22504:	d809883a 	mov	r4,sp
   22508:	980b883a 	mov	r5,r19
   2250c:	dc400904 	addi	r17,sp,36
   22510:	dfc01515 	stw	ra,84(sp)
   22514:	da400115 	stw	r9,4(sp)
   22518:	d9c00315 	stw	r7,12(sp)
   2251c:	da000015 	stw	r8,0(sp)
   22520:	d9800215 	stw	r6,8(sp)
   22524:	00235880 	call	23588 <__unpack_d>
   22528:	d9000204 	addi	r4,sp,8
   2252c:	880b883a 	mov	r5,r17
   22530:	00235880 	call	23588 <__unpack_d>
   22534:	d9800e04 	addi	r6,sp,56
   22538:	9809883a 	mov	r4,r19
   2253c:	880b883a 	mov	r5,r17
   22540:	002205c0 	call	2205c <_fpadd_parts>
   22544:	1009883a 	mov	r4,r2
   22548:	00232740 	call	23274 <__pack_d>
   2254c:	dfc01517 	ldw	ra,84(sp)
   22550:	dcc01417 	ldw	r19,80(sp)
   22554:	dc401317 	ldw	r17,76(sp)
   22558:	dec01604 	addi	sp,sp,88
   2255c:	f800283a 	ret

00022560 <__muldf3>:
   22560:	deffe004 	addi	sp,sp,-128
   22564:	dc401815 	stw	r17,96(sp)
   22568:	dc400404 	addi	r17,sp,16
   2256c:	2011883a 	mov	r8,r4
   22570:	2813883a 	mov	r9,r5
   22574:	dc001715 	stw	r16,92(sp)
   22578:	d809883a 	mov	r4,sp
   2257c:	880b883a 	mov	r5,r17
   22580:	dc000904 	addi	r16,sp,36
   22584:	dfc01f15 	stw	ra,124(sp)
   22588:	da400115 	stw	r9,4(sp)
   2258c:	d9c00315 	stw	r7,12(sp)
   22590:	da000015 	stw	r8,0(sp)
   22594:	d9800215 	stw	r6,8(sp)
   22598:	ddc01e15 	stw	r23,120(sp)
   2259c:	dd801d15 	stw	r22,116(sp)
   225a0:	dd401c15 	stw	r21,112(sp)
   225a4:	dd001b15 	stw	r20,108(sp)
   225a8:	dcc01a15 	stw	r19,104(sp)
   225ac:	dc801915 	stw	r18,100(sp)
   225b0:	00235880 	call	23588 <__unpack_d>
   225b4:	d9000204 	addi	r4,sp,8
   225b8:	800b883a 	mov	r5,r16
   225bc:	00235880 	call	23588 <__unpack_d>
   225c0:	d9000417 	ldw	r4,16(sp)
   225c4:	00800044 	movi	r2,1
   225c8:	1100102e 	bgeu	r2,r4,2260c <__muldf3+0xac>
   225cc:	d8c00917 	ldw	r3,36(sp)
   225d0:	10c0062e 	bgeu	r2,r3,225ec <__muldf3+0x8c>
   225d4:	00800104 	movi	r2,4
   225d8:	20800a26 	beq	r4,r2,22604 <__muldf3+0xa4>
   225dc:	1880cc26 	beq	r3,r2,22910 <__muldf3+0x3b0>
   225e0:	00800084 	movi	r2,2
   225e4:	20800926 	beq	r4,r2,2260c <__muldf3+0xac>
   225e8:	1880191e 	bne	r3,r2,22650 <__muldf3+0xf0>
   225ec:	d8c00a17 	ldw	r3,40(sp)
   225f0:	d8800517 	ldw	r2,20(sp)
   225f4:	8009883a 	mov	r4,r16
   225f8:	10c4c03a 	cmpne	r2,r2,r3
   225fc:	d8800a15 	stw	r2,40(sp)
   22600:	00000706 	br	22620 <__muldf3+0xc0>
   22604:	00800084 	movi	r2,2
   22608:	1880c326 	beq	r3,r2,22918 <__muldf3+0x3b8>
   2260c:	d8800517 	ldw	r2,20(sp)
   22610:	d8c00a17 	ldw	r3,40(sp)
   22614:	8809883a 	mov	r4,r17
   22618:	10c4c03a 	cmpne	r2,r2,r3
   2261c:	d8800515 	stw	r2,20(sp)
   22620:	00232740 	call	23274 <__pack_d>
   22624:	dfc01f17 	ldw	ra,124(sp)
   22628:	ddc01e17 	ldw	r23,120(sp)
   2262c:	dd801d17 	ldw	r22,116(sp)
   22630:	dd401c17 	ldw	r21,112(sp)
   22634:	dd001b17 	ldw	r20,108(sp)
   22638:	dcc01a17 	ldw	r19,104(sp)
   2263c:	dc801917 	ldw	r18,100(sp)
   22640:	dc401817 	ldw	r17,96(sp)
   22644:	dc001717 	ldw	r16,92(sp)
   22648:	dec02004 	addi	sp,sp,128
   2264c:	f800283a 	ret
   22650:	dd800717 	ldw	r22,28(sp)
   22654:	dc800c17 	ldw	r18,48(sp)
   22658:	002b883a 	mov	r21,zero
   2265c:	0023883a 	mov	r17,zero
   22660:	a80b883a 	mov	r5,r21
   22664:	b00d883a 	mov	r6,r22
   22668:	880f883a 	mov	r7,r17
   2266c:	ddc00817 	ldw	r23,32(sp)
   22670:	dcc00d17 	ldw	r19,52(sp)
   22674:	9009883a 	mov	r4,r18
   22678:	0022f080 	call	22f08 <__muldi3>
   2267c:	001b883a 	mov	r13,zero
   22680:	680f883a 	mov	r7,r13
   22684:	b009883a 	mov	r4,r22
   22688:	000b883a 	mov	r5,zero
   2268c:	980d883a 	mov	r6,r19
   22690:	b82d883a 	mov	r22,r23
   22694:	002f883a 	mov	r23,zero
   22698:	db401615 	stw	r13,88(sp)
   2269c:	d8801315 	stw	r2,76(sp)
   226a0:	d8c01415 	stw	r3,80(sp)
   226a4:	dcc01515 	stw	r19,84(sp)
   226a8:	0022f080 	call	22f08 <__muldi3>
   226ac:	b00d883a 	mov	r6,r22
   226b0:	000b883a 	mov	r5,zero
   226b4:	9009883a 	mov	r4,r18
   226b8:	b80f883a 	mov	r7,r23
   226bc:	1021883a 	mov	r16,r2
   226c0:	1823883a 	mov	r17,r3
   226c4:	0022f080 	call	22f08 <__muldi3>
   226c8:	8085883a 	add	r2,r16,r2
   226cc:	140d803a 	cmpltu	r6,r2,r16
   226d0:	88c7883a 	add	r3,r17,r3
   226d4:	30cd883a 	add	r6,r6,r3
   226d8:	1029883a 	mov	r20,r2
   226dc:	302b883a 	mov	r21,r6
   226e0:	da801317 	ldw	r10,76(sp)
   226e4:	dac01417 	ldw	r11,80(sp)
   226e8:	db001517 	ldw	r12,84(sp)
   226ec:	db401617 	ldw	r13,88(sp)
   226f0:	3440612e 	bgeu	r6,r17,22878 <__muldf3+0x318>
   226f4:	0009883a 	mov	r4,zero
   226f8:	5105883a 	add	r2,r10,r4
   226fc:	128d803a 	cmpltu	r6,r2,r10
   22700:	5d07883a 	add	r3,r11,r20
   22704:	30cd883a 	add	r6,r6,r3
   22708:	0021883a 	mov	r16,zero
   2270c:	04400044 	movi	r17,1
   22710:	1025883a 	mov	r18,r2
   22714:	3027883a 	mov	r19,r6
   22718:	32c06236 	bltu	r6,r11,228a4 <__muldf3+0x344>
   2271c:	59807a26 	beq	r11,r6,22908 <__muldf3+0x3a8>
   22720:	680b883a 	mov	r5,r13
   22724:	b80f883a 	mov	r7,r23
   22728:	6009883a 	mov	r4,r12
   2272c:	b00d883a 	mov	r6,r22
   22730:	0022f080 	call	22f08 <__muldi3>
   22734:	1009883a 	mov	r4,r2
   22738:	000f883a 	mov	r7,zero
   2273c:	1545883a 	add	r2,r2,r21
   22740:	1111803a 	cmpltu	r8,r2,r4
   22744:	19c7883a 	add	r3,r3,r7
   22748:	40c7883a 	add	r3,r8,r3
   2274c:	88cb883a 	add	r5,r17,r3
   22750:	d8c00617 	ldw	r3,24(sp)
   22754:	8089883a 	add	r4,r16,r2
   22758:	d8800b17 	ldw	r2,44(sp)
   2275c:	18c00104 	addi	r3,r3,4
   22760:	240d803a 	cmpltu	r6,r4,r16
   22764:	10c7883a 	add	r3,r2,r3
   22768:	2013883a 	mov	r9,r4
   2276c:	d8800a17 	ldw	r2,40(sp)
   22770:	d9000517 	ldw	r4,20(sp)
   22774:	314d883a 	add	r6,r6,r5
   22778:	3015883a 	mov	r10,r6
   2277c:	2088c03a 	cmpne	r4,r4,r2
   22780:	00880034 	movhi	r2,8192
   22784:	10bfffc4 	addi	r2,r2,-1
   22788:	d9000f15 	stw	r4,60(sp)
   2278c:	d8c01015 	stw	r3,64(sp)
   22790:	1180162e 	bgeu	r2,r6,227ec <__muldf3+0x28c>
   22794:	1811883a 	mov	r8,r3
   22798:	101f883a 	mov	r15,r2
   2279c:	980497fa 	slli	r2,r19,31
   227a0:	9016d07a 	srli	r11,r18,1
   227a4:	500697fa 	slli	r3,r10,31
   227a8:	480cd07a 	srli	r6,r9,1
   227ac:	500ed07a 	srli	r7,r10,1
   227b0:	12d6b03a 	or	r11,r2,r11
   227b4:	00800044 	movi	r2,1
   227b8:	198cb03a 	or	r6,r3,r6
   227bc:	4888703a 	and	r4,r9,r2
   227c0:	9818d07a 	srli	r12,r19,1
   227c4:	001b883a 	mov	r13,zero
   227c8:	03a00034 	movhi	r14,32768
   227cc:	3013883a 	mov	r9,r6
   227d0:	3815883a 	mov	r10,r7
   227d4:	4091883a 	add	r8,r8,r2
   227d8:	20000226 	beq	r4,zero,227e4 <__muldf3+0x284>
   227dc:	5b64b03a 	or	r18,r11,r13
   227e0:	63a6b03a 	or	r19,r12,r14
   227e4:	7abfed36 	bltu	r15,r10,2279c <__muldf3+0x23c>
   227e8:	da001015 	stw	r8,64(sp)
   227ec:	00840034 	movhi	r2,4096
   227f0:	10bfffc4 	addi	r2,r2,-1
   227f4:	12801436 	bltu	r2,r10,22848 <__muldf3+0x2e8>
   227f8:	da001017 	ldw	r8,64(sp)
   227fc:	101f883a 	mov	r15,r2
   22800:	4a45883a 	add	r2,r9,r9
   22804:	124d803a 	cmpltu	r6,r2,r9
   22808:	5287883a 	add	r3,r10,r10
   2280c:	9497883a 	add	r11,r18,r18
   22810:	5c8f803a 	cmpltu	r7,r11,r18
   22814:	9cd9883a 	add	r12,r19,r19
   22818:	01000044 	movi	r4,1
   2281c:	30cd883a 	add	r6,r6,r3
   22820:	3b0f883a 	add	r7,r7,r12
   22824:	423fffc4 	addi	r8,r8,-1
   22828:	1013883a 	mov	r9,r2
   2282c:	3015883a 	mov	r10,r6
   22830:	111ab03a 	or	r13,r2,r4
   22834:	98003016 	blt	r19,zero,228f8 <__muldf3+0x398>
   22838:	5825883a 	mov	r18,r11
   2283c:	3827883a 	mov	r19,r7
   22840:	7abfef2e 	bgeu	r15,r10,22800 <__muldf3+0x2a0>
   22844:	da001015 	stw	r8,64(sp)
   22848:	00803fc4 	movi	r2,255
   2284c:	488e703a 	and	r7,r9,r2
   22850:	00802004 	movi	r2,128
   22854:	0007883a 	mov	r3,zero
   22858:	0011883a 	mov	r8,zero
   2285c:	38801826 	beq	r7,r2,228c0 <__muldf3+0x360>
   22860:	008000c4 	movi	r2,3
   22864:	d9000e04 	addi	r4,sp,56
   22868:	da801215 	stw	r10,72(sp)
   2286c:	d8800e15 	stw	r2,56(sp)
   22870:	da401115 	stw	r9,68(sp)
   22874:	003f6a06 	br	22620 <__muldf3+0xc0>
   22878:	89802126 	beq	r17,r6,22900 <__muldf3+0x3a0>
   2287c:	0009883a 	mov	r4,zero
   22880:	5105883a 	add	r2,r10,r4
   22884:	128d803a 	cmpltu	r6,r2,r10
   22888:	5d07883a 	add	r3,r11,r20
   2288c:	30cd883a 	add	r6,r6,r3
   22890:	0021883a 	mov	r16,zero
   22894:	0023883a 	mov	r17,zero
   22898:	1025883a 	mov	r18,r2
   2289c:	3027883a 	mov	r19,r6
   228a0:	32ff9e2e 	bgeu	r6,r11,2271c <__muldf3+0x1bc>
   228a4:	00800044 	movi	r2,1
   228a8:	8089883a 	add	r4,r16,r2
   228ac:	240d803a 	cmpltu	r6,r4,r16
   228b0:	344d883a 	add	r6,r6,r17
   228b4:	2021883a 	mov	r16,r4
   228b8:	3023883a 	mov	r17,r6
   228bc:	003f9806 	br	22720 <__muldf3+0x1c0>
   228c0:	403fe71e 	bne	r8,zero,22860 <__muldf3+0x300>
   228c4:	01004004 	movi	r4,256
   228c8:	4904703a 	and	r2,r9,r4
   228cc:	10c4b03a 	or	r2,r2,r3
   228d0:	103fe31e 	bne	r2,zero,22860 <__muldf3+0x300>
   228d4:	94c4b03a 	or	r2,r18,r19
   228d8:	103fe126 	beq	r2,zero,22860 <__muldf3+0x300>
   228dc:	49c5883a 	add	r2,r9,r7
   228e0:	1251803a 	cmpltu	r8,r2,r9
   228e4:	4291883a 	add	r8,r8,r10
   228e8:	013fc004 	movi	r4,-256
   228ec:	1112703a 	and	r9,r2,r4
   228f0:	4015883a 	mov	r10,r8
   228f4:	003fda06 	br	22860 <__muldf3+0x300>
   228f8:	6813883a 	mov	r9,r13
   228fc:	003fce06 	br	22838 <__muldf3+0x2d8>
   22900:	143f7c36 	bltu	r2,r16,226f4 <__muldf3+0x194>
   22904:	003fdd06 	br	2287c <__muldf3+0x31c>
   22908:	12bf852e 	bgeu	r2,r10,22720 <__muldf3+0x1c0>
   2290c:	003fe506 	br	228a4 <__muldf3+0x344>
   22910:	00800084 	movi	r2,2
   22914:	20bf351e 	bne	r4,r2,225ec <__muldf3+0x8c>
   22918:	010000f4 	movhi	r4,3
   2291c:	213a8604 	addi	r4,r4,-5608
   22920:	003f3f06 	br	22620 <__muldf3+0xc0>

00022924 <__divdf3>:
   22924:	deffed04 	addi	sp,sp,-76
   22928:	dcc01115 	stw	r19,68(sp)
   2292c:	dcc00404 	addi	r19,sp,16
   22930:	2011883a 	mov	r8,r4
   22934:	2813883a 	mov	r9,r5
   22938:	dc000e15 	stw	r16,56(sp)
   2293c:	d809883a 	mov	r4,sp
   22940:	980b883a 	mov	r5,r19
   22944:	dc000904 	addi	r16,sp,36
   22948:	dfc01215 	stw	ra,72(sp)
   2294c:	da400115 	stw	r9,4(sp)
   22950:	d9c00315 	stw	r7,12(sp)
   22954:	da000015 	stw	r8,0(sp)
   22958:	d9800215 	stw	r6,8(sp)
   2295c:	dc801015 	stw	r18,64(sp)
   22960:	dc400f15 	stw	r17,60(sp)
   22964:	00235880 	call	23588 <__unpack_d>
   22968:	d9000204 	addi	r4,sp,8
   2296c:	800b883a 	mov	r5,r16
   22970:	00235880 	call	23588 <__unpack_d>
   22974:	d9000417 	ldw	r4,16(sp)
   22978:	00800044 	movi	r2,1
   2297c:	11000b2e 	bgeu	r2,r4,229ac <__divdf3+0x88>
   22980:	d9400917 	ldw	r5,36(sp)
   22984:	1140762e 	bgeu	r2,r5,22b60 <__divdf3+0x23c>
   22988:	d8800517 	ldw	r2,20(sp)
   2298c:	d8c00a17 	ldw	r3,40(sp)
   22990:	01800104 	movi	r6,4
   22994:	10c4f03a 	xor	r2,r2,r3
   22998:	d8800515 	stw	r2,20(sp)
   2299c:	21800226 	beq	r4,r6,229a8 <__divdf3+0x84>
   229a0:	00800084 	movi	r2,2
   229a4:	2080141e 	bne	r4,r2,229f8 <__divdf3+0xd4>
   229a8:	29000926 	beq	r5,r4,229d0 <__divdf3+0xac>
   229ac:	9809883a 	mov	r4,r19
   229b0:	00232740 	call	23274 <__pack_d>
   229b4:	dfc01217 	ldw	ra,72(sp)
   229b8:	dcc01117 	ldw	r19,68(sp)
   229bc:	dc801017 	ldw	r18,64(sp)
   229c0:	dc400f17 	ldw	r17,60(sp)
   229c4:	dc000e17 	ldw	r16,56(sp)
   229c8:	dec01304 	addi	sp,sp,76
   229cc:	f800283a 	ret
   229d0:	010000f4 	movhi	r4,3
   229d4:	213a8604 	addi	r4,r4,-5608
   229d8:	00232740 	call	23274 <__pack_d>
   229dc:	dfc01217 	ldw	ra,72(sp)
   229e0:	dcc01117 	ldw	r19,68(sp)
   229e4:	dc801017 	ldw	r18,64(sp)
   229e8:	dc400f17 	ldw	r17,60(sp)
   229ec:	dc000e17 	ldw	r16,56(sp)
   229f0:	dec01304 	addi	sp,sp,76
   229f4:	f800283a 	ret
   229f8:	29805b26 	beq	r5,r6,22b68 <__divdf3+0x244>
   229fc:	28802d26 	beq	r5,r2,22ab4 <__divdf3+0x190>
   22a00:	d8c00617 	ldw	r3,24(sp)
   22a04:	d8800b17 	ldw	r2,44(sp)
   22a08:	d9c00817 	ldw	r7,32(sp)
   22a0c:	dc400d17 	ldw	r17,52(sp)
   22a10:	188bc83a 	sub	r5,r3,r2
   22a14:	d9800717 	ldw	r6,28(sp)
   22a18:	dc000c17 	ldw	r16,48(sp)
   22a1c:	d9400615 	stw	r5,24(sp)
   22a20:	3c403836 	bltu	r7,r17,22b04 <__divdf3+0x1e0>
   22a24:	89c03626 	beq	r17,r7,22b00 <__divdf3+0x1dc>
   22a28:	0015883a 	mov	r10,zero
   22a2c:	001d883a 	mov	r14,zero
   22a30:	02c40034 	movhi	r11,4096
   22a34:	001f883a 	mov	r15,zero
   22a38:	003f883a 	mov	ra,zero
   22a3c:	04800f44 	movi	r18,61
   22a40:	00000f06 	br	22a80 <__divdf3+0x15c>
   22a44:	601d883a 	mov	r14,r12
   22a48:	681f883a 	mov	r15,r13
   22a4c:	400d883a 	mov	r6,r8
   22a50:	100f883a 	mov	r7,r2
   22a54:	3191883a 	add	r8,r6,r6
   22a58:	5808d07a 	srli	r4,r11,1
   22a5c:	4185803a 	cmpltu	r2,r8,r6
   22a60:	39d3883a 	add	r9,r7,r7
   22a64:	28c6b03a 	or	r3,r5,r3
   22a68:	1245883a 	add	r2,r2,r9
   22a6c:	1815883a 	mov	r10,r3
   22a70:	2017883a 	mov	r11,r4
   22a74:	400d883a 	mov	r6,r8
   22a78:	100f883a 	mov	r7,r2
   22a7c:	fc801726 	beq	ra,r18,22adc <__divdf3+0x1b8>
   22a80:	580a97fa 	slli	r5,r11,31
   22a84:	5006d07a 	srli	r3,r10,1
   22a88:	ffc00044 	addi	ra,ra,1
   22a8c:	3c7ff136 	bltu	r7,r17,22a54 <__divdf3+0x130>
   22a90:	3411c83a 	sub	r8,r6,r16
   22a94:	3205803a 	cmpltu	r2,r6,r8
   22a98:	3c53c83a 	sub	r9,r7,r17
   22a9c:	7298b03a 	or	r12,r14,r10
   22aa0:	7adab03a 	or	r13,r15,r11
   22aa4:	4885c83a 	sub	r2,r9,r2
   22aa8:	89ffe61e 	bne	r17,r7,22a44 <__divdf3+0x120>
   22aac:	343fe936 	bltu	r6,r16,22a54 <__divdf3+0x130>
   22ab0:	003fe406 	br	22a44 <__divdf3+0x120>
   22ab4:	9809883a 	mov	r4,r19
   22ab8:	d9800415 	stw	r6,16(sp)
   22abc:	00232740 	call	23274 <__pack_d>
   22ac0:	dfc01217 	ldw	ra,72(sp)
   22ac4:	dcc01117 	ldw	r19,68(sp)
   22ac8:	dc801017 	ldw	r18,64(sp)
   22acc:	dc400f17 	ldw	r17,60(sp)
   22ad0:	dc000e17 	ldw	r16,56(sp)
   22ad4:	dec01304 	addi	sp,sp,76
   22ad8:	f800283a 	ret
   22adc:	00803fc4 	movi	r2,255
   22ae0:	7090703a 	and	r8,r14,r2
   22ae4:	00802004 	movi	r2,128
   22ae8:	0007883a 	mov	r3,zero
   22aec:	0013883a 	mov	r9,zero
   22af0:	40800d26 	beq	r8,r2,22b28 <__divdf3+0x204>
   22af4:	dbc00815 	stw	r15,32(sp)
   22af8:	db800715 	stw	r14,28(sp)
   22afc:	003fab06 	br	229ac <__divdf3+0x88>
   22b00:	343fc92e 	bgeu	r6,r16,22a28 <__divdf3+0x104>
   22b04:	3185883a 	add	r2,r6,r6
   22b08:	1189803a 	cmpltu	r4,r2,r6
   22b0c:	39c7883a 	add	r3,r7,r7
   22b10:	20c9883a 	add	r4,r4,r3
   22b14:	297fffc4 	addi	r5,r5,-1
   22b18:	100d883a 	mov	r6,r2
   22b1c:	200f883a 	mov	r7,r4
   22b20:	d9400615 	stw	r5,24(sp)
   22b24:	003fc006 	br	22a28 <__divdf3+0x104>
   22b28:	483ff21e 	bne	r9,zero,22af4 <__divdf3+0x1d0>
   22b2c:	01004004 	movi	r4,256
   22b30:	7104703a 	and	r2,r14,r4
   22b34:	10c4b03a 	or	r2,r2,r3
   22b38:	103fee1e 	bne	r2,zero,22af4 <__divdf3+0x1d0>
   22b3c:	31c4b03a 	or	r2,r6,r7
   22b40:	103fec26 	beq	r2,zero,22af4 <__divdf3+0x1d0>
   22b44:	7205883a 	add	r2,r14,r8
   22b48:	1391803a 	cmpltu	r8,r2,r14
   22b4c:	43d1883a 	add	r8,r8,r15
   22b50:	013fc004 	movi	r4,-256
   22b54:	111c703a 	and	r14,r2,r4
   22b58:	401f883a 	mov	r15,r8
   22b5c:	003fe506 	br	22af4 <__divdf3+0x1d0>
   22b60:	8009883a 	mov	r4,r16
   22b64:	003f9206 	br	229b0 <__divdf3+0x8c>
   22b68:	9809883a 	mov	r4,r19
   22b6c:	d8000715 	stw	zero,28(sp)
   22b70:	d8000815 	stw	zero,32(sp)
   22b74:	d8000615 	stw	zero,24(sp)
   22b78:	003f8d06 	br	229b0 <__divdf3+0x8c>

00022b7c <__gtdf2>:
   22b7c:	deffef04 	addi	sp,sp,-68
   22b80:	dc400f15 	stw	r17,60(sp)
   22b84:	dc400404 	addi	r17,sp,16
   22b88:	2005883a 	mov	r2,r4
   22b8c:	2807883a 	mov	r3,r5
   22b90:	dc000e15 	stw	r16,56(sp)
   22b94:	d809883a 	mov	r4,sp
   22b98:	880b883a 	mov	r5,r17
   22b9c:	dc000904 	addi	r16,sp,36
   22ba0:	d8c00115 	stw	r3,4(sp)
   22ba4:	d8800015 	stw	r2,0(sp)
   22ba8:	d9800215 	stw	r6,8(sp)
   22bac:	dfc01015 	stw	ra,64(sp)
   22bb0:	d9c00315 	stw	r7,12(sp)
   22bb4:	00235880 	call	23588 <__unpack_d>
   22bb8:	d9000204 	addi	r4,sp,8
   22bbc:	800b883a 	mov	r5,r16
   22bc0:	00235880 	call	23588 <__unpack_d>
   22bc4:	d8800417 	ldw	r2,16(sp)
   22bc8:	00c00044 	movi	r3,1
   22bcc:	01bfffc4 	movi	r6,-1
   22bd0:	1880062e 	bgeu	r3,r2,22bec <__gtdf2+0x70>
   22bd4:	d8800917 	ldw	r2,36(sp)
   22bd8:	8809883a 	mov	r4,r17
   22bdc:	800b883a 	mov	r5,r16
   22be0:	1880022e 	bgeu	r3,r2,22bec <__gtdf2+0x70>
   22be4:	00236c00 	call	236c0 <__fpcmp_parts_d>
   22be8:	100d883a 	mov	r6,r2
   22bec:	3005883a 	mov	r2,r6
   22bf0:	dfc01017 	ldw	ra,64(sp)
   22bf4:	dc400f17 	ldw	r17,60(sp)
   22bf8:	dc000e17 	ldw	r16,56(sp)
   22bfc:	dec01104 	addi	sp,sp,68
   22c00:	f800283a 	ret

00022c04 <__ltdf2>:
   22c04:	deffef04 	addi	sp,sp,-68
   22c08:	dc400f15 	stw	r17,60(sp)
   22c0c:	dc400404 	addi	r17,sp,16
   22c10:	2005883a 	mov	r2,r4
   22c14:	2807883a 	mov	r3,r5
   22c18:	dc000e15 	stw	r16,56(sp)
   22c1c:	d809883a 	mov	r4,sp
   22c20:	880b883a 	mov	r5,r17
   22c24:	dc000904 	addi	r16,sp,36
   22c28:	d8c00115 	stw	r3,4(sp)
   22c2c:	d8800015 	stw	r2,0(sp)
   22c30:	d9800215 	stw	r6,8(sp)
   22c34:	dfc01015 	stw	ra,64(sp)
   22c38:	d9c00315 	stw	r7,12(sp)
   22c3c:	00235880 	call	23588 <__unpack_d>
   22c40:	d9000204 	addi	r4,sp,8
   22c44:	800b883a 	mov	r5,r16
   22c48:	00235880 	call	23588 <__unpack_d>
   22c4c:	d8800417 	ldw	r2,16(sp)
   22c50:	00c00044 	movi	r3,1
   22c54:	180d883a 	mov	r6,r3
   22c58:	1880062e 	bgeu	r3,r2,22c74 <__ltdf2+0x70>
   22c5c:	d8800917 	ldw	r2,36(sp)
   22c60:	8809883a 	mov	r4,r17
   22c64:	800b883a 	mov	r5,r16
   22c68:	1880022e 	bgeu	r3,r2,22c74 <__ltdf2+0x70>
   22c6c:	00236c00 	call	236c0 <__fpcmp_parts_d>
   22c70:	100d883a 	mov	r6,r2
   22c74:	3005883a 	mov	r2,r6
   22c78:	dfc01017 	ldw	ra,64(sp)
   22c7c:	dc400f17 	ldw	r17,60(sp)
   22c80:	dc000e17 	ldw	r16,56(sp)
   22c84:	dec01104 	addi	sp,sp,68
   22c88:	f800283a 	ret

00022c8c <__floatsidf>:
   22c8c:	2006d7fa 	srli	r3,r4,31
   22c90:	defff604 	addi	sp,sp,-40
   22c94:	008000c4 	movi	r2,3
   22c98:	dfc00915 	stw	ra,36(sp)
   22c9c:	dcc00815 	stw	r19,32(sp)
   22ca0:	dc800715 	stw	r18,28(sp)
   22ca4:	dc400615 	stw	r17,24(sp)
   22ca8:	dc000515 	stw	r16,20(sp)
   22cac:	d8800015 	stw	r2,0(sp)
   22cb0:	d8c00115 	stw	r3,4(sp)
   22cb4:	20000f1e 	bne	r4,zero,22cf4 <__floatsidf+0x68>
   22cb8:	00800084 	movi	r2,2
   22cbc:	d8800015 	stw	r2,0(sp)
   22cc0:	d809883a 	mov	r4,sp
   22cc4:	00232740 	call	23274 <__pack_d>
   22cc8:	1009883a 	mov	r4,r2
   22ccc:	180b883a 	mov	r5,r3
   22cd0:	2005883a 	mov	r2,r4
   22cd4:	2807883a 	mov	r3,r5
   22cd8:	dfc00917 	ldw	ra,36(sp)
   22cdc:	dcc00817 	ldw	r19,32(sp)
   22ce0:	dc800717 	ldw	r18,28(sp)
   22ce4:	dc400617 	ldw	r17,24(sp)
   22ce8:	dc000517 	ldw	r16,20(sp)
   22cec:	dec00a04 	addi	sp,sp,40
   22cf0:	f800283a 	ret
   22cf4:	00800f04 	movi	r2,60
   22cf8:	1807003a 	cmpeq	r3,r3,zero
   22cfc:	d8800215 	stw	r2,8(sp)
   22d00:	18001126 	beq	r3,zero,22d48 <__floatsidf+0xbc>
   22d04:	0027883a 	mov	r19,zero
   22d08:	2025883a 	mov	r18,r4
   22d0c:	d9000315 	stw	r4,12(sp)
   22d10:	dcc00415 	stw	r19,16(sp)
   22d14:	0022fa00 	call	22fa0 <__clzsi2>
   22d18:	11000744 	addi	r4,r2,29
   22d1c:	013fe80e 	bge	zero,r4,22cc0 <__floatsidf+0x34>
   22d20:	10bfff44 	addi	r2,r2,-3
   22d24:	10000c16 	blt	r2,zero,22d58 <__floatsidf+0xcc>
   22d28:	90a2983a 	sll	r17,r18,r2
   22d2c:	0021883a 	mov	r16,zero
   22d30:	d8800217 	ldw	r2,8(sp)
   22d34:	dc400415 	stw	r17,16(sp)
   22d38:	dc000315 	stw	r16,12(sp)
   22d3c:	1105c83a 	sub	r2,r2,r4
   22d40:	d8800215 	stw	r2,8(sp)
   22d44:	003fde06 	br	22cc0 <__floatsidf+0x34>
   22d48:	00a00034 	movhi	r2,32768
   22d4c:	20800a26 	beq	r4,r2,22d78 <__floatsidf+0xec>
   22d50:	0109c83a 	sub	r4,zero,r4
   22d54:	003feb06 	br	22d04 <__floatsidf+0x78>
   22d58:	9006d07a 	srli	r3,r18,1
   22d5c:	008007c4 	movi	r2,31
   22d60:	1105c83a 	sub	r2,r2,r4
   22d64:	1886d83a 	srl	r3,r3,r2
   22d68:	9922983a 	sll	r17,r19,r4
   22d6c:	9120983a 	sll	r16,r18,r4
   22d70:	1c62b03a 	or	r17,r3,r17
   22d74:	003fee06 	br	22d30 <__floatsidf+0xa4>
   22d78:	0009883a 	mov	r4,zero
   22d7c:	01707834 	movhi	r5,49632
   22d80:	003fd306 	br	22cd0 <__floatsidf+0x44>

00022d84 <__fixdfsi>:
   22d84:	defff804 	addi	sp,sp,-32
   22d88:	2005883a 	mov	r2,r4
   22d8c:	2807883a 	mov	r3,r5
   22d90:	d809883a 	mov	r4,sp
   22d94:	d9400204 	addi	r5,sp,8
   22d98:	d8c00115 	stw	r3,4(sp)
   22d9c:	d8800015 	stw	r2,0(sp)
   22da0:	dfc00715 	stw	ra,28(sp)
   22da4:	00235880 	call	23588 <__unpack_d>
   22da8:	d8c00217 	ldw	r3,8(sp)
   22dac:	00800084 	movi	r2,2
   22db0:	1880051e 	bne	r3,r2,22dc8 <__fixdfsi+0x44>
   22db4:	0007883a 	mov	r3,zero
   22db8:	1805883a 	mov	r2,r3
   22dbc:	dfc00717 	ldw	ra,28(sp)
   22dc0:	dec00804 	addi	sp,sp,32
   22dc4:	f800283a 	ret
   22dc8:	00800044 	movi	r2,1
   22dcc:	10fff92e 	bgeu	r2,r3,22db4 <__fixdfsi+0x30>
   22dd0:	00800104 	movi	r2,4
   22dd4:	18800426 	beq	r3,r2,22de8 <__fixdfsi+0x64>
   22dd8:	d8c00417 	ldw	r3,16(sp)
   22ddc:	183ff516 	blt	r3,zero,22db4 <__fixdfsi+0x30>
   22de0:	00800784 	movi	r2,30
   22de4:	10c0080e 	bge	r2,r3,22e08 <__fixdfsi+0x84>
   22de8:	d8800317 	ldw	r2,12(sp)
   22dec:	1000121e 	bne	r2,zero,22e38 <__fixdfsi+0xb4>
   22df0:	00e00034 	movhi	r3,32768
   22df4:	18ffffc4 	addi	r3,r3,-1
   22df8:	1805883a 	mov	r2,r3
   22dfc:	dfc00717 	ldw	ra,28(sp)
   22e00:	dec00804 	addi	sp,sp,32
   22e04:	f800283a 	ret
   22e08:	00800f04 	movi	r2,60
   22e0c:	10d1c83a 	sub	r8,r2,r3
   22e10:	40bff804 	addi	r2,r8,-32
   22e14:	d9800517 	ldw	r6,20(sp)
   22e18:	d9c00617 	ldw	r7,24(sp)
   22e1c:	10000816 	blt	r2,zero,22e40 <__fixdfsi+0xbc>
   22e20:	3888d83a 	srl	r4,r7,r2
   22e24:	d8800317 	ldw	r2,12(sp)
   22e28:	2007883a 	mov	r3,r4
   22e2c:	103fe226 	beq	r2,zero,22db8 <__fixdfsi+0x34>
   22e30:	0107c83a 	sub	r3,zero,r4
   22e34:	003fe006 	br	22db8 <__fixdfsi+0x34>
   22e38:	00e00034 	movhi	r3,32768
   22e3c:	003fde06 	br	22db8 <__fixdfsi+0x34>
   22e40:	39c7883a 	add	r3,r7,r7
   22e44:	008007c4 	movi	r2,31
   22e48:	1205c83a 	sub	r2,r2,r8
   22e4c:	1886983a 	sll	r3,r3,r2
   22e50:	3208d83a 	srl	r4,r6,r8
   22e54:	1908b03a 	or	r4,r3,r4
   22e58:	003ff206 	br	22e24 <__fixdfsi+0xa0>

00022e5c <__make_dp>:
   22e5c:	defff904 	addi	sp,sp,-28
   22e60:	d8c00717 	ldw	r3,28(sp)
   22e64:	d9000015 	stw	r4,0(sp)
   22e68:	d809883a 	mov	r4,sp
   22e6c:	dfc00515 	stw	ra,20(sp)
   22e70:	d9c00615 	stw	r7,24(sp)
   22e74:	d9400115 	stw	r5,4(sp)
   22e78:	d9800215 	stw	r6,8(sp)
   22e7c:	d8c00415 	stw	r3,16(sp)
   22e80:	d9c00315 	stw	r7,12(sp)
   22e84:	00232740 	call	23274 <__pack_d>
   22e88:	dfc00517 	ldw	ra,20(sp)
   22e8c:	dec00704 	addi	sp,sp,28
   22e90:	f800283a 	ret

00022e94 <__truncdfsf2>:
   22e94:	defff804 	addi	sp,sp,-32
   22e98:	2005883a 	mov	r2,r4
   22e9c:	2807883a 	mov	r3,r5
   22ea0:	d809883a 	mov	r4,sp
   22ea4:	d9400204 	addi	r5,sp,8
   22ea8:	d8c00115 	stw	r3,4(sp)
   22eac:	d8800015 	stw	r2,0(sp)
   22eb0:	dfc00715 	stw	ra,28(sp)
   22eb4:	00235880 	call	23588 <__unpack_d>
   22eb8:	d9c00517 	ldw	r7,20(sp)
   22ebc:	da000617 	ldw	r8,24(sp)
   22ec0:	02d00034 	movhi	r11,16384
   22ec4:	5affffc4 	addi	r11,r11,-1
   22ec8:	3812d7ba 	srli	r9,r7,30
   22ecc:	401a90ba 	slli	r13,r8,2
   22ed0:	3ac4703a 	and	r2,r7,r11
   22ed4:	0007883a 	mov	r3,zero
   22ed8:	6a52b03a 	or	r9,r13,r9
   22edc:	10c4b03a 	or	r2,r2,r3
   22ee0:	d9000217 	ldw	r4,8(sp)
   22ee4:	d9400317 	ldw	r5,12(sp)
   22ee8:	d9800417 	ldw	r6,16(sp)
   22eec:	480f883a 	mov	r7,r9
   22ef0:	10000126 	beq	r2,zero,22ef8 <__truncdfsf2+0x64>
   22ef4:	49c00054 	ori	r7,r9,1
   22ef8:	00232480 	call	23248 <__make_fp>
   22efc:	dfc00717 	ldw	ra,28(sp)
   22f00:	dec00804 	addi	sp,sp,32
   22f04:	f800283a 	ret

00022f08 <__muldi3>:
   22f08:	2011883a 	mov	r8,r4
   22f0c:	427fffcc 	andi	r9,r8,65535
   22f10:	4018d43a 	srli	r12,r8,16
   22f14:	32bfffcc 	andi	r10,r6,65535
   22f18:	3016d43a 	srli	r11,r6,16
   22f1c:	4a85383a 	mul	r2,r9,r10
   22f20:	6295383a 	mul	r10,r12,r10
   22f24:	4ad3383a 	mul	r9,r9,r11
   22f28:	113fffcc 	andi	r4,r2,65535
   22f2c:	1004d43a 	srli	r2,r2,16
   22f30:	4a93883a 	add	r9,r9,r10
   22f34:	3807883a 	mov	r3,r7
   22f38:	1245883a 	add	r2,r2,r9
   22f3c:	280f883a 	mov	r7,r5
   22f40:	180b883a 	mov	r5,r3
   22f44:	1006943a 	slli	r3,r2,16
   22f48:	defffd04 	addi	sp,sp,-12
   22f4c:	dc800215 	stw	r18,8(sp)
   22f50:	1907883a 	add	r3,r3,r4
   22f54:	dc400115 	stw	r17,4(sp)
   22f58:	dc000015 	stw	r16,0(sp)
   22f5c:	4165383a 	mul	r18,r8,r5
   22f60:	31e3383a 	mul	r17,r6,r7
   22f64:	1012d43a 	srli	r9,r2,16
   22f68:	62d9383a 	mul	r12,r12,r11
   22f6c:	181f883a 	mov	r15,r3
   22f70:	1280022e 	bgeu	r2,r10,22f7c <__muldi3+0x74>
   22f74:	00800074 	movhi	r2,1
   22f78:	6099883a 	add	r12,r12,r2
   22f7c:	624d883a 	add	r6,r12,r9
   22f80:	9187883a 	add	r3,r18,r6
   22f84:	88c7883a 	add	r3,r17,r3
   22f88:	7805883a 	mov	r2,r15
   22f8c:	dc800217 	ldw	r18,8(sp)
   22f90:	dc400117 	ldw	r17,4(sp)
   22f94:	dc000017 	ldw	r16,0(sp)
   22f98:	dec00304 	addi	sp,sp,12
   22f9c:	f800283a 	ret

00022fa0 <__clzsi2>:
   22fa0:	00bfffd4 	movui	r2,65535
   22fa4:	11000e36 	bltu	r2,r4,22fe0 <__clzsi2+0x40>
   22fa8:	00803fc4 	movi	r2,255
   22fac:	01400204 	movi	r5,8
   22fb0:	0007883a 	mov	r3,zero
   22fb4:	11001036 	bltu	r2,r4,22ff8 <__clzsi2+0x58>
   22fb8:	000b883a 	mov	r5,zero
   22fbc:	20c6d83a 	srl	r3,r4,r3
   22fc0:	008000f4 	movhi	r2,3
   22fc4:	10ba8b04 	addi	r2,r2,-5588
   22fc8:	1887883a 	add	r3,r3,r2
   22fcc:	18800003 	ldbu	r2,0(r3)
   22fd0:	00c00804 	movi	r3,32
   22fd4:	2885883a 	add	r2,r5,r2
   22fd8:	1885c83a 	sub	r2,r3,r2
   22fdc:	f800283a 	ret
   22fe0:	01400404 	movi	r5,16
   22fe4:	00804034 	movhi	r2,256
   22fe8:	10bfffc4 	addi	r2,r2,-1
   22fec:	2807883a 	mov	r3,r5
   22ff0:	113ff22e 	bgeu	r2,r4,22fbc <__clzsi2+0x1c>
   22ff4:	01400604 	movi	r5,24
   22ff8:	2807883a 	mov	r3,r5
   22ffc:	20c6d83a 	srl	r3,r4,r3
   23000:	008000f4 	movhi	r2,3
   23004:	10ba8b04 	addi	r2,r2,-5588
   23008:	1887883a 	add	r3,r3,r2
   2300c:	18800003 	ldbu	r2,0(r3)
   23010:	00c00804 	movi	r3,32
   23014:	2885883a 	add	r2,r5,r2
   23018:	1885c83a 	sub	r2,r3,r2
   2301c:	f800283a 	ret

00023020 <__pack_f>:
   23020:	20c00017 	ldw	r3,0(r4)
   23024:	01c00044 	movi	r7,1
   23028:	21800317 	ldw	r6,12(r4)
   2302c:	21400117 	ldw	r5,4(r4)
   23030:	38c02d2e 	bgeu	r7,r3,230e8 <__pack_f+0xc8>
   23034:	00800104 	movi	r2,4
   23038:	18802826 	beq	r3,r2,230dc <__pack_f+0xbc>
   2303c:	00800084 	movi	r2,2
   23040:	18800126 	beq	r3,r2,23048 <__pack_f+0x28>
   23044:	3000101e 	bne	r6,zero,23088 <__pack_f+0x68>
   23048:	000d883a 	mov	r6,zero
   2304c:	0007883a 	mov	r3,zero
   23050:	19003fcc 	andi	r4,r3,255
   23054:	200895fa 	slli	r4,r4,23
   23058:	00c02034 	movhi	r3,128
   2305c:	18ffffc4 	addi	r3,r3,-1
   23060:	30c6703a 	and	r3,r6,r3
   23064:	10a0002c 	andhi	r2,r2,32768
   23068:	10c4b03a 	or	r2,r2,r3
   2306c:	280a97fa 	slli	r5,r5,31
   23070:	1104b03a 	or	r2,r2,r4
   23074:	00e00034 	movhi	r3,32768
   23078:	18ffffc4 	addi	r3,r3,-1
   2307c:	10c4703a 	and	r2,r2,r3
   23080:	1144b03a 	or	r2,r2,r5
   23084:	f800283a 	ret
   23088:	21000217 	ldw	r4,8(r4)
   2308c:	00bfe084 	movi	r2,-126
   23090:	20801b16 	blt	r4,r2,23100 <__pack_f+0xe0>
   23094:	00801fc4 	movi	r2,127
   23098:	11001016 	blt	r2,r4,230dc <__pack_f+0xbc>
   2309c:	308e703a 	and	r7,r6,r2
   230a0:	2087883a 	add	r3,r4,r2
   230a4:	00801004 	movi	r2,64
   230a8:	38800526 	beq	r7,r2,230c0 <__pack_f+0xa0>
   230ac:	31800fc4 	addi	r6,r6,63
   230b0:	30000716 	blt	r6,zero,230d0 <__pack_f+0xb0>
   230b4:	300490ba 	slli	r2,r6,2
   230b8:	100cd27a 	srli	r6,r2,9
   230bc:	003fe406 	br	23050 <__pack_f+0x30>
   230c0:	3080200c 	andi	r2,r6,128
   230c4:	103ffa26 	beq	r2,zero,230b0 <__pack_f+0x90>
   230c8:	31cd883a 	add	r6,r6,r7
   230cc:	003ff806 	br	230b0 <__pack_f+0x90>
   230d0:	300cd07a 	srli	r6,r6,1
   230d4:	18c00044 	addi	r3,r3,1
   230d8:	003ff606 	br	230b4 <__pack_f+0x94>
   230dc:	000d883a 	mov	r6,zero
   230e0:	00ffffc4 	movi	r3,-1
   230e4:	003fda06 	br	23050 <__pack_f+0x30>
   230e8:	31800434 	orhi	r6,r6,16
   230ec:	00802034 	movhi	r2,128
   230f0:	10bfffc4 	addi	r2,r2,-1
   230f4:	308c703a 	and	r6,r6,r2
   230f8:	00ffffc4 	movi	r3,-1
   230fc:	003fd406 	br	23050 <__pack_f+0x30>
   23100:	1109c83a 	sub	r4,r2,r4
   23104:	00800644 	movi	r2,25
   23108:	11001216 	blt	r2,r4,23154 <__pack_f+0x134>
   2310c:	3904983a 	sll	r2,r7,r4
   23110:	3106d83a 	srl	r3,r6,r4
   23114:	10bfffc4 	addi	r2,r2,-1
   23118:	3084703a 	and	r2,r6,r2
   2311c:	1004c03a 	cmpne	r2,r2,zero
   23120:	1886b03a 	or	r3,r3,r2
   23124:	19001fcc 	andi	r4,r3,127
   23128:	00801004 	movi	r2,64
   2312c:	20800c26 	beq	r4,r2,23160 <__pack_f+0x140>
   23130:	18c00fc4 	addi	r3,r3,63
   23134:	00900034 	movhi	r2,16384
   23138:	10bfffc4 	addi	r2,r2,-1
   2313c:	180cd1fa 	srli	r6,r3,7
   23140:	10c7803a 	cmpltu	r3,r2,r3
   23144:	00802034 	movhi	r2,128
   23148:	10bfffc4 	addi	r2,r2,-1
   2314c:	308c703a 	and	r6,r6,r2
   23150:	003fbf06 	br	23050 <__pack_f+0x30>
   23154:	0007883a 	mov	r3,zero
   23158:	000d883a 	mov	r6,zero
   2315c:	003ff906 	br	23144 <__pack_f+0x124>
   23160:	1880200c 	andi	r2,r3,128
   23164:	10000126 	beq	r2,zero,2316c <__pack_f+0x14c>
   23168:	1907883a 	add	r3,r3,r4
   2316c:	180cd1fa 	srli	r6,r3,7
   23170:	00900034 	movhi	r2,16384
   23174:	10bfffc4 	addi	r2,r2,-1
   23178:	10c7803a 	cmpltu	r3,r2,r3
   2317c:	003ff106 	br	23144 <__pack_f+0x124>

00023180 <__unpack_f>:
   23180:	21800017 	ldw	r6,0(r4)
   23184:	00c02034 	movhi	r3,128
   23188:	18ffffc4 	addi	r3,r3,-1
   2318c:	3004d5fa 	srli	r2,r6,23
   23190:	3008d7fa 	srli	r4,r6,31
   23194:	30ce703a 	and	r7,r6,r3
   23198:	10c03fcc 	andi	r3,r2,255
   2319c:	29000115 	stw	r4,4(r5)
   231a0:	1800131e 	bne	r3,zero,231f0 <__unpack_f+0x70>
   231a4:	38000f26 	beq	r7,zero,231e4 <__unpack_f+0x64>
   231a8:	380691fa 	slli	r3,r7,7
   231ac:	01bfe084 	movi	r6,-126
   231b0:	008000c4 	movi	r2,3
   231b4:	01100034 	movhi	r4,16384
   231b8:	213fffc4 	addi	r4,r4,-1
   231bc:	28800015 	stw	r2,0(r5)
   231c0:	29800215 	stw	r6,8(r5)
   231c4:	20c00536 	bltu	r4,r3,231dc <__unpack_f+0x5c>
   231c8:	3005883a 	mov	r2,r6
   231cc:	18c7883a 	add	r3,r3,r3
   231d0:	10bfffc4 	addi	r2,r2,-1
   231d4:	20fffd2e 	bgeu	r4,r3,231cc <__unpack_f+0x4c>
   231d8:	28800215 	stw	r2,8(r5)
   231dc:	28c00315 	stw	r3,12(r5)
   231e0:	f800283a 	ret
   231e4:	00800084 	movi	r2,2
   231e8:	28800015 	stw	r2,0(r5)
   231ec:	f800283a 	ret
   231f0:	00803fc4 	movi	r2,255
   231f4:	18800826 	beq	r3,r2,23218 <__unpack_f+0x98>
   231f8:	380491fa 	slli	r2,r7,7
   231fc:	18ffe044 	addi	r3,r3,-127
   23200:	28c00215 	stw	r3,8(r5)
   23204:	10900034 	orhi	r2,r2,16384
   23208:	28800315 	stw	r2,12(r5)
   2320c:	008000c4 	movi	r2,3
   23210:	28800015 	stw	r2,0(r5)
   23214:	f800283a 	ret
   23218:	3800031e 	bne	r7,zero,23228 <__unpack_f+0xa8>
   2321c:	00800104 	movi	r2,4
   23220:	28800015 	stw	r2,0(r5)
   23224:	f800283a 	ret
   23228:	3080042c 	andhi	r2,r6,16
   2322c:	10000426 	beq	r2,zero,23240 <__unpack_f+0xc0>
   23230:	00800044 	movi	r2,1
   23234:	28800015 	stw	r2,0(r5)
   23238:	29c00315 	stw	r7,12(r5)
   2323c:	f800283a 	ret
   23240:	28000015 	stw	zero,0(r5)
   23244:	003ffc06 	br	23238 <__unpack_f+0xb8>

00023248 <__make_fp>:
   23248:	defffb04 	addi	sp,sp,-20
   2324c:	d9000015 	stw	r4,0(sp)
   23250:	d809883a 	mov	r4,sp
   23254:	dfc00415 	stw	ra,16(sp)
   23258:	d9400115 	stw	r5,4(sp)
   2325c:	d9800215 	stw	r6,8(sp)
   23260:	d9c00315 	stw	r7,12(sp)
   23264:	00230200 	call	23020 <__pack_f>
   23268:	dfc00417 	ldw	ra,16(sp)
   2326c:	dec00504 	addi	sp,sp,20
   23270:	f800283a 	ret

00023274 <__pack_d>:
   23274:	20c00017 	ldw	r3,0(r4)
   23278:	defffd04 	addi	sp,sp,-12
   2327c:	dc000015 	stw	r16,0(sp)
   23280:	dc800215 	stw	r18,8(sp)
   23284:	dc400115 	stw	r17,4(sp)
   23288:	00800044 	movi	r2,1
   2328c:	22000317 	ldw	r8,12(r4)
   23290:	001f883a 	mov	r15,zero
   23294:	22400417 	ldw	r9,16(r4)
   23298:	24000117 	ldw	r16,4(r4)
   2329c:	10c0552e 	bgeu	r2,r3,233f4 <__pack_d+0x180>
   232a0:	00800104 	movi	r2,4
   232a4:	18804f26 	beq	r3,r2,233e4 <__pack_d+0x170>
   232a8:	00800084 	movi	r2,2
   232ac:	18800226 	beq	r3,r2,232b8 <__pack_d+0x44>
   232b0:	4244b03a 	or	r2,r8,r9
   232b4:	10001a1e 	bne	r2,zero,23320 <__pack_d+0xac>
   232b8:	000d883a 	mov	r6,zero
   232bc:	000f883a 	mov	r7,zero
   232c0:	0011883a 	mov	r8,zero
   232c4:	00800434 	movhi	r2,16
   232c8:	10bfffc4 	addi	r2,r2,-1
   232cc:	301d883a 	mov	r14,r6
   232d0:	3884703a 	and	r2,r7,r2
   232d4:	400a953a 	slli	r5,r8,20
   232d8:	79bffc2c 	andhi	r6,r15,65520
   232dc:	308cb03a 	or	r6,r6,r2
   232e0:	00e00434 	movhi	r3,32784
   232e4:	18ffffc4 	addi	r3,r3,-1
   232e8:	800497fa 	slli	r2,r16,31
   232ec:	30c6703a 	and	r3,r6,r3
   232f0:	1946b03a 	or	r3,r3,r5
   232f4:	01600034 	movhi	r5,32768
   232f8:	297fffc4 	addi	r5,r5,-1
   232fc:	194a703a 	and	r5,r3,r5
   23300:	288ab03a 	or	r5,r5,r2
   23304:	2807883a 	mov	r3,r5
   23308:	7005883a 	mov	r2,r14
   2330c:	dc800217 	ldw	r18,8(sp)
   23310:	dc400117 	ldw	r17,4(sp)
   23314:	dc000017 	ldw	r16,0(sp)
   23318:	dec00304 	addi	sp,sp,12
   2331c:	f800283a 	ret
   23320:	21000217 	ldw	r4,8(r4)
   23324:	00bf0084 	movi	r2,-1022
   23328:	20803f16 	blt	r4,r2,23428 <__pack_d+0x1b4>
   2332c:	0080ffc4 	movi	r2,1023
   23330:	11002c16 	blt	r2,r4,233e4 <__pack_d+0x170>
   23334:	00803fc4 	movi	r2,255
   23338:	408c703a 	and	r6,r8,r2
   2333c:	00802004 	movi	r2,128
   23340:	0007883a 	mov	r3,zero
   23344:	000f883a 	mov	r7,zero
   23348:	2280ffc4 	addi	r10,r4,1023
   2334c:	30801e26 	beq	r6,r2,233c8 <__pack_d+0x154>
   23350:	00801fc4 	movi	r2,127
   23354:	4089883a 	add	r4,r8,r2
   23358:	220d803a 	cmpltu	r6,r4,r8
   2335c:	324d883a 	add	r6,r6,r9
   23360:	2011883a 	mov	r8,r4
   23364:	3013883a 	mov	r9,r6
   23368:	00880034 	movhi	r2,8192
   2336c:	10bfffc4 	addi	r2,r2,-1
   23370:	12400d36 	bltu	r2,r9,233a8 <__pack_d+0x134>
   23374:	4804963a 	slli	r2,r9,24
   23378:	400cd23a 	srli	r6,r8,8
   2337c:	480ed23a 	srli	r7,r9,8
   23380:	013fffc4 	movi	r4,-1
   23384:	118cb03a 	or	r6,r2,r6
   23388:	01400434 	movhi	r5,16
   2338c:	297fffc4 	addi	r5,r5,-1
   23390:	3104703a 	and	r2,r6,r4
   23394:	3946703a 	and	r3,r7,r5
   23398:	5201ffcc 	andi	r8,r10,2047
   2339c:	100d883a 	mov	r6,r2
   233a0:	180f883a 	mov	r7,r3
   233a4:	003fc706 	br	232c4 <__pack_d+0x50>
   233a8:	480897fa 	slli	r4,r9,31
   233ac:	4004d07a 	srli	r2,r8,1
   233b0:	4806d07a 	srli	r3,r9,1
   233b4:	52800044 	addi	r10,r10,1
   233b8:	2084b03a 	or	r2,r4,r2
   233bc:	1011883a 	mov	r8,r2
   233c0:	1813883a 	mov	r9,r3
   233c4:	003feb06 	br	23374 <__pack_d+0x100>
   233c8:	383fe11e 	bne	r7,zero,23350 <__pack_d+0xdc>
   233cc:	01004004 	movi	r4,256
   233d0:	4104703a 	and	r2,r8,r4
   233d4:	10c4b03a 	or	r2,r2,r3
   233d8:	103fe326 	beq	r2,zero,23368 <__pack_d+0xf4>
   233dc:	3005883a 	mov	r2,r6
   233e0:	003fdc06 	br	23354 <__pack_d+0xe0>
   233e4:	000d883a 	mov	r6,zero
   233e8:	000f883a 	mov	r7,zero
   233ec:	0201ffc4 	movi	r8,2047
   233f0:	003fb406 	br	232c4 <__pack_d+0x50>
   233f4:	0005883a 	mov	r2,zero
   233f8:	00c00234 	movhi	r3,8
   233fc:	408cb03a 	or	r6,r8,r2
   23400:	48ceb03a 	or	r7,r9,r3
   23404:	013fffc4 	movi	r4,-1
   23408:	01400434 	movhi	r5,16
   2340c:	297fffc4 	addi	r5,r5,-1
   23410:	3104703a 	and	r2,r6,r4
   23414:	3946703a 	and	r3,r7,r5
   23418:	100d883a 	mov	r6,r2
   2341c:	180f883a 	mov	r7,r3
   23420:	0201ffc4 	movi	r8,2047
   23424:	003fa706 	br	232c4 <__pack_d+0x50>
   23428:	1109c83a 	sub	r4,r2,r4
   2342c:	00800e04 	movi	r2,56
   23430:	11004316 	blt	r2,r4,23540 <__pack_d+0x2cc>
   23434:	21fff804 	addi	r7,r4,-32
   23438:	38004516 	blt	r7,zero,23550 <__pack_d+0x2dc>
   2343c:	49d8d83a 	srl	r12,r9,r7
   23440:	001b883a 	mov	r13,zero
   23444:	0023883a 	mov	r17,zero
   23448:	01400044 	movi	r5,1
   2344c:	0025883a 	mov	r18,zero
   23450:	38004716 	blt	r7,zero,23570 <__pack_d+0x2fc>
   23454:	29d6983a 	sll	r11,r5,r7
   23458:	0015883a 	mov	r10,zero
   2345c:	00bfffc4 	movi	r2,-1
   23460:	5089883a 	add	r4,r10,r2
   23464:	588b883a 	add	r5,r11,r2
   23468:	228d803a 	cmpltu	r6,r4,r10
   2346c:	314b883a 	add	r5,r6,r5
   23470:	4104703a 	and	r2,r8,r4
   23474:	4946703a 	and	r3,r9,r5
   23478:	10c4b03a 	or	r2,r2,r3
   2347c:	10000226 	beq	r2,zero,23488 <__pack_d+0x214>
   23480:	04400044 	movi	r17,1
   23484:	0025883a 	mov	r18,zero
   23488:	00803fc4 	movi	r2,255
   2348c:	644eb03a 	or	r7,r12,r17
   23490:	3892703a 	and	r9,r7,r2
   23494:	00802004 	movi	r2,128
   23498:	6c90b03a 	or	r8,r13,r18
   2349c:	0015883a 	mov	r10,zero
   234a0:	48801626 	beq	r9,r2,234fc <__pack_d+0x288>
   234a4:	01001fc4 	movi	r4,127
   234a8:	3905883a 	add	r2,r7,r4
   234ac:	11cd803a 	cmpltu	r6,r2,r7
   234b0:	320d883a 	add	r6,r6,r8
   234b4:	100f883a 	mov	r7,r2
   234b8:	00840034 	movhi	r2,4096
   234bc:	10bfffc4 	addi	r2,r2,-1
   234c0:	3011883a 	mov	r8,r6
   234c4:	0007883a 	mov	r3,zero
   234c8:	11801b36 	bltu	r2,r6,23538 <__pack_d+0x2c4>
   234cc:	4004963a 	slli	r2,r8,24
   234d0:	3808d23a 	srli	r4,r7,8
   234d4:	400ad23a 	srli	r5,r8,8
   234d8:	1813883a 	mov	r9,r3
   234dc:	1108b03a 	or	r4,r2,r4
   234e0:	00bfffc4 	movi	r2,-1
   234e4:	00c00434 	movhi	r3,16
   234e8:	18ffffc4 	addi	r3,r3,-1
   234ec:	208c703a 	and	r6,r4,r2
   234f0:	28ce703a 	and	r7,r5,r3
   234f4:	4a01ffcc 	andi	r8,r9,2047
   234f8:	003f7206 	br	232c4 <__pack_d+0x50>
   234fc:	503fe91e 	bne	r10,zero,234a4 <__pack_d+0x230>
   23500:	01004004 	movi	r4,256
   23504:	3904703a 	and	r2,r7,r4
   23508:	0007883a 	mov	r3,zero
   2350c:	10c4b03a 	or	r2,r2,r3
   23510:	10000626 	beq	r2,zero,2352c <__pack_d+0x2b8>
   23514:	3a45883a 	add	r2,r7,r9
   23518:	11cd803a 	cmpltu	r6,r2,r7
   2351c:	320d883a 	add	r6,r6,r8
   23520:	100f883a 	mov	r7,r2
   23524:	3011883a 	mov	r8,r6
   23528:	0007883a 	mov	r3,zero
   2352c:	00840034 	movhi	r2,4096
   23530:	10bfffc4 	addi	r2,r2,-1
   23534:	123fe52e 	bgeu	r2,r8,234cc <__pack_d+0x258>
   23538:	00c00044 	movi	r3,1
   2353c:	003fe306 	br	234cc <__pack_d+0x258>
   23540:	0009883a 	mov	r4,zero
   23544:	0013883a 	mov	r9,zero
   23548:	000b883a 	mov	r5,zero
   2354c:	003fe406 	br	234e0 <__pack_d+0x26c>
   23550:	4a47883a 	add	r3,r9,r9
   23554:	008007c4 	movi	r2,31
   23558:	1105c83a 	sub	r2,r2,r4
   2355c:	1886983a 	sll	r3,r3,r2
   23560:	4118d83a 	srl	r12,r8,r4
   23564:	491ad83a 	srl	r13,r9,r4
   23568:	1b18b03a 	or	r12,r3,r12
   2356c:	003fb506 	br	23444 <__pack_d+0x1d0>
   23570:	2806d07a 	srli	r3,r5,1
   23574:	008007c4 	movi	r2,31
   23578:	1105c83a 	sub	r2,r2,r4
   2357c:	1896d83a 	srl	r11,r3,r2
   23580:	2914983a 	sll	r10,r5,r4
   23584:	003fb506 	br	2345c <__pack_d+0x1e8>

00023588 <__unpack_d>:
   23588:	20c00117 	ldw	r3,4(r4)
   2358c:	22400017 	ldw	r9,0(r4)
   23590:	00800434 	movhi	r2,16
   23594:	10bfffc4 	addi	r2,r2,-1
   23598:	1808d53a 	srli	r4,r3,20
   2359c:	180cd7fa 	srli	r6,r3,31
   235a0:	1894703a 	and	r10,r3,r2
   235a4:	2201ffcc 	andi	r8,r4,2047
   235a8:	281b883a 	mov	r13,r5
   235ac:	4817883a 	mov	r11,r9
   235b0:	29800115 	stw	r6,4(r5)
   235b4:	5019883a 	mov	r12,r10
   235b8:	40001e1e 	bne	r8,zero,23634 <__unpack_d+0xac>
   235bc:	4a84b03a 	or	r2,r9,r10
   235c0:	10001926 	beq	r2,zero,23628 <__unpack_d+0xa0>
   235c4:	4804d63a 	srli	r2,r9,24
   235c8:	500c923a 	slli	r6,r10,8
   235cc:	013f0084 	movi	r4,-1022
   235d0:	00c40034 	movhi	r3,4096
   235d4:	18ffffc4 	addi	r3,r3,-1
   235d8:	118cb03a 	or	r6,r2,r6
   235dc:	008000c4 	movi	r2,3
   235e0:	480a923a 	slli	r5,r9,8
   235e4:	68800015 	stw	r2,0(r13)
   235e8:	69000215 	stw	r4,8(r13)
   235ec:	19800b36 	bltu	r3,r6,2361c <__unpack_d+0x94>
   235f0:	200f883a 	mov	r7,r4
   235f4:	1811883a 	mov	r8,r3
   235f8:	2945883a 	add	r2,r5,r5
   235fc:	1149803a 	cmpltu	r4,r2,r5
   23600:	3187883a 	add	r3,r6,r6
   23604:	20c9883a 	add	r4,r4,r3
   23608:	100b883a 	mov	r5,r2
   2360c:	200d883a 	mov	r6,r4
   23610:	39ffffc4 	addi	r7,r7,-1
   23614:	413ff82e 	bgeu	r8,r4,235f8 <__unpack_d+0x70>
   23618:	69c00215 	stw	r7,8(r13)
   2361c:	69800415 	stw	r6,16(r13)
   23620:	69400315 	stw	r5,12(r13)
   23624:	f800283a 	ret
   23628:	00800084 	movi	r2,2
   2362c:	28800015 	stw	r2,0(r5)
   23630:	f800283a 	ret
   23634:	0081ffc4 	movi	r2,2047
   23638:	40800f26 	beq	r8,r2,23678 <__unpack_d+0xf0>
   2363c:	480cd63a 	srli	r6,r9,24
   23640:	5006923a 	slli	r3,r10,8
   23644:	4804923a 	slli	r2,r9,8
   23648:	0009883a 	mov	r4,zero
   2364c:	30c6b03a 	or	r3,r6,r3
   23650:	01440034 	movhi	r5,4096
   23654:	110cb03a 	or	r6,r2,r4
   23658:	423f0044 	addi	r8,r8,-1023
   2365c:	194eb03a 	or	r7,r3,r5
   23660:	008000c4 	movi	r2,3
   23664:	69c00415 	stw	r7,16(r13)
   23668:	6a000215 	stw	r8,8(r13)
   2366c:	68800015 	stw	r2,0(r13)
   23670:	69800315 	stw	r6,12(r13)
   23674:	f800283a 	ret
   23678:	4a84b03a 	or	r2,r9,r10
   2367c:	1000031e 	bne	r2,zero,2368c <__unpack_d+0x104>
   23680:	00800104 	movi	r2,4
   23684:	28800015 	stw	r2,0(r5)
   23688:	f800283a 	ret
   2368c:	0009883a 	mov	r4,zero
   23690:	01400234 	movhi	r5,8
   23694:	4904703a 	and	r2,r9,r4
   23698:	5146703a 	and	r3,r10,r5
   2369c:	10c4b03a 	or	r2,r2,r3
   236a0:	10000526 	beq	r2,zero,236b8 <__unpack_d+0x130>
   236a4:	00800044 	movi	r2,1
   236a8:	68800015 	stw	r2,0(r13)
   236ac:	6b000415 	stw	r12,16(r13)
   236b0:	6ac00315 	stw	r11,12(r13)
   236b4:	f800283a 	ret
   236b8:	68000015 	stw	zero,0(r13)
   236bc:	003ffb06 	br	236ac <__unpack_d+0x124>

000236c0 <__fpcmp_parts_d>:
   236c0:	21800017 	ldw	r6,0(r4)
   236c4:	00c00044 	movi	r3,1
   236c8:	19800a2e 	bgeu	r3,r6,236f4 <__fpcmp_parts_d+0x34>
   236cc:	28800017 	ldw	r2,0(r5)
   236d0:	1880082e 	bgeu	r3,r2,236f4 <__fpcmp_parts_d+0x34>
   236d4:	00c00104 	movi	r3,4
   236d8:	30c02626 	beq	r6,r3,23774 <__fpcmp_parts_d+0xb4>
   236dc:	10c02226 	beq	r2,r3,23768 <__fpcmp_parts_d+0xa8>
   236e0:	00c00084 	movi	r3,2
   236e4:	30c00526 	beq	r6,r3,236fc <__fpcmp_parts_d+0x3c>
   236e8:	10c0071e 	bne	r2,r3,23708 <__fpcmp_parts_d+0x48>
   236ec:	20800117 	ldw	r2,4(r4)
   236f0:	1000091e 	bne	r2,zero,23718 <__fpcmp_parts_d+0x58>
   236f4:	00800044 	movi	r2,1
   236f8:	f800283a 	ret
   236fc:	10c01a1e 	bne	r2,r3,23768 <__fpcmp_parts_d+0xa8>
   23700:	0005883a 	mov	r2,zero
   23704:	f800283a 	ret
   23708:	22000117 	ldw	r8,4(r4)
   2370c:	28800117 	ldw	r2,4(r5)
   23710:	40800326 	beq	r8,r2,23720 <__fpcmp_parts_d+0x60>
   23714:	403ff726 	beq	r8,zero,236f4 <__fpcmp_parts_d+0x34>
   23718:	00bfffc4 	movi	r2,-1
   2371c:	f800283a 	ret
   23720:	20c00217 	ldw	r3,8(r4)
   23724:	28800217 	ldw	r2,8(r5)
   23728:	10fffa16 	blt	r2,r3,23714 <__fpcmp_parts_d+0x54>
   2372c:	18800916 	blt	r3,r2,23754 <__fpcmp_parts_d+0x94>
   23730:	21c00417 	ldw	r7,16(r4)
   23734:	28c00417 	ldw	r3,16(r5)
   23738:	21800317 	ldw	r6,12(r4)
   2373c:	28800317 	ldw	r2,12(r5)
   23740:	19fff436 	bltu	r3,r7,23714 <__fpcmp_parts_d+0x54>
   23744:	38c00526 	beq	r7,r3,2375c <__fpcmp_parts_d+0x9c>
   23748:	38c00236 	bltu	r7,r3,23754 <__fpcmp_parts_d+0x94>
   2374c:	19ffec1e 	bne	r3,r7,23700 <__fpcmp_parts_d+0x40>
   23750:	30bfeb2e 	bgeu	r6,r2,23700 <__fpcmp_parts_d+0x40>
   23754:	403fe71e 	bne	r8,zero,236f4 <__fpcmp_parts_d+0x34>
   23758:	003fef06 	br	23718 <__fpcmp_parts_d+0x58>
   2375c:	11bffa2e 	bgeu	r2,r6,23748 <__fpcmp_parts_d+0x88>
   23760:	403fe426 	beq	r8,zero,236f4 <__fpcmp_parts_d+0x34>
   23764:	003fec06 	br	23718 <__fpcmp_parts_d+0x58>
   23768:	28800117 	ldw	r2,4(r5)
   2376c:	103fe11e 	bne	r2,zero,236f4 <__fpcmp_parts_d+0x34>
   23770:	003fe906 	br	23718 <__fpcmp_parts_d+0x58>
   23774:	11bfdd1e 	bne	r2,r6,236ec <__fpcmp_parts_d+0x2c>
   23778:	28c00117 	ldw	r3,4(r5)
   2377c:	20800117 	ldw	r2,4(r4)
   23780:	1885c83a 	sub	r2,r3,r2
   23784:	f800283a 	ret

00023788 <free>:
   23788:	008000f4 	movhi	r2,3
   2378c:	1081df04 	addi	r2,r2,1916
   23790:	200b883a 	mov	r5,r4
   23794:	11000017 	ldw	r4,0(r2)
   23798:	0027fb41 	jmpi	27fb4 <_free_r>

0002379c <malloc>:
   2379c:	008000f4 	movhi	r2,3
   237a0:	1081df04 	addi	r2,r2,1916
   237a4:	200b883a 	mov	r5,r4
   237a8:	11000017 	ldw	r4,0(r2)
   237ac:	00237b01 	jmpi	237b0 <_malloc_r>

000237b0 <_malloc_r>:
   237b0:	defff604 	addi	sp,sp,-40
   237b4:	28c002c4 	addi	r3,r5,11
   237b8:	00800584 	movi	r2,22
   237bc:	dc800215 	stw	r18,8(sp)
   237c0:	dfc00915 	stw	ra,36(sp)
   237c4:	df000815 	stw	fp,32(sp)
   237c8:	ddc00715 	stw	r23,28(sp)
   237cc:	dd800615 	stw	r22,24(sp)
   237d0:	dd400515 	stw	r21,20(sp)
   237d4:	dd000415 	stw	r20,16(sp)
   237d8:	dcc00315 	stw	r19,12(sp)
   237dc:	dc400115 	stw	r17,4(sp)
   237e0:	dc000015 	stw	r16,0(sp)
   237e4:	2025883a 	mov	r18,r4
   237e8:	10c01236 	bltu	r2,r3,23834 <_malloc_r+0x84>
   237ec:	04400404 	movi	r17,16
   237f0:	8940142e 	bgeu	r17,r5,23844 <_malloc_r+0x94>
   237f4:	00800304 	movi	r2,12
   237f8:	0007883a 	mov	r3,zero
   237fc:	90800015 	stw	r2,0(r18)
   23800:	1805883a 	mov	r2,r3
   23804:	dfc00917 	ldw	ra,36(sp)
   23808:	df000817 	ldw	fp,32(sp)
   2380c:	ddc00717 	ldw	r23,28(sp)
   23810:	dd800617 	ldw	r22,24(sp)
   23814:	dd400517 	ldw	r21,20(sp)
   23818:	dd000417 	ldw	r20,16(sp)
   2381c:	dcc00317 	ldw	r19,12(sp)
   23820:	dc800217 	ldw	r18,8(sp)
   23824:	dc400117 	ldw	r17,4(sp)
   23828:	dc000017 	ldw	r16,0(sp)
   2382c:	dec00a04 	addi	sp,sp,40
   23830:	f800283a 	ret
   23834:	00bffe04 	movi	r2,-8
   23838:	18a2703a 	and	r17,r3,r2
   2383c:	883fed16 	blt	r17,zero,237f4 <_malloc_r+0x44>
   23840:	897fec36 	bltu	r17,r5,237f4 <_malloc_r+0x44>
   23844:	9009883a 	mov	r4,r18
   23848:	002c4040 	call	2c404 <__malloc_lock>
   2384c:	00807dc4 	movi	r2,503
   23850:	14402b2e 	bgeu	r2,r17,23900 <_malloc_r+0x150>
   23854:	8806d27a 	srli	r3,r17,9
   23858:	18003f1e 	bne	r3,zero,23958 <_malloc_r+0x1a8>
   2385c:	880cd0fa 	srli	r6,r17,3
   23860:	300490fa 	slli	r2,r6,3
   23864:	02c000f4 	movhi	r11,3
   23868:	5afb5604 	addi	r11,r11,-4776
   2386c:	12cb883a 	add	r5,r2,r11
   23870:	2c000317 	ldw	r16,12(r5)
   23874:	580f883a 	mov	r7,r11
   23878:	2c00041e 	bne	r5,r16,2388c <_malloc_r+0xdc>
   2387c:	00000a06 	br	238a8 <_malloc_r+0xf8>
   23880:	1800860e 	bge	r3,zero,23a9c <_malloc_r+0x2ec>
   23884:	84000317 	ldw	r16,12(r16)
   23888:	2c000726 	beq	r5,r16,238a8 <_malloc_r+0xf8>
   2388c:	80800117 	ldw	r2,4(r16)
   23890:	00ffff04 	movi	r3,-4
   23894:	10c8703a 	and	r4,r2,r3
   23898:	2447c83a 	sub	r3,r4,r17
   2389c:	008003c4 	movi	r2,15
   238a0:	10fff70e 	bge	r2,r3,23880 <_malloc_r+0xd0>
   238a4:	31bfffc4 	addi	r6,r6,-1
   238a8:	32400044 	addi	r9,r6,1
   238ac:	028000f4 	movhi	r10,3
   238b0:	52bb5804 	addi	r10,r10,-4768
   238b4:	54000217 	ldw	r16,8(r10)
   238b8:	8280a026 	beq	r16,r10,23b3c <_malloc_r+0x38c>
   238bc:	80800117 	ldw	r2,4(r16)
   238c0:	00ffff04 	movi	r3,-4
   238c4:	10ca703a 	and	r5,r2,r3
   238c8:	2c4dc83a 	sub	r6,r5,r17
   238cc:	008003c4 	movi	r2,15
   238d0:	11808316 	blt	r2,r6,23ae0 <_malloc_r+0x330>
   238d4:	52800315 	stw	r10,12(r10)
   238d8:	52800215 	stw	r10,8(r10)
   238dc:	30002916 	blt	r6,zero,23984 <_malloc_r+0x1d4>
   238e0:	8147883a 	add	r3,r16,r5
   238e4:	18800117 	ldw	r2,4(r3)
   238e8:	9009883a 	mov	r4,r18
   238ec:	10800054 	ori	r2,r2,1
   238f0:	18800115 	stw	r2,4(r3)
   238f4:	002c4240 	call	2c424 <__malloc_unlock>
   238f8:	80c00204 	addi	r3,r16,8
   238fc:	003fc006 	br	23800 <_malloc_r+0x50>
   23900:	02c000f4 	movhi	r11,3
   23904:	5afb5604 	addi	r11,r11,-4776
   23908:	8ac5883a 	add	r2,r17,r11
   2390c:	14000317 	ldw	r16,12(r2)
   23910:	580f883a 	mov	r7,r11
   23914:	8806d0fa 	srli	r3,r17,3
   23918:	14006c26 	beq	r2,r16,23acc <_malloc_r+0x31c>
   2391c:	80c00117 	ldw	r3,4(r16)
   23920:	00bfff04 	movi	r2,-4
   23924:	81800317 	ldw	r6,12(r16)
   23928:	1886703a 	and	r3,r3,r2
   2392c:	80c7883a 	add	r3,r16,r3
   23930:	18800117 	ldw	r2,4(r3)
   23934:	81400217 	ldw	r5,8(r16)
   23938:	9009883a 	mov	r4,r18
   2393c:	10800054 	ori	r2,r2,1
   23940:	18800115 	stw	r2,4(r3)
   23944:	31400215 	stw	r5,8(r6)
   23948:	29800315 	stw	r6,12(r5)
   2394c:	002c4240 	call	2c424 <__malloc_unlock>
   23950:	80c00204 	addi	r3,r16,8
   23954:	003faa06 	br	23800 <_malloc_r+0x50>
   23958:	00800104 	movi	r2,4
   2395c:	10c0052e 	bgeu	r2,r3,23974 <_malloc_r+0x1c4>
   23960:	00800504 	movi	r2,20
   23964:	10c07836 	bltu	r2,r3,23b48 <_malloc_r+0x398>
   23968:	198016c4 	addi	r6,r3,91
   2396c:	300490fa 	slli	r2,r6,3
   23970:	003fbc06 	br	23864 <_malloc_r+0xb4>
   23974:	8804d1ba 	srli	r2,r17,6
   23978:	11800e04 	addi	r6,r2,56
   2397c:	300490fa 	slli	r2,r6,3
   23980:	003fb806 	br	23864 <_malloc_r+0xb4>
   23984:	00807fc4 	movi	r2,511
   23988:	1140bb36 	bltu	r2,r5,23c78 <_malloc_r+0x4c8>
   2398c:	2806d0fa 	srli	r3,r5,3
   23990:	573ffe04 	addi	fp,r10,-8
   23994:	00800044 	movi	r2,1
   23998:	180890fa 	slli	r4,r3,3
   2399c:	1807d0ba 	srai	r3,r3,2
   239a0:	e1c00117 	ldw	r7,4(fp)
   239a4:	5909883a 	add	r4,r11,r4
   239a8:	21400217 	ldw	r5,8(r4)
   239ac:	10c4983a 	sll	r2,r2,r3
   239b0:	81000315 	stw	r4,12(r16)
   239b4:	81400215 	stw	r5,8(r16)
   239b8:	388eb03a 	or	r7,r7,r2
   239bc:	2c000315 	stw	r16,12(r5)
   239c0:	24000215 	stw	r16,8(r4)
   239c4:	e1c00115 	stw	r7,4(fp)
   239c8:	4807883a 	mov	r3,r9
   239cc:	4800cd16 	blt	r9,zero,23d04 <_malloc_r+0x554>
   239d0:	1807d0ba 	srai	r3,r3,2
   239d4:	00800044 	movi	r2,1
   239d8:	10c8983a 	sll	r4,r2,r3
   239dc:	39004436 	bltu	r7,r4,23af0 <_malloc_r+0x340>
   239e0:	21c4703a 	and	r2,r4,r7
   239e4:	10000a1e 	bne	r2,zero,23a10 <_malloc_r+0x260>
   239e8:	2109883a 	add	r4,r4,r4
   239ec:	00bfff04 	movi	r2,-4
   239f0:	4884703a 	and	r2,r9,r2
   239f4:	3906703a 	and	r3,r7,r4
   239f8:	12400104 	addi	r9,r2,4
   239fc:	1800041e 	bne	r3,zero,23a10 <_malloc_r+0x260>
   23a00:	2109883a 	add	r4,r4,r4
   23a04:	3904703a 	and	r2,r7,r4
   23a08:	4a400104 	addi	r9,r9,4
   23a0c:	103ffc26 	beq	r2,zero,23a00 <_malloc_r+0x250>
   23a10:	480490fa 	slli	r2,r9,3
   23a14:	4819883a 	mov	r12,r9
   23a18:	023fff04 	movi	r8,-4
   23a1c:	589b883a 	add	r13,r11,r2
   23a20:	6807883a 	mov	r3,r13
   23a24:	014003c4 	movi	r5,15
   23a28:	1c000317 	ldw	r16,12(r3)
   23a2c:	1c00041e 	bne	r3,r16,23a40 <_malloc_r+0x290>
   23a30:	0000a706 	br	23cd0 <_malloc_r+0x520>
   23a34:	3000ab0e 	bge	r6,zero,23ce4 <_malloc_r+0x534>
   23a38:	84000317 	ldw	r16,12(r16)
   23a3c:	1c00a426 	beq	r3,r16,23cd0 <_malloc_r+0x520>
   23a40:	80800117 	ldw	r2,4(r16)
   23a44:	1204703a 	and	r2,r2,r8
   23a48:	144dc83a 	sub	r6,r2,r17
   23a4c:	29bff90e 	bge	r5,r6,23a34 <_malloc_r+0x284>
   23a50:	81000317 	ldw	r4,12(r16)
   23a54:	80c00217 	ldw	r3,8(r16)
   23a58:	89400054 	ori	r5,r17,1
   23a5c:	8445883a 	add	r2,r16,r17
   23a60:	20c00215 	stw	r3,8(r4)
   23a64:	19000315 	stw	r4,12(r3)
   23a68:	81400115 	stw	r5,4(r16)
   23a6c:	1187883a 	add	r3,r2,r6
   23a70:	31000054 	ori	r4,r6,1
   23a74:	50800315 	stw	r2,12(r10)
   23a78:	50800215 	stw	r2,8(r10)
   23a7c:	19800015 	stw	r6,0(r3)
   23a80:	11000115 	stw	r4,4(r2)
   23a84:	12800215 	stw	r10,8(r2)
   23a88:	12800315 	stw	r10,12(r2)
   23a8c:	9009883a 	mov	r4,r18
   23a90:	002c4240 	call	2c424 <__malloc_unlock>
   23a94:	80c00204 	addi	r3,r16,8
   23a98:	003f5906 	br	23800 <_malloc_r+0x50>
   23a9c:	8109883a 	add	r4,r16,r4
   23aa0:	20800117 	ldw	r2,4(r4)
   23aa4:	80c00217 	ldw	r3,8(r16)
   23aa8:	81400317 	ldw	r5,12(r16)
   23aac:	10800054 	ori	r2,r2,1
   23ab0:	20800115 	stw	r2,4(r4)
   23ab4:	28c00215 	stw	r3,8(r5)
   23ab8:	19400315 	stw	r5,12(r3)
   23abc:	9009883a 	mov	r4,r18
   23ac0:	002c4240 	call	2c424 <__malloc_unlock>
   23ac4:	80c00204 	addi	r3,r16,8
   23ac8:	003f4d06 	br	23800 <_malloc_r+0x50>
   23acc:	80800204 	addi	r2,r16,8
   23ad0:	14000317 	ldw	r16,12(r2)
   23ad4:	143f911e 	bne	r2,r16,2391c <_malloc_r+0x16c>
   23ad8:	1a400084 	addi	r9,r3,2
   23adc:	003f7306 	br	238ac <_malloc_r+0xfc>
   23ae0:	88c00054 	ori	r3,r17,1
   23ae4:	8445883a 	add	r2,r16,r17
   23ae8:	80c00115 	stw	r3,4(r16)
   23aec:	003fdf06 	br	23a6c <_malloc_r+0x2bc>
   23af0:	e4000217 	ldw	r16,8(fp)
   23af4:	00bfff04 	movi	r2,-4
   23af8:	80c00117 	ldw	r3,4(r16)
   23afc:	802d883a 	mov	r22,r16
   23b00:	18aa703a 	and	r21,r3,r2
   23b04:	ac401636 	bltu	r21,r17,23b60 <_malloc_r+0x3b0>
   23b08:	ac49c83a 	sub	r4,r21,r17
   23b0c:	008003c4 	movi	r2,15
   23b10:	1100130e 	bge	r2,r4,23b60 <_malloc_r+0x3b0>
   23b14:	88800054 	ori	r2,r17,1
   23b18:	8447883a 	add	r3,r16,r17
   23b1c:	80800115 	stw	r2,4(r16)
   23b20:	20800054 	ori	r2,r4,1
   23b24:	18800115 	stw	r2,4(r3)
   23b28:	e0c00215 	stw	r3,8(fp)
   23b2c:	9009883a 	mov	r4,r18
   23b30:	002c4240 	call	2c424 <__malloc_unlock>
   23b34:	80c00204 	addi	r3,r16,8
   23b38:	003f3106 	br	23800 <_malloc_r+0x50>
   23b3c:	39c00117 	ldw	r7,4(r7)
   23b40:	573ffe04 	addi	fp,r10,-8
   23b44:	003fa006 	br	239c8 <_malloc_r+0x218>
   23b48:	00801504 	movi	r2,84
   23b4c:	10c06736 	bltu	r2,r3,23cec <_malloc_r+0x53c>
   23b50:	8804d33a 	srli	r2,r17,12
   23b54:	11801b84 	addi	r6,r2,110
   23b58:	300490fa 	slli	r2,r6,3
   23b5c:	003f4106 	br	23864 <_malloc_r+0xb4>
   23b60:	d0a6a817 	ldw	r2,-25952(gp)
   23b64:	d0e00117 	ldw	r3,-32764(gp)
   23b68:	053fffc4 	movi	r20,-1
   23b6c:	10800404 	addi	r2,r2,16
   23b70:	88a7883a 	add	r19,r17,r2
   23b74:	1d000326 	beq	r3,r20,23b84 <_malloc_r+0x3d4>
   23b78:	98c3ffc4 	addi	r3,r19,4095
   23b7c:	00bc0004 	movi	r2,-4096
   23b80:	18a6703a 	and	r19,r3,r2
   23b84:	9009883a 	mov	r4,r18
   23b88:	980b883a 	mov	r5,r19
   23b8c:	002409c0 	call	2409c <_sbrk_r>
   23b90:	1009883a 	mov	r4,r2
   23b94:	15000426 	beq	r2,r20,23ba8 <_malloc_r+0x3f8>
   23b98:	854b883a 	add	r5,r16,r21
   23b9c:	1029883a 	mov	r20,r2
   23ba0:	11405a2e 	bgeu	r2,r5,23d0c <_malloc_r+0x55c>
   23ba4:	87000c26 	beq	r16,fp,23bd8 <_malloc_r+0x428>
   23ba8:	e4000217 	ldw	r16,8(fp)
   23bac:	80c00117 	ldw	r3,4(r16)
   23bb0:	00bfff04 	movi	r2,-4
   23bb4:	1884703a 	and	r2,r3,r2
   23bb8:	14400336 	bltu	r2,r17,23bc8 <_malloc_r+0x418>
   23bbc:	1449c83a 	sub	r4,r2,r17
   23bc0:	008003c4 	movi	r2,15
   23bc4:	113fd316 	blt	r2,r4,23b14 <_malloc_r+0x364>
   23bc8:	9009883a 	mov	r4,r18
   23bcc:	002c4240 	call	2c424 <__malloc_unlock>
   23bd0:	0007883a 	mov	r3,zero
   23bd4:	003f0a06 	br	23800 <_malloc_r+0x50>
   23bd8:	05c000f4 	movhi	r23,3
   23bdc:	bdc89604 	addi	r23,r23,8792
   23be0:	b8800017 	ldw	r2,0(r23)
   23be4:	988d883a 	add	r6,r19,r2
   23be8:	b9800015 	stw	r6,0(r23)
   23bec:	d0e00117 	ldw	r3,-32764(gp)
   23bf0:	00bfffc4 	movi	r2,-1
   23bf4:	18808e26 	beq	r3,r2,23e30 <_malloc_r+0x680>
   23bf8:	2145c83a 	sub	r2,r4,r5
   23bfc:	3085883a 	add	r2,r6,r2
   23c00:	b8800015 	stw	r2,0(r23)
   23c04:	20c001cc 	andi	r3,r4,7
   23c08:	18005f1e 	bne	r3,zero,23d88 <_malloc_r+0x5d8>
   23c0c:	000b883a 	mov	r5,zero
   23c10:	a4c5883a 	add	r2,r20,r19
   23c14:	1083ffcc 	andi	r2,r2,4095
   23c18:	00c40004 	movi	r3,4096
   23c1c:	1887c83a 	sub	r3,r3,r2
   23c20:	28e7883a 	add	r19,r5,r3
   23c24:	9009883a 	mov	r4,r18
   23c28:	980b883a 	mov	r5,r19
   23c2c:	002409c0 	call	2409c <_sbrk_r>
   23c30:	1007883a 	mov	r3,r2
   23c34:	00bfffc4 	movi	r2,-1
   23c38:	18807a26 	beq	r3,r2,23e24 <_malloc_r+0x674>
   23c3c:	1d05c83a 	sub	r2,r3,r20
   23c40:	9885883a 	add	r2,r19,r2
   23c44:	10c00054 	ori	r3,r2,1
   23c48:	b8800017 	ldw	r2,0(r23)
   23c4c:	a021883a 	mov	r16,r20
   23c50:	a0c00115 	stw	r3,4(r20)
   23c54:	9885883a 	add	r2,r19,r2
   23c58:	b8800015 	stw	r2,0(r23)
   23c5c:	e5000215 	stw	r20,8(fp)
   23c60:	b7003626 	beq	r22,fp,23d3c <_malloc_r+0x58c>
   23c64:	018003c4 	movi	r6,15
   23c68:	35404b36 	bltu	r6,r21,23d98 <_malloc_r+0x5e8>
   23c6c:	00800044 	movi	r2,1
   23c70:	a0800115 	stw	r2,4(r20)
   23c74:	003fcd06 	br	23bac <_malloc_r+0x3fc>
   23c78:	2808d27a 	srli	r4,r5,9
   23c7c:	2000371e 	bne	r4,zero,23d5c <_malloc_r+0x5ac>
   23c80:	2808d0fa 	srli	r4,r5,3
   23c84:	200690fa 	slli	r3,r4,3
   23c88:	1ad1883a 	add	r8,r3,r11
   23c8c:	41800217 	ldw	r6,8(r8)
   23c90:	41805b26 	beq	r8,r6,23e00 <_malloc_r+0x650>
   23c94:	30800117 	ldw	r2,4(r6)
   23c98:	00ffff04 	movi	r3,-4
   23c9c:	10c4703a 	and	r2,r2,r3
   23ca0:	2880022e 	bgeu	r5,r2,23cac <_malloc_r+0x4fc>
   23ca4:	31800217 	ldw	r6,8(r6)
   23ca8:	41bffa1e 	bne	r8,r6,23c94 <_malloc_r+0x4e4>
   23cac:	32000317 	ldw	r8,12(r6)
   23cb0:	39c00117 	ldw	r7,4(r7)
   23cb4:	82000315 	stw	r8,12(r16)
   23cb8:	81800215 	stw	r6,8(r16)
   23cbc:	070000f4 	movhi	fp,3
   23cc0:	e73b5604 	addi	fp,fp,-4776
   23cc4:	34000315 	stw	r16,12(r6)
   23cc8:	44000215 	stw	r16,8(r8)
   23ccc:	003f3e06 	br	239c8 <_malloc_r+0x218>
   23cd0:	63000044 	addi	r12,r12,1
   23cd4:	608000cc 	andi	r2,r12,3
   23cd8:	10005d26 	beq	r2,zero,23e50 <_malloc_r+0x6a0>
   23cdc:	18c00204 	addi	r3,r3,8
   23ce0:	003f5106 	br	23a28 <_malloc_r+0x278>
   23ce4:	8089883a 	add	r4,r16,r2
   23ce8:	003f6d06 	br	23aa0 <_malloc_r+0x2f0>
   23cec:	00805504 	movi	r2,340
   23cf0:	10c02036 	bltu	r2,r3,23d74 <_malloc_r+0x5c4>
   23cf4:	8804d3fa 	srli	r2,r17,15
   23cf8:	11801dc4 	addi	r6,r2,119
   23cfc:	300490fa 	slli	r2,r6,3
   23d00:	003ed806 	br	23864 <_malloc_r+0xb4>
   23d04:	48c000c4 	addi	r3,r9,3
   23d08:	003f3106 	br	239d0 <_malloc_r+0x220>
   23d0c:	05c000f4 	movhi	r23,3
   23d10:	bdc89604 	addi	r23,r23,8792
   23d14:	b8800017 	ldw	r2,0(r23)
   23d18:	988d883a 	add	r6,r19,r2
   23d1c:	b9800015 	stw	r6,0(r23)
   23d20:	293fb21e 	bne	r5,r4,23bec <_malloc_r+0x43c>
   23d24:	2083ffcc 	andi	r2,r4,4095
   23d28:	103fb01e 	bne	r2,zero,23bec <_malloc_r+0x43c>
   23d2c:	e4000217 	ldw	r16,8(fp)
   23d30:	9d45883a 	add	r2,r19,r21
   23d34:	10800054 	ori	r2,r2,1
   23d38:	80800115 	stw	r2,4(r16)
   23d3c:	b8c00017 	ldw	r3,0(r23)
   23d40:	d0a6a917 	ldw	r2,-25948(gp)
   23d44:	10c0012e 	bgeu	r2,r3,23d4c <_malloc_r+0x59c>
   23d48:	d0e6a915 	stw	r3,-25948(gp)
   23d4c:	d0a6aa17 	ldw	r2,-25944(gp)
   23d50:	10ff962e 	bgeu	r2,r3,23bac <_malloc_r+0x3fc>
   23d54:	d0e6aa15 	stw	r3,-25944(gp)
   23d58:	003f9406 	br	23bac <_malloc_r+0x3fc>
   23d5c:	00800104 	movi	r2,4
   23d60:	11001e36 	bltu	r2,r4,23ddc <_malloc_r+0x62c>
   23d64:	2804d1ba 	srli	r2,r5,6
   23d68:	11000e04 	addi	r4,r2,56
   23d6c:	200690fa 	slli	r3,r4,3
   23d70:	003fc506 	br	23c88 <_malloc_r+0x4d8>
   23d74:	00815504 	movi	r2,1364
   23d78:	10c01d2e 	bgeu	r2,r3,23df0 <_malloc_r+0x640>
   23d7c:	01801f84 	movi	r6,126
   23d80:	0080fc04 	movi	r2,1008
   23d84:	003eb706 	br	23864 <_malloc_r+0xb4>
   23d88:	00800204 	movi	r2,8
   23d8c:	10cbc83a 	sub	r5,r2,r3
   23d90:	2169883a 	add	r20,r4,r5
   23d94:	003f9e06 	br	23c10 <_malloc_r+0x460>
   23d98:	00bffe04 	movi	r2,-8
   23d9c:	a93ffd04 	addi	r4,r21,-12
   23da0:	2088703a 	and	r4,r4,r2
   23da4:	b10b883a 	add	r5,r22,r4
   23da8:	00c00144 	movi	r3,5
   23dac:	28c00215 	stw	r3,8(r5)
   23db0:	28c00115 	stw	r3,4(r5)
   23db4:	b0800117 	ldw	r2,4(r22)
   23db8:	1080004c 	andi	r2,r2,1
   23dbc:	2084b03a 	or	r2,r4,r2
   23dc0:	b0800115 	stw	r2,4(r22)
   23dc4:	313fdd2e 	bgeu	r6,r4,23d3c <_malloc_r+0x58c>
   23dc8:	b1400204 	addi	r5,r22,8
   23dcc:	9009883a 	mov	r4,r18
   23dd0:	0027fb40 	call	27fb4 <_free_r>
   23dd4:	e4000217 	ldw	r16,8(fp)
   23dd8:	003fd806 	br	23d3c <_malloc_r+0x58c>
   23ddc:	00800504 	movi	r2,20
   23de0:	11001536 	bltu	r2,r4,23e38 <_malloc_r+0x688>
   23de4:	210016c4 	addi	r4,r4,91
   23de8:	200690fa 	slli	r3,r4,3
   23dec:	003fa606 	br	23c88 <_malloc_r+0x4d8>
   23df0:	8804d4ba 	srli	r2,r17,18
   23df4:	11801f04 	addi	r6,r2,124
   23df8:	300490fa 	slli	r2,r6,3
   23dfc:	003e9906 	br	23864 <_malloc_r+0xb4>
   23e00:	2009d0ba 	srai	r4,r4,2
   23e04:	014000f4 	movhi	r5,3
   23e08:	297b5604 	addi	r5,r5,-4776
   23e0c:	00c00044 	movi	r3,1
   23e10:	28800117 	ldw	r2,4(r5)
   23e14:	1906983a 	sll	r3,r3,r4
   23e18:	10c4b03a 	or	r2,r2,r3
   23e1c:	28800115 	stw	r2,4(r5)
   23e20:	003fa306 	br	23cb0 <_malloc_r+0x500>
   23e24:	0027883a 	mov	r19,zero
   23e28:	00c00044 	movi	r3,1
   23e2c:	003f8606 	br	23c48 <_malloc_r+0x498>
   23e30:	d1200115 	stw	r4,-32764(gp)
   23e34:	003f7306 	br	23c04 <_malloc_r+0x454>
   23e38:	00801504 	movi	r2,84
   23e3c:	11001936 	bltu	r2,r4,23ea4 <_malloc_r+0x6f4>
   23e40:	2804d33a 	srli	r2,r5,12
   23e44:	11001b84 	addi	r4,r2,110
   23e48:	200690fa 	slli	r3,r4,3
   23e4c:	003f8e06 	br	23c88 <_malloc_r+0x4d8>
   23e50:	480b883a 	mov	r5,r9
   23e54:	6807883a 	mov	r3,r13
   23e58:	288000cc 	andi	r2,r5,3
   23e5c:	18fffe04 	addi	r3,r3,-8
   23e60:	297fffc4 	addi	r5,r5,-1
   23e64:	10001526 	beq	r2,zero,23ebc <_malloc_r+0x70c>
   23e68:	18800217 	ldw	r2,8(r3)
   23e6c:	10fffa26 	beq	r2,r3,23e58 <_malloc_r+0x6a8>
   23e70:	2109883a 	add	r4,r4,r4
   23e74:	393f1e36 	bltu	r7,r4,23af0 <_malloc_r+0x340>
   23e78:	203f1d26 	beq	r4,zero,23af0 <_malloc_r+0x340>
   23e7c:	21c4703a 	and	r2,r4,r7
   23e80:	10000226 	beq	r2,zero,23e8c <_malloc_r+0x6dc>
   23e84:	6013883a 	mov	r9,r12
   23e88:	003ee106 	br	23a10 <_malloc_r+0x260>
   23e8c:	2109883a 	add	r4,r4,r4
   23e90:	3904703a 	and	r2,r7,r4
   23e94:	63000104 	addi	r12,r12,4
   23e98:	103ffc26 	beq	r2,zero,23e8c <_malloc_r+0x6dc>
   23e9c:	6013883a 	mov	r9,r12
   23ea0:	003edb06 	br	23a10 <_malloc_r+0x260>
   23ea4:	00805504 	movi	r2,340
   23ea8:	11000836 	bltu	r2,r4,23ecc <_malloc_r+0x71c>
   23eac:	2804d3fa 	srli	r2,r5,15
   23eb0:	11001dc4 	addi	r4,r2,119
   23eb4:	200690fa 	slli	r3,r4,3
   23eb8:	003f7306 	br	23c88 <_malloc_r+0x4d8>
   23ebc:	0104303a 	nor	r2,zero,r4
   23ec0:	388e703a 	and	r7,r7,r2
   23ec4:	e1c00115 	stw	r7,4(fp)
   23ec8:	003fe906 	br	23e70 <_malloc_r+0x6c0>
   23ecc:	00815504 	movi	r2,1364
   23ed0:	1100032e 	bgeu	r2,r4,23ee0 <_malloc_r+0x730>
   23ed4:	01001f84 	movi	r4,126
   23ed8:	00c0fc04 	movi	r3,1008
   23edc:	003f6a06 	br	23c88 <_malloc_r+0x4d8>
   23ee0:	2804d4ba 	srli	r2,r5,18
   23ee4:	11001f04 	addi	r4,r2,124
   23ee8:	200690fa 	slli	r3,r4,3
   23eec:	003f6606 	br	23c88 <_malloc_r+0x4d8>

00023ef0 <memcpy>:
   23ef0:	01c003c4 	movi	r7,15
   23ef4:	2007883a 	mov	r3,r4
   23ef8:	3980032e 	bgeu	r7,r6,23f08 <memcpy+0x18>
   23efc:	2904b03a 	or	r2,r5,r4
   23f00:	108000cc 	andi	r2,r2,3
   23f04:	10000926 	beq	r2,zero,23f2c <memcpy+0x3c>
   23f08:	30000626 	beq	r6,zero,23f24 <memcpy+0x34>
   23f0c:	30cd883a 	add	r6,r6,r3
   23f10:	28800003 	ldbu	r2,0(r5)
   23f14:	29400044 	addi	r5,r5,1
   23f18:	18800005 	stb	r2,0(r3)
   23f1c:	18c00044 	addi	r3,r3,1
   23f20:	30fffb1e 	bne	r6,r3,23f10 <memcpy+0x20>
   23f24:	2005883a 	mov	r2,r4
   23f28:	f800283a 	ret
   23f2c:	3811883a 	mov	r8,r7
   23f30:	200f883a 	mov	r7,r4
   23f34:	28c00017 	ldw	r3,0(r5)
   23f38:	31bffc04 	addi	r6,r6,-16
   23f3c:	38c00015 	stw	r3,0(r7)
   23f40:	28800117 	ldw	r2,4(r5)
   23f44:	38800115 	stw	r2,4(r7)
   23f48:	28c00217 	ldw	r3,8(r5)
   23f4c:	38c00215 	stw	r3,8(r7)
   23f50:	28800317 	ldw	r2,12(r5)
   23f54:	29400404 	addi	r5,r5,16
   23f58:	38800315 	stw	r2,12(r7)
   23f5c:	39c00404 	addi	r7,r7,16
   23f60:	41bff436 	bltu	r8,r6,23f34 <memcpy+0x44>
   23f64:	008000c4 	movi	r2,3
   23f68:	1180072e 	bgeu	r2,r6,23f88 <memcpy+0x98>
   23f6c:	1007883a 	mov	r3,r2
   23f70:	28800017 	ldw	r2,0(r5)
   23f74:	31bfff04 	addi	r6,r6,-4
   23f78:	29400104 	addi	r5,r5,4
   23f7c:	38800015 	stw	r2,0(r7)
   23f80:	39c00104 	addi	r7,r7,4
   23f84:	19bffa36 	bltu	r3,r6,23f70 <memcpy+0x80>
   23f88:	3807883a 	mov	r3,r7
   23f8c:	003fde06 	br	23f08 <memcpy+0x18>

00023f90 <printf>:
   23f90:	defffb04 	addi	sp,sp,-20
   23f94:	dfc00115 	stw	ra,4(sp)
   23f98:	d9400215 	stw	r5,8(sp)
   23f9c:	d9800315 	stw	r6,12(sp)
   23fa0:	d9c00415 	stw	r7,16(sp)
   23fa4:	008000f4 	movhi	r2,3
   23fa8:	1081df04 	addi	r2,r2,1916
   23fac:	10c00017 	ldw	r3,0(r2)
   23fb0:	200b883a 	mov	r5,r4
   23fb4:	d8800204 	addi	r2,sp,8
   23fb8:	19000217 	ldw	r4,8(r3)
   23fbc:	100d883a 	mov	r6,r2
   23fc0:	d8800015 	stw	r2,0(sp)
   23fc4:	002606c0 	call	2606c <__vfprintf_internal>
   23fc8:	dfc00117 	ldw	ra,4(sp)
   23fcc:	dec00504 	addi	sp,sp,20
   23fd0:	f800283a 	ret

00023fd4 <_printf_r>:
   23fd4:	defffc04 	addi	sp,sp,-16
   23fd8:	dfc00115 	stw	ra,4(sp)
   23fdc:	d9800215 	stw	r6,8(sp)
   23fe0:	d9c00315 	stw	r7,12(sp)
   23fe4:	280d883a 	mov	r6,r5
   23fe8:	21400217 	ldw	r5,8(r4)
   23fec:	d8c00204 	addi	r3,sp,8
   23ff0:	180f883a 	mov	r7,r3
   23ff4:	d8c00015 	stw	r3,0(sp)
   23ff8:	00241c00 	call	241c0 <___vfprintf_internal_r>
   23ffc:	dfc00117 	ldw	ra,4(sp)
   24000:	dec00404 	addi	sp,sp,16
   24004:	f800283a 	ret

00024008 <srand>:
   24008:	008000f4 	movhi	r2,3
   2400c:	1081df04 	addi	r2,r2,1916
   24010:	11400017 	ldw	r5,0(r2)
   24014:	0007883a 	mov	r3,zero
   24018:	28c02a15 	stw	r3,168(r5)
   2401c:	29002915 	stw	r4,164(r5)
   24020:	f800283a 	ret

00024024 <rand>:
   24024:	defffe04 	addi	sp,sp,-8
   24028:	008000f4 	movhi	r2,3
   2402c:	1081df04 	addi	r2,r2,1916
   24030:	dc000015 	stw	r16,0(sp)
   24034:	14000017 	ldw	r16,0(r2)
   24038:	dfc00115 	stw	ra,4(sp)
   2403c:	00932574 	movhi	r2,19605
   24040:	109fcb44 	addi	r2,r2,32557
   24044:	82002917 	ldw	r8,164(r16)
   24048:	82402a17 	ldw	r9,168(r16)
   2404c:	00d614b4 	movhi	r3,22610
   24050:	18fd0b44 	addi	r3,r3,-3027
   24054:	4009883a 	mov	r4,r8
   24058:	180f883a 	mov	r7,r3
   2405c:	100d883a 	mov	r6,r2
   24060:	480b883a 	mov	r5,r9
   24064:	0022f080 	call	22f08 <__muldi3>
   24068:	02000044 	movi	r8,1
   2406c:	1209883a 	add	r4,r2,r8
   24070:	2095803a 	cmpltu	r10,r4,r2
   24074:	50d5883a 	add	r10,r10,r3
   24078:	81002915 	stw	r4,164(r16)
   2407c:	01200034 	movhi	r4,32768
   24080:	213fffc4 	addi	r4,r4,-1
   24084:	2284703a 	and	r2,r4,r10
   24088:	82802a15 	stw	r10,168(r16)
   2408c:	dfc00117 	ldw	ra,4(sp)
   24090:	dc000017 	ldw	r16,0(sp)
   24094:	dec00204 	addi	sp,sp,8
   24098:	f800283a 	ret

0002409c <_sbrk_r>:
   2409c:	defffd04 	addi	sp,sp,-12
   240a0:	dc000015 	stw	r16,0(sp)
   240a4:	040000f4 	movhi	r16,3
   240a8:	84088804 	addi	r16,r16,8736
   240ac:	dc400115 	stw	r17,4(sp)
   240b0:	80000015 	stw	zero,0(r16)
   240b4:	2023883a 	mov	r17,r4
   240b8:	2809883a 	mov	r4,r5
   240bc:	dfc00215 	stw	ra,8(sp)
   240c0:	002c6240 	call	2c624 <sbrk>
   240c4:	1007883a 	mov	r3,r2
   240c8:	00bfffc4 	movi	r2,-1
   240cc:	18800626 	beq	r3,r2,240e8 <_sbrk_r+0x4c>
   240d0:	1805883a 	mov	r2,r3
   240d4:	dfc00217 	ldw	ra,8(sp)
   240d8:	dc400117 	ldw	r17,4(sp)
   240dc:	dc000017 	ldw	r16,0(sp)
   240e0:	dec00304 	addi	sp,sp,12
   240e4:	f800283a 	ret
   240e8:	80800017 	ldw	r2,0(r16)
   240ec:	103ff826 	beq	r2,zero,240d0 <_sbrk_r+0x34>
   240f0:	88800015 	stw	r2,0(r17)
   240f4:	1805883a 	mov	r2,r3
   240f8:	dfc00217 	ldw	ra,8(sp)
   240fc:	dc400117 	ldw	r17,4(sp)
   24100:	dc000017 	ldw	r16,0(sp)
   24104:	dec00304 	addi	sp,sp,12
   24108:	f800283a 	ret

0002410c <time>:
   2410c:	defffc04 	addi	sp,sp,-16
   24110:	008000f4 	movhi	r2,3
   24114:	1081df04 	addi	r2,r2,1916
   24118:	dc000215 	stw	r16,8(sp)
   2411c:	2021883a 	mov	r16,r4
   24120:	11000017 	ldw	r4,0(r2)
   24124:	d80b883a 	mov	r5,sp
   24128:	000d883a 	mov	r6,zero
   2412c:	dfc00315 	stw	ra,12(sp)
   24130:	00288e40 	call	288e4 <_gettimeofday_r>
   24134:	00ffffc4 	movi	r3,-1
   24138:	10000416 	blt	r2,zero,2414c <time+0x40>
   2413c:	80000826 	beq	r16,zero,24160 <time+0x54>
   24140:	d8800017 	ldw	r2,0(sp)
   24144:	80800015 	stw	r2,0(r16)
   24148:	1007883a 	mov	r3,r2
   2414c:	1805883a 	mov	r2,r3
   24150:	dfc00317 	ldw	ra,12(sp)
   24154:	dc000217 	ldw	r16,8(sp)
   24158:	dec00404 	addi	sp,sp,16
   2415c:	f800283a 	ret
   24160:	d8800017 	ldw	r2,0(sp)
   24164:	003ff806 	br	24148 <time+0x3c>

00024168 <__sprint_r>:
   24168:	30800217 	ldw	r2,8(r6)
   2416c:	defffe04 	addi	sp,sp,-8
   24170:	dc000015 	stw	r16,0(sp)
   24174:	dfc00115 	stw	ra,4(sp)
   24178:	3021883a 	mov	r16,r6
   2417c:	0007883a 	mov	r3,zero
   24180:	1000061e 	bne	r2,zero,2419c <__sprint_r+0x34>
   24184:	1805883a 	mov	r2,r3
   24188:	30000115 	stw	zero,4(r6)
   2418c:	dfc00117 	ldw	ra,4(sp)
   24190:	dc000017 	ldw	r16,0(sp)
   24194:	dec00204 	addi	sp,sp,8
   24198:	f800283a 	ret
   2419c:	00282c80 	call	282c8 <__sfvwrite_r>
   241a0:	1007883a 	mov	r3,r2
   241a4:	1805883a 	mov	r2,r3
   241a8:	80000115 	stw	zero,4(r16)
   241ac:	80000215 	stw	zero,8(r16)
   241b0:	dfc00117 	ldw	ra,4(sp)
   241b4:	dc000017 	ldw	r16,0(sp)
   241b8:	dec00204 	addi	sp,sp,8
   241bc:	f800283a 	ret

000241c0 <___vfprintf_internal_r>:
   241c0:	defea404 	addi	sp,sp,-1392
   241c4:	dd815815 	stw	r22,1376(sp)
   241c8:	dc015215 	stw	r16,1352(sp)
   241cc:	d9c15115 	stw	r7,1348(sp)
   241d0:	dfc15b15 	stw	ra,1388(sp)
   241d4:	df015a15 	stw	fp,1384(sp)
   241d8:	ddc15915 	stw	r23,1380(sp)
   241dc:	dd415715 	stw	r21,1372(sp)
   241e0:	dd015615 	stw	r20,1368(sp)
   241e4:	dcc15515 	stw	r19,1364(sp)
   241e8:	dc815415 	stw	r18,1360(sp)
   241ec:	dc415315 	stw	r17,1356(sp)
   241f0:	282d883a 	mov	r22,r5
   241f4:	3021883a 	mov	r16,r6
   241f8:	d9014f15 	stw	r4,1340(sp)
   241fc:	00289600 	call	28960 <_localeconv_r>
   24200:	10800017 	ldw	r2,0(r2)
   24204:	d9c15117 	ldw	r7,1348(sp)
   24208:	d8814915 	stw	r2,1316(sp)
   2420c:	d8814f17 	ldw	r2,1340(sp)
   24210:	10000226 	beq	r2,zero,2421c <___vfprintf_internal_r+0x5c>
   24214:	10800e17 	ldw	r2,56(r2)
   24218:	10020d26 	beq	r2,zero,24a50 <___vfprintf_internal_r+0x890>
   2421c:	b080030b 	ldhu	r2,12(r22)
   24220:	1080020c 	andi	r2,r2,8
   24224:	10020e26 	beq	r2,zero,24a60 <___vfprintf_internal_r+0x8a0>
   24228:	b0800417 	ldw	r2,16(r22)
   2422c:	10020c26 	beq	r2,zero,24a60 <___vfprintf_internal_r+0x8a0>
   24230:	b200030b 	ldhu	r8,12(r22)
   24234:	00800284 	movi	r2,10
   24238:	40c0068c 	andi	r3,r8,26
   2423c:	18802f1e 	bne	r3,r2,242fc <___vfprintf_internal_r+0x13c>
   24240:	b080038f 	ldh	r2,14(r22)
   24244:	10002d16 	blt	r2,zero,242fc <___vfprintf_internal_r+0x13c>
   24248:	b240038b 	ldhu	r9,14(r22)
   2424c:	b2800717 	ldw	r10,28(r22)
   24250:	b2c00917 	ldw	r11,36(r22)
   24254:	d9014f17 	ldw	r4,1340(sp)
   24258:	dc402904 	addi	r17,sp,164
   2425c:	d8804004 	addi	r2,sp,256
   24260:	00c10004 	movi	r3,1024
   24264:	423fff4c 	andi	r8,r8,65533
   24268:	800d883a 	mov	r6,r16
   2426c:	880b883a 	mov	r5,r17
   24270:	da002c0d 	sth	r8,176(sp)
   24274:	da402c8d 	sth	r9,178(sp)
   24278:	da803015 	stw	r10,192(sp)
   2427c:	dac03215 	stw	r11,200(sp)
   24280:	d8802d15 	stw	r2,180(sp)
   24284:	d8c02e15 	stw	r3,184(sp)
   24288:	d8802915 	stw	r2,164(sp)
   2428c:	d8c02b15 	stw	r3,172(sp)
   24290:	d8002f15 	stw	zero,188(sp)
   24294:	00241c00 	call	241c0 <___vfprintf_internal_r>
   24298:	d8814b15 	stw	r2,1324(sp)
   2429c:	10000416 	blt	r2,zero,242b0 <___vfprintf_internal_r+0xf0>
   242a0:	d9014f17 	ldw	r4,1340(sp)
   242a4:	880b883a 	mov	r5,r17
   242a8:	00279980 	call	27998 <_fflush_r>
   242ac:	1002321e 	bne	r2,zero,24b78 <___vfprintf_internal_r+0x9b8>
   242b0:	d8802c0b 	ldhu	r2,176(sp)
   242b4:	1080100c 	andi	r2,r2,64
   242b8:	10000326 	beq	r2,zero,242c8 <___vfprintf_internal_r+0x108>
   242bc:	b080030b 	ldhu	r2,12(r22)
   242c0:	10801014 	ori	r2,r2,64
   242c4:	b080030d 	sth	r2,12(r22)
   242c8:	d8814b17 	ldw	r2,1324(sp)
   242cc:	dfc15b17 	ldw	ra,1388(sp)
   242d0:	df015a17 	ldw	fp,1384(sp)
   242d4:	ddc15917 	ldw	r23,1380(sp)
   242d8:	dd815817 	ldw	r22,1376(sp)
   242dc:	dd415717 	ldw	r21,1372(sp)
   242e0:	dd015617 	ldw	r20,1368(sp)
   242e4:	dcc15517 	ldw	r19,1364(sp)
   242e8:	dc815417 	ldw	r18,1360(sp)
   242ec:	dc415317 	ldw	r17,1356(sp)
   242f0:	dc015217 	ldw	r16,1352(sp)
   242f4:	dec15c04 	addi	sp,sp,1392
   242f8:	f800283a 	ret
   242fc:	0005883a 	mov	r2,zero
   24300:	0007883a 	mov	r3,zero
   24304:	dd401904 	addi	r21,sp,100
   24308:	d8814215 	stw	r2,1288(sp)
   2430c:	802f883a 	mov	r23,r16
   24310:	d8c14315 	stw	r3,1292(sp)
   24314:	d8014b15 	stw	zero,1324(sp)
   24318:	d8014815 	stw	zero,1312(sp)
   2431c:	d8014415 	stw	zero,1296(sp)
   24320:	d8014715 	stw	zero,1308(sp)
   24324:	dd400c15 	stw	r21,48(sp)
   24328:	d8000e15 	stw	zero,56(sp)
   2432c:	d8000d15 	stw	zero,52(sp)
   24330:	b8800007 	ldb	r2,0(r23)
   24334:	10001926 	beq	r2,zero,2439c <___vfprintf_internal_r+0x1dc>
   24338:	00c00944 	movi	r3,37
   2433c:	10c01726 	beq	r2,r3,2439c <___vfprintf_internal_r+0x1dc>
   24340:	b821883a 	mov	r16,r23
   24344:	00000106 	br	2434c <___vfprintf_internal_r+0x18c>
   24348:	10c00326 	beq	r2,r3,24358 <___vfprintf_internal_r+0x198>
   2434c:	84000044 	addi	r16,r16,1
   24350:	80800007 	ldb	r2,0(r16)
   24354:	103ffc1e 	bne	r2,zero,24348 <___vfprintf_internal_r+0x188>
   24358:	85e7c83a 	sub	r19,r16,r23
   2435c:	98000e26 	beq	r19,zero,24398 <___vfprintf_internal_r+0x1d8>
   24360:	dc800e17 	ldw	r18,56(sp)
   24364:	dc400d17 	ldw	r17,52(sp)
   24368:	008001c4 	movi	r2,7
   2436c:	94e5883a 	add	r18,r18,r19
   24370:	8c400044 	addi	r17,r17,1
   24374:	adc00015 	stw	r23,0(r21)
   24378:	dc800e15 	stw	r18,56(sp)
   2437c:	acc00115 	stw	r19,4(r21)
   24380:	dc400d15 	stw	r17,52(sp)
   24384:	14428b16 	blt	r2,r17,24db4 <___vfprintf_internal_r+0xbf4>
   24388:	ad400204 	addi	r21,r21,8
   2438c:	d9014b17 	ldw	r4,1324(sp)
   24390:	24c9883a 	add	r4,r4,r19
   24394:	d9014b15 	stw	r4,1324(sp)
   24398:	802f883a 	mov	r23,r16
   2439c:	b8800007 	ldb	r2,0(r23)
   243a0:	10013c26 	beq	r2,zero,24894 <___vfprintf_internal_r+0x6d4>
   243a4:	bdc00044 	addi	r23,r23,1
   243a8:	d8000405 	stb	zero,16(sp)
   243ac:	b8c00007 	ldb	r3,0(r23)
   243b0:	04ffffc4 	movi	r19,-1
   243b4:	d8014c15 	stw	zero,1328(sp)
   243b8:	d8014a15 	stw	zero,1320(sp)
   243bc:	d8c14d15 	stw	r3,1332(sp)
   243c0:	bdc00044 	addi	r23,r23,1
   243c4:	d9414d17 	ldw	r5,1332(sp)
   243c8:	00801604 	movi	r2,88
   243cc:	28fff804 	addi	r3,r5,-32
   243d0:	10c06036 	bltu	r2,r3,24554 <___vfprintf_internal_r+0x394>
   243d4:	18c5883a 	add	r2,r3,r3
   243d8:	1085883a 	add	r2,r2,r2
   243dc:	00c000b4 	movhi	r3,2
   243e0:	18d0fc04 	addi	r3,r3,17392
   243e4:	10c5883a 	add	r2,r2,r3
   243e8:	11000017 	ldw	r4,0(r2)
   243ec:	2000683a 	jmp	r4
   243f0:	00025364 	muli	zero,zero,2381
   243f4:	00024554 	movui	zero,2325
   243f8:	00024554 	movui	zero,2325
   243fc:	00025350 	cmplti	zero,zero,2381
   24400:	00024554 	movui	zero,2325
   24404:	00024554 	movui	zero,2325
   24408:	00024554 	movui	zero,2325
   2440c:	00024554 	movui	zero,2325
   24410:	00024554 	movui	zero,2325
   24414:	00024554 	movui	zero,2325
   24418:	00025130 	cmpltui	zero,zero,2372
   2441c:	00025340 	call	2534 <__reset-0x1dacc>
   24420:	00024554 	movui	zero,2325
   24424:	00025148 	cmpgei	zero,zero,2373
   24428:	000253dc 	xori	zero,zero,2383
   2442c:	00024554 	movui	zero,2325
   24430:	000253c8 	cmpgei	zero,zero,2383
   24434:	00025390 	cmplti	zero,zero,2382
   24438:	00025390 	cmplti	zero,zero,2382
   2443c:	00025390 	cmplti	zero,zero,2382
   24440:	00025390 	cmplti	zero,zero,2382
   24444:	00025390 	cmplti	zero,zero,2382
   24448:	00025390 	cmplti	zero,zero,2382
   2444c:	00025390 	cmplti	zero,zero,2382
   24450:	00025390 	cmplti	zero,zero,2382
   24454:	00025390 	cmplti	zero,zero,2382
   24458:	00024554 	movui	zero,2325
   2445c:	00024554 	movui	zero,2325
   24460:	00024554 	movui	zero,2325
   24464:	00024554 	movui	zero,2325
   24468:	00024554 	movui	zero,2325
   2446c:	00024554 	movui	zero,2325
   24470:	00024554 	movui	zero,2325
   24474:	00024554 	movui	zero,2325
   24478:	00024554 	movui	zero,2325
   2447c:	00024554 	movui	zero,2325
   24480:	00024bac 	andhi	zero,zero,2350
   24484:	00025218 	cmpnei	zero,zero,2376
   24488:	00024554 	movui	zero,2325
   2448c:	00025218 	cmpnei	zero,zero,2376
   24490:	00024554 	movui	zero,2325
   24494:	00024554 	movui	zero,2325
   24498:	00024554 	movui	zero,2325
   2449c:	00024554 	movui	zero,2325
   244a0:	0002537c 	xorhi	zero,zero,2381
   244a4:	00024554 	movui	zero,2325
   244a8:	00024554 	movui	zero,2325
   244ac:	00024c60 	cmpeqi	zero,zero,2353
   244b0:	00024554 	movui	zero,2325
   244b4:	00024554 	movui	zero,2325
   244b8:	00024554 	movui	zero,2325
   244bc:	00024554 	movui	zero,2325
   244c0:	00024554 	movui	zero,2325
   244c4:	00024cac 	andhi	zero,zero,2354
   244c8:	00024554 	movui	zero,2325
   244cc:	00024554 	movui	zero,2325
   244d0:	000252cc 	andi	zero,zero,2379
   244d4:	00024554 	movui	zero,2325
   244d8:	00024554 	movui	zero,2325
   244dc:	00024554 	movui	zero,2325
   244e0:	00024554 	movui	zero,2325
   244e4:	00024554 	movui	zero,2325
   244e8:	00024554 	movui	zero,2325
   244ec:	00024554 	movui	zero,2325
   244f0:	00024554 	movui	zero,2325
   244f4:	00024554 	movui	zero,2325
   244f8:	00024554 	movui	zero,2325
   244fc:	000252a0 	cmpeqi	zero,zero,2378
   24500:	00024bb8 	rdprs	zero,zero,2350
   24504:	00025218 	cmpnei	zero,zero,2376
   24508:	00025218 	cmpnei	zero,zero,2376
   2450c:	00025218 	cmpnei	zero,zero,2376
   24510:	00025204 	movi	zero,2376
   24514:	00024bb8 	rdprs	zero,zero,2350
   24518:	00024554 	movui	zero,2325
   2451c:	00024554 	movui	zero,2325
   24520:	0002518c 	andi	zero,zero,2374
   24524:	00024554 	movui	zero,2325
   24528:	0002515c 	xori	zero,zero,2373
   2452c:	00024c6c 	andhi	zero,zero,2353
   24530:	000251bc 	xorhi	zero,zero,2374
   24534:	000251a8 	cmpgeui	zero,zero,2374
   24538:	00024554 	movui	zero,2325
   2453c:	00025438 	rdprs	zero,zero,2384
   24540:	00024554 	movui	zero,2325
   24544:	00024cb8 	rdprs	zero,zero,2354
   24548:	00024554 	movui	zero,2325
   2454c:	00024554 	movui	zero,2325
   24550:	00025330 	cmpltui	zero,zero,2380
   24554:	d9014d17 	ldw	r4,1332(sp)
   24558:	2000ce26 	beq	r4,zero,24894 <___vfprintf_internal_r+0x6d4>
   2455c:	01400044 	movi	r5,1
   24560:	d9800f04 	addi	r6,sp,60
   24564:	d9c14015 	stw	r7,1280(sp)
   24568:	d9414515 	stw	r5,1300(sp)
   2456c:	d9814115 	stw	r6,1284(sp)
   24570:	280f883a 	mov	r7,r5
   24574:	d9000f05 	stb	r4,60(sp)
   24578:	d8000405 	stb	zero,16(sp)
   2457c:	d8014615 	stw	zero,1304(sp)
   24580:	d8c14c17 	ldw	r3,1328(sp)
   24584:	1880008c 	andi	r2,r3,2
   24588:	1005003a 	cmpeq	r2,r2,zero
   2458c:	d8815015 	stw	r2,1344(sp)
   24590:	1000031e 	bne	r2,zero,245a0 <___vfprintf_internal_r+0x3e0>
   24594:	d9014517 	ldw	r4,1300(sp)
   24598:	21000084 	addi	r4,r4,2
   2459c:	d9014515 	stw	r4,1300(sp)
   245a0:	d9414c17 	ldw	r5,1328(sp)
   245a4:	2940210c 	andi	r5,r5,132
   245a8:	d9414e15 	stw	r5,1336(sp)
   245ac:	28002d1e 	bne	r5,zero,24664 <___vfprintf_internal_r+0x4a4>
   245b0:	d9814a17 	ldw	r6,1320(sp)
   245b4:	d8814517 	ldw	r2,1300(sp)
   245b8:	30a1c83a 	sub	r16,r6,r2
   245bc:	0400290e 	bge	zero,r16,24664 <___vfprintf_internal_r+0x4a4>
   245c0:	00800404 	movi	r2,16
   245c4:	1404580e 	bge	r2,r16,25728 <___vfprintf_internal_r+0x1568>
   245c8:	dc800e17 	ldw	r18,56(sp)
   245cc:	dc400d17 	ldw	r17,52(sp)
   245d0:	1027883a 	mov	r19,r2
   245d4:	070000f4 	movhi	fp,3
   245d8:	e73ae684 	addi	fp,fp,-5222
   245dc:	050001c4 	movi	r20,7
   245e0:	00000306 	br	245f0 <___vfprintf_internal_r+0x430>
   245e4:	843ffc04 	addi	r16,r16,-16
   245e8:	ad400204 	addi	r21,r21,8
   245ec:	9c00130e 	bge	r19,r16,2463c <___vfprintf_internal_r+0x47c>
   245f0:	94800404 	addi	r18,r18,16
   245f4:	8c400044 	addi	r17,r17,1
   245f8:	af000015 	stw	fp,0(r21)
   245fc:	acc00115 	stw	r19,4(r21)
   24600:	dc800e15 	stw	r18,56(sp)
   24604:	dc400d15 	stw	r17,52(sp)
   24608:	a47ff60e 	bge	r20,r17,245e4 <___vfprintf_internal_r+0x424>
   2460c:	d9014f17 	ldw	r4,1340(sp)
   24610:	b00b883a 	mov	r5,r22
   24614:	d9800c04 	addi	r6,sp,48
   24618:	d9c15115 	stw	r7,1348(sp)
   2461c:	00241680 	call	24168 <__sprint_r>
   24620:	d9c15117 	ldw	r7,1348(sp)
   24624:	10009e1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24628:	843ffc04 	addi	r16,r16,-16
   2462c:	dc800e17 	ldw	r18,56(sp)
   24630:	dc400d17 	ldw	r17,52(sp)
   24634:	dd401904 	addi	r21,sp,100
   24638:	9c3fed16 	blt	r19,r16,245f0 <___vfprintf_internal_r+0x430>
   2463c:	9425883a 	add	r18,r18,r16
   24640:	8c400044 	addi	r17,r17,1
   24644:	008001c4 	movi	r2,7
   24648:	af000015 	stw	fp,0(r21)
   2464c:	ac000115 	stw	r16,4(r21)
   24650:	dc800e15 	stw	r18,56(sp)
   24654:	dc400d15 	stw	r17,52(sp)
   24658:	1441f516 	blt	r2,r17,24e30 <___vfprintf_internal_r+0xc70>
   2465c:	ad400204 	addi	r21,r21,8
   24660:	00000206 	br	2466c <___vfprintf_internal_r+0x4ac>
   24664:	dc800e17 	ldw	r18,56(sp)
   24668:	dc400d17 	ldw	r17,52(sp)
   2466c:	d8800407 	ldb	r2,16(sp)
   24670:	10000b26 	beq	r2,zero,246a0 <___vfprintf_internal_r+0x4e0>
   24674:	00800044 	movi	r2,1
   24678:	94800044 	addi	r18,r18,1
   2467c:	8c400044 	addi	r17,r17,1
   24680:	a8800115 	stw	r2,4(r21)
   24684:	d8c00404 	addi	r3,sp,16
   24688:	008001c4 	movi	r2,7
   2468c:	a8c00015 	stw	r3,0(r21)
   24690:	dc800e15 	stw	r18,56(sp)
   24694:	dc400d15 	stw	r17,52(sp)
   24698:	1441da16 	blt	r2,r17,24e04 <___vfprintf_internal_r+0xc44>
   2469c:	ad400204 	addi	r21,r21,8
   246a0:	d9015017 	ldw	r4,1344(sp)
   246a4:	20000b1e 	bne	r4,zero,246d4 <___vfprintf_internal_r+0x514>
   246a8:	d8800444 	addi	r2,sp,17
   246ac:	94800084 	addi	r18,r18,2
   246b0:	8c400044 	addi	r17,r17,1
   246b4:	a8800015 	stw	r2,0(r21)
   246b8:	00c00084 	movi	r3,2
   246bc:	008001c4 	movi	r2,7
   246c0:	a8c00115 	stw	r3,4(r21)
   246c4:	dc800e15 	stw	r18,56(sp)
   246c8:	dc400d15 	stw	r17,52(sp)
   246cc:	1441c216 	blt	r2,r17,24dd8 <___vfprintf_internal_r+0xc18>
   246d0:	ad400204 	addi	r21,r21,8
   246d4:	d9414e17 	ldw	r5,1336(sp)
   246d8:	00802004 	movi	r2,128
   246dc:	2880b126 	beq	r5,r2,249a4 <___vfprintf_internal_r+0x7e4>
   246e0:	d8c14617 	ldw	r3,1304(sp)
   246e4:	19e1c83a 	sub	r16,r3,r7
   246e8:	0400260e 	bge	zero,r16,24784 <___vfprintf_internal_r+0x5c4>
   246ec:	00800404 	movi	r2,16
   246f0:	1403c90e 	bge	r2,r16,25618 <___vfprintf_internal_r+0x1458>
   246f4:	1027883a 	mov	r19,r2
   246f8:	070000f4 	movhi	fp,3
   246fc:	e73ae284 	addi	fp,fp,-5238
   24700:	050001c4 	movi	r20,7
   24704:	00000306 	br	24714 <___vfprintf_internal_r+0x554>
   24708:	843ffc04 	addi	r16,r16,-16
   2470c:	ad400204 	addi	r21,r21,8
   24710:	9c00130e 	bge	r19,r16,24760 <___vfprintf_internal_r+0x5a0>
   24714:	94800404 	addi	r18,r18,16
   24718:	8c400044 	addi	r17,r17,1
   2471c:	af000015 	stw	fp,0(r21)
   24720:	acc00115 	stw	r19,4(r21)
   24724:	dc800e15 	stw	r18,56(sp)
   24728:	dc400d15 	stw	r17,52(sp)
   2472c:	a47ff60e 	bge	r20,r17,24708 <___vfprintf_internal_r+0x548>
   24730:	d9014f17 	ldw	r4,1340(sp)
   24734:	b00b883a 	mov	r5,r22
   24738:	d9800c04 	addi	r6,sp,48
   2473c:	d9c15115 	stw	r7,1348(sp)
   24740:	00241680 	call	24168 <__sprint_r>
   24744:	d9c15117 	ldw	r7,1348(sp)
   24748:	1000551e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   2474c:	843ffc04 	addi	r16,r16,-16
   24750:	dc800e17 	ldw	r18,56(sp)
   24754:	dc400d17 	ldw	r17,52(sp)
   24758:	dd401904 	addi	r21,sp,100
   2475c:	9c3fed16 	blt	r19,r16,24714 <___vfprintf_internal_r+0x554>
   24760:	9425883a 	add	r18,r18,r16
   24764:	8c400044 	addi	r17,r17,1
   24768:	008001c4 	movi	r2,7
   2476c:	af000015 	stw	fp,0(r21)
   24770:	ac000115 	stw	r16,4(r21)
   24774:	dc800e15 	stw	r18,56(sp)
   24778:	dc400d15 	stw	r17,52(sp)
   2477c:	14418216 	blt	r2,r17,24d88 <___vfprintf_internal_r+0xbc8>
   24780:	ad400204 	addi	r21,r21,8
   24784:	d9014c17 	ldw	r4,1328(sp)
   24788:	2080400c 	andi	r2,r4,256
   2478c:	10004a1e 	bne	r2,zero,248b8 <___vfprintf_internal_r+0x6f8>
   24790:	d9414117 	ldw	r5,1284(sp)
   24794:	91e5883a 	add	r18,r18,r7
   24798:	8c400044 	addi	r17,r17,1
   2479c:	008001c4 	movi	r2,7
   247a0:	a9400015 	stw	r5,0(r21)
   247a4:	a9c00115 	stw	r7,4(r21)
   247a8:	dc800e15 	stw	r18,56(sp)
   247ac:	dc400d15 	stw	r17,52(sp)
   247b0:	14416716 	blt	r2,r17,24d50 <___vfprintf_internal_r+0xb90>
   247b4:	a8c00204 	addi	r3,r21,8
   247b8:	d9814c17 	ldw	r6,1328(sp)
   247bc:	3080010c 	andi	r2,r6,4
   247c0:	10002826 	beq	r2,zero,24864 <___vfprintf_internal_r+0x6a4>
   247c4:	d8814a17 	ldw	r2,1320(sp)
   247c8:	d9014517 	ldw	r4,1300(sp)
   247cc:	1121c83a 	sub	r16,r2,r4
   247d0:	0400240e 	bge	zero,r16,24864 <___vfprintf_internal_r+0x6a4>
   247d4:	00800404 	movi	r2,16
   247d8:	14044f0e 	bge	r2,r16,25918 <___vfprintf_internal_r+0x1758>
   247dc:	dc400d17 	ldw	r17,52(sp)
   247e0:	1027883a 	mov	r19,r2
   247e4:	070000f4 	movhi	fp,3
   247e8:	e73ae684 	addi	fp,fp,-5222
   247ec:	050001c4 	movi	r20,7
   247f0:	00000306 	br	24800 <___vfprintf_internal_r+0x640>
   247f4:	843ffc04 	addi	r16,r16,-16
   247f8:	18c00204 	addi	r3,r3,8
   247fc:	9c00110e 	bge	r19,r16,24844 <___vfprintf_internal_r+0x684>
   24800:	94800404 	addi	r18,r18,16
   24804:	8c400044 	addi	r17,r17,1
   24808:	1f000015 	stw	fp,0(r3)
   2480c:	1cc00115 	stw	r19,4(r3)
   24810:	dc800e15 	stw	r18,56(sp)
   24814:	dc400d15 	stw	r17,52(sp)
   24818:	a47ff60e 	bge	r20,r17,247f4 <___vfprintf_internal_r+0x634>
   2481c:	d9014f17 	ldw	r4,1340(sp)
   24820:	b00b883a 	mov	r5,r22
   24824:	d9800c04 	addi	r6,sp,48
   24828:	00241680 	call	24168 <__sprint_r>
   2482c:	10001c1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24830:	843ffc04 	addi	r16,r16,-16
   24834:	dc800e17 	ldw	r18,56(sp)
   24838:	dc400d17 	ldw	r17,52(sp)
   2483c:	d8c01904 	addi	r3,sp,100
   24840:	9c3fef16 	blt	r19,r16,24800 <___vfprintf_internal_r+0x640>
   24844:	9425883a 	add	r18,r18,r16
   24848:	8c400044 	addi	r17,r17,1
   2484c:	008001c4 	movi	r2,7
   24850:	1f000015 	stw	fp,0(r3)
   24854:	1c000115 	stw	r16,4(r3)
   24858:	dc800e15 	stw	r18,56(sp)
   2485c:	dc400d15 	stw	r17,52(sp)
   24860:	1440cb16 	blt	r2,r17,24b90 <___vfprintf_internal_r+0x9d0>
   24864:	d8814a17 	ldw	r2,1320(sp)
   24868:	d9414517 	ldw	r5,1300(sp)
   2486c:	1140010e 	bge	r2,r5,24874 <___vfprintf_internal_r+0x6b4>
   24870:	2805883a 	mov	r2,r5
   24874:	d9814b17 	ldw	r6,1324(sp)
   24878:	308d883a 	add	r6,r6,r2
   2487c:	d9814b15 	stw	r6,1324(sp)
   24880:	90013b1e 	bne	r18,zero,24d70 <___vfprintf_internal_r+0xbb0>
   24884:	d9c14017 	ldw	r7,1280(sp)
   24888:	dd401904 	addi	r21,sp,100
   2488c:	d8000d15 	stw	zero,52(sp)
   24890:	003ea706 	br	24330 <___vfprintf_internal_r+0x170>
   24894:	d8800e17 	ldw	r2,56(sp)
   24898:	10053f1e 	bne	r2,zero,25d98 <___vfprintf_internal_r+0x1bd8>
   2489c:	d8000d15 	stw	zero,52(sp)
   248a0:	b080030b 	ldhu	r2,12(r22)
   248a4:	1080100c 	andi	r2,r2,64
   248a8:	103e8726 	beq	r2,zero,242c8 <___vfprintf_internal_r+0x108>
   248ac:	00bfffc4 	movi	r2,-1
   248b0:	d8814b15 	stw	r2,1324(sp)
   248b4:	003e8406 	br	242c8 <___vfprintf_internal_r+0x108>
   248b8:	d9814d17 	ldw	r6,1332(sp)
   248bc:	00801944 	movi	r2,101
   248c0:	11806e16 	blt	r2,r6,24a7c <___vfprintf_internal_r+0x8bc>
   248c4:	d9414717 	ldw	r5,1308(sp)
   248c8:	00c00044 	movi	r3,1
   248cc:	1943430e 	bge	r3,r5,255dc <___vfprintf_internal_r+0x141c>
   248d0:	d8814117 	ldw	r2,1284(sp)
   248d4:	94800044 	addi	r18,r18,1
   248d8:	8c400044 	addi	r17,r17,1
   248dc:	a8800015 	stw	r2,0(r21)
   248e0:	008001c4 	movi	r2,7
   248e4:	a8c00115 	stw	r3,4(r21)
   248e8:	dc800e15 	stw	r18,56(sp)
   248ec:	dc400d15 	stw	r17,52(sp)
   248f0:	1441ca16 	blt	r2,r17,2501c <___vfprintf_internal_r+0xe5c>
   248f4:	a8c00204 	addi	r3,r21,8
   248f8:	d9014917 	ldw	r4,1316(sp)
   248fc:	00800044 	movi	r2,1
   24900:	94800044 	addi	r18,r18,1
   24904:	8c400044 	addi	r17,r17,1
   24908:	18800115 	stw	r2,4(r3)
   2490c:	008001c4 	movi	r2,7
   24910:	19000015 	stw	r4,0(r3)
   24914:	dc800e15 	stw	r18,56(sp)
   24918:	dc400d15 	stw	r17,52(sp)
   2491c:	1441b616 	blt	r2,r17,24ff8 <___vfprintf_internal_r+0xe38>
   24920:	1cc00204 	addi	r19,r3,8
   24924:	d9014217 	ldw	r4,1288(sp)
   24928:	d9414317 	ldw	r5,1292(sp)
   2492c:	000d883a 	mov	r6,zero
   24930:	000f883a 	mov	r7,zero
   24934:	002b7880 	call	2b788 <__nedf2>
   24938:	10017426 	beq	r2,zero,24f0c <___vfprintf_internal_r+0xd4c>
   2493c:	d9414717 	ldw	r5,1308(sp)
   24940:	d9814117 	ldw	r6,1284(sp)
   24944:	8c400044 	addi	r17,r17,1
   24948:	2c85883a 	add	r2,r5,r18
   2494c:	14bfffc4 	addi	r18,r2,-1
   24950:	28bfffc4 	addi	r2,r5,-1
   24954:	30c00044 	addi	r3,r6,1
   24958:	98800115 	stw	r2,4(r19)
   2495c:	008001c4 	movi	r2,7
   24960:	98c00015 	stw	r3,0(r19)
   24964:	dc800e15 	stw	r18,56(sp)
   24968:	dc400d15 	stw	r17,52(sp)
   2496c:	14418e16 	blt	r2,r17,24fa8 <___vfprintf_internal_r+0xde8>
   24970:	9cc00204 	addi	r19,r19,8
   24974:	d9414817 	ldw	r5,1312(sp)
   24978:	d8800804 	addi	r2,sp,32
   2497c:	8c400044 	addi	r17,r17,1
   24980:	9165883a 	add	r18,r18,r5
   24984:	98800015 	stw	r2,0(r19)
   24988:	008001c4 	movi	r2,7
   2498c:	99400115 	stw	r5,4(r19)
   24990:	dc800e15 	stw	r18,56(sp)
   24994:	dc400d15 	stw	r17,52(sp)
   24998:	1440ed16 	blt	r2,r17,24d50 <___vfprintf_internal_r+0xb90>
   2499c:	98c00204 	addi	r3,r19,8
   249a0:	003f8506 	br	247b8 <___vfprintf_internal_r+0x5f8>
   249a4:	d9814a17 	ldw	r6,1320(sp)
   249a8:	d8814517 	ldw	r2,1300(sp)
   249ac:	30a1c83a 	sub	r16,r6,r2
   249b0:	043f4b0e 	bge	zero,r16,246e0 <___vfprintf_internal_r+0x520>
   249b4:	00800404 	movi	r2,16
   249b8:	1404340e 	bge	r2,r16,25a8c <___vfprintf_internal_r+0x18cc>
   249bc:	1027883a 	mov	r19,r2
   249c0:	070000f4 	movhi	fp,3
   249c4:	e73ae284 	addi	fp,fp,-5238
   249c8:	050001c4 	movi	r20,7
   249cc:	00000306 	br	249dc <___vfprintf_internal_r+0x81c>
   249d0:	843ffc04 	addi	r16,r16,-16
   249d4:	ad400204 	addi	r21,r21,8
   249d8:	9c00130e 	bge	r19,r16,24a28 <___vfprintf_internal_r+0x868>
   249dc:	94800404 	addi	r18,r18,16
   249e0:	8c400044 	addi	r17,r17,1
   249e4:	af000015 	stw	fp,0(r21)
   249e8:	acc00115 	stw	r19,4(r21)
   249ec:	dc800e15 	stw	r18,56(sp)
   249f0:	dc400d15 	stw	r17,52(sp)
   249f4:	a47ff60e 	bge	r20,r17,249d0 <___vfprintf_internal_r+0x810>
   249f8:	d9014f17 	ldw	r4,1340(sp)
   249fc:	b00b883a 	mov	r5,r22
   24a00:	d9800c04 	addi	r6,sp,48
   24a04:	d9c15115 	stw	r7,1348(sp)
   24a08:	00241680 	call	24168 <__sprint_r>
   24a0c:	d9c15117 	ldw	r7,1348(sp)
   24a10:	103fa31e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24a14:	843ffc04 	addi	r16,r16,-16
   24a18:	dc800e17 	ldw	r18,56(sp)
   24a1c:	dc400d17 	ldw	r17,52(sp)
   24a20:	dd401904 	addi	r21,sp,100
   24a24:	9c3fed16 	blt	r19,r16,249dc <___vfprintf_internal_r+0x81c>
   24a28:	9425883a 	add	r18,r18,r16
   24a2c:	8c400044 	addi	r17,r17,1
   24a30:	008001c4 	movi	r2,7
   24a34:	af000015 	stw	fp,0(r21)
   24a38:	ac000115 	stw	r16,4(r21)
   24a3c:	dc800e15 	stw	r18,56(sp)
   24a40:	dc400d15 	stw	r17,52(sp)
   24a44:	14416116 	blt	r2,r17,24fcc <___vfprintf_internal_r+0xe0c>
   24a48:	ad400204 	addi	r21,r21,8
   24a4c:	003f2406 	br	246e0 <___vfprintf_internal_r+0x520>
   24a50:	d9014f17 	ldw	r4,1340(sp)
   24a54:	0027c300 	call	27c30 <__sinit>
   24a58:	d9c15117 	ldw	r7,1348(sp)
   24a5c:	003def06 	br	2421c <___vfprintf_internal_r+0x5c>
   24a60:	d9014f17 	ldw	r4,1340(sp)
   24a64:	b00b883a 	mov	r5,r22
   24a68:	d9c15115 	stw	r7,1348(sp)
   24a6c:	00260900 	call	26090 <__swsetup_r>
   24a70:	d9c15117 	ldw	r7,1348(sp)
   24a74:	103dee26 	beq	r2,zero,24230 <___vfprintf_internal_r+0x70>
   24a78:	003f8c06 	br	248ac <___vfprintf_internal_r+0x6ec>
   24a7c:	d9014217 	ldw	r4,1288(sp)
   24a80:	d9414317 	ldw	r5,1292(sp)
   24a84:	000d883a 	mov	r6,zero
   24a88:	000f883a 	mov	r7,zero
   24a8c:	002b7000 	call	2b700 <__eqdf2>
   24a90:	1000f21e 	bne	r2,zero,24e5c <___vfprintf_internal_r+0xc9c>
   24a94:	008000f4 	movhi	r2,3
   24a98:	10bae204 	addi	r2,r2,-5240
   24a9c:	94800044 	addi	r18,r18,1
   24aa0:	8c400044 	addi	r17,r17,1
   24aa4:	a8800015 	stw	r2,0(r21)
   24aa8:	00c00044 	movi	r3,1
   24aac:	008001c4 	movi	r2,7
   24ab0:	a8c00115 	stw	r3,4(r21)
   24ab4:	dc800e15 	stw	r18,56(sp)
   24ab8:	dc400d15 	stw	r17,52(sp)
   24abc:	1442fa16 	blt	r2,r17,256a8 <___vfprintf_internal_r+0x14e8>
   24ac0:	a8c00204 	addi	r3,r21,8
   24ac4:	d8800517 	ldw	r2,20(sp)
   24ac8:	d9014717 	ldw	r4,1308(sp)
   24acc:	11015c0e 	bge	r2,r4,25040 <___vfprintf_internal_r+0xe80>
   24ad0:	dc400d17 	ldw	r17,52(sp)
   24ad4:	d9814917 	ldw	r6,1316(sp)
   24ad8:	00800044 	movi	r2,1
   24adc:	94800044 	addi	r18,r18,1
   24ae0:	8c400044 	addi	r17,r17,1
   24ae4:	18800115 	stw	r2,4(r3)
   24ae8:	008001c4 	movi	r2,7
   24aec:	19800015 	stw	r6,0(r3)
   24af0:	dc800e15 	stw	r18,56(sp)
   24af4:	dc400d15 	stw	r17,52(sp)
   24af8:	14431016 	blt	r2,r17,2573c <___vfprintf_internal_r+0x157c>
   24afc:	18c00204 	addi	r3,r3,8
   24b00:	d8814717 	ldw	r2,1308(sp)
   24b04:	143fffc4 	addi	r16,r2,-1
   24b08:	043f2b0e 	bge	zero,r16,247b8 <___vfprintf_internal_r+0x5f8>
   24b0c:	00800404 	movi	r2,16
   24b10:	1402a20e 	bge	r2,r16,2559c <___vfprintf_internal_r+0x13dc>
   24b14:	dc400d17 	ldw	r17,52(sp)
   24b18:	1027883a 	mov	r19,r2
   24b1c:	070000f4 	movhi	fp,3
   24b20:	e73ae284 	addi	fp,fp,-5238
   24b24:	050001c4 	movi	r20,7
   24b28:	00000306 	br	24b38 <___vfprintf_internal_r+0x978>
   24b2c:	18c00204 	addi	r3,r3,8
   24b30:	843ffc04 	addi	r16,r16,-16
   24b34:	9c029c0e 	bge	r19,r16,255a8 <___vfprintf_internal_r+0x13e8>
   24b38:	94800404 	addi	r18,r18,16
   24b3c:	8c400044 	addi	r17,r17,1
   24b40:	1f000015 	stw	fp,0(r3)
   24b44:	1cc00115 	stw	r19,4(r3)
   24b48:	dc800e15 	stw	r18,56(sp)
   24b4c:	dc400d15 	stw	r17,52(sp)
   24b50:	a47ff60e 	bge	r20,r17,24b2c <___vfprintf_internal_r+0x96c>
   24b54:	d9014f17 	ldw	r4,1340(sp)
   24b58:	b00b883a 	mov	r5,r22
   24b5c:	d9800c04 	addi	r6,sp,48
   24b60:	00241680 	call	24168 <__sprint_r>
   24b64:	103f4e1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24b68:	dc800e17 	ldw	r18,56(sp)
   24b6c:	dc400d17 	ldw	r17,52(sp)
   24b70:	d8c01904 	addi	r3,sp,100
   24b74:	003fee06 	br	24b30 <___vfprintf_internal_r+0x970>
   24b78:	d8802c0b 	ldhu	r2,176(sp)
   24b7c:	00ffffc4 	movi	r3,-1
   24b80:	d8c14b15 	stw	r3,1324(sp)
   24b84:	1080100c 	andi	r2,r2,64
   24b88:	103dcc1e 	bne	r2,zero,242bc <___vfprintf_internal_r+0xfc>
   24b8c:	003dce06 	br	242c8 <___vfprintf_internal_r+0x108>
   24b90:	d9014f17 	ldw	r4,1340(sp)
   24b94:	b00b883a 	mov	r5,r22
   24b98:	d9800c04 	addi	r6,sp,48
   24b9c:	00241680 	call	24168 <__sprint_r>
   24ba0:	103f3f1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24ba4:	dc800e17 	ldw	r18,56(sp)
   24ba8:	003f2e06 	br	24864 <___vfprintf_internal_r+0x6a4>
   24bac:	d9414c17 	ldw	r5,1328(sp)
   24bb0:	29400414 	ori	r5,r5,16
   24bb4:	d9414c15 	stw	r5,1328(sp)
   24bb8:	d9814c17 	ldw	r6,1328(sp)
   24bbc:	3080080c 	andi	r2,r6,32
   24bc0:	10014f1e 	bne	r2,zero,25100 <___vfprintf_internal_r+0xf40>
   24bc4:	d8c14c17 	ldw	r3,1328(sp)
   24bc8:	1880040c 	andi	r2,r3,16
   24bcc:	1002ea1e 	bne	r2,zero,25778 <___vfprintf_internal_r+0x15b8>
   24bd0:	d9014c17 	ldw	r4,1328(sp)
   24bd4:	2080100c 	andi	r2,r4,64
   24bd8:	1002e726 	beq	r2,zero,25778 <___vfprintf_internal_r+0x15b8>
   24bdc:	3880000f 	ldh	r2,0(r7)
   24be0:	39c00104 	addi	r7,r7,4
   24be4:	d9c14015 	stw	r7,1280(sp)
   24be8:	1023d7fa 	srai	r17,r2,31
   24bec:	1021883a 	mov	r16,r2
   24bf0:	88037216 	blt	r17,zero,259bc <___vfprintf_internal_r+0x17fc>
   24bf4:	01000044 	movi	r4,1
   24bf8:	98000416 	blt	r19,zero,24c0c <___vfprintf_internal_r+0xa4c>
   24bfc:	d8c14c17 	ldw	r3,1328(sp)
   24c00:	00bfdfc4 	movi	r2,-129
   24c04:	1886703a 	and	r3,r3,r2
   24c08:	d8c14c15 	stw	r3,1328(sp)
   24c0c:	8444b03a 	or	r2,r16,r17
   24c10:	1002261e 	bne	r2,zero,254ac <___vfprintf_internal_r+0x12ec>
   24c14:	9802251e 	bne	r19,zero,254ac <___vfprintf_internal_r+0x12ec>
   24c18:	20803fcc 	andi	r2,r4,255
   24c1c:	10029b26 	beq	r2,zero,2568c <___vfprintf_internal_r+0x14cc>
   24c20:	d8c01904 	addi	r3,sp,100
   24c24:	dd000f04 	addi	r20,sp,60
   24c28:	d8c14115 	stw	r3,1284(sp)
   24c2c:	d8c14117 	ldw	r3,1284(sp)
   24c30:	dcc14515 	stw	r19,1300(sp)
   24c34:	a0c5c83a 	sub	r2,r20,r3
   24c38:	11c00a04 	addi	r7,r2,40
   24c3c:	99c0010e 	bge	r19,r7,24c44 <___vfprintf_internal_r+0xa84>
   24c40:	d9c14515 	stw	r7,1300(sp)
   24c44:	dcc14615 	stw	r19,1304(sp)
   24c48:	d8800407 	ldb	r2,16(sp)
   24c4c:	103e4c26 	beq	r2,zero,24580 <___vfprintf_internal_r+0x3c0>
   24c50:	d8814517 	ldw	r2,1300(sp)
   24c54:	10800044 	addi	r2,r2,1
   24c58:	d8814515 	stw	r2,1300(sp)
   24c5c:	003e4806 	br	24580 <___vfprintf_internal_r+0x3c0>
   24c60:	d9814c17 	ldw	r6,1328(sp)
   24c64:	31800414 	ori	r6,r6,16
   24c68:	d9814c15 	stw	r6,1328(sp)
   24c6c:	d8c14c17 	ldw	r3,1328(sp)
   24c70:	1880080c 	andi	r2,r3,32
   24c74:	1001271e 	bne	r2,zero,25114 <___vfprintf_internal_r+0xf54>
   24c78:	d9414c17 	ldw	r5,1328(sp)
   24c7c:	2880040c 	andi	r2,r5,16
   24c80:	1002b61e 	bne	r2,zero,2575c <___vfprintf_internal_r+0x159c>
   24c84:	d9814c17 	ldw	r6,1328(sp)
   24c88:	3080100c 	andi	r2,r6,64
   24c8c:	1002b326 	beq	r2,zero,2575c <___vfprintf_internal_r+0x159c>
   24c90:	3c00000b 	ldhu	r16,0(r7)
   24c94:	0009883a 	mov	r4,zero
   24c98:	39c00104 	addi	r7,r7,4
   24c9c:	0023883a 	mov	r17,zero
   24ca0:	d9c14015 	stw	r7,1280(sp)
   24ca4:	d8000405 	stb	zero,16(sp)
   24ca8:	003fd306 	br	24bf8 <___vfprintf_internal_r+0xa38>
   24cac:	d9014c17 	ldw	r4,1328(sp)
   24cb0:	21000414 	ori	r4,r4,16
   24cb4:	d9014c15 	stw	r4,1328(sp)
   24cb8:	d9414c17 	ldw	r5,1328(sp)
   24cbc:	2880080c 	andi	r2,r5,32
   24cc0:	1001081e 	bne	r2,zero,250e4 <___vfprintf_internal_r+0xf24>
   24cc4:	d8c14c17 	ldw	r3,1328(sp)
   24cc8:	1880040c 	andi	r2,r3,16
   24ccc:	1002b01e 	bne	r2,zero,25790 <___vfprintf_internal_r+0x15d0>
   24cd0:	d9014c17 	ldw	r4,1328(sp)
   24cd4:	2080100c 	andi	r2,r4,64
   24cd8:	1002ad26 	beq	r2,zero,25790 <___vfprintf_internal_r+0x15d0>
   24cdc:	3c00000b 	ldhu	r16,0(r7)
   24ce0:	01000044 	movi	r4,1
   24ce4:	39c00104 	addi	r7,r7,4
   24ce8:	0023883a 	mov	r17,zero
   24cec:	d9c14015 	stw	r7,1280(sp)
   24cf0:	d8000405 	stb	zero,16(sp)
   24cf4:	003fc006 	br	24bf8 <___vfprintf_internal_r+0xa38>
   24cf8:	d9014f17 	ldw	r4,1340(sp)
   24cfc:	b00b883a 	mov	r5,r22
   24d00:	d9800c04 	addi	r6,sp,48
   24d04:	00241680 	call	24168 <__sprint_r>
   24d08:	103ee51e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24d0c:	dc800e17 	ldw	r18,56(sp)
   24d10:	d8c01904 	addi	r3,sp,100
   24d14:	d9814c17 	ldw	r6,1328(sp)
   24d18:	3080004c 	andi	r2,r6,1
   24d1c:	1005003a 	cmpeq	r2,r2,zero
   24d20:	103ea51e 	bne	r2,zero,247b8 <___vfprintf_internal_r+0x5f8>
   24d24:	00800044 	movi	r2,1
   24d28:	dc400d17 	ldw	r17,52(sp)
   24d2c:	18800115 	stw	r2,4(r3)
   24d30:	d8814917 	ldw	r2,1316(sp)
   24d34:	94800044 	addi	r18,r18,1
   24d38:	8c400044 	addi	r17,r17,1
   24d3c:	18800015 	stw	r2,0(r3)
   24d40:	008001c4 	movi	r2,7
   24d44:	dc800e15 	stw	r18,56(sp)
   24d48:	dc400d15 	stw	r17,52(sp)
   24d4c:	14421e0e 	bge	r2,r17,255c8 <___vfprintf_internal_r+0x1408>
   24d50:	d9014f17 	ldw	r4,1340(sp)
   24d54:	b00b883a 	mov	r5,r22
   24d58:	d9800c04 	addi	r6,sp,48
   24d5c:	00241680 	call	24168 <__sprint_r>
   24d60:	103ecf1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24d64:	dc800e17 	ldw	r18,56(sp)
   24d68:	d8c01904 	addi	r3,sp,100
   24d6c:	003e9206 	br	247b8 <___vfprintf_internal_r+0x5f8>
   24d70:	d9014f17 	ldw	r4,1340(sp)
   24d74:	b00b883a 	mov	r5,r22
   24d78:	d9800c04 	addi	r6,sp,48
   24d7c:	00241680 	call	24168 <__sprint_r>
   24d80:	103ec026 	beq	r2,zero,24884 <___vfprintf_internal_r+0x6c4>
   24d84:	003ec606 	br	248a0 <___vfprintf_internal_r+0x6e0>
   24d88:	d9014f17 	ldw	r4,1340(sp)
   24d8c:	b00b883a 	mov	r5,r22
   24d90:	d9800c04 	addi	r6,sp,48
   24d94:	d9c15115 	stw	r7,1348(sp)
   24d98:	00241680 	call	24168 <__sprint_r>
   24d9c:	d9c15117 	ldw	r7,1348(sp)
   24da0:	103ebf1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24da4:	dc800e17 	ldw	r18,56(sp)
   24da8:	dc400d17 	ldw	r17,52(sp)
   24dac:	dd401904 	addi	r21,sp,100
   24db0:	003e7406 	br	24784 <___vfprintf_internal_r+0x5c4>
   24db4:	d9014f17 	ldw	r4,1340(sp)
   24db8:	b00b883a 	mov	r5,r22
   24dbc:	d9800c04 	addi	r6,sp,48
   24dc0:	d9c15115 	stw	r7,1348(sp)
   24dc4:	00241680 	call	24168 <__sprint_r>
   24dc8:	d9c15117 	ldw	r7,1348(sp)
   24dcc:	103eb41e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24dd0:	dd401904 	addi	r21,sp,100
   24dd4:	003d6d06 	br	2438c <___vfprintf_internal_r+0x1cc>
   24dd8:	d9014f17 	ldw	r4,1340(sp)
   24ddc:	b00b883a 	mov	r5,r22
   24de0:	d9800c04 	addi	r6,sp,48
   24de4:	d9c15115 	stw	r7,1348(sp)
   24de8:	00241680 	call	24168 <__sprint_r>
   24dec:	d9c15117 	ldw	r7,1348(sp)
   24df0:	103eab1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24df4:	dc800e17 	ldw	r18,56(sp)
   24df8:	dc400d17 	ldw	r17,52(sp)
   24dfc:	dd401904 	addi	r21,sp,100
   24e00:	003e3406 	br	246d4 <___vfprintf_internal_r+0x514>
   24e04:	d9014f17 	ldw	r4,1340(sp)
   24e08:	b00b883a 	mov	r5,r22
   24e0c:	d9800c04 	addi	r6,sp,48
   24e10:	d9c15115 	stw	r7,1348(sp)
   24e14:	00241680 	call	24168 <__sprint_r>
   24e18:	d9c15117 	ldw	r7,1348(sp)
   24e1c:	103ea01e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24e20:	dc800e17 	ldw	r18,56(sp)
   24e24:	dc400d17 	ldw	r17,52(sp)
   24e28:	dd401904 	addi	r21,sp,100
   24e2c:	003e1c06 	br	246a0 <___vfprintf_internal_r+0x4e0>
   24e30:	d9014f17 	ldw	r4,1340(sp)
   24e34:	b00b883a 	mov	r5,r22
   24e38:	d9800c04 	addi	r6,sp,48
   24e3c:	d9c15115 	stw	r7,1348(sp)
   24e40:	00241680 	call	24168 <__sprint_r>
   24e44:	d9c15117 	ldw	r7,1348(sp)
   24e48:	103e951e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24e4c:	dc800e17 	ldw	r18,56(sp)
   24e50:	dc400d17 	ldw	r17,52(sp)
   24e54:	dd401904 	addi	r21,sp,100
   24e58:	003e0406 	br	2466c <___vfprintf_internal_r+0x4ac>
   24e5c:	d9000517 	ldw	r4,20(sp)
   24e60:	0102520e 	bge	zero,r4,257ac <___vfprintf_internal_r+0x15ec>
   24e64:	d9814717 	ldw	r6,1308(sp)
   24e68:	21807a16 	blt	r4,r6,25054 <___vfprintf_internal_r+0xe94>
   24e6c:	d8814117 	ldw	r2,1284(sp)
   24e70:	91a5883a 	add	r18,r18,r6
   24e74:	8c400044 	addi	r17,r17,1
   24e78:	a8800015 	stw	r2,0(r21)
   24e7c:	008001c4 	movi	r2,7
   24e80:	a9800115 	stw	r6,4(r21)
   24e84:	dc800e15 	stw	r18,56(sp)
   24e88:	dc400d15 	stw	r17,52(sp)
   24e8c:	1442f616 	blt	r2,r17,25a68 <___vfprintf_internal_r+0x18a8>
   24e90:	a8c00204 	addi	r3,r21,8
   24e94:	d9414717 	ldw	r5,1308(sp)
   24e98:	2161c83a 	sub	r16,r4,r5
   24e9c:	043f9d0e 	bge	zero,r16,24d14 <___vfprintf_internal_r+0xb54>
   24ea0:	00800404 	movi	r2,16
   24ea4:	1402130e 	bge	r2,r16,256f4 <___vfprintf_internal_r+0x1534>
   24ea8:	dc400d17 	ldw	r17,52(sp)
   24eac:	1027883a 	mov	r19,r2
   24eb0:	070000f4 	movhi	fp,3
   24eb4:	e73ae284 	addi	fp,fp,-5238
   24eb8:	050001c4 	movi	r20,7
   24ebc:	00000306 	br	24ecc <___vfprintf_internal_r+0xd0c>
   24ec0:	18c00204 	addi	r3,r3,8
   24ec4:	843ffc04 	addi	r16,r16,-16
   24ec8:	9c020d0e 	bge	r19,r16,25700 <___vfprintf_internal_r+0x1540>
   24ecc:	94800404 	addi	r18,r18,16
   24ed0:	8c400044 	addi	r17,r17,1
   24ed4:	1f000015 	stw	fp,0(r3)
   24ed8:	1cc00115 	stw	r19,4(r3)
   24edc:	dc800e15 	stw	r18,56(sp)
   24ee0:	dc400d15 	stw	r17,52(sp)
   24ee4:	a47ff60e 	bge	r20,r17,24ec0 <___vfprintf_internal_r+0xd00>
   24ee8:	d9014f17 	ldw	r4,1340(sp)
   24eec:	b00b883a 	mov	r5,r22
   24ef0:	d9800c04 	addi	r6,sp,48
   24ef4:	00241680 	call	24168 <__sprint_r>
   24ef8:	103e691e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24efc:	dc800e17 	ldw	r18,56(sp)
   24f00:	dc400d17 	ldw	r17,52(sp)
   24f04:	d8c01904 	addi	r3,sp,100
   24f08:	003fee06 	br	24ec4 <___vfprintf_internal_r+0xd04>
   24f0c:	d8814717 	ldw	r2,1308(sp)
   24f10:	143fffc4 	addi	r16,r2,-1
   24f14:	043e970e 	bge	zero,r16,24974 <___vfprintf_internal_r+0x7b4>
   24f18:	00800404 	movi	r2,16
   24f1c:	1400180e 	bge	r2,r16,24f80 <___vfprintf_internal_r+0xdc0>
   24f20:	1029883a 	mov	r20,r2
   24f24:	070000f4 	movhi	fp,3
   24f28:	e73ae284 	addi	fp,fp,-5238
   24f2c:	054001c4 	movi	r21,7
   24f30:	00000306 	br	24f40 <___vfprintf_internal_r+0xd80>
   24f34:	9cc00204 	addi	r19,r19,8
   24f38:	843ffc04 	addi	r16,r16,-16
   24f3c:	a400120e 	bge	r20,r16,24f88 <___vfprintf_internal_r+0xdc8>
   24f40:	94800404 	addi	r18,r18,16
   24f44:	8c400044 	addi	r17,r17,1
   24f48:	9f000015 	stw	fp,0(r19)
   24f4c:	9d000115 	stw	r20,4(r19)
   24f50:	dc800e15 	stw	r18,56(sp)
   24f54:	dc400d15 	stw	r17,52(sp)
   24f58:	ac7ff60e 	bge	r21,r17,24f34 <___vfprintf_internal_r+0xd74>
   24f5c:	d9014f17 	ldw	r4,1340(sp)
   24f60:	b00b883a 	mov	r5,r22
   24f64:	d9800c04 	addi	r6,sp,48
   24f68:	00241680 	call	24168 <__sprint_r>
   24f6c:	103e4c1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24f70:	dc800e17 	ldw	r18,56(sp)
   24f74:	dc400d17 	ldw	r17,52(sp)
   24f78:	dcc01904 	addi	r19,sp,100
   24f7c:	003fee06 	br	24f38 <___vfprintf_internal_r+0xd78>
   24f80:	070000f4 	movhi	fp,3
   24f84:	e73ae284 	addi	fp,fp,-5238
   24f88:	9425883a 	add	r18,r18,r16
   24f8c:	8c400044 	addi	r17,r17,1
   24f90:	008001c4 	movi	r2,7
   24f94:	9f000015 	stw	fp,0(r19)
   24f98:	9c000115 	stw	r16,4(r19)
   24f9c:	dc800e15 	stw	r18,56(sp)
   24fa0:	dc400d15 	stw	r17,52(sp)
   24fa4:	147e720e 	bge	r2,r17,24970 <___vfprintf_internal_r+0x7b0>
   24fa8:	d9014f17 	ldw	r4,1340(sp)
   24fac:	b00b883a 	mov	r5,r22
   24fb0:	d9800c04 	addi	r6,sp,48
   24fb4:	00241680 	call	24168 <__sprint_r>
   24fb8:	103e391e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24fbc:	dc800e17 	ldw	r18,56(sp)
   24fc0:	dc400d17 	ldw	r17,52(sp)
   24fc4:	dcc01904 	addi	r19,sp,100
   24fc8:	003e6a06 	br	24974 <___vfprintf_internal_r+0x7b4>
   24fcc:	d9014f17 	ldw	r4,1340(sp)
   24fd0:	b00b883a 	mov	r5,r22
   24fd4:	d9800c04 	addi	r6,sp,48
   24fd8:	d9c15115 	stw	r7,1348(sp)
   24fdc:	00241680 	call	24168 <__sprint_r>
   24fe0:	d9c15117 	ldw	r7,1348(sp)
   24fe4:	103e2e1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   24fe8:	dc800e17 	ldw	r18,56(sp)
   24fec:	dc400d17 	ldw	r17,52(sp)
   24ff0:	dd401904 	addi	r21,sp,100
   24ff4:	003dba06 	br	246e0 <___vfprintf_internal_r+0x520>
   24ff8:	d9014f17 	ldw	r4,1340(sp)
   24ffc:	b00b883a 	mov	r5,r22
   25000:	d9800c04 	addi	r6,sp,48
   25004:	00241680 	call	24168 <__sprint_r>
   25008:	103e251e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   2500c:	dc800e17 	ldw	r18,56(sp)
   25010:	dc400d17 	ldw	r17,52(sp)
   25014:	dcc01904 	addi	r19,sp,100
   25018:	003e4206 	br	24924 <___vfprintf_internal_r+0x764>
   2501c:	d9014f17 	ldw	r4,1340(sp)
   25020:	b00b883a 	mov	r5,r22
   25024:	d9800c04 	addi	r6,sp,48
   25028:	00241680 	call	24168 <__sprint_r>
   2502c:	103e1c1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25030:	dc800e17 	ldw	r18,56(sp)
   25034:	dc400d17 	ldw	r17,52(sp)
   25038:	d8c01904 	addi	r3,sp,100
   2503c:	003e2e06 	br	248f8 <___vfprintf_internal_r+0x738>
   25040:	d9414c17 	ldw	r5,1328(sp)
   25044:	2880004c 	andi	r2,r5,1
   25048:	1005003a 	cmpeq	r2,r2,zero
   2504c:	103dda1e 	bne	r2,zero,247b8 <___vfprintf_internal_r+0x5f8>
   25050:	003e9f06 	br	24ad0 <___vfprintf_internal_r+0x910>
   25054:	d8c14117 	ldw	r3,1284(sp)
   25058:	9125883a 	add	r18,r18,r4
   2505c:	8c400044 	addi	r17,r17,1
   25060:	008001c4 	movi	r2,7
   25064:	a8c00015 	stw	r3,0(r21)
   25068:	a9000115 	stw	r4,4(r21)
   2506c:	dc800e15 	stw	r18,56(sp)
   25070:	dc400d15 	stw	r17,52(sp)
   25074:	14426616 	blt	r2,r17,25a10 <___vfprintf_internal_r+0x1850>
   25078:	a8c00204 	addi	r3,r21,8
   2507c:	d9414917 	ldw	r5,1316(sp)
   25080:	00800044 	movi	r2,1
   25084:	94800044 	addi	r18,r18,1
   25088:	8c400044 	addi	r17,r17,1
   2508c:	18800115 	stw	r2,4(r3)
   25090:	008001c4 	movi	r2,7
   25094:	19400015 	stw	r5,0(r3)
   25098:	dc800e15 	stw	r18,56(sp)
   2509c:	dc400d15 	stw	r17,52(sp)
   250a0:	2021883a 	mov	r16,r4
   250a4:	14425016 	blt	r2,r17,259e8 <___vfprintf_internal_r+0x1828>
   250a8:	19400204 	addi	r5,r3,8
   250ac:	d9814717 	ldw	r6,1308(sp)
   250b0:	8c400044 	addi	r17,r17,1
   250b4:	dc400d15 	stw	r17,52(sp)
   250b8:	3107c83a 	sub	r3,r6,r4
   250bc:	d9014117 	ldw	r4,1284(sp)
   250c0:	90e5883a 	add	r18,r18,r3
   250c4:	28c00115 	stw	r3,4(r5)
   250c8:	8105883a 	add	r2,r16,r4
   250cc:	28800015 	stw	r2,0(r5)
   250d0:	008001c4 	movi	r2,7
   250d4:	dc800e15 	stw	r18,56(sp)
   250d8:	147f1d16 	blt	r2,r17,24d50 <___vfprintf_internal_r+0xb90>
   250dc:	28c00204 	addi	r3,r5,8
   250e0:	003db506 	br	247b8 <___vfprintf_internal_r+0x5f8>
   250e4:	3c000017 	ldw	r16,0(r7)
   250e8:	3c400117 	ldw	r17,4(r7)
   250ec:	39800204 	addi	r6,r7,8
   250f0:	01000044 	movi	r4,1
   250f4:	d9814015 	stw	r6,1280(sp)
   250f8:	d8000405 	stb	zero,16(sp)
   250fc:	003ebe06 	br	24bf8 <___vfprintf_internal_r+0xa38>
   25100:	3c000017 	ldw	r16,0(r7)
   25104:	3c400117 	ldw	r17,4(r7)
   25108:	38800204 	addi	r2,r7,8
   2510c:	d8814015 	stw	r2,1280(sp)
   25110:	003eb706 	br	24bf0 <___vfprintf_internal_r+0xa30>
   25114:	3c000017 	ldw	r16,0(r7)
   25118:	3c400117 	ldw	r17,4(r7)
   2511c:	39000204 	addi	r4,r7,8
   25120:	d9014015 	stw	r4,1280(sp)
   25124:	0009883a 	mov	r4,zero
   25128:	d8000405 	stb	zero,16(sp)
   2512c:	003eb206 	br	24bf8 <___vfprintf_internal_r+0xa38>
   25130:	38c00017 	ldw	r3,0(r7)
   25134:	39c00104 	addi	r7,r7,4
   25138:	d8c14a15 	stw	r3,1320(sp)
   2513c:	1800d10e 	bge	r3,zero,25484 <___vfprintf_internal_r+0x12c4>
   25140:	00c7c83a 	sub	r3,zero,r3
   25144:	d8c14a15 	stw	r3,1320(sp)
   25148:	d9014c17 	ldw	r4,1328(sp)
   2514c:	b8c00007 	ldb	r3,0(r23)
   25150:	21000114 	ori	r4,r4,4
   25154:	d9014c15 	stw	r4,1328(sp)
   25158:	003c9806 	br	243bc <___vfprintf_internal_r+0x1fc>
   2515c:	d9814c17 	ldw	r6,1328(sp)
   25160:	3080080c 	andi	r2,r6,32
   25164:	1001f026 	beq	r2,zero,25928 <___vfprintf_internal_r+0x1768>
   25168:	d9014b17 	ldw	r4,1324(sp)
   2516c:	38800017 	ldw	r2,0(r7)
   25170:	39c00104 	addi	r7,r7,4
   25174:	d9c14015 	stw	r7,1280(sp)
   25178:	2007d7fa 	srai	r3,r4,31
   2517c:	d9c14017 	ldw	r7,1280(sp)
   25180:	11000015 	stw	r4,0(r2)
   25184:	10c00115 	stw	r3,4(r2)
   25188:	003c6906 	br	24330 <___vfprintf_internal_r+0x170>
   2518c:	b8c00007 	ldb	r3,0(r23)
   25190:	00801b04 	movi	r2,108
   25194:	18824f26 	beq	r3,r2,25ad4 <___vfprintf_internal_r+0x1914>
   25198:	d9414c17 	ldw	r5,1328(sp)
   2519c:	29400414 	ori	r5,r5,16
   251a0:	d9414c15 	stw	r5,1328(sp)
   251a4:	003c8506 	br	243bc <___vfprintf_internal_r+0x1fc>
   251a8:	d9814c17 	ldw	r6,1328(sp)
   251ac:	b8c00007 	ldb	r3,0(r23)
   251b0:	31800814 	ori	r6,r6,32
   251b4:	d9814c15 	stw	r6,1328(sp)
   251b8:	003c8006 	br	243bc <___vfprintf_internal_r+0x1fc>
   251bc:	d8814c17 	ldw	r2,1328(sp)
   251c0:	3c000017 	ldw	r16,0(r7)
   251c4:	00c01e04 	movi	r3,120
   251c8:	10800094 	ori	r2,r2,2
   251cc:	d8814c15 	stw	r2,1328(sp)
   251d0:	39c00104 	addi	r7,r7,4
   251d4:	014000f4 	movhi	r5,3
   251d8:	297acb04 	addi	r5,r5,-5332
   251dc:	00800c04 	movi	r2,48
   251e0:	0023883a 	mov	r17,zero
   251e4:	01000084 	movi	r4,2
   251e8:	d9c14015 	stw	r7,1280(sp)
   251ec:	d8c14d15 	stw	r3,1332(sp)
   251f0:	d9414415 	stw	r5,1296(sp)
   251f4:	d8800445 	stb	r2,17(sp)
   251f8:	d8c00485 	stb	r3,18(sp)
   251fc:	d8000405 	stb	zero,16(sp)
   25200:	003e7d06 	br	24bf8 <___vfprintf_internal_r+0xa38>
   25204:	d8814c17 	ldw	r2,1328(sp)
   25208:	b8c00007 	ldb	r3,0(r23)
   2520c:	10801014 	ori	r2,r2,64
   25210:	d8814c15 	stw	r2,1328(sp)
   25214:	003c6906 	br	243bc <___vfprintf_internal_r+0x1fc>
   25218:	d9414c17 	ldw	r5,1328(sp)
   2521c:	2880020c 	andi	r2,r5,8
   25220:	1001df26 	beq	r2,zero,259a0 <___vfprintf_internal_r+0x17e0>
   25224:	39800017 	ldw	r6,0(r7)
   25228:	38800204 	addi	r2,r7,8
   2522c:	d8814015 	stw	r2,1280(sp)
   25230:	d9814215 	stw	r6,1288(sp)
   25234:	39c00117 	ldw	r7,4(r7)
   25238:	d9c14315 	stw	r7,1292(sp)
   2523c:	d9014217 	ldw	r4,1288(sp)
   25240:	d9414317 	ldw	r5,1292(sp)
   25244:	002a3f40 	call	2a3f4 <__isinfd>
   25248:	10021726 	beq	r2,zero,25aa8 <___vfprintf_internal_r+0x18e8>
   2524c:	d9014217 	ldw	r4,1288(sp)
   25250:	d9414317 	ldw	r5,1292(sp)
   25254:	000d883a 	mov	r6,zero
   25258:	000f883a 	mov	r7,zero
   2525c:	0022c040 	call	22c04 <__ltdf2>
   25260:	1002ca16 	blt	r2,zero,25d8c <___vfprintf_internal_r+0x1bcc>
   25264:	d9414d17 	ldw	r5,1332(sp)
   25268:	008011c4 	movi	r2,71
   2526c:	11420a16 	blt	r2,r5,25a98 <___vfprintf_internal_r+0x18d8>
   25270:	018000f4 	movhi	r6,3
   25274:	31bad004 	addi	r6,r6,-5312
   25278:	d9814115 	stw	r6,1284(sp)
   2527c:	d9014c17 	ldw	r4,1328(sp)
   25280:	00c000c4 	movi	r3,3
   25284:	00bfdfc4 	movi	r2,-129
   25288:	2088703a 	and	r4,r4,r2
   2528c:	180f883a 	mov	r7,r3
   25290:	d8c14515 	stw	r3,1300(sp)
   25294:	d9014c15 	stw	r4,1328(sp)
   25298:	d8014615 	stw	zero,1304(sp)
   2529c:	003e6a06 	br	24c48 <___vfprintf_internal_r+0xa88>
   252a0:	38800017 	ldw	r2,0(r7)
   252a4:	00c00044 	movi	r3,1
   252a8:	39c00104 	addi	r7,r7,4
   252ac:	d9c14015 	stw	r7,1280(sp)
   252b0:	d9000f04 	addi	r4,sp,60
   252b4:	180f883a 	mov	r7,r3
   252b8:	d8c14515 	stw	r3,1300(sp)
   252bc:	d9014115 	stw	r4,1284(sp)
   252c0:	d8800f05 	stb	r2,60(sp)
   252c4:	d8000405 	stb	zero,16(sp)
   252c8:	003cac06 	br	2457c <___vfprintf_internal_r+0x3bc>
   252cc:	014000f4 	movhi	r5,3
   252d0:	297ad604 	addi	r5,r5,-5288
   252d4:	d9414415 	stw	r5,1296(sp)
   252d8:	d9814c17 	ldw	r6,1328(sp)
   252dc:	3080080c 	andi	r2,r6,32
   252e0:	1000f926 	beq	r2,zero,256c8 <___vfprintf_internal_r+0x1508>
   252e4:	3c000017 	ldw	r16,0(r7)
   252e8:	3c400117 	ldw	r17,4(r7)
   252ec:	38800204 	addi	r2,r7,8
   252f0:	d8814015 	stw	r2,1280(sp)
   252f4:	d9414c17 	ldw	r5,1328(sp)
   252f8:	2880004c 	andi	r2,r5,1
   252fc:	1005003a 	cmpeq	r2,r2,zero
   25300:	1000b31e 	bne	r2,zero,255d0 <___vfprintf_internal_r+0x1410>
   25304:	8444b03a 	or	r2,r16,r17
   25308:	1000b126 	beq	r2,zero,255d0 <___vfprintf_internal_r+0x1410>
   2530c:	d9814d17 	ldw	r6,1332(sp)
   25310:	29400094 	ori	r5,r5,2
   25314:	00800c04 	movi	r2,48
   25318:	01000084 	movi	r4,2
   2531c:	d9414c15 	stw	r5,1328(sp)
   25320:	d8800445 	stb	r2,17(sp)
   25324:	d9800485 	stb	r6,18(sp)
   25328:	d8000405 	stb	zero,16(sp)
   2532c:	003e3206 	br	24bf8 <___vfprintf_internal_r+0xa38>
   25330:	018000f4 	movhi	r6,3
   25334:	31bacb04 	addi	r6,r6,-5332
   25338:	d9814415 	stw	r6,1296(sp)
   2533c:	003fe606 	br	252d8 <___vfprintf_internal_r+0x1118>
   25340:	00800ac4 	movi	r2,43
   25344:	d8800405 	stb	r2,16(sp)
   25348:	b8c00007 	ldb	r3,0(r23)
   2534c:	003c1b06 	br	243bc <___vfprintf_internal_r+0x1fc>
   25350:	d8814c17 	ldw	r2,1328(sp)
   25354:	b8c00007 	ldb	r3,0(r23)
   25358:	10800054 	ori	r2,r2,1
   2535c:	d8814c15 	stw	r2,1328(sp)
   25360:	003c1606 	br	243bc <___vfprintf_internal_r+0x1fc>
   25364:	d8800407 	ldb	r2,16(sp)
   25368:	1000461e 	bne	r2,zero,25484 <___vfprintf_internal_r+0x12c4>
   2536c:	00800804 	movi	r2,32
   25370:	d8800405 	stb	r2,16(sp)
   25374:	b8c00007 	ldb	r3,0(r23)
   25378:	003c1006 	br	243bc <___vfprintf_internal_r+0x1fc>
   2537c:	d9814c17 	ldw	r6,1328(sp)
   25380:	b8c00007 	ldb	r3,0(r23)
   25384:	31800214 	ori	r6,r6,8
   25388:	d9814c15 	stw	r6,1328(sp)
   2538c:	003c0b06 	br	243bc <___vfprintf_internal_r+0x1fc>
   25390:	0007883a 	mov	r3,zero
   25394:	01000244 	movi	r4,9
   25398:	188002a4 	muli	r2,r3,10
   2539c:	b8c00007 	ldb	r3,0(r23)
   253a0:	d9814d17 	ldw	r6,1332(sp)
   253a4:	bdc00044 	addi	r23,r23,1
   253a8:	d8c14d15 	stw	r3,1332(sp)
   253ac:	d9414d17 	ldw	r5,1332(sp)
   253b0:	3085883a 	add	r2,r6,r2
   253b4:	10fff404 	addi	r3,r2,-48
   253b8:	28bff404 	addi	r2,r5,-48
   253bc:	20bff62e 	bgeu	r4,r2,25398 <___vfprintf_internal_r+0x11d8>
   253c0:	d8c14a15 	stw	r3,1320(sp)
   253c4:	003bff06 	br	243c4 <___vfprintf_internal_r+0x204>
   253c8:	d9414c17 	ldw	r5,1328(sp)
   253cc:	b8c00007 	ldb	r3,0(r23)
   253d0:	29402014 	ori	r5,r5,128
   253d4:	d9414c15 	stw	r5,1328(sp)
   253d8:	003bf806 	br	243bc <___vfprintf_internal_r+0x1fc>
   253dc:	b8c00007 	ldb	r3,0(r23)
   253e0:	00800a84 	movi	r2,42
   253e4:	bdc00044 	addi	r23,r23,1
   253e8:	18831526 	beq	r3,r2,26040 <___vfprintf_internal_r+0x1e80>
   253ec:	d8c14d15 	stw	r3,1332(sp)
   253f0:	18bff404 	addi	r2,r3,-48
   253f4:	00c00244 	movi	r3,9
   253f8:	18827836 	bltu	r3,r2,25ddc <___vfprintf_internal_r+0x1c1c>
   253fc:	000d883a 	mov	r6,zero
   25400:	308002a4 	muli	r2,r6,10
   25404:	b9800007 	ldb	r6,0(r23)
   25408:	d9414d17 	ldw	r5,1332(sp)
   2540c:	bdc00044 	addi	r23,r23,1
   25410:	d9814d15 	stw	r6,1332(sp)
   25414:	d9014d17 	ldw	r4,1332(sp)
   25418:	1145883a 	add	r2,r2,r5
   2541c:	11bff404 	addi	r6,r2,-48
   25420:	20bff404 	addi	r2,r4,-48
   25424:	18bff62e 	bgeu	r3,r2,25400 <___vfprintf_internal_r+0x1240>
   25428:	3027883a 	mov	r19,r6
   2542c:	303be50e 	bge	r6,zero,243c4 <___vfprintf_internal_r+0x204>
   25430:	04ffffc4 	movi	r19,-1
   25434:	003be306 	br	243c4 <___vfprintf_internal_r+0x204>
   25438:	d8000405 	stb	zero,16(sp)
   2543c:	39800017 	ldw	r6,0(r7)
   25440:	39c00104 	addi	r7,r7,4
   25444:	d9c14015 	stw	r7,1280(sp)
   25448:	d9814115 	stw	r6,1284(sp)
   2544c:	3001c926 	beq	r6,zero,25b74 <___vfprintf_internal_r+0x19b4>
   25450:	98000e16 	blt	r19,zero,2548c <___vfprintf_internal_r+0x12cc>
   25454:	d9014117 	ldw	r4,1284(sp)
   25458:	000b883a 	mov	r5,zero
   2545c:	980d883a 	mov	r6,r19
   25460:	0028bb00 	call	28bb0 <memchr>
   25464:	10025926 	beq	r2,zero,25dcc <___vfprintf_internal_r+0x1c0c>
   25468:	d8c14117 	ldw	r3,1284(sp)
   2546c:	10cfc83a 	sub	r7,r2,r3
   25470:	99c19e16 	blt	r19,r7,25aec <___vfprintf_internal_r+0x192c>
   25474:	d9c14515 	stw	r7,1300(sp)
   25478:	38000916 	blt	r7,zero,254a0 <___vfprintf_internal_r+0x12e0>
   2547c:	d8014615 	stw	zero,1304(sp)
   25480:	003df106 	br	24c48 <___vfprintf_internal_r+0xa88>
   25484:	b8c00007 	ldb	r3,0(r23)
   25488:	003bcc06 	br	243bc <___vfprintf_internal_r+0x1fc>
   2548c:	d9014117 	ldw	r4,1284(sp)
   25490:	002a66c0 	call	2a66c <strlen>
   25494:	d8814515 	stw	r2,1300(sp)
   25498:	100f883a 	mov	r7,r2
   2549c:	103ff70e 	bge	r2,zero,2547c <___vfprintf_internal_r+0x12bc>
   254a0:	d8014515 	stw	zero,1300(sp)
   254a4:	d8014615 	stw	zero,1304(sp)
   254a8:	003de706 	br	24c48 <___vfprintf_internal_r+0xa88>
   254ac:	20c03fcc 	andi	r3,r4,255
   254b0:	00800044 	movi	r2,1
   254b4:	18802d26 	beq	r3,r2,2556c <___vfprintf_internal_r+0x13ac>
   254b8:	18800e36 	bltu	r3,r2,254f4 <___vfprintf_internal_r+0x1334>
   254bc:	00800084 	movi	r2,2
   254c0:	1880fa26 	beq	r3,r2,258ac <___vfprintf_internal_r+0x16ec>
   254c4:	010000f4 	movhi	r4,3
   254c8:	213adb04 	addi	r4,r4,-5268
   254cc:	002a66c0 	call	2a66c <strlen>
   254d0:	100f883a 	mov	r7,r2
   254d4:	dcc14515 	stw	r19,1300(sp)
   254d8:	9880010e 	bge	r19,r2,254e0 <___vfprintf_internal_r+0x1320>
   254dc:	d8814515 	stw	r2,1300(sp)
   254e0:	008000f4 	movhi	r2,3
   254e4:	10badb04 	addi	r2,r2,-5268
   254e8:	dcc14615 	stw	r19,1304(sp)
   254ec:	d8814115 	stw	r2,1284(sp)
   254f0:	003dd506 	br	24c48 <___vfprintf_internal_r+0xa88>
   254f4:	d9401904 	addi	r5,sp,100
   254f8:	dd000f04 	addi	r20,sp,60
   254fc:	d9414115 	stw	r5,1284(sp)
   25500:	880a977a 	slli	r5,r17,29
   25504:	d9814117 	ldw	r6,1284(sp)
   25508:	8004d0fa 	srli	r2,r16,3
   2550c:	8806d0fa 	srli	r3,r17,3
   25510:	810001cc 	andi	r4,r16,7
   25514:	2884b03a 	or	r2,r5,r2
   25518:	31bfffc4 	addi	r6,r6,-1
   2551c:	21000c04 	addi	r4,r4,48
   25520:	d9814115 	stw	r6,1284(sp)
   25524:	10cab03a 	or	r5,r2,r3
   25528:	31000005 	stb	r4,0(r6)
   2552c:	1021883a 	mov	r16,r2
   25530:	1823883a 	mov	r17,r3
   25534:	283ff21e 	bne	r5,zero,25500 <___vfprintf_internal_r+0x1340>
   25538:	d8c14c17 	ldw	r3,1328(sp)
   2553c:	1880004c 	andi	r2,r3,1
   25540:	1005003a 	cmpeq	r2,r2,zero
   25544:	103db91e 	bne	r2,zero,24c2c <___vfprintf_internal_r+0xa6c>
   25548:	20803fcc 	andi	r2,r4,255
   2554c:	1080201c 	xori	r2,r2,128
   25550:	10bfe004 	addi	r2,r2,-128
   25554:	00c00c04 	movi	r3,48
   25558:	10fdb426 	beq	r2,r3,24c2c <___vfprintf_internal_r+0xa6c>
   2555c:	31bfffc4 	addi	r6,r6,-1
   25560:	d9814115 	stw	r6,1284(sp)
   25564:	30c00005 	stb	r3,0(r6)
   25568:	003db006 	br	24c2c <___vfprintf_internal_r+0xa6c>
   2556c:	88800068 	cmpgeui	r2,r17,1
   25570:	10002c1e 	bne	r2,zero,25624 <___vfprintf_internal_r+0x1464>
   25574:	8800021e 	bne	r17,zero,25580 <___vfprintf_internal_r+0x13c0>
   25578:	00800244 	movi	r2,9
   2557c:	14002936 	bltu	r2,r16,25624 <___vfprintf_internal_r+0x1464>
   25580:	d90018c4 	addi	r4,sp,99
   25584:	dd000f04 	addi	r20,sp,60
   25588:	d9014115 	stw	r4,1284(sp)
   2558c:	d9014117 	ldw	r4,1284(sp)
   25590:	80800c04 	addi	r2,r16,48
   25594:	20800005 	stb	r2,0(r4)
   25598:	003da406 	br	24c2c <___vfprintf_internal_r+0xa6c>
   2559c:	dc400d17 	ldw	r17,52(sp)
   255a0:	070000f4 	movhi	fp,3
   255a4:	e73ae284 	addi	fp,fp,-5238
   255a8:	9425883a 	add	r18,r18,r16
   255ac:	8c400044 	addi	r17,r17,1
   255b0:	008001c4 	movi	r2,7
   255b4:	1f000015 	stw	fp,0(r3)
   255b8:	1c000115 	stw	r16,4(r3)
   255bc:	dc800e15 	stw	r18,56(sp)
   255c0:	dc400d15 	stw	r17,52(sp)
   255c4:	147de216 	blt	r2,r17,24d50 <___vfprintf_internal_r+0xb90>
   255c8:	18c00204 	addi	r3,r3,8
   255cc:	003c7a06 	br	247b8 <___vfprintf_internal_r+0x5f8>
   255d0:	01000084 	movi	r4,2
   255d4:	d8000405 	stb	zero,16(sp)
   255d8:	003d8706 	br	24bf8 <___vfprintf_internal_r+0xa38>
   255dc:	d9814c17 	ldw	r6,1328(sp)
   255e0:	30c4703a 	and	r2,r6,r3
   255e4:	1005003a 	cmpeq	r2,r2,zero
   255e8:	103cb926 	beq	r2,zero,248d0 <___vfprintf_internal_r+0x710>
   255ec:	d9014117 	ldw	r4,1284(sp)
   255f0:	94800044 	addi	r18,r18,1
   255f4:	8c400044 	addi	r17,r17,1
   255f8:	008001c4 	movi	r2,7
   255fc:	a9000015 	stw	r4,0(r21)
   25600:	a8c00115 	stw	r3,4(r21)
   25604:	dc800e15 	stw	r18,56(sp)
   25608:	dc400d15 	stw	r17,52(sp)
   2560c:	147e6616 	blt	r2,r17,24fa8 <___vfprintf_internal_r+0xde8>
   25610:	acc00204 	addi	r19,r21,8
   25614:	003cd706 	br	24974 <___vfprintf_internal_r+0x7b4>
   25618:	070000f4 	movhi	fp,3
   2561c:	e73ae284 	addi	fp,fp,-5238
   25620:	003c4f06 	br	24760 <___vfprintf_internal_r+0x5a0>
   25624:	dd000f04 	addi	r20,sp,60
   25628:	dc801904 	addi	r18,sp,100
   2562c:	8009883a 	mov	r4,r16
   25630:	880b883a 	mov	r5,r17
   25634:	01800284 	movi	r6,10
   25638:	000f883a 	mov	r7,zero
   2563c:	002b1500 	call	2b150 <__umoddi3>
   25640:	12000c04 	addi	r8,r2,48
   25644:	94bfffc4 	addi	r18,r18,-1
   25648:	8009883a 	mov	r4,r16
   2564c:	880b883a 	mov	r5,r17
   25650:	01800284 	movi	r6,10
   25654:	000f883a 	mov	r7,zero
   25658:	92000005 	stb	r8,0(r18)
   2565c:	002ab740 	call	2ab74 <__udivdi3>
   25660:	1009883a 	mov	r4,r2
   25664:	1021883a 	mov	r16,r2
   25668:	18800068 	cmpgeui	r2,r3,1
   2566c:	1823883a 	mov	r17,r3
   25670:	103fee1e 	bne	r2,zero,2562c <___vfprintf_internal_r+0x146c>
   25674:	1800021e 	bne	r3,zero,25680 <___vfprintf_internal_r+0x14c0>
   25678:	00800244 	movi	r2,9
   2567c:	113feb36 	bltu	r2,r4,2562c <___vfprintf_internal_r+0x146c>
   25680:	94bfffc4 	addi	r18,r18,-1
   25684:	dc814115 	stw	r18,1284(sp)
   25688:	003fc006 	br	2558c <___vfprintf_internal_r+0x13cc>
   2568c:	d9014c17 	ldw	r4,1328(sp)
   25690:	2080004c 	andi	r2,r4,1
   25694:	10009a1e 	bne	r2,zero,25900 <___vfprintf_internal_r+0x1740>
   25698:	d9401904 	addi	r5,sp,100
   2569c:	dd000f04 	addi	r20,sp,60
   256a0:	d9414115 	stw	r5,1284(sp)
   256a4:	003d6106 	br	24c2c <___vfprintf_internal_r+0xa6c>
   256a8:	d9014f17 	ldw	r4,1340(sp)
   256ac:	b00b883a 	mov	r5,r22
   256b0:	d9800c04 	addi	r6,sp,48
   256b4:	00241680 	call	24168 <__sprint_r>
   256b8:	103c791e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   256bc:	dc800e17 	ldw	r18,56(sp)
   256c0:	d8c01904 	addi	r3,sp,100
   256c4:	003cff06 	br	24ac4 <___vfprintf_internal_r+0x904>
   256c8:	d8c14c17 	ldw	r3,1328(sp)
   256cc:	1880040c 	andi	r2,r3,16
   256d0:	1000711e 	bne	r2,zero,25898 <___vfprintf_internal_r+0x16d8>
   256d4:	d9014c17 	ldw	r4,1328(sp)
   256d8:	2080100c 	andi	r2,r4,64
   256dc:	10006e26 	beq	r2,zero,25898 <___vfprintf_internal_r+0x16d8>
   256e0:	3c00000b 	ldhu	r16,0(r7)
   256e4:	0023883a 	mov	r17,zero
   256e8:	39c00104 	addi	r7,r7,4
   256ec:	d9c14015 	stw	r7,1280(sp)
   256f0:	003f0006 	br	252f4 <___vfprintf_internal_r+0x1134>
   256f4:	dc400d17 	ldw	r17,52(sp)
   256f8:	070000f4 	movhi	fp,3
   256fc:	e73ae284 	addi	fp,fp,-5238
   25700:	9425883a 	add	r18,r18,r16
   25704:	8c400044 	addi	r17,r17,1
   25708:	008001c4 	movi	r2,7
   2570c:	1f000015 	stw	fp,0(r3)
   25710:	1c000115 	stw	r16,4(r3)
   25714:	dc800e15 	stw	r18,56(sp)
   25718:	dc400d15 	stw	r17,52(sp)
   2571c:	147d7616 	blt	r2,r17,24cf8 <___vfprintf_internal_r+0xb38>
   25720:	18c00204 	addi	r3,r3,8
   25724:	003d7b06 	br	24d14 <___vfprintf_internal_r+0xb54>
   25728:	dc800e17 	ldw	r18,56(sp)
   2572c:	dc400d17 	ldw	r17,52(sp)
   25730:	070000f4 	movhi	fp,3
   25734:	e73ae684 	addi	fp,fp,-5222
   25738:	003bc006 	br	2463c <___vfprintf_internal_r+0x47c>
   2573c:	d9014f17 	ldw	r4,1340(sp)
   25740:	b00b883a 	mov	r5,r22
   25744:	d9800c04 	addi	r6,sp,48
   25748:	00241680 	call	24168 <__sprint_r>
   2574c:	103c541e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25750:	dc800e17 	ldw	r18,56(sp)
   25754:	d8c01904 	addi	r3,sp,100
   25758:	003ce906 	br	24b00 <___vfprintf_internal_r+0x940>
   2575c:	3c000017 	ldw	r16,0(r7)
   25760:	0009883a 	mov	r4,zero
   25764:	39c00104 	addi	r7,r7,4
   25768:	0023883a 	mov	r17,zero
   2576c:	d9c14015 	stw	r7,1280(sp)
   25770:	d8000405 	stb	zero,16(sp)
   25774:	003d2006 	br	24bf8 <___vfprintf_internal_r+0xa38>
   25778:	38800017 	ldw	r2,0(r7)
   2577c:	39c00104 	addi	r7,r7,4
   25780:	d9c14015 	stw	r7,1280(sp)
   25784:	1023d7fa 	srai	r17,r2,31
   25788:	1021883a 	mov	r16,r2
   2578c:	003d1806 	br	24bf0 <___vfprintf_internal_r+0xa30>
   25790:	3c000017 	ldw	r16,0(r7)
   25794:	01000044 	movi	r4,1
   25798:	39c00104 	addi	r7,r7,4
   2579c:	0023883a 	mov	r17,zero
   257a0:	d9c14015 	stw	r7,1280(sp)
   257a4:	d8000405 	stb	zero,16(sp)
   257a8:	003d1306 	br	24bf8 <___vfprintf_internal_r+0xa38>
   257ac:	008000f4 	movhi	r2,3
   257b0:	10bae204 	addi	r2,r2,-5240
   257b4:	94800044 	addi	r18,r18,1
   257b8:	8c400044 	addi	r17,r17,1
   257bc:	a8800015 	stw	r2,0(r21)
   257c0:	00c00044 	movi	r3,1
   257c4:	008001c4 	movi	r2,7
   257c8:	a8c00115 	stw	r3,4(r21)
   257cc:	dc800e15 	stw	r18,56(sp)
   257d0:	dc400d15 	stw	r17,52(sp)
   257d4:	1440ca16 	blt	r2,r17,25b00 <___vfprintf_internal_r+0x1940>
   257d8:	a8c00204 	addi	r3,r21,8
   257dc:	2000061e 	bne	r4,zero,257f8 <___vfprintf_internal_r+0x1638>
   257e0:	d9414717 	ldw	r5,1308(sp)
   257e4:	2800041e 	bne	r5,zero,257f8 <___vfprintf_internal_r+0x1638>
   257e8:	d9814c17 	ldw	r6,1328(sp)
   257ec:	3080004c 	andi	r2,r6,1
   257f0:	1005003a 	cmpeq	r2,r2,zero
   257f4:	103bf01e 	bne	r2,zero,247b8 <___vfprintf_internal_r+0x5f8>
   257f8:	00800044 	movi	r2,1
   257fc:	dc400d17 	ldw	r17,52(sp)
   25800:	18800115 	stw	r2,4(r3)
   25804:	d8814917 	ldw	r2,1316(sp)
   25808:	94800044 	addi	r18,r18,1
   2580c:	8c400044 	addi	r17,r17,1
   25810:	18800015 	stw	r2,0(r3)
   25814:	008001c4 	movi	r2,7
   25818:	dc800e15 	stw	r18,56(sp)
   2581c:	dc400d15 	stw	r17,52(sp)
   25820:	1440ca16 	blt	r2,r17,25b4c <___vfprintf_internal_r+0x198c>
   25824:	18c00204 	addi	r3,r3,8
   25828:	0121c83a 	sub	r16,zero,r4
   2582c:	0400500e 	bge	zero,r16,25970 <___vfprintf_internal_r+0x17b0>
   25830:	00800404 	movi	r2,16
   25834:	1400800e 	bge	r2,r16,25a38 <___vfprintf_internal_r+0x1878>
   25838:	1027883a 	mov	r19,r2
   2583c:	070000f4 	movhi	fp,3
   25840:	e73ae284 	addi	fp,fp,-5238
   25844:	050001c4 	movi	r20,7
   25848:	00000306 	br	25858 <___vfprintf_internal_r+0x1698>
   2584c:	18c00204 	addi	r3,r3,8
   25850:	843ffc04 	addi	r16,r16,-16
   25854:	9c007a0e 	bge	r19,r16,25a40 <___vfprintf_internal_r+0x1880>
   25858:	94800404 	addi	r18,r18,16
   2585c:	8c400044 	addi	r17,r17,1
   25860:	1f000015 	stw	fp,0(r3)
   25864:	1cc00115 	stw	r19,4(r3)
   25868:	dc800e15 	stw	r18,56(sp)
   2586c:	dc400d15 	stw	r17,52(sp)
   25870:	a47ff60e 	bge	r20,r17,2584c <___vfprintf_internal_r+0x168c>
   25874:	d9014f17 	ldw	r4,1340(sp)
   25878:	b00b883a 	mov	r5,r22
   2587c:	d9800c04 	addi	r6,sp,48
   25880:	00241680 	call	24168 <__sprint_r>
   25884:	103c061e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25888:	dc800e17 	ldw	r18,56(sp)
   2588c:	dc400d17 	ldw	r17,52(sp)
   25890:	d8c01904 	addi	r3,sp,100
   25894:	003fee06 	br	25850 <___vfprintf_internal_r+0x1690>
   25898:	3c000017 	ldw	r16,0(r7)
   2589c:	0023883a 	mov	r17,zero
   258a0:	39c00104 	addi	r7,r7,4
   258a4:	d9c14015 	stw	r7,1280(sp)
   258a8:	003e9206 	br	252f4 <___vfprintf_internal_r+0x1134>
   258ac:	d9401904 	addi	r5,sp,100
   258b0:	dd000f04 	addi	r20,sp,60
   258b4:	d9414115 	stw	r5,1284(sp)
   258b8:	d9814417 	ldw	r6,1296(sp)
   258bc:	880a973a 	slli	r5,r17,28
   258c0:	8004d13a 	srli	r2,r16,4
   258c4:	810003cc 	andi	r4,r16,15
   258c8:	3109883a 	add	r4,r6,r4
   258cc:	2884b03a 	or	r2,r5,r2
   258d0:	21400003 	ldbu	r5,0(r4)
   258d4:	d9014117 	ldw	r4,1284(sp)
   258d8:	8806d13a 	srli	r3,r17,4
   258dc:	1021883a 	mov	r16,r2
   258e0:	213fffc4 	addi	r4,r4,-1
   258e4:	d9014115 	stw	r4,1284(sp)
   258e8:	d9814117 	ldw	r6,1284(sp)
   258ec:	10c8b03a 	or	r4,r2,r3
   258f0:	1823883a 	mov	r17,r3
   258f4:	31400005 	stb	r5,0(r6)
   258f8:	203fef1e 	bne	r4,zero,258b8 <___vfprintf_internal_r+0x16f8>
   258fc:	003ccb06 	br	24c2c <___vfprintf_internal_r+0xa6c>
   25900:	00800c04 	movi	r2,48
   25904:	d98018c4 	addi	r6,sp,99
   25908:	dd000f04 	addi	r20,sp,60
   2590c:	d88018c5 	stb	r2,99(sp)
   25910:	d9814115 	stw	r6,1284(sp)
   25914:	003cc506 	br	24c2c <___vfprintf_internal_r+0xa6c>
   25918:	dc400d17 	ldw	r17,52(sp)
   2591c:	070000f4 	movhi	fp,3
   25920:	e73ae684 	addi	fp,fp,-5222
   25924:	003bc706 	br	24844 <___vfprintf_internal_r+0x684>
   25928:	d9414c17 	ldw	r5,1328(sp)
   2592c:	2880040c 	andi	r2,r5,16
   25930:	10007c26 	beq	r2,zero,25b24 <___vfprintf_internal_r+0x1964>
   25934:	38800017 	ldw	r2,0(r7)
   25938:	39c00104 	addi	r7,r7,4
   2593c:	d9c14015 	stw	r7,1280(sp)
   25940:	d9814b17 	ldw	r6,1324(sp)
   25944:	d9c14017 	ldw	r7,1280(sp)
   25948:	11800015 	stw	r6,0(r2)
   2594c:	003a7806 	br	24330 <___vfprintf_internal_r+0x170>
   25950:	d9014f17 	ldw	r4,1340(sp)
   25954:	b00b883a 	mov	r5,r22
   25958:	d9800c04 	addi	r6,sp,48
   2595c:	00241680 	call	24168 <__sprint_r>
   25960:	103bcf1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25964:	dc800e17 	ldw	r18,56(sp)
   25968:	dc400d17 	ldw	r17,52(sp)
   2596c:	d8c01904 	addi	r3,sp,100
   25970:	d9014717 	ldw	r4,1308(sp)
   25974:	d9414117 	ldw	r5,1284(sp)
   25978:	8c400044 	addi	r17,r17,1
   2597c:	9125883a 	add	r18,r18,r4
   25980:	008001c4 	movi	r2,7
   25984:	19400015 	stw	r5,0(r3)
   25988:	19000115 	stw	r4,4(r3)
   2598c:	dc800e15 	stw	r18,56(sp)
   25990:	dc400d15 	stw	r17,52(sp)
   25994:	147cee16 	blt	r2,r17,24d50 <___vfprintf_internal_r+0xb90>
   25998:	18c00204 	addi	r3,r3,8
   2599c:	003b8606 	br	247b8 <___vfprintf_internal_r+0x5f8>
   259a0:	38c00017 	ldw	r3,0(r7)
   259a4:	39000204 	addi	r4,r7,8
   259a8:	d9014015 	stw	r4,1280(sp)
   259ac:	d8c14215 	stw	r3,1288(sp)
   259b0:	39c00117 	ldw	r7,4(r7)
   259b4:	d9c14315 	stw	r7,1292(sp)
   259b8:	003e2006 	br	2523c <___vfprintf_internal_r+0x107c>
   259bc:	0005883a 	mov	r2,zero
   259c0:	1409c83a 	sub	r4,r2,r16
   259c4:	1105803a 	cmpltu	r2,r2,r4
   259c8:	044bc83a 	sub	r5,zero,r17
   259cc:	2885c83a 	sub	r2,r5,r2
   259d0:	2021883a 	mov	r16,r4
   259d4:	1023883a 	mov	r17,r2
   259d8:	01000044 	movi	r4,1
   259dc:	00800b44 	movi	r2,45
   259e0:	d8800405 	stb	r2,16(sp)
   259e4:	003c8406 	br	24bf8 <___vfprintf_internal_r+0xa38>
   259e8:	d9014f17 	ldw	r4,1340(sp)
   259ec:	b00b883a 	mov	r5,r22
   259f0:	d9800c04 	addi	r6,sp,48
   259f4:	00241680 	call	24168 <__sprint_r>
   259f8:	103ba91e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   259fc:	dc800e17 	ldw	r18,56(sp)
   25a00:	dc400d17 	ldw	r17,52(sp)
   25a04:	d9000517 	ldw	r4,20(sp)
   25a08:	d9401904 	addi	r5,sp,100
   25a0c:	003da706 	br	250ac <___vfprintf_internal_r+0xeec>
   25a10:	d9014f17 	ldw	r4,1340(sp)
   25a14:	b00b883a 	mov	r5,r22
   25a18:	d9800c04 	addi	r6,sp,48
   25a1c:	00241680 	call	24168 <__sprint_r>
   25a20:	103b9f1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25a24:	dc800e17 	ldw	r18,56(sp)
   25a28:	dc400d17 	ldw	r17,52(sp)
   25a2c:	d9000517 	ldw	r4,20(sp)
   25a30:	d8c01904 	addi	r3,sp,100
   25a34:	003d9106 	br	2507c <___vfprintf_internal_r+0xebc>
   25a38:	070000f4 	movhi	fp,3
   25a3c:	e73ae284 	addi	fp,fp,-5238
   25a40:	9425883a 	add	r18,r18,r16
   25a44:	8c400044 	addi	r17,r17,1
   25a48:	008001c4 	movi	r2,7
   25a4c:	1f000015 	stw	fp,0(r3)
   25a50:	1c000115 	stw	r16,4(r3)
   25a54:	dc800e15 	stw	r18,56(sp)
   25a58:	dc400d15 	stw	r17,52(sp)
   25a5c:	147fbc16 	blt	r2,r17,25950 <___vfprintf_internal_r+0x1790>
   25a60:	18c00204 	addi	r3,r3,8
   25a64:	003fc206 	br	25970 <___vfprintf_internal_r+0x17b0>
   25a68:	d9014f17 	ldw	r4,1340(sp)
   25a6c:	b00b883a 	mov	r5,r22
   25a70:	d9800c04 	addi	r6,sp,48
   25a74:	00241680 	call	24168 <__sprint_r>
   25a78:	103b891e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25a7c:	dc800e17 	ldw	r18,56(sp)
   25a80:	d9000517 	ldw	r4,20(sp)
   25a84:	d8c01904 	addi	r3,sp,100
   25a88:	003d0206 	br	24e94 <___vfprintf_internal_r+0xcd4>
   25a8c:	070000f4 	movhi	fp,3
   25a90:	e73ae284 	addi	fp,fp,-5238
   25a94:	003be406 	br	24a28 <___vfprintf_internal_r+0x868>
   25a98:	008000f4 	movhi	r2,3
   25a9c:	10bad104 	addi	r2,r2,-5308
   25aa0:	d8814115 	stw	r2,1284(sp)
   25aa4:	003df506 	br	2527c <___vfprintf_internal_r+0x10bc>
   25aa8:	d9014217 	ldw	r4,1288(sp)
   25aac:	d9414317 	ldw	r5,1292(sp)
   25ab0:	002a4340 	call	2a434 <__isnand>
   25ab4:	10003926 	beq	r2,zero,25b9c <___vfprintf_internal_r+0x19dc>
   25ab8:	d9414d17 	ldw	r5,1332(sp)
   25abc:	008011c4 	movi	r2,71
   25ac0:	1140ce16 	blt	r2,r5,25dfc <___vfprintf_internal_r+0x1c3c>
   25ac4:	018000f4 	movhi	r6,3
   25ac8:	31bad204 	addi	r6,r6,-5304
   25acc:	d9814115 	stw	r6,1284(sp)
   25ad0:	003dea06 	br	2527c <___vfprintf_internal_r+0x10bc>
   25ad4:	d9014c17 	ldw	r4,1328(sp)
   25ad8:	bdc00044 	addi	r23,r23,1
   25adc:	b8c00007 	ldb	r3,0(r23)
   25ae0:	21000814 	ori	r4,r4,32
   25ae4:	d9014c15 	stw	r4,1328(sp)
   25ae8:	003a3406 	br	243bc <___vfprintf_internal_r+0x1fc>
   25aec:	dcc14515 	stw	r19,1300(sp)
   25af0:	98011016 	blt	r19,zero,25f34 <___vfprintf_internal_r+0x1d74>
   25af4:	980f883a 	mov	r7,r19
   25af8:	d8014615 	stw	zero,1304(sp)
   25afc:	003c5206 	br	24c48 <___vfprintf_internal_r+0xa88>
   25b00:	d9014f17 	ldw	r4,1340(sp)
   25b04:	b00b883a 	mov	r5,r22
   25b08:	d9800c04 	addi	r6,sp,48
   25b0c:	00241680 	call	24168 <__sprint_r>
   25b10:	103b631e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25b14:	dc800e17 	ldw	r18,56(sp)
   25b18:	d9000517 	ldw	r4,20(sp)
   25b1c:	d8c01904 	addi	r3,sp,100
   25b20:	003f2e06 	br	257dc <___vfprintf_internal_r+0x161c>
   25b24:	d8c14c17 	ldw	r3,1328(sp)
   25b28:	1880100c 	andi	r2,r3,64
   25b2c:	1000a026 	beq	r2,zero,25db0 <___vfprintf_internal_r+0x1bf0>
   25b30:	38800017 	ldw	r2,0(r7)
   25b34:	39c00104 	addi	r7,r7,4
   25b38:	d9c14015 	stw	r7,1280(sp)
   25b3c:	d9014b17 	ldw	r4,1324(sp)
   25b40:	d9c14017 	ldw	r7,1280(sp)
   25b44:	1100000d 	sth	r4,0(r2)
   25b48:	0039f906 	br	24330 <___vfprintf_internal_r+0x170>
   25b4c:	d9014f17 	ldw	r4,1340(sp)
   25b50:	b00b883a 	mov	r5,r22
   25b54:	d9800c04 	addi	r6,sp,48
   25b58:	00241680 	call	24168 <__sprint_r>
   25b5c:	103b501e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25b60:	dc800e17 	ldw	r18,56(sp)
   25b64:	dc400d17 	ldw	r17,52(sp)
   25b68:	d9000517 	ldw	r4,20(sp)
   25b6c:	d8c01904 	addi	r3,sp,100
   25b70:	003f2d06 	br	25828 <___vfprintf_internal_r+0x1668>
   25b74:	00800184 	movi	r2,6
   25b78:	14c09a36 	bltu	r2,r19,25de4 <___vfprintf_internal_r+0x1c24>
   25b7c:	dcc14515 	stw	r19,1300(sp)
   25b80:	9800010e 	bge	r19,zero,25b88 <___vfprintf_internal_r+0x19c8>
   25b84:	d8014515 	stw	zero,1300(sp)
   25b88:	008000f4 	movhi	r2,3
   25b8c:	10bad404 	addi	r2,r2,-5296
   25b90:	980f883a 	mov	r7,r19
   25b94:	d8814115 	stw	r2,1284(sp)
   25b98:	003a7806 	br	2457c <___vfprintf_internal_r+0x3bc>
   25b9c:	00bfffc4 	movi	r2,-1
   25ba0:	9880e226 	beq	r19,r2,25f2c <___vfprintf_internal_r+0x1d6c>
   25ba4:	d9414d17 	ldw	r5,1332(sp)
   25ba8:	008019c4 	movi	r2,103
   25bac:	2880dc26 	beq	r5,r2,25f20 <___vfprintf_internal_r+0x1d60>
   25bb0:	008011c4 	movi	r2,71
   25bb4:	2880da26 	beq	r5,r2,25f20 <___vfprintf_internal_r+0x1d60>
   25bb8:	d9414c17 	ldw	r5,1328(sp)
   25bbc:	d9014317 	ldw	r4,1292(sp)
   25bc0:	d9814217 	ldw	r6,1288(sp)
   25bc4:	29404014 	ori	r5,r5,256
   25bc8:	d9414c15 	stw	r5,1328(sp)
   25bcc:	2000cc16 	blt	r4,zero,25f00 <___vfprintf_internal_r+0x1d40>
   25bd0:	3021883a 	mov	r16,r6
   25bd4:	2023883a 	mov	r17,r4
   25bd8:	0039883a 	mov	fp,zero
   25bdc:	d9414d17 	ldw	r5,1332(sp)
   25be0:	00801984 	movi	r2,102
   25be4:	2880b726 	beq	r5,r2,25ec4 <___vfprintf_internal_r+0x1d04>
   25be8:	00801184 	movi	r2,70
   25bec:	2880b526 	beq	r5,r2,25ec4 <___vfprintf_internal_r+0x1d04>
   25bf0:	00801944 	movi	r2,101
   25bf4:	2880c826 	beq	r5,r2,25f18 <___vfprintf_internal_r+0x1d58>
   25bf8:	00801144 	movi	r2,69
   25bfc:	2880c626 	beq	r5,r2,25f18 <___vfprintf_internal_r+0x1d58>
   25c00:	9829883a 	mov	r20,r19
   25c04:	d9014f17 	ldw	r4,1340(sp)
   25c08:	d8800504 	addi	r2,sp,20
   25c0c:	880d883a 	mov	r6,r17
   25c10:	d8800115 	stw	r2,4(sp)
   25c14:	d8c00604 	addi	r3,sp,24
   25c18:	d8800704 	addi	r2,sp,28
   25c1c:	800b883a 	mov	r5,r16
   25c20:	01c00084 	movi	r7,2
   25c24:	d8c00215 	stw	r3,8(sp)
   25c28:	d8800315 	stw	r2,12(sp)
   25c2c:	dd000015 	stw	r20,0(sp)
   25c30:	00263e40 	call	263e4 <_dtoa_r>
   25c34:	d9814d17 	ldw	r6,1332(sp)
   25c38:	d8814115 	stw	r2,1284(sp)
   25c3c:	008019c4 	movi	r2,103
   25c40:	30809526 	beq	r6,r2,25e98 <___vfprintf_internal_r+0x1cd8>
   25c44:	d8c14d17 	ldw	r3,1332(sp)
   25c48:	008011c4 	movi	r2,71
   25c4c:	18809226 	beq	r3,r2,25e98 <___vfprintf_internal_r+0x1cd8>
   25c50:	d9414117 	ldw	r5,1284(sp)
   25c54:	d9814d17 	ldw	r6,1332(sp)
   25c58:	00801984 	movi	r2,102
   25c5c:	2d25883a 	add	r18,r5,r20
   25c60:	30808626 	beq	r6,r2,25e7c <___vfprintf_internal_r+0x1cbc>
   25c64:	00801184 	movi	r2,70
   25c68:	30808426 	beq	r6,r2,25e7c <___vfprintf_internal_r+0x1cbc>
   25c6c:	000d883a 	mov	r6,zero
   25c70:	000f883a 	mov	r7,zero
   25c74:	880b883a 	mov	r5,r17
   25c78:	8009883a 	mov	r4,r16
   25c7c:	002b7000 	call	2b700 <__eqdf2>
   25c80:	1000751e 	bne	r2,zero,25e58 <___vfprintf_internal_r+0x1c98>
   25c84:	9005883a 	mov	r2,r18
   25c88:	dc800715 	stw	r18,28(sp)
   25c8c:	d9014117 	ldw	r4,1284(sp)
   25c90:	d9414d17 	ldw	r5,1332(sp)
   25c94:	00c019c4 	movi	r3,103
   25c98:	1125c83a 	sub	r18,r2,r4
   25c9c:	28c06826 	beq	r5,r3,25e40 <___vfprintf_internal_r+0x1c80>
   25ca0:	008011c4 	movi	r2,71
   25ca4:	28806626 	beq	r5,r2,25e40 <___vfprintf_internal_r+0x1c80>
   25ca8:	d9000517 	ldw	r4,20(sp)
   25cac:	d8c14d17 	ldw	r3,1332(sp)
   25cb0:	00801944 	movi	r2,101
   25cb4:	10c05516 	blt	r2,r3,25e0c <___vfprintf_internal_r+0x1c4c>
   25cb8:	213fffc4 	addi	r4,r4,-1
   25cbc:	d9000515 	stw	r4,20(sp)
   25cc0:	d8c00805 	stb	r3,32(sp)
   25cc4:	2021883a 	mov	r16,r4
   25cc8:	2000c116 	blt	r4,zero,25fd0 <___vfprintf_internal_r+0x1e10>
   25ccc:	00800ac4 	movi	r2,43
   25cd0:	d8800845 	stb	r2,33(sp)
   25cd4:	00800244 	movi	r2,9
   25cd8:	1400af0e 	bge	r2,r16,25f98 <___vfprintf_internal_r+0x1dd8>
   25cdc:	1027883a 	mov	r19,r2
   25ce0:	dc400b84 	addi	r17,sp,46
   25ce4:	8009883a 	mov	r4,r16
   25ce8:	01400284 	movi	r5,10
   25cec:	002bb080 	call	2bb08 <__modsi3>
   25cf0:	10800c04 	addi	r2,r2,48
   25cf4:	8c7fffc4 	addi	r17,r17,-1
   25cf8:	8009883a 	mov	r4,r16
   25cfc:	01400284 	movi	r5,10
   25d00:	88800005 	stb	r2,0(r17)
   25d04:	002baa80 	call	2baa8 <__divsi3>
   25d08:	1021883a 	mov	r16,r2
   25d0c:	98bff516 	blt	r19,r2,25ce4 <___vfprintf_internal_r+0x1b24>
   25d10:	10c00c04 	addi	r3,r2,48
   25d14:	d88009c4 	addi	r2,sp,39
   25d18:	108001c4 	addi	r2,r2,7
   25d1c:	897fffc4 	addi	r5,r17,-1
   25d20:	88ffffc5 	stb	r3,-1(r17)
   25d24:	2880a72e 	bgeu	r5,r2,25fc4 <___vfprintf_internal_r+0x1e04>
   25d28:	1009883a 	mov	r4,r2
   25d2c:	d9800804 	addi	r6,sp,32
   25d30:	d8c00884 	addi	r3,sp,34
   25d34:	28800003 	ldbu	r2,0(r5)
   25d38:	29400044 	addi	r5,r5,1
   25d3c:	18800005 	stb	r2,0(r3)
   25d40:	18c00044 	addi	r3,r3,1
   25d44:	293ffb36 	bltu	r5,r4,25d34 <___vfprintf_internal_r+0x1b74>
   25d48:	1987c83a 	sub	r3,r3,r6
   25d4c:	00800044 	movi	r2,1
   25d50:	d8c14815 	stw	r3,1312(sp)
   25d54:	90cf883a 	add	r7,r18,r3
   25d58:	1480960e 	bge	r2,r18,25fb4 <___vfprintf_internal_r+0x1df4>
   25d5c:	39c00044 	addi	r7,r7,1
   25d60:	d9c14515 	stw	r7,1300(sp)
   25d64:	38003416 	blt	r7,zero,25e38 <___vfprintf_internal_r+0x1c78>
   25d68:	e0803fcc 	andi	r2,fp,255
   25d6c:	1080201c 	xori	r2,r2,128
   25d70:	10bfe004 	addi	r2,r2,-128
   25d74:	10004e26 	beq	r2,zero,25eb0 <___vfprintf_internal_r+0x1cf0>
   25d78:	00800b44 	movi	r2,45
   25d7c:	dc814715 	stw	r18,1308(sp)
   25d80:	d8014615 	stw	zero,1304(sp)
   25d84:	d8800405 	stb	r2,16(sp)
   25d88:	003bb106 	br	24c50 <___vfprintf_internal_r+0xa90>
   25d8c:	00800b44 	movi	r2,45
   25d90:	d8800405 	stb	r2,16(sp)
   25d94:	003d3306 	br	25264 <___vfprintf_internal_r+0x10a4>
   25d98:	d9014f17 	ldw	r4,1340(sp)
   25d9c:	b00b883a 	mov	r5,r22
   25da0:	d9800c04 	addi	r6,sp,48
   25da4:	00241680 	call	24168 <__sprint_r>
   25da8:	103abd1e 	bne	r2,zero,248a0 <___vfprintf_internal_r+0x6e0>
   25dac:	003abb06 	br	2489c <___vfprintf_internal_r+0x6dc>
   25db0:	38800017 	ldw	r2,0(r7)
   25db4:	39c00104 	addi	r7,r7,4
   25db8:	d9c14015 	stw	r7,1280(sp)
   25dbc:	d9414b17 	ldw	r5,1324(sp)
   25dc0:	d9c14017 	ldw	r7,1280(sp)
   25dc4:	11400015 	stw	r5,0(r2)
   25dc8:	00395906 	br	24330 <___vfprintf_internal_r+0x170>
   25dcc:	980f883a 	mov	r7,r19
   25dd0:	dcc14515 	stw	r19,1300(sp)
   25dd4:	d8014615 	stw	zero,1304(sp)
   25dd8:	003b9b06 	br	24c48 <___vfprintf_internal_r+0xa88>
   25ddc:	0027883a 	mov	r19,zero
   25de0:	00397806 	br	243c4 <___vfprintf_internal_r+0x204>
   25de4:	00c000f4 	movhi	r3,3
   25de8:	18fad404 	addi	r3,r3,-5296
   25dec:	100f883a 	mov	r7,r2
   25df0:	d8814515 	stw	r2,1300(sp)
   25df4:	d8c14115 	stw	r3,1284(sp)
   25df8:	0039e006 	br	2457c <___vfprintf_internal_r+0x3bc>
   25dfc:	008000f4 	movhi	r2,3
   25e00:	10bad304 	addi	r2,r2,-5300
   25e04:	d8814115 	stw	r2,1284(sp)
   25e08:	003d1c06 	br	2527c <___vfprintf_internal_r+0x10bc>
   25e0c:	d9414d17 	ldw	r5,1332(sp)
   25e10:	00801984 	movi	r2,102
   25e14:	28804926 	beq	r5,r2,25f3c <___vfprintf_internal_r+0x1d7c>
   25e18:	200f883a 	mov	r7,r4
   25e1c:	24805716 	blt	r4,r18,25f7c <___vfprintf_internal_r+0x1dbc>
   25e20:	d9414c17 	ldw	r5,1328(sp)
   25e24:	2880004c 	andi	r2,r5,1
   25e28:	10000126 	beq	r2,zero,25e30 <___vfprintf_internal_r+0x1c70>
   25e2c:	21c00044 	addi	r7,r4,1
   25e30:	d9c14515 	stw	r7,1300(sp)
   25e34:	383fcc0e 	bge	r7,zero,25d68 <___vfprintf_internal_r+0x1ba8>
   25e38:	d8014515 	stw	zero,1300(sp)
   25e3c:	003fca06 	br	25d68 <___vfprintf_internal_r+0x1ba8>
   25e40:	d9000517 	ldw	r4,20(sp)
   25e44:	00bfff04 	movi	r2,-4
   25e48:	1100480e 	bge	r2,r4,25f6c <___vfprintf_internal_r+0x1dac>
   25e4c:	99004716 	blt	r19,r4,25f6c <___vfprintf_internal_r+0x1dac>
   25e50:	d8c14d15 	stw	r3,1332(sp)
   25e54:	003ff006 	br	25e18 <___vfprintf_internal_r+0x1c58>
   25e58:	d8800717 	ldw	r2,28(sp)
   25e5c:	14bf8b2e 	bgeu	r2,r18,25c8c <___vfprintf_internal_r+0x1acc>
   25e60:	9007883a 	mov	r3,r18
   25e64:	01000c04 	movi	r4,48
   25e68:	11000005 	stb	r4,0(r2)
   25e6c:	10800044 	addi	r2,r2,1
   25e70:	d8800715 	stw	r2,28(sp)
   25e74:	18bffc1e 	bne	r3,r2,25e68 <___vfprintf_internal_r+0x1ca8>
   25e78:	003f8406 	br	25c8c <___vfprintf_internal_r+0x1acc>
   25e7c:	d8814117 	ldw	r2,1284(sp)
   25e80:	10c00007 	ldb	r3,0(r2)
   25e84:	00800c04 	movi	r2,48
   25e88:	18805b26 	beq	r3,r2,25ff8 <___vfprintf_internal_r+0x1e38>
   25e8c:	d9000517 	ldw	r4,20(sp)
   25e90:	9125883a 	add	r18,r18,r4
   25e94:	003f7506 	br	25c6c <___vfprintf_internal_r+0x1aac>
   25e98:	d9014c17 	ldw	r4,1328(sp)
   25e9c:	2080004c 	andi	r2,r4,1
   25ea0:	1005003a 	cmpeq	r2,r2,zero
   25ea4:	103f6a26 	beq	r2,zero,25c50 <___vfprintf_internal_r+0x1a90>
   25ea8:	d8800717 	ldw	r2,28(sp)
   25eac:	003f7706 	br	25c8c <___vfprintf_internal_r+0x1acc>
   25eb0:	d9c14515 	stw	r7,1300(sp)
   25eb4:	38004d16 	blt	r7,zero,25fec <___vfprintf_internal_r+0x1e2c>
   25eb8:	dc814715 	stw	r18,1308(sp)
   25ebc:	d8014615 	stw	zero,1304(sp)
   25ec0:	003b6106 	br	24c48 <___vfprintf_internal_r+0xa88>
   25ec4:	d9014f17 	ldw	r4,1340(sp)
   25ec8:	d8800504 	addi	r2,sp,20
   25ecc:	d8800115 	stw	r2,4(sp)
   25ed0:	d8c00604 	addi	r3,sp,24
   25ed4:	d8800704 	addi	r2,sp,28
   25ed8:	800b883a 	mov	r5,r16
   25edc:	880d883a 	mov	r6,r17
   25ee0:	01c000c4 	movi	r7,3
   25ee4:	d8c00215 	stw	r3,8(sp)
   25ee8:	d8800315 	stw	r2,12(sp)
   25eec:	dcc00015 	stw	r19,0(sp)
   25ef0:	9829883a 	mov	r20,r19
   25ef4:	00263e40 	call	263e4 <_dtoa_r>
   25ef8:	d8814115 	stw	r2,1284(sp)
   25efc:	003f5106 	br	25c44 <___vfprintf_internal_r+0x1a84>
   25f00:	d8c14217 	ldw	r3,1288(sp)
   25f04:	d9014317 	ldw	r4,1292(sp)
   25f08:	07000b44 	movi	fp,45
   25f0c:	1821883a 	mov	r16,r3
   25f10:	2460003c 	xorhi	r17,r4,32768
   25f14:	003f3106 	br	25bdc <___vfprintf_internal_r+0x1a1c>
   25f18:	9d000044 	addi	r20,r19,1
   25f1c:	003f3906 	br	25c04 <___vfprintf_internal_r+0x1a44>
   25f20:	983f251e 	bne	r19,zero,25bb8 <___vfprintf_internal_r+0x19f8>
   25f24:	04c00044 	movi	r19,1
   25f28:	003f2306 	br	25bb8 <___vfprintf_internal_r+0x19f8>
   25f2c:	04c00184 	movi	r19,6
   25f30:	003f2106 	br	25bb8 <___vfprintf_internal_r+0x19f8>
   25f34:	d8014515 	stw	zero,1300(sp)
   25f38:	003eee06 	br	25af4 <___vfprintf_internal_r+0x1934>
   25f3c:	200f883a 	mov	r7,r4
   25f40:	0100370e 	bge	zero,r4,26020 <___vfprintf_internal_r+0x1e60>
   25f44:	9800031e 	bne	r19,zero,25f54 <___vfprintf_internal_r+0x1d94>
   25f48:	d9814c17 	ldw	r6,1328(sp)
   25f4c:	3080004c 	andi	r2,r6,1
   25f50:	103fb726 	beq	r2,zero,25e30 <___vfprintf_internal_r+0x1c70>
   25f54:	20800044 	addi	r2,r4,1
   25f58:	98a7883a 	add	r19,r19,r2
   25f5c:	dcc14515 	stw	r19,1300(sp)
   25f60:	980f883a 	mov	r7,r19
   25f64:	983f800e 	bge	r19,zero,25d68 <___vfprintf_internal_r+0x1ba8>
   25f68:	003fb306 	br	25e38 <___vfprintf_internal_r+0x1c78>
   25f6c:	d9814d17 	ldw	r6,1332(sp)
   25f70:	31bfff84 	addi	r6,r6,-2
   25f74:	d9814d15 	stw	r6,1332(sp)
   25f78:	003f4c06 	br	25cac <___vfprintf_internal_r+0x1aec>
   25f7c:	0100180e 	bge	zero,r4,25fe0 <___vfprintf_internal_r+0x1e20>
   25f80:	00800044 	movi	r2,1
   25f84:	1485883a 	add	r2,r2,r18
   25f88:	d8814515 	stw	r2,1300(sp)
   25f8c:	100f883a 	mov	r7,r2
   25f90:	103f750e 	bge	r2,zero,25d68 <___vfprintf_internal_r+0x1ba8>
   25f94:	003fa806 	br	25e38 <___vfprintf_internal_r+0x1c78>
   25f98:	80c00c04 	addi	r3,r16,48
   25f9c:	00800c04 	movi	r2,48
   25fa0:	d8c008c5 	stb	r3,35(sp)
   25fa4:	d9800804 	addi	r6,sp,32
   25fa8:	d8c00904 	addi	r3,sp,36
   25fac:	d8800885 	stb	r2,34(sp)
   25fb0:	003f6506 	br	25d48 <___vfprintf_internal_r+0x1b88>
   25fb4:	d9014c17 	ldw	r4,1328(sp)
   25fb8:	2084703a 	and	r2,r4,r2
   25fbc:	103f9c26 	beq	r2,zero,25e30 <___vfprintf_internal_r+0x1c70>
   25fc0:	003f6606 	br	25d5c <___vfprintf_internal_r+0x1b9c>
   25fc4:	d9800804 	addi	r6,sp,32
   25fc8:	d8c00884 	addi	r3,sp,34
   25fcc:	003f5e06 	br	25d48 <___vfprintf_internal_r+0x1b88>
   25fd0:	00800b44 	movi	r2,45
   25fd4:	0121c83a 	sub	r16,zero,r4
   25fd8:	d8800845 	stb	r2,33(sp)
   25fdc:	003f3d06 	br	25cd4 <___vfprintf_internal_r+0x1b14>
   25fe0:	00800084 	movi	r2,2
   25fe4:	1105c83a 	sub	r2,r2,r4
   25fe8:	003fe606 	br	25f84 <___vfprintf_internal_r+0x1dc4>
   25fec:	d8014515 	stw	zero,1300(sp)
   25ff0:	dc814715 	stw	r18,1308(sp)
   25ff4:	003fb106 	br	25ebc <___vfprintf_internal_r+0x1cfc>
   25ff8:	000d883a 	mov	r6,zero
   25ffc:	000f883a 	mov	r7,zero
   26000:	8009883a 	mov	r4,r16
   26004:	880b883a 	mov	r5,r17
   26008:	002b7880 	call	2b788 <__nedf2>
   2600c:	103f9f26 	beq	r2,zero,25e8c <___vfprintf_internal_r+0x1ccc>
   26010:	00800044 	movi	r2,1
   26014:	1509c83a 	sub	r4,r2,r20
   26018:	d9000515 	stw	r4,20(sp)
   2601c:	003f9b06 	br	25e8c <___vfprintf_internal_r+0x1ccc>
   26020:	98000d1e 	bne	r19,zero,26058 <___vfprintf_internal_r+0x1e98>
   26024:	d8c14c17 	ldw	r3,1328(sp)
   26028:	1880004c 	andi	r2,r3,1
   2602c:	10000a1e 	bne	r2,zero,26058 <___vfprintf_internal_r+0x1e98>
   26030:	01000044 	movi	r4,1
   26034:	200f883a 	mov	r7,r4
   26038:	d9014515 	stw	r4,1300(sp)
   2603c:	003f4a06 	br	25d68 <___vfprintf_internal_r+0x1ba8>
   26040:	3cc00017 	ldw	r19,0(r7)
   26044:	39c00104 	addi	r7,r7,4
   26048:	983d0e0e 	bge	r19,zero,25484 <___vfprintf_internal_r+0x12c4>
   2604c:	b8c00007 	ldb	r3,0(r23)
   26050:	04ffffc4 	movi	r19,-1
   26054:	0038d906 	br	243bc <___vfprintf_internal_r+0x1fc>
   26058:	9cc00084 	addi	r19,r19,2
   2605c:	dcc14515 	stw	r19,1300(sp)
   26060:	980f883a 	mov	r7,r19
   26064:	983f400e 	bge	r19,zero,25d68 <___vfprintf_internal_r+0x1ba8>
   26068:	003f7306 	br	25e38 <___vfprintf_internal_r+0x1c78>

0002606c <__vfprintf_internal>:
   2606c:	008000f4 	movhi	r2,3
   26070:	1081df04 	addi	r2,r2,1916
   26074:	2013883a 	mov	r9,r4
   26078:	11000017 	ldw	r4,0(r2)
   2607c:	2805883a 	mov	r2,r5
   26080:	300f883a 	mov	r7,r6
   26084:	480b883a 	mov	r5,r9
   26088:	100d883a 	mov	r6,r2
   2608c:	00241c01 	jmpi	241c0 <___vfprintf_internal_r>

00026090 <__swsetup_r>:
   26090:	008000f4 	movhi	r2,3
   26094:	1081df04 	addi	r2,r2,1916
   26098:	10c00017 	ldw	r3,0(r2)
   2609c:	defffd04 	addi	sp,sp,-12
   260a0:	dc400115 	stw	r17,4(sp)
   260a4:	dc000015 	stw	r16,0(sp)
   260a8:	dfc00215 	stw	ra,8(sp)
   260ac:	2023883a 	mov	r17,r4
   260b0:	2821883a 	mov	r16,r5
   260b4:	18000226 	beq	r3,zero,260c0 <__swsetup_r+0x30>
   260b8:	18800e17 	ldw	r2,56(r3)
   260bc:	10001f26 	beq	r2,zero,2613c <__swsetup_r+0xac>
   260c0:	8100030b 	ldhu	r4,12(r16)
   260c4:	2080020c 	andi	r2,r4,8
   260c8:	10002826 	beq	r2,zero,2616c <__swsetup_r+0xdc>
   260cc:	81400417 	ldw	r5,16(r16)
   260d0:	28001d26 	beq	r5,zero,26148 <__swsetup_r+0xb8>
   260d4:	2080004c 	andi	r2,r4,1
   260d8:	1005003a 	cmpeq	r2,r2,zero
   260dc:	10000b26 	beq	r2,zero,2610c <__swsetup_r+0x7c>
   260e0:	2080008c 	andi	r2,r4,2
   260e4:	10001226 	beq	r2,zero,26130 <__swsetup_r+0xa0>
   260e8:	0005883a 	mov	r2,zero
   260ec:	80800215 	stw	r2,8(r16)
   260f0:	28000b26 	beq	r5,zero,26120 <__swsetup_r+0x90>
   260f4:	0005883a 	mov	r2,zero
   260f8:	dfc00217 	ldw	ra,8(sp)
   260fc:	dc400117 	ldw	r17,4(sp)
   26100:	dc000017 	ldw	r16,0(sp)
   26104:	dec00304 	addi	sp,sp,12
   26108:	f800283a 	ret
   2610c:	80800517 	ldw	r2,20(r16)
   26110:	80000215 	stw	zero,8(r16)
   26114:	0085c83a 	sub	r2,zero,r2
   26118:	80800615 	stw	r2,24(r16)
   2611c:	283ff51e 	bne	r5,zero,260f4 <__swsetup_r+0x64>
   26120:	2080200c 	andi	r2,r4,128
   26124:	103ff326 	beq	r2,zero,260f4 <__swsetup_r+0x64>
   26128:	00bfffc4 	movi	r2,-1
   2612c:	003ff206 	br	260f8 <__swsetup_r+0x68>
   26130:	80800517 	ldw	r2,20(r16)
   26134:	80800215 	stw	r2,8(r16)
   26138:	003fed06 	br	260f0 <__swsetup_r+0x60>
   2613c:	1809883a 	mov	r4,r3
   26140:	0027c300 	call	27c30 <__sinit>
   26144:	003fde06 	br	260c0 <__swsetup_r+0x30>
   26148:	20c0a00c 	andi	r3,r4,640
   2614c:	00808004 	movi	r2,512
   26150:	18bfe026 	beq	r3,r2,260d4 <__swsetup_r+0x44>
   26154:	8809883a 	mov	r4,r17
   26158:	800b883a 	mov	r5,r16
   2615c:	0028a1c0 	call	28a1c <__smakebuf_r>
   26160:	8100030b 	ldhu	r4,12(r16)
   26164:	81400417 	ldw	r5,16(r16)
   26168:	003fda06 	br	260d4 <__swsetup_r+0x44>
   2616c:	2080040c 	andi	r2,r4,16
   26170:	103fed26 	beq	r2,zero,26128 <__swsetup_r+0x98>
   26174:	2080010c 	andi	r2,r4,4
   26178:	10001226 	beq	r2,zero,261c4 <__swsetup_r+0x134>
   2617c:	81400c17 	ldw	r5,48(r16)
   26180:	28000526 	beq	r5,zero,26198 <__swsetup_r+0x108>
   26184:	80801004 	addi	r2,r16,64
   26188:	28800226 	beq	r5,r2,26194 <__swsetup_r+0x104>
   2618c:	8809883a 	mov	r4,r17
   26190:	0027fb40 	call	27fb4 <_free_r>
   26194:	80000c15 	stw	zero,48(r16)
   26198:	8080030b 	ldhu	r2,12(r16)
   2619c:	81400417 	ldw	r5,16(r16)
   261a0:	80000115 	stw	zero,4(r16)
   261a4:	10bff6cc 	andi	r2,r2,65499
   261a8:	8080030d 	sth	r2,12(r16)
   261ac:	81400015 	stw	r5,0(r16)
   261b0:	8080030b 	ldhu	r2,12(r16)
   261b4:	10800214 	ori	r2,r2,8
   261b8:	113fffcc 	andi	r4,r2,65535
   261bc:	8080030d 	sth	r2,12(r16)
   261c0:	003fc306 	br	260d0 <__swsetup_r+0x40>
   261c4:	81400417 	ldw	r5,16(r16)
   261c8:	003ff906 	br	261b0 <__swsetup_r+0x120>

000261cc <quorem>:
   261cc:	28c00417 	ldw	r3,16(r5)
   261d0:	20800417 	ldw	r2,16(r4)
   261d4:	defff604 	addi	sp,sp,-40
   261d8:	ddc00715 	stw	r23,28(sp)
   261dc:	dd400515 	stw	r21,20(sp)
   261e0:	dfc00915 	stw	ra,36(sp)
   261e4:	df000815 	stw	fp,32(sp)
   261e8:	dd800615 	stw	r22,24(sp)
   261ec:	dd000415 	stw	r20,16(sp)
   261f0:	dcc00315 	stw	r19,12(sp)
   261f4:	dc800215 	stw	r18,8(sp)
   261f8:	dc400115 	stw	r17,4(sp)
   261fc:	dc000015 	stw	r16,0(sp)
   26200:	202f883a 	mov	r23,r4
   26204:	282b883a 	mov	r21,r5
   26208:	10c07416 	blt	r2,r3,263dc <quorem+0x210>
   2620c:	1c7fffc4 	addi	r17,r3,-1
   26210:	8c45883a 	add	r2,r17,r17
   26214:	1085883a 	add	r2,r2,r2
   26218:	2c000504 	addi	r16,r5,20
   2621c:	24c00504 	addi	r19,r4,20
   26220:	14ed883a 	add	r22,r2,r19
   26224:	80a5883a 	add	r18,r16,r2
   26228:	b7000017 	ldw	fp,0(r22)
   2622c:	91400017 	ldw	r5,0(r18)
   26230:	e009883a 	mov	r4,fp
   26234:	29400044 	addi	r5,r5,1
   26238:	002bb680 	call	2bb68 <__udivsi3>
   2623c:	1029883a 	mov	r20,r2
   26240:	10003c1e 	bne	r2,zero,26334 <quorem+0x168>
   26244:	a80b883a 	mov	r5,r21
   26248:	b809883a 	mov	r4,r23
   2624c:	0028f680 	call	28f68 <__mcmp>
   26250:	10002b16 	blt	r2,zero,26300 <quorem+0x134>
   26254:	a5000044 	addi	r20,r20,1
   26258:	980f883a 	mov	r7,r19
   2625c:	0011883a 	mov	r8,zero
   26260:	0009883a 	mov	r4,zero
   26264:	81400017 	ldw	r5,0(r16)
   26268:	38c00017 	ldw	r3,0(r7)
   2626c:	84000104 	addi	r16,r16,4
   26270:	28bfffcc 	andi	r2,r5,65535
   26274:	2085883a 	add	r2,r4,r2
   26278:	11bfffcc 	andi	r6,r2,65535
   2627c:	193fffcc 	andi	r4,r3,65535
   26280:	1004d43a 	srli	r2,r2,16
   26284:	280ad43a 	srli	r5,r5,16
   26288:	2189c83a 	sub	r4,r4,r6
   2628c:	2209883a 	add	r4,r4,r8
   26290:	1806d43a 	srli	r3,r3,16
   26294:	288b883a 	add	r5,r5,r2
   26298:	200dd43a 	srai	r6,r4,16
   2629c:	28bfffcc 	andi	r2,r5,65535
   262a0:	1887c83a 	sub	r3,r3,r2
   262a4:	1987883a 	add	r3,r3,r6
   262a8:	3900000d 	sth	r4,0(r7)
   262ac:	38c0008d 	sth	r3,2(r7)
   262b0:	2808d43a 	srli	r4,r5,16
   262b4:	39c00104 	addi	r7,r7,4
   262b8:	1811d43a 	srai	r8,r3,16
   262bc:	943fe92e 	bgeu	r18,r16,26264 <quorem+0x98>
   262c0:	8c45883a 	add	r2,r17,r17
   262c4:	1085883a 	add	r2,r2,r2
   262c8:	9885883a 	add	r2,r19,r2
   262cc:	10c00017 	ldw	r3,0(r2)
   262d0:	18000b1e 	bne	r3,zero,26300 <quorem+0x134>
   262d4:	113fff04 	addi	r4,r2,-4
   262d8:	9900082e 	bgeu	r19,r4,262fc <quorem+0x130>
   262dc:	10bfff17 	ldw	r2,-4(r2)
   262e0:	10000326 	beq	r2,zero,262f0 <quorem+0x124>
   262e4:	00000506 	br	262fc <quorem+0x130>
   262e8:	20800017 	ldw	r2,0(r4)
   262ec:	1000031e 	bne	r2,zero,262fc <quorem+0x130>
   262f0:	213fff04 	addi	r4,r4,-4
   262f4:	8c7fffc4 	addi	r17,r17,-1
   262f8:	993ffb36 	bltu	r19,r4,262e8 <quorem+0x11c>
   262fc:	bc400415 	stw	r17,16(r23)
   26300:	a005883a 	mov	r2,r20
   26304:	dfc00917 	ldw	ra,36(sp)
   26308:	df000817 	ldw	fp,32(sp)
   2630c:	ddc00717 	ldw	r23,28(sp)
   26310:	dd800617 	ldw	r22,24(sp)
   26314:	dd400517 	ldw	r21,20(sp)
   26318:	dd000417 	ldw	r20,16(sp)
   2631c:	dcc00317 	ldw	r19,12(sp)
   26320:	dc800217 	ldw	r18,8(sp)
   26324:	dc400117 	ldw	r17,4(sp)
   26328:	dc000017 	ldw	r16,0(sp)
   2632c:	dec00a04 	addi	sp,sp,40
   26330:	f800283a 	ret
   26334:	980f883a 	mov	r7,r19
   26338:	8011883a 	mov	r8,r16
   2633c:	0013883a 	mov	r9,zero
   26340:	000d883a 	mov	r6,zero
   26344:	40c00017 	ldw	r3,0(r8)
   26348:	39000017 	ldw	r4,0(r7)
   2634c:	42000104 	addi	r8,r8,4
   26350:	18bfffcc 	andi	r2,r3,65535
   26354:	a085383a 	mul	r2,r20,r2
   26358:	1806d43a 	srli	r3,r3,16
   2635c:	217fffcc 	andi	r5,r4,65535
   26360:	3085883a 	add	r2,r6,r2
   26364:	11bfffcc 	andi	r6,r2,65535
   26368:	a0c7383a 	mul	r3,r20,r3
   2636c:	1004d43a 	srli	r2,r2,16
   26370:	298bc83a 	sub	r5,r5,r6
   26374:	2a4b883a 	add	r5,r5,r9
   26378:	2008d43a 	srli	r4,r4,16
   2637c:	1887883a 	add	r3,r3,r2
   26380:	280dd43a 	srai	r6,r5,16
   26384:	18bfffcc 	andi	r2,r3,65535
   26388:	2089c83a 	sub	r4,r4,r2
   2638c:	2189883a 	add	r4,r4,r6
   26390:	3900008d 	sth	r4,2(r7)
   26394:	3940000d 	sth	r5,0(r7)
   26398:	180cd43a 	srli	r6,r3,16
   2639c:	39c00104 	addi	r7,r7,4
   263a0:	2013d43a 	srai	r9,r4,16
   263a4:	923fe72e 	bgeu	r18,r8,26344 <quorem+0x178>
   263a8:	e03fa61e 	bne	fp,zero,26244 <quorem+0x78>
   263ac:	b0ffff04 	addi	r3,r22,-4
   263b0:	98c0082e 	bgeu	r19,r3,263d4 <quorem+0x208>
   263b4:	b0bfff17 	ldw	r2,-4(r22)
   263b8:	10000326 	beq	r2,zero,263c8 <quorem+0x1fc>
   263bc:	00000506 	br	263d4 <quorem+0x208>
   263c0:	18800017 	ldw	r2,0(r3)
   263c4:	1000031e 	bne	r2,zero,263d4 <quorem+0x208>
   263c8:	18ffff04 	addi	r3,r3,-4
   263cc:	8c7fffc4 	addi	r17,r17,-1
   263d0:	98fffb36 	bltu	r19,r3,263c0 <quorem+0x1f4>
   263d4:	bc400415 	stw	r17,16(r23)
   263d8:	003f9a06 	br	26244 <quorem+0x78>
   263dc:	0005883a 	mov	r2,zero
   263e0:	003fc806 	br	26304 <quorem+0x138>

000263e4 <_dtoa_r>:
   263e4:	22001017 	ldw	r8,64(r4)
   263e8:	deffda04 	addi	sp,sp,-152
   263ec:	dd402115 	stw	r21,132(sp)
   263f0:	dd002015 	stw	r20,128(sp)
   263f4:	dc801e15 	stw	r18,120(sp)
   263f8:	dc401d15 	stw	r17,116(sp)
   263fc:	dfc02515 	stw	ra,148(sp)
   26400:	df002415 	stw	fp,144(sp)
   26404:	ddc02315 	stw	r23,140(sp)
   26408:	dd802215 	stw	r22,136(sp)
   2640c:	dcc01f15 	stw	r19,124(sp)
   26410:	dc001c15 	stw	r16,112(sp)
   26414:	d9001615 	stw	r4,88(sp)
   26418:	3023883a 	mov	r17,r6
   2641c:	2829883a 	mov	r20,r5
   26420:	d9c01715 	stw	r7,92(sp)
   26424:	dc802817 	ldw	r18,160(sp)
   26428:	302b883a 	mov	r21,r6
   2642c:	40000a26 	beq	r8,zero,26458 <_dtoa_r+0x74>
   26430:	20801117 	ldw	r2,68(r4)
   26434:	400b883a 	mov	r5,r8
   26438:	40800115 	stw	r2,4(r8)
   2643c:	20c01117 	ldw	r3,68(r4)
   26440:	00800044 	movi	r2,1
   26444:	10c4983a 	sll	r2,r2,r3
   26448:	40800215 	stw	r2,8(r8)
   2644c:	0028e0c0 	call	28e0c <_Bfree>
   26450:	d8c01617 	ldw	r3,88(sp)
   26454:	18001015 	stw	zero,64(r3)
   26458:	8800a316 	blt	r17,zero,266e8 <_dtoa_r+0x304>
   2645c:	90000015 	stw	zero,0(r18)
   26460:	a8dffc2c 	andhi	r3,r21,32752
   26464:	009ffc34 	movhi	r2,32752
   26468:	18809126 	beq	r3,r2,266b0 <_dtoa_r+0x2cc>
   2646c:	000d883a 	mov	r6,zero
   26470:	000f883a 	mov	r7,zero
   26474:	a009883a 	mov	r4,r20
   26478:	a80b883a 	mov	r5,r21
   2647c:	dd001215 	stw	r20,72(sp)
   26480:	dd401315 	stw	r21,76(sp)
   26484:	002b7880 	call	2b788 <__nedf2>
   26488:	1000171e 	bne	r2,zero,264e8 <_dtoa_r+0x104>
   2648c:	d9802717 	ldw	r6,156(sp)
   26490:	00800044 	movi	r2,1
   26494:	30800015 	stw	r2,0(r6)
   26498:	d8802917 	ldw	r2,164(sp)
   2649c:	10029b26 	beq	r2,zero,26f0c <_dtoa_r+0xb28>
   264a0:	d9002917 	ldw	r4,164(sp)
   264a4:	008000f4 	movhi	r2,3
   264a8:	10bae244 	addi	r2,r2,-5239
   264ac:	10ffffc4 	addi	r3,r2,-1
   264b0:	20800015 	stw	r2,0(r4)
   264b4:	1805883a 	mov	r2,r3
   264b8:	dfc02517 	ldw	ra,148(sp)
   264bc:	df002417 	ldw	fp,144(sp)
   264c0:	ddc02317 	ldw	r23,140(sp)
   264c4:	dd802217 	ldw	r22,136(sp)
   264c8:	dd402117 	ldw	r21,132(sp)
   264cc:	dd002017 	ldw	r20,128(sp)
   264d0:	dcc01f17 	ldw	r19,124(sp)
   264d4:	dc801e17 	ldw	r18,120(sp)
   264d8:	dc401d17 	ldw	r17,116(sp)
   264dc:	dc001c17 	ldw	r16,112(sp)
   264e0:	dec02604 	addi	sp,sp,152
   264e4:	f800283a 	ret
   264e8:	d9001617 	ldw	r4,88(sp)
   264ec:	d9401217 	ldw	r5,72(sp)
   264f0:	d8800104 	addi	r2,sp,4
   264f4:	a80d883a 	mov	r6,r21
   264f8:	d9c00204 	addi	r7,sp,8
   264fc:	d8800015 	stw	r2,0(sp)
   26500:	00294480 	call	29448 <__d2b>
   26504:	d8800715 	stw	r2,28(sp)
   26508:	a804d53a 	srli	r2,r21,20
   2650c:	1101ffcc 	andi	r4,r2,2047
   26510:	20008626 	beq	r4,zero,2672c <_dtoa_r+0x348>
   26514:	d8c01217 	ldw	r3,72(sp)
   26518:	00800434 	movhi	r2,16
   2651c:	10bfffc4 	addi	r2,r2,-1
   26520:	ddc00117 	ldw	r23,4(sp)
   26524:	a884703a 	and	r2,r21,r2
   26528:	1811883a 	mov	r8,r3
   2652c:	124ffc34 	orhi	r9,r2,16368
   26530:	25bf0044 	addi	r22,r4,-1023
   26534:	d8000815 	stw	zero,32(sp)
   26538:	0005883a 	mov	r2,zero
   2653c:	00cffe34 	movhi	r3,16376
   26540:	480b883a 	mov	r5,r9
   26544:	4009883a 	mov	r4,r8
   26548:	180f883a 	mov	r7,r3
   2654c:	100d883a 	mov	r6,r2
   26550:	002246c0 	call	2246c <__subdf3>
   26554:	0218dbf4 	movhi	r8,25455
   26558:	4210d844 	addi	r8,r8,17249
   2655c:	024ff4f4 	movhi	r9,16339
   26560:	4a61e9c4 	addi	r9,r9,-30809
   26564:	480f883a 	mov	r7,r9
   26568:	400d883a 	mov	r6,r8
   2656c:	180b883a 	mov	r5,r3
   26570:	1009883a 	mov	r4,r2
   26574:	00225600 	call	22560 <__muldf3>
   26578:	0222d874 	movhi	r8,35681
   2657c:	42322cc4 	addi	r8,r8,-14157
   26580:	024ff1f4 	movhi	r9,16327
   26584:	4a628a04 	addi	r9,r9,-30168
   26588:	480f883a 	mov	r7,r9
   2658c:	400d883a 	mov	r6,r8
   26590:	180b883a 	mov	r5,r3
   26594:	1009883a 	mov	r4,r2
   26598:	00224ec0 	call	224ec <__adddf3>
   2659c:	b009883a 	mov	r4,r22
   265a0:	1021883a 	mov	r16,r2
   265a4:	1823883a 	mov	r17,r3
   265a8:	0022c8c0 	call	22c8c <__floatsidf>
   265ac:	021427f4 	movhi	r8,20639
   265b0:	421e7ec4 	addi	r8,r8,31227
   265b4:	024ff4f4 	movhi	r9,16339
   265b8:	4a5104c4 	addi	r9,r9,17427
   265bc:	480f883a 	mov	r7,r9
   265c0:	400d883a 	mov	r6,r8
   265c4:	180b883a 	mov	r5,r3
   265c8:	1009883a 	mov	r4,r2
   265cc:	00225600 	call	22560 <__muldf3>
   265d0:	180f883a 	mov	r7,r3
   265d4:	880b883a 	mov	r5,r17
   265d8:	100d883a 	mov	r6,r2
   265dc:	8009883a 	mov	r4,r16
   265e0:	00224ec0 	call	224ec <__adddf3>
   265e4:	1009883a 	mov	r4,r2
   265e8:	180b883a 	mov	r5,r3
   265ec:	1021883a 	mov	r16,r2
   265f0:	1823883a 	mov	r17,r3
   265f4:	0022d840 	call	22d84 <__fixdfsi>
   265f8:	000d883a 	mov	r6,zero
   265fc:	000f883a 	mov	r7,zero
   26600:	8009883a 	mov	r4,r16
   26604:	880b883a 	mov	r5,r17
   26608:	d8800d15 	stw	r2,52(sp)
   2660c:	0022c040 	call	22c04 <__ltdf2>
   26610:	10031716 	blt	r2,zero,27270 <_dtoa_r+0xe8c>
   26614:	d8c00d17 	ldw	r3,52(sp)
   26618:	00800584 	movi	r2,22
   2661c:	10c1482e 	bgeu	r2,r3,26b40 <_dtoa_r+0x75c>
   26620:	01000044 	movi	r4,1
   26624:	d9000c15 	stw	r4,48(sp)
   26628:	bd85c83a 	sub	r2,r23,r22
   2662c:	11bfffc4 	addi	r6,r2,-1
   26630:	30030b16 	blt	r6,zero,27260 <_dtoa_r+0xe7c>
   26634:	d9800a15 	stw	r6,40(sp)
   26638:	d8001115 	stw	zero,68(sp)
   2663c:	d8c00d17 	ldw	r3,52(sp)
   26640:	1802ff16 	blt	r3,zero,27240 <_dtoa_r+0xe5c>
   26644:	d9000a17 	ldw	r4,40(sp)
   26648:	d8c00915 	stw	r3,36(sp)
   2664c:	d8001015 	stw	zero,64(sp)
   26650:	20c9883a 	add	r4,r4,r3
   26654:	d9000a15 	stw	r4,40(sp)
   26658:	d9001717 	ldw	r4,92(sp)
   2665c:	00800244 	movi	r2,9
   26660:	11004636 	bltu	r2,r4,2677c <_dtoa_r+0x398>
   26664:	00800144 	movi	r2,5
   26668:	11020416 	blt	r2,r4,26e7c <_dtoa_r+0xa98>
   2666c:	04400044 	movi	r17,1
   26670:	d8c01717 	ldw	r3,92(sp)
   26674:	00800144 	movi	r2,5
   26678:	10c1ed36 	bltu	r2,r3,26e30 <_dtoa_r+0xa4c>
   2667c:	18c5883a 	add	r2,r3,r3
   26680:	1085883a 	add	r2,r2,r2
   26684:	00c000b4 	movhi	r3,2
   26688:	18d9a604 	addi	r3,r3,26264
   2668c:	10c5883a 	add	r2,r2,r3
   26690:	11000017 	ldw	r4,0(r2)
   26694:	2000683a 	jmp	r4
   26698:	00026784 	movi	zero,2462
   2669c:	00026784 	movi	zero,2462
   266a0:	00027184 	movi	zero,2502
   266a4:	0002715c 	xori	zero,zero,2501
   266a8:	000271a0 	cmpeqi	zero,zero,2502
   266ac:	000271ac 	andhi	zero,zero,2502
   266b0:	d9002717 	ldw	r4,156(sp)
   266b4:	0089c3c4 	movi	r2,9999
   266b8:	20800015 	stw	r2,0(r4)
   266bc:	a0001026 	beq	r20,zero,26700 <_dtoa_r+0x31c>
   266c0:	00c000f4 	movhi	r3,3
   266c4:	18faee04 	addi	r3,r3,-5192
   266c8:	d9802917 	ldw	r6,164(sp)
   266cc:	303f7926 	beq	r6,zero,264b4 <_dtoa_r+0xd0>
   266d0:	188000c7 	ldb	r2,3(r3)
   266d4:	190000c4 	addi	r4,r3,3
   266d8:	1000101e 	bne	r2,zero,2671c <_dtoa_r+0x338>
   266dc:	d8802917 	ldw	r2,164(sp)
   266e0:	11000015 	stw	r4,0(r2)
   266e4:	003f7306 	br	264b4 <_dtoa_r+0xd0>
   266e8:	00a00034 	movhi	r2,32768
   266ec:	10bfffc4 	addi	r2,r2,-1
   266f0:	00c00044 	movi	r3,1
   266f4:	88aa703a 	and	r21,r17,r2
   266f8:	90c00015 	stw	r3,0(r18)
   266fc:	003f5806 	br	26460 <_dtoa_r+0x7c>
   26700:	00800434 	movhi	r2,16
   26704:	10bfffc4 	addi	r2,r2,-1
   26708:	a884703a 	and	r2,r21,r2
   2670c:	103fec1e 	bne	r2,zero,266c0 <_dtoa_r+0x2dc>
   26710:	00c000f4 	movhi	r3,3
   26714:	18faeb04 	addi	r3,r3,-5204
   26718:	003feb06 	br	266c8 <_dtoa_r+0x2e4>
   2671c:	d8802917 	ldw	r2,164(sp)
   26720:	19000204 	addi	r4,r3,8
   26724:	11000015 	stw	r4,0(r2)
   26728:	003f6206 	br	264b4 <_dtoa_r+0xd0>
   2672c:	ddc00117 	ldw	r23,4(sp)
   26730:	d8800217 	ldw	r2,8(sp)
   26734:	01000804 	movi	r4,32
   26738:	b8c10c84 	addi	r3,r23,1074
   2673c:	18a3883a 	add	r17,r3,r2
   26740:	2441b80e 	bge	r4,r17,26e24 <_dtoa_r+0xa40>
   26744:	00c01004 	movi	r3,64
   26748:	1c47c83a 	sub	r3,r3,r17
   2674c:	88bff804 	addi	r2,r17,-32
   26750:	a8c6983a 	sll	r3,r21,r3
   26754:	a084d83a 	srl	r2,r20,r2
   26758:	1888b03a 	or	r4,r3,r2
   2675c:	002b8980 	call	2b898 <__floatunsidf>
   26760:	1011883a 	mov	r8,r2
   26764:	00bf8434 	movhi	r2,65040
   26768:	01000044 	movi	r4,1
   2676c:	10d3883a 	add	r9,r2,r3
   26770:	8dbef344 	addi	r22,r17,-1075
   26774:	d9000815 	stw	r4,32(sp)
   26778:	003f6f06 	br	26538 <_dtoa_r+0x154>
   2677c:	d8001715 	stw	zero,92(sp)
   26780:	04400044 	movi	r17,1
   26784:	00bfffc4 	movi	r2,-1
   26788:	00c00044 	movi	r3,1
   2678c:	d8800e15 	stw	r2,56(sp)
   26790:	d8002615 	stw	zero,152(sp)
   26794:	d8800f15 	stw	r2,60(sp)
   26798:	d8c00b15 	stw	r3,44(sp)
   2679c:	1021883a 	mov	r16,r2
   267a0:	d8801617 	ldw	r2,88(sp)
   267a4:	10001115 	stw	zero,68(r2)
   267a8:	d8801617 	ldw	r2,88(sp)
   267ac:	11401117 	ldw	r5,68(r2)
   267b0:	1009883a 	mov	r4,r2
   267b4:	002938c0 	call	2938c <_Balloc>
   267b8:	d8c01617 	ldw	r3,88(sp)
   267bc:	d8800515 	stw	r2,20(sp)
   267c0:	18801015 	stw	r2,64(r3)
   267c4:	00800384 	movi	r2,14
   267c8:	14006836 	bltu	r2,r16,2696c <_dtoa_r+0x588>
   267cc:	8805003a 	cmpeq	r2,r17,zero
   267d0:	1000661e 	bne	r2,zero,2696c <_dtoa_r+0x588>
   267d4:	d9000d17 	ldw	r4,52(sp)
   267d8:	0102300e 	bge	zero,r4,2709c <_dtoa_r+0xcb8>
   267dc:	208003cc 	andi	r2,r4,15
   267e0:	100490fa 	slli	r2,r2,3
   267e4:	2025d13a 	srai	r18,r4,4
   267e8:	00c000f4 	movhi	r3,3
   267ec:	18fb0004 	addi	r3,r3,-5120
   267f0:	10c5883a 	add	r2,r2,r3
   267f4:	90c0040c 	andi	r3,r18,16
   267f8:	14000017 	ldw	r16,0(r2)
   267fc:	14400117 	ldw	r17,4(r2)
   26800:	18036a1e 	bne	r3,zero,275ac <_dtoa_r+0x11c8>
   26804:	05800084 	movi	r22,2
   26808:	90001026 	beq	r18,zero,2684c <_dtoa_r+0x468>
   2680c:	04c000f4 	movhi	r19,3
   26810:	9cfb3204 	addi	r19,r19,-4920
   26814:	9080004c 	andi	r2,r18,1
   26818:	1005003a 	cmpeq	r2,r2,zero
   2681c:	1000081e 	bne	r2,zero,26840 <_dtoa_r+0x45c>
   26820:	99800017 	ldw	r6,0(r19)
   26824:	99c00117 	ldw	r7,4(r19)
   26828:	880b883a 	mov	r5,r17
   2682c:	8009883a 	mov	r4,r16
   26830:	00225600 	call	22560 <__muldf3>
   26834:	1021883a 	mov	r16,r2
   26838:	b5800044 	addi	r22,r22,1
   2683c:	1823883a 	mov	r17,r3
   26840:	9025d07a 	srai	r18,r18,1
   26844:	9cc00204 	addi	r19,r19,8
   26848:	903ff21e 	bne	r18,zero,26814 <_dtoa_r+0x430>
   2684c:	a80b883a 	mov	r5,r21
   26850:	a009883a 	mov	r4,r20
   26854:	880f883a 	mov	r7,r17
   26858:	800d883a 	mov	r6,r16
   2685c:	00229240 	call	22924 <__divdf3>
   26860:	1029883a 	mov	r20,r2
   26864:	182b883a 	mov	r21,r3
   26868:	d8c00c17 	ldw	r3,48(sp)
   2686c:	1805003a 	cmpeq	r2,r3,zero
   26870:	1000081e 	bne	r2,zero,26894 <_dtoa_r+0x4b0>
   26874:	0005883a 	mov	r2,zero
   26878:	00cffc34 	movhi	r3,16368
   2687c:	180f883a 	mov	r7,r3
   26880:	a009883a 	mov	r4,r20
   26884:	a80b883a 	mov	r5,r21
   26888:	100d883a 	mov	r6,r2
   2688c:	0022c040 	call	22c04 <__ltdf2>
   26890:	1003fe16 	blt	r2,zero,2788c <_dtoa_r+0x14a8>
   26894:	b009883a 	mov	r4,r22
   26898:	0022c8c0 	call	22c8c <__floatsidf>
   2689c:	180b883a 	mov	r5,r3
   268a0:	1009883a 	mov	r4,r2
   268a4:	a00d883a 	mov	r6,r20
   268a8:	a80f883a 	mov	r7,r21
   268ac:	00225600 	call	22560 <__muldf3>
   268b0:	0011883a 	mov	r8,zero
   268b4:	02500734 	movhi	r9,16412
   268b8:	1009883a 	mov	r4,r2
   268bc:	180b883a 	mov	r5,r3
   268c0:	480f883a 	mov	r7,r9
   268c4:	400d883a 	mov	r6,r8
   268c8:	00224ec0 	call	224ec <__adddf3>
   268cc:	d9000f17 	ldw	r4,60(sp)
   268d0:	102d883a 	mov	r22,r2
   268d4:	00bf3034 	movhi	r2,64704
   268d8:	18b9883a 	add	fp,r3,r2
   268dc:	e02f883a 	mov	r23,fp
   268e0:	20028f1e 	bne	r4,zero,27320 <_dtoa_r+0xf3c>
   268e4:	0005883a 	mov	r2,zero
   268e8:	00d00534 	movhi	r3,16404
   268ec:	a009883a 	mov	r4,r20
   268f0:	a80b883a 	mov	r5,r21
   268f4:	180f883a 	mov	r7,r3
   268f8:	100d883a 	mov	r6,r2
   268fc:	002246c0 	call	2246c <__subdf3>
   26900:	1009883a 	mov	r4,r2
   26904:	e00f883a 	mov	r7,fp
   26908:	180b883a 	mov	r5,r3
   2690c:	b00d883a 	mov	r6,r22
   26910:	1025883a 	mov	r18,r2
   26914:	1827883a 	mov	r19,r3
   26918:	0022b7c0 	call	22b7c <__gtdf2>
   2691c:	00834f16 	blt	zero,r2,2765c <_dtoa_r+0x1278>
   26920:	e0e0003c 	xorhi	r3,fp,32768
   26924:	9009883a 	mov	r4,r18
   26928:	980b883a 	mov	r5,r19
   2692c:	180f883a 	mov	r7,r3
   26930:	b00d883a 	mov	r6,r22
   26934:	0022c040 	call	22c04 <__ltdf2>
   26938:	1000080e 	bge	r2,zero,2695c <_dtoa_r+0x578>
   2693c:	0027883a 	mov	r19,zero
   26940:	0025883a 	mov	r18,zero
   26944:	d8802617 	ldw	r2,152(sp)
   26948:	df000517 	ldw	fp,20(sp)
   2694c:	d8000615 	stw	zero,24(sp)
   26950:	0084303a 	nor	r2,zero,r2
   26954:	d8800d15 	stw	r2,52(sp)
   26958:	00019b06 	br	26fc8 <_dtoa_r+0xbe4>
   2695c:	d9801217 	ldw	r6,72(sp)
   26960:	d8801317 	ldw	r2,76(sp)
   26964:	3029883a 	mov	r20,r6
   26968:	102b883a 	mov	r21,r2
   2696c:	d8c00217 	ldw	r3,8(sp)
   26970:	18008516 	blt	r3,zero,26b88 <_dtoa_r+0x7a4>
   26974:	d9000d17 	ldw	r4,52(sp)
   26978:	00800384 	movi	r2,14
   2697c:	11008216 	blt	r2,r4,26b88 <_dtoa_r+0x7a4>
   26980:	200490fa 	slli	r2,r4,3
   26984:	d9802617 	ldw	r6,152(sp)
   26988:	00c000f4 	movhi	r3,3
   2698c:	18fb0004 	addi	r3,r3,-5120
   26990:	10c5883a 	add	r2,r2,r3
   26994:	14800017 	ldw	r18,0(r2)
   26998:	14c00117 	ldw	r19,4(r2)
   2699c:	30031e16 	blt	r6,zero,27618 <_dtoa_r+0x1234>
   269a0:	d9000517 	ldw	r4,20(sp)
   269a4:	d8c00f17 	ldw	r3,60(sp)
   269a8:	a823883a 	mov	r17,r21
   269ac:	a021883a 	mov	r16,r20
   269b0:	192b883a 	add	r21,r3,r4
   269b4:	2039883a 	mov	fp,r4
   269b8:	00000f06 	br	269f8 <_dtoa_r+0x614>
   269bc:	0005883a 	mov	r2,zero
   269c0:	00d00934 	movhi	r3,16420
   269c4:	5009883a 	mov	r4,r10
   269c8:	580b883a 	mov	r5,r11
   269cc:	180f883a 	mov	r7,r3
   269d0:	100d883a 	mov	r6,r2
   269d4:	00225600 	call	22560 <__muldf3>
   269d8:	180b883a 	mov	r5,r3
   269dc:	000d883a 	mov	r6,zero
   269e0:	000f883a 	mov	r7,zero
   269e4:	1009883a 	mov	r4,r2
   269e8:	1021883a 	mov	r16,r2
   269ec:	1823883a 	mov	r17,r3
   269f0:	002b7880 	call	2b788 <__nedf2>
   269f4:	10004526 	beq	r2,zero,26b0c <_dtoa_r+0x728>
   269f8:	900d883a 	mov	r6,r18
   269fc:	980f883a 	mov	r7,r19
   26a00:	8009883a 	mov	r4,r16
   26a04:	880b883a 	mov	r5,r17
   26a08:	00229240 	call	22924 <__divdf3>
   26a0c:	180b883a 	mov	r5,r3
   26a10:	1009883a 	mov	r4,r2
   26a14:	0022d840 	call	22d84 <__fixdfsi>
   26a18:	1009883a 	mov	r4,r2
   26a1c:	1029883a 	mov	r20,r2
   26a20:	0022c8c0 	call	22c8c <__floatsidf>
   26a24:	180f883a 	mov	r7,r3
   26a28:	9009883a 	mov	r4,r18
   26a2c:	980b883a 	mov	r5,r19
   26a30:	100d883a 	mov	r6,r2
   26a34:	00225600 	call	22560 <__muldf3>
   26a38:	180f883a 	mov	r7,r3
   26a3c:	880b883a 	mov	r5,r17
   26a40:	8009883a 	mov	r4,r16
   26a44:	100d883a 	mov	r6,r2
   26a48:	002246c0 	call	2246c <__subdf3>
   26a4c:	1015883a 	mov	r10,r2
   26a50:	a0800c04 	addi	r2,r20,48
   26a54:	e0800005 	stb	r2,0(fp)
   26a58:	e7000044 	addi	fp,fp,1
   26a5c:	1817883a 	mov	r11,r3
   26a60:	e57fd61e 	bne	fp,r21,269bc <_dtoa_r+0x5d8>
   26a64:	500d883a 	mov	r6,r10
   26a68:	180f883a 	mov	r7,r3
   26a6c:	5009883a 	mov	r4,r10
   26a70:	180b883a 	mov	r5,r3
   26a74:	00224ec0 	call	224ec <__adddf3>
   26a78:	100d883a 	mov	r6,r2
   26a7c:	9009883a 	mov	r4,r18
   26a80:	980b883a 	mov	r5,r19
   26a84:	180f883a 	mov	r7,r3
   26a88:	1021883a 	mov	r16,r2
   26a8c:	1823883a 	mov	r17,r3
   26a90:	0022c040 	call	22c04 <__ltdf2>
   26a94:	10000816 	blt	r2,zero,26ab8 <_dtoa_r+0x6d4>
   26a98:	980b883a 	mov	r5,r19
   26a9c:	800d883a 	mov	r6,r16
   26aa0:	880f883a 	mov	r7,r17
   26aa4:	9009883a 	mov	r4,r18
   26aa8:	002b7000 	call	2b700 <__eqdf2>
   26aac:	1000171e 	bne	r2,zero,26b0c <_dtoa_r+0x728>
   26ab0:	a080004c 	andi	r2,r20,1
   26ab4:	10001526 	beq	r2,zero,26b0c <_dtoa_r+0x728>
   26ab8:	d8800d17 	ldw	r2,52(sp)
   26abc:	d8800415 	stw	r2,16(sp)
   26ac0:	e009883a 	mov	r4,fp
   26ac4:	213fffc4 	addi	r4,r4,-1
   26ac8:	20c00007 	ldb	r3,0(r4)
   26acc:	00800e44 	movi	r2,57
   26ad0:	1880081e 	bne	r3,r2,26af4 <_dtoa_r+0x710>
   26ad4:	d8800517 	ldw	r2,20(sp)
   26ad8:	113ffa1e 	bne	r2,r4,26ac4 <_dtoa_r+0x6e0>
   26adc:	d8c00417 	ldw	r3,16(sp)
   26ae0:	d9800517 	ldw	r6,20(sp)
   26ae4:	00800c04 	movi	r2,48
   26ae8:	18c00044 	addi	r3,r3,1
   26aec:	d8c00415 	stw	r3,16(sp)
   26af0:	30800005 	stb	r2,0(r6)
   26af4:	20800003 	ldbu	r2,0(r4)
   26af8:	d8c00417 	ldw	r3,16(sp)
   26afc:	27000044 	addi	fp,r4,1
   26b00:	10800044 	addi	r2,r2,1
   26b04:	d8c00d15 	stw	r3,52(sp)
   26b08:	20800005 	stb	r2,0(r4)
   26b0c:	d9001617 	ldw	r4,88(sp)
   26b10:	d9400717 	ldw	r5,28(sp)
   26b14:	0028e0c0 	call	28e0c <_Bfree>
   26b18:	e0000005 	stb	zero,0(fp)
   26b1c:	d9800d17 	ldw	r6,52(sp)
   26b20:	d8c02717 	ldw	r3,156(sp)
   26b24:	d9002917 	ldw	r4,164(sp)
   26b28:	30800044 	addi	r2,r6,1
   26b2c:	18800015 	stw	r2,0(r3)
   26b30:	20029c26 	beq	r4,zero,275a4 <_dtoa_r+0x11c0>
   26b34:	d8c00517 	ldw	r3,20(sp)
   26b38:	27000015 	stw	fp,0(r4)
   26b3c:	003e5d06 	br	264b4 <_dtoa_r+0xd0>
   26b40:	d9800d17 	ldw	r6,52(sp)
   26b44:	00c000f4 	movhi	r3,3
   26b48:	18fb0004 	addi	r3,r3,-5120
   26b4c:	d9001217 	ldw	r4,72(sp)
   26b50:	300490fa 	slli	r2,r6,3
   26b54:	d9401317 	ldw	r5,76(sp)
   26b58:	10c5883a 	add	r2,r2,r3
   26b5c:	12000017 	ldw	r8,0(r2)
   26b60:	12400117 	ldw	r9,4(r2)
   26b64:	400d883a 	mov	r6,r8
   26b68:	480f883a 	mov	r7,r9
   26b6c:	0022c040 	call	22c04 <__ltdf2>
   26b70:	1000030e 	bge	r2,zero,26b80 <_dtoa_r+0x79c>
   26b74:	d8800d17 	ldw	r2,52(sp)
   26b78:	10bfffc4 	addi	r2,r2,-1
   26b7c:	d8800d15 	stw	r2,52(sp)
   26b80:	d8000c15 	stw	zero,48(sp)
   26b84:	003ea806 	br	26628 <_dtoa_r+0x244>
   26b88:	d9000b17 	ldw	r4,44(sp)
   26b8c:	202cc03a 	cmpne	r22,r4,zero
   26b90:	b000c71e 	bne	r22,zero,26eb0 <_dtoa_r+0xacc>
   26b94:	dc001117 	ldw	r16,68(sp)
   26b98:	dc801017 	ldw	r18,64(sp)
   26b9c:	0027883a 	mov	r19,zero
   26ba0:	04000b0e 	bge	zero,r16,26bd0 <_dtoa_r+0x7ec>
   26ba4:	d8c00a17 	ldw	r3,40(sp)
   26ba8:	00c0090e 	bge	zero,r3,26bd0 <_dtoa_r+0x7ec>
   26bac:	8005883a 	mov	r2,r16
   26bb0:	1c011316 	blt	r3,r16,27000 <_dtoa_r+0xc1c>
   26bb4:	d9000a17 	ldw	r4,40(sp)
   26bb8:	d9801117 	ldw	r6,68(sp)
   26bbc:	80a1c83a 	sub	r16,r16,r2
   26bc0:	2089c83a 	sub	r4,r4,r2
   26bc4:	308dc83a 	sub	r6,r6,r2
   26bc8:	d9000a15 	stw	r4,40(sp)
   26bcc:	d9801115 	stw	r6,68(sp)
   26bd0:	d8801017 	ldw	r2,64(sp)
   26bd4:	0080150e 	bge	zero,r2,26c2c <_dtoa_r+0x848>
   26bd8:	d8c00b17 	ldw	r3,44(sp)
   26bdc:	1805003a 	cmpeq	r2,r3,zero
   26be0:	1001c91e 	bne	r2,zero,27308 <_dtoa_r+0xf24>
   26be4:	04800e0e 	bge	zero,r18,26c20 <_dtoa_r+0x83c>
   26be8:	d9001617 	ldw	r4,88(sp)
   26bec:	980b883a 	mov	r5,r19
   26bf0:	900d883a 	mov	r6,r18
   26bf4:	0029bc00 	call	29bc0 <__pow5mult>
   26bf8:	d9001617 	ldw	r4,88(sp)
   26bfc:	d9800717 	ldw	r6,28(sp)
   26c00:	100b883a 	mov	r5,r2
   26c04:	1027883a 	mov	r19,r2
   26c08:	002989c0 	call	2989c <__multiply>
   26c0c:	d9001617 	ldw	r4,88(sp)
   26c10:	d9400717 	ldw	r5,28(sp)
   26c14:	1023883a 	mov	r17,r2
   26c18:	0028e0c0 	call	28e0c <_Bfree>
   26c1c:	dc400715 	stw	r17,28(sp)
   26c20:	d9001017 	ldw	r4,64(sp)
   26c24:	248dc83a 	sub	r6,r4,r18
   26c28:	30010e1e 	bne	r6,zero,27064 <_dtoa_r+0xc80>
   26c2c:	d9001617 	ldw	r4,88(sp)
   26c30:	04400044 	movi	r17,1
   26c34:	880b883a 	mov	r5,r17
   26c38:	0029a840 	call	29a84 <__i2b>
   26c3c:	d9800917 	ldw	r6,36(sp)
   26c40:	1025883a 	mov	r18,r2
   26c44:	0180040e 	bge	zero,r6,26c58 <_dtoa_r+0x874>
   26c48:	d9001617 	ldw	r4,88(sp)
   26c4c:	100b883a 	mov	r5,r2
   26c50:	0029bc00 	call	29bc0 <__pow5mult>
   26c54:	1025883a 	mov	r18,r2
   26c58:	d8801717 	ldw	r2,92(sp)
   26c5c:	8880f30e 	bge	r17,r2,2702c <_dtoa_r+0xc48>
   26c60:	0023883a 	mov	r17,zero
   26c64:	d9800917 	ldw	r6,36(sp)
   26c68:	30019e1e 	bne	r6,zero,272e4 <_dtoa_r+0xf00>
   26c6c:	00c00044 	movi	r3,1
   26c70:	d9000a17 	ldw	r4,40(sp)
   26c74:	20c5883a 	add	r2,r4,r3
   26c78:	10c007cc 	andi	r3,r2,31
   26c7c:	1800841e 	bne	r3,zero,26e90 <_dtoa_r+0xaac>
   26c80:	00800704 	movi	r2,28
   26c84:	d9000a17 	ldw	r4,40(sp)
   26c88:	d9801117 	ldw	r6,68(sp)
   26c8c:	80a1883a 	add	r16,r16,r2
   26c90:	2089883a 	add	r4,r4,r2
   26c94:	308d883a 	add	r6,r6,r2
   26c98:	d9000a15 	stw	r4,40(sp)
   26c9c:	d9801115 	stw	r6,68(sp)
   26ca0:	d8801117 	ldw	r2,68(sp)
   26ca4:	0080050e 	bge	zero,r2,26cbc <_dtoa_r+0x8d8>
   26ca8:	d9400717 	ldw	r5,28(sp)
   26cac:	d9001617 	ldw	r4,88(sp)
   26cb0:	100d883a 	mov	r6,r2
   26cb4:	00297500 	call	29750 <__lshift>
   26cb8:	d8800715 	stw	r2,28(sp)
   26cbc:	d8c00a17 	ldw	r3,40(sp)
   26cc0:	00c0050e 	bge	zero,r3,26cd8 <_dtoa_r+0x8f4>
   26cc4:	d9001617 	ldw	r4,88(sp)
   26cc8:	900b883a 	mov	r5,r18
   26ccc:	180d883a 	mov	r6,r3
   26cd0:	00297500 	call	29750 <__lshift>
   26cd4:	1025883a 	mov	r18,r2
   26cd8:	d9000c17 	ldw	r4,48(sp)
   26cdc:	2005003a 	cmpeq	r2,r4,zero
   26ce0:	10016f26 	beq	r2,zero,272a0 <_dtoa_r+0xebc>
   26ce4:	d9000f17 	ldw	r4,60(sp)
   26ce8:	0102170e 	bge	zero,r4,27548 <_dtoa_r+0x1164>
   26cec:	d9800b17 	ldw	r6,44(sp)
   26cf0:	3005003a 	cmpeq	r2,r6,zero
   26cf4:	1000881e 	bne	r2,zero,26f18 <_dtoa_r+0xb34>
   26cf8:	0400050e 	bge	zero,r16,26d10 <_dtoa_r+0x92c>
   26cfc:	d9001617 	ldw	r4,88(sp)
   26d00:	980b883a 	mov	r5,r19
   26d04:	800d883a 	mov	r6,r16
   26d08:	00297500 	call	29750 <__lshift>
   26d0c:	1027883a 	mov	r19,r2
   26d10:	8804c03a 	cmpne	r2,r17,zero
   26d14:	1002541e 	bne	r2,zero,27668 <_dtoa_r+0x1284>
   26d18:	980b883a 	mov	r5,r19
   26d1c:	dd800517 	ldw	r22,20(sp)
   26d20:	dcc00615 	stw	r19,24(sp)
   26d24:	a700004c 	andi	fp,r20,1
   26d28:	2827883a 	mov	r19,r5
   26d2c:	d9000717 	ldw	r4,28(sp)
   26d30:	900b883a 	mov	r5,r18
   26d34:	00261cc0 	call	261cc <quorem>
   26d38:	d9000717 	ldw	r4,28(sp)
   26d3c:	d9400617 	ldw	r5,24(sp)
   26d40:	1023883a 	mov	r17,r2
   26d44:	8dc00c04 	addi	r23,r17,48
   26d48:	0028f680 	call	28f68 <__mcmp>
   26d4c:	d9001617 	ldw	r4,88(sp)
   26d50:	900b883a 	mov	r5,r18
   26d54:	980d883a 	mov	r6,r19
   26d58:	1029883a 	mov	r20,r2
   26d5c:	00295c40 	call	295c4 <__mdiff>
   26d60:	102b883a 	mov	r21,r2
   26d64:	10800317 	ldw	r2,12(r2)
   26d68:	1001281e 	bne	r2,zero,2720c <_dtoa_r+0xe28>
   26d6c:	d9000717 	ldw	r4,28(sp)
   26d70:	a80b883a 	mov	r5,r21
   26d74:	0028f680 	call	28f68 <__mcmp>
   26d78:	d9001617 	ldw	r4,88(sp)
   26d7c:	1021883a 	mov	r16,r2
   26d80:	a80b883a 	mov	r5,r21
   26d84:	0028e0c0 	call	28e0c <_Bfree>
   26d88:	8000041e 	bne	r16,zero,26d9c <_dtoa_r+0x9b8>
   26d8c:	d8801717 	ldw	r2,92(sp)
   26d90:	1000021e 	bne	r2,zero,26d9c <_dtoa_r+0x9b8>
   26d94:	e004c03a 	cmpne	r2,fp,zero
   26d98:	10011726 	beq	r2,zero,271f8 <_dtoa_r+0xe14>
   26d9c:	a0010616 	blt	r20,zero,271b8 <_dtoa_r+0xdd4>
   26da0:	a000041e 	bne	r20,zero,26db4 <_dtoa_r+0x9d0>
   26da4:	d8c01717 	ldw	r3,92(sp)
   26da8:	1800021e 	bne	r3,zero,26db4 <_dtoa_r+0x9d0>
   26dac:	e004c03a 	cmpne	r2,fp,zero
   26db0:	10010126 	beq	r2,zero,271b8 <_dtoa_r+0xdd4>
   26db4:	04023d16 	blt	zero,r16,276ac <_dtoa_r+0x12c8>
   26db8:	b5c00005 	stb	r23,0(r22)
   26dbc:	d9800517 	ldw	r6,20(sp)
   26dc0:	d9000f17 	ldw	r4,60(sp)
   26dc4:	b5800044 	addi	r22,r22,1
   26dc8:	3105883a 	add	r2,r6,r4
   26dcc:	b0806526 	beq	r22,r2,26f64 <_dtoa_r+0xb80>
   26dd0:	d9400717 	ldw	r5,28(sp)
   26dd4:	d9001617 	ldw	r4,88(sp)
   26dd8:	01800284 	movi	r6,10
   26ddc:	000f883a 	mov	r7,zero
   26de0:	0029ac00 	call	29ac0 <__multadd>
   26de4:	d8800715 	stw	r2,28(sp)
   26de8:	d8800617 	ldw	r2,24(sp)
   26dec:	14c10c26 	beq	r2,r19,27220 <_dtoa_r+0xe3c>
   26df0:	d9400617 	ldw	r5,24(sp)
   26df4:	d9001617 	ldw	r4,88(sp)
   26df8:	01800284 	movi	r6,10
   26dfc:	000f883a 	mov	r7,zero
   26e00:	0029ac00 	call	29ac0 <__multadd>
   26e04:	d9001617 	ldw	r4,88(sp)
   26e08:	980b883a 	mov	r5,r19
   26e0c:	01800284 	movi	r6,10
   26e10:	000f883a 	mov	r7,zero
   26e14:	d8800615 	stw	r2,24(sp)
   26e18:	0029ac00 	call	29ac0 <__multadd>
   26e1c:	1027883a 	mov	r19,r2
   26e20:	003fc206 	br	26d2c <_dtoa_r+0x948>
   26e24:	2445c83a 	sub	r2,r4,r17
   26e28:	a088983a 	sll	r4,r20,r2
   26e2c:	003e4b06 	br	2675c <_dtoa_r+0x378>
   26e30:	01bfffc4 	movi	r6,-1
   26e34:	00800044 	movi	r2,1
   26e38:	d9800e15 	stw	r6,56(sp)
   26e3c:	d9800f15 	stw	r6,60(sp)
   26e40:	d8800b15 	stw	r2,44(sp)
   26e44:	d8c01617 	ldw	r3,88(sp)
   26e48:	008005c4 	movi	r2,23
   26e4c:	18001115 	stw	zero,68(r3)
   26e50:	1580082e 	bgeu	r2,r22,26e74 <_dtoa_r+0xa90>
   26e54:	00c00104 	movi	r3,4
   26e58:	0009883a 	mov	r4,zero
   26e5c:	18c7883a 	add	r3,r3,r3
   26e60:	18800504 	addi	r2,r3,20
   26e64:	21000044 	addi	r4,r4,1
   26e68:	b0bffc2e 	bgeu	r22,r2,26e5c <_dtoa_r+0xa78>
   26e6c:	d9801617 	ldw	r6,88(sp)
   26e70:	31001115 	stw	r4,68(r6)
   26e74:	dc000f17 	ldw	r16,60(sp)
   26e78:	003e4b06 	br	267a8 <_dtoa_r+0x3c4>
   26e7c:	d9801717 	ldw	r6,92(sp)
   26e80:	0023883a 	mov	r17,zero
   26e84:	31bfff04 	addi	r6,r6,-4
   26e88:	d9801715 	stw	r6,92(sp)
   26e8c:	003df806 	br	26670 <_dtoa_r+0x28c>
   26e90:	00800804 	movi	r2,32
   26e94:	10c9c83a 	sub	r4,r2,r3
   26e98:	00c00104 	movi	r3,4
   26e9c:	19005a16 	blt	r3,r4,27008 <_dtoa_r+0xc24>
   26ea0:	008000c4 	movi	r2,3
   26ea4:	113f7e16 	blt	r2,r4,26ca0 <_dtoa_r+0x8bc>
   26ea8:	20800704 	addi	r2,r4,28
   26eac:	003f7506 	br	26c84 <_dtoa_r+0x8a0>
   26eb0:	d9801717 	ldw	r6,92(sp)
   26eb4:	00800044 	movi	r2,1
   26eb8:	1180a10e 	bge	r2,r6,27140 <_dtoa_r+0xd5c>
   26ebc:	d9800f17 	ldw	r6,60(sp)
   26ec0:	d8c01017 	ldw	r3,64(sp)
   26ec4:	30bfffc4 	addi	r2,r6,-1
   26ec8:	1881c616 	blt	r3,r2,275e4 <_dtoa_r+0x1200>
   26ecc:	18a5c83a 	sub	r18,r3,r2
   26ed0:	d8800f17 	ldw	r2,60(sp)
   26ed4:	10026216 	blt	r2,zero,27860 <_dtoa_r+0x147c>
   26ed8:	dc001117 	ldw	r16,68(sp)
   26edc:	1007883a 	mov	r3,r2
   26ee0:	d9800a17 	ldw	r6,40(sp)
   26ee4:	d8801117 	ldw	r2,68(sp)
   26ee8:	d9001617 	ldw	r4,88(sp)
   26eec:	30cd883a 	add	r6,r6,r3
   26ef0:	10c5883a 	add	r2,r2,r3
   26ef4:	01400044 	movi	r5,1
   26ef8:	d9800a15 	stw	r6,40(sp)
   26efc:	d8801115 	stw	r2,68(sp)
   26f00:	0029a840 	call	29a84 <__i2b>
   26f04:	1027883a 	mov	r19,r2
   26f08:	003f2506 	br	26ba0 <_dtoa_r+0x7bc>
   26f0c:	00c000f4 	movhi	r3,3
   26f10:	18fae204 	addi	r3,r3,-5240
   26f14:	003d6706 	br	264b4 <_dtoa_r+0xd0>
   26f18:	dd800517 	ldw	r22,20(sp)
   26f1c:	04000044 	movi	r16,1
   26f20:	00000706 	br	26f40 <_dtoa_r+0xb5c>
   26f24:	d9400717 	ldw	r5,28(sp)
   26f28:	d9001617 	ldw	r4,88(sp)
   26f2c:	01800284 	movi	r6,10
   26f30:	000f883a 	mov	r7,zero
   26f34:	0029ac00 	call	29ac0 <__multadd>
   26f38:	d8800715 	stw	r2,28(sp)
   26f3c:	84000044 	addi	r16,r16,1
   26f40:	d9000717 	ldw	r4,28(sp)
   26f44:	900b883a 	mov	r5,r18
   26f48:	00261cc0 	call	261cc <quorem>
   26f4c:	15c00c04 	addi	r23,r2,48
   26f50:	b5c00005 	stb	r23,0(r22)
   26f54:	d8c00f17 	ldw	r3,60(sp)
   26f58:	b5800044 	addi	r22,r22,1
   26f5c:	80fff116 	blt	r16,r3,26f24 <_dtoa_r+0xb40>
   26f60:	d8000615 	stw	zero,24(sp)
   26f64:	d9400717 	ldw	r5,28(sp)
   26f68:	d9001617 	ldw	r4,88(sp)
   26f6c:	01800044 	movi	r6,1
   26f70:	00297500 	call	29750 <__lshift>
   26f74:	1009883a 	mov	r4,r2
   26f78:	900b883a 	mov	r5,r18
   26f7c:	d8800715 	stw	r2,28(sp)
   26f80:	0028f680 	call	28f68 <__mcmp>
   26f84:	00803c0e 	bge	zero,r2,27078 <_dtoa_r+0xc94>
   26f88:	b009883a 	mov	r4,r22
   26f8c:	213fffc4 	addi	r4,r4,-1
   26f90:	21400003 	ldbu	r5,0(r4)
   26f94:	00800e44 	movi	r2,57
   26f98:	28c03fcc 	andi	r3,r5,255
   26f9c:	18c0201c 	xori	r3,r3,128
   26fa0:	18ffe004 	addi	r3,r3,-128
   26fa4:	1881981e 	bne	r3,r2,27608 <_dtoa_r+0x1224>
   26fa8:	d9800517 	ldw	r6,20(sp)
   26fac:	21bff71e 	bne	r4,r6,26f8c <_dtoa_r+0xba8>
   26fb0:	d8800d17 	ldw	r2,52(sp)
   26fb4:	37000044 	addi	fp,r6,1
   26fb8:	10800044 	addi	r2,r2,1
   26fbc:	d8800d15 	stw	r2,52(sp)
   26fc0:	00800c44 	movi	r2,49
   26fc4:	30800005 	stb	r2,0(r6)
   26fc8:	d9001617 	ldw	r4,88(sp)
   26fcc:	900b883a 	mov	r5,r18
   26fd0:	0028e0c0 	call	28e0c <_Bfree>
   26fd4:	983ecd26 	beq	r19,zero,26b0c <_dtoa_r+0x728>
   26fd8:	d8c00617 	ldw	r3,24(sp)
   26fdc:	18000426 	beq	r3,zero,26ff0 <_dtoa_r+0xc0c>
   26fe0:	1cc00326 	beq	r3,r19,26ff0 <_dtoa_r+0xc0c>
   26fe4:	d9001617 	ldw	r4,88(sp)
   26fe8:	180b883a 	mov	r5,r3
   26fec:	0028e0c0 	call	28e0c <_Bfree>
   26ff0:	d9001617 	ldw	r4,88(sp)
   26ff4:	980b883a 	mov	r5,r19
   26ff8:	0028e0c0 	call	28e0c <_Bfree>
   26ffc:	003ec306 	br	26b0c <_dtoa_r+0x728>
   27000:	1805883a 	mov	r2,r3
   27004:	003eeb06 	br	26bb4 <_dtoa_r+0x7d0>
   27008:	d9800a17 	ldw	r6,40(sp)
   2700c:	d8c01117 	ldw	r3,68(sp)
   27010:	20bfff04 	addi	r2,r4,-4
   27014:	308d883a 	add	r6,r6,r2
   27018:	1887883a 	add	r3,r3,r2
   2701c:	80a1883a 	add	r16,r16,r2
   27020:	d9800a15 	stw	r6,40(sp)
   27024:	d8c01115 	stw	r3,68(sp)
   27028:	003f1d06 	br	26ca0 <_dtoa_r+0x8bc>
   2702c:	a03f0c1e 	bne	r20,zero,26c60 <_dtoa_r+0x87c>
   27030:	00800434 	movhi	r2,16
   27034:	10bfffc4 	addi	r2,r2,-1
   27038:	a884703a 	and	r2,r21,r2
   2703c:	103f081e 	bne	r2,zero,26c60 <_dtoa_r+0x87c>
   27040:	a89ffc2c 	andhi	r2,r21,32752
   27044:	103f0626 	beq	r2,zero,26c60 <_dtoa_r+0x87c>
   27048:	d8c01117 	ldw	r3,68(sp)
   2704c:	d9000a17 	ldw	r4,40(sp)
   27050:	18c00044 	addi	r3,r3,1
   27054:	21000044 	addi	r4,r4,1
   27058:	d8c01115 	stw	r3,68(sp)
   2705c:	d9000a15 	stw	r4,40(sp)
   27060:	003f0006 	br	26c64 <_dtoa_r+0x880>
   27064:	d9400717 	ldw	r5,28(sp)
   27068:	d9001617 	ldw	r4,88(sp)
   2706c:	0029bc00 	call	29bc0 <__pow5mult>
   27070:	d8800715 	stw	r2,28(sp)
   27074:	003eed06 	br	26c2c <_dtoa_r+0x848>
   27078:	1000021e 	bne	r2,zero,27084 <_dtoa_r+0xca0>
   2707c:	b880004c 	andi	r2,r23,1
   27080:	103fc11e 	bne	r2,zero,26f88 <_dtoa_r+0xba4>
   27084:	b5bfffc4 	addi	r22,r22,-1
   27088:	b0c00007 	ldb	r3,0(r22)
   2708c:	00800c04 	movi	r2,48
   27090:	18bffc26 	beq	r3,r2,27084 <_dtoa_r+0xca0>
   27094:	b7000044 	addi	fp,r22,1
   27098:	003fcb06 	br	26fc8 <_dtoa_r+0xbe4>
   2709c:	d9800d17 	ldw	r6,52(sp)
   270a0:	018fc83a 	sub	r7,zero,r6
   270a4:	3801f726 	beq	r7,zero,27884 <_dtoa_r+0x14a0>
   270a8:	398003cc 	andi	r6,r7,15
   270ac:	300c90fa 	slli	r6,r6,3
   270b0:	014000f4 	movhi	r5,3
   270b4:	297b0004 	addi	r5,r5,-5120
   270b8:	d9001217 	ldw	r4,72(sp)
   270bc:	314d883a 	add	r6,r6,r5
   270c0:	30c00117 	ldw	r3,4(r6)
   270c4:	30800017 	ldw	r2,0(r6)
   270c8:	d9401317 	ldw	r5,76(sp)
   270cc:	3821d13a 	srai	r16,r7,4
   270d0:	100d883a 	mov	r6,r2
   270d4:	180f883a 	mov	r7,r3
   270d8:	00225600 	call	22560 <__muldf3>
   270dc:	1011883a 	mov	r8,r2
   270e0:	1813883a 	mov	r9,r3
   270e4:	1029883a 	mov	r20,r2
   270e8:	182b883a 	mov	r21,r3
   270ec:	8001e526 	beq	r16,zero,27884 <_dtoa_r+0x14a0>
   270f0:	05800084 	movi	r22,2
   270f4:	044000f4 	movhi	r17,3
   270f8:	8c7b3204 	addi	r17,r17,-4920
   270fc:	8080004c 	andi	r2,r16,1
   27100:	1005003a 	cmpeq	r2,r2,zero
   27104:	1000081e 	bne	r2,zero,27128 <_dtoa_r+0xd44>
   27108:	89800017 	ldw	r6,0(r17)
   2710c:	89c00117 	ldw	r7,4(r17)
   27110:	480b883a 	mov	r5,r9
   27114:	4009883a 	mov	r4,r8
   27118:	00225600 	call	22560 <__muldf3>
   2711c:	1011883a 	mov	r8,r2
   27120:	b5800044 	addi	r22,r22,1
   27124:	1813883a 	mov	r9,r3
   27128:	8021d07a 	srai	r16,r16,1
   2712c:	8c400204 	addi	r17,r17,8
   27130:	803ff21e 	bne	r16,zero,270fc <_dtoa_r+0xd18>
   27134:	4029883a 	mov	r20,r8
   27138:	482b883a 	mov	r21,r9
   2713c:	003dca06 	br	26868 <_dtoa_r+0x484>
   27140:	d9000817 	ldw	r4,32(sp)
   27144:	2005003a 	cmpeq	r2,r4,zero
   27148:	1001f61e 	bne	r2,zero,27924 <_dtoa_r+0x1540>
   2714c:	dc001117 	ldw	r16,68(sp)
   27150:	dc801017 	ldw	r18,64(sp)
   27154:	18c10cc4 	addi	r3,r3,1075
   27158:	003f6106 	br	26ee0 <_dtoa_r+0xafc>
   2715c:	d8000b15 	stw	zero,44(sp)
   27160:	d9802617 	ldw	r6,152(sp)
   27164:	d8c00d17 	ldw	r3,52(sp)
   27168:	30800044 	addi	r2,r6,1
   2716c:	18ad883a 	add	r22,r3,r2
   27170:	b13fffc4 	addi	r4,r22,-1
   27174:	d9000e15 	stw	r4,56(sp)
   27178:	0581f60e 	bge	zero,r22,27954 <_dtoa_r+0x1570>
   2717c:	dd800f15 	stw	r22,60(sp)
   27180:	003f3006 	br	26e44 <_dtoa_r+0xa60>
   27184:	d8000b15 	stw	zero,44(sp)
   27188:	d9002617 	ldw	r4,152(sp)
   2718c:	0101eb0e 	bge	zero,r4,2793c <_dtoa_r+0x1558>
   27190:	202d883a 	mov	r22,r4
   27194:	d9000e15 	stw	r4,56(sp)
   27198:	d9000f15 	stw	r4,60(sp)
   2719c:	003f2906 	br	26e44 <_dtoa_r+0xa60>
   271a0:	01800044 	movi	r6,1
   271a4:	d9800b15 	stw	r6,44(sp)
   271a8:	003ff706 	br	27188 <_dtoa_r+0xda4>
   271ac:	01000044 	movi	r4,1
   271b0:	d9000b15 	stw	r4,44(sp)
   271b4:	003fea06 	br	27160 <_dtoa_r+0xd7c>
   271b8:	04000c0e 	bge	zero,r16,271ec <_dtoa_r+0xe08>
   271bc:	d9400717 	ldw	r5,28(sp)
   271c0:	d9001617 	ldw	r4,88(sp)
   271c4:	01800044 	movi	r6,1
   271c8:	00297500 	call	29750 <__lshift>
   271cc:	1009883a 	mov	r4,r2
   271d0:	900b883a 	mov	r5,r18
   271d4:	d8800715 	stw	r2,28(sp)
   271d8:	0028f680 	call	28f68 <__mcmp>
   271dc:	0081e00e 	bge	zero,r2,27960 <_dtoa_r+0x157c>
   271e0:	bdc00044 	addi	r23,r23,1
   271e4:	00800e84 	movi	r2,58
   271e8:	b881a226 	beq	r23,r2,27874 <_dtoa_r+0x1490>
   271ec:	b7000044 	addi	fp,r22,1
   271f0:	b5c00005 	stb	r23,0(r22)
   271f4:	003f7406 	br	26fc8 <_dtoa_r+0xbe4>
   271f8:	00800e44 	movi	r2,57
   271fc:	b8819d26 	beq	r23,r2,27874 <_dtoa_r+0x1490>
   27200:	053ffa0e 	bge	zero,r20,271ec <_dtoa_r+0xe08>
   27204:	8dc00c44 	addi	r23,r17,49
   27208:	003ff806 	br	271ec <_dtoa_r+0xe08>
   2720c:	d9001617 	ldw	r4,88(sp)
   27210:	a80b883a 	mov	r5,r21
   27214:	04000044 	movi	r16,1
   27218:	0028e0c0 	call	28e0c <_Bfree>
   2721c:	003edf06 	br	26d9c <_dtoa_r+0x9b8>
   27220:	d9001617 	ldw	r4,88(sp)
   27224:	980b883a 	mov	r5,r19
   27228:	01800284 	movi	r6,10
   2722c:	000f883a 	mov	r7,zero
   27230:	0029ac00 	call	29ac0 <__multadd>
   27234:	1027883a 	mov	r19,r2
   27238:	d8800615 	stw	r2,24(sp)
   2723c:	003ebb06 	br	26d2c <_dtoa_r+0x948>
   27240:	d9801117 	ldw	r6,68(sp)
   27244:	d8800d17 	ldw	r2,52(sp)
   27248:	d8000915 	stw	zero,36(sp)
   2724c:	308dc83a 	sub	r6,r6,r2
   27250:	0087c83a 	sub	r3,zero,r2
   27254:	d9801115 	stw	r6,68(sp)
   27258:	d8c01015 	stw	r3,64(sp)
   2725c:	003cfe06 	br	26658 <_dtoa_r+0x274>
   27260:	018dc83a 	sub	r6,zero,r6
   27264:	d9801115 	stw	r6,68(sp)
   27268:	d8000a15 	stw	zero,40(sp)
   2726c:	003cf306 	br	2663c <_dtoa_r+0x258>
   27270:	d9000d17 	ldw	r4,52(sp)
   27274:	0022c8c0 	call	22c8c <__floatsidf>
   27278:	880b883a 	mov	r5,r17
   2727c:	8009883a 	mov	r4,r16
   27280:	180f883a 	mov	r7,r3
   27284:	100d883a 	mov	r6,r2
   27288:	002b7880 	call	2b788 <__nedf2>
   2728c:	103ce126 	beq	r2,zero,26614 <_dtoa_r+0x230>
   27290:	d9800d17 	ldw	r6,52(sp)
   27294:	31bfffc4 	addi	r6,r6,-1
   27298:	d9800d15 	stw	r6,52(sp)
   2729c:	003cdd06 	br	26614 <_dtoa_r+0x230>
   272a0:	d9000717 	ldw	r4,28(sp)
   272a4:	900b883a 	mov	r5,r18
   272a8:	0028f680 	call	28f68 <__mcmp>
   272ac:	103e8d0e 	bge	r2,zero,26ce4 <_dtoa_r+0x900>
   272b0:	d9400717 	ldw	r5,28(sp)
   272b4:	d9001617 	ldw	r4,88(sp)
   272b8:	01800284 	movi	r6,10
   272bc:	000f883a 	mov	r7,zero
   272c0:	0029ac00 	call	29ac0 <__multadd>
   272c4:	d9800d17 	ldw	r6,52(sp)
   272c8:	d8800715 	stw	r2,28(sp)
   272cc:	31bfffc4 	addi	r6,r6,-1
   272d0:	d9800d15 	stw	r6,52(sp)
   272d4:	b001a71e 	bne	r22,zero,27974 <_dtoa_r+0x1590>
   272d8:	d8800e17 	ldw	r2,56(sp)
   272dc:	d8800f15 	stw	r2,60(sp)
   272e0:	003e8006 	br	26ce4 <_dtoa_r+0x900>
   272e4:	90800417 	ldw	r2,16(r18)
   272e8:	1085883a 	add	r2,r2,r2
   272ec:	1085883a 	add	r2,r2,r2
   272f0:	1485883a 	add	r2,r2,r18
   272f4:	11000417 	ldw	r4,16(r2)
   272f8:	0028e340 	call	28e34 <__hi0bits>
   272fc:	00c00804 	movi	r3,32
   27300:	1887c83a 	sub	r3,r3,r2
   27304:	003e5a06 	br	26c70 <_dtoa_r+0x88c>
   27308:	d9400717 	ldw	r5,28(sp)
   2730c:	d9801017 	ldw	r6,64(sp)
   27310:	d9001617 	ldw	r4,88(sp)
   27314:	0029bc00 	call	29bc0 <__pow5mult>
   27318:	d8800715 	stw	r2,28(sp)
   2731c:	003e4306 	br	26c2c <_dtoa_r+0x848>
   27320:	d9800f17 	ldw	r6,60(sp)
   27324:	d8800d17 	ldw	r2,52(sp)
   27328:	d9800315 	stw	r6,12(sp)
   2732c:	d8800415 	stw	r2,16(sp)
   27330:	d8c00b17 	ldw	r3,44(sp)
   27334:	1805003a 	cmpeq	r2,r3,zero
   27338:	1000e21e 	bne	r2,zero,276c4 <_dtoa_r+0x12e0>
   2733c:	d9000317 	ldw	r4,12(sp)
   27340:	0005883a 	mov	r2,zero
   27344:	00cff834 	movhi	r3,16352
   27348:	200c90fa 	slli	r6,r4,3
   2734c:	010000f4 	movhi	r4,3
   27350:	213b0004 	addi	r4,r4,-5120
   27354:	180b883a 	mov	r5,r3
   27358:	310d883a 	add	r6,r6,r4
   2735c:	327fff17 	ldw	r9,-4(r6)
   27360:	323ffe17 	ldw	r8,-8(r6)
   27364:	1009883a 	mov	r4,r2
   27368:	480f883a 	mov	r7,r9
   2736c:	400d883a 	mov	r6,r8
   27370:	00229240 	call	22924 <__divdf3>
   27374:	180b883a 	mov	r5,r3
   27378:	b00d883a 	mov	r6,r22
   2737c:	b80f883a 	mov	r7,r23
   27380:	1009883a 	mov	r4,r2
   27384:	002246c0 	call	2246c <__subdf3>
   27388:	a80b883a 	mov	r5,r21
   2738c:	a009883a 	mov	r4,r20
   27390:	d8c01915 	stw	r3,100(sp)
   27394:	d8801815 	stw	r2,96(sp)
   27398:	0022d840 	call	22d84 <__fixdfsi>
   2739c:	1009883a 	mov	r4,r2
   273a0:	1027883a 	mov	r19,r2
   273a4:	0022c8c0 	call	22c8c <__floatsidf>
   273a8:	a80b883a 	mov	r5,r21
   273ac:	a009883a 	mov	r4,r20
   273b0:	180f883a 	mov	r7,r3
   273b4:	100d883a 	mov	r6,r2
   273b8:	002246c0 	call	2246c <__subdf3>
   273bc:	d9801817 	ldw	r6,96(sp)
   273c0:	1823883a 	mov	r17,r3
   273c4:	d8801415 	stw	r2,80(sp)
   273c8:	302d883a 	mov	r22,r6
   273cc:	d9800517 	ldw	r6,20(sp)
   273d0:	9cc00c04 	addi	r19,r19,48
   273d4:	dc401515 	stw	r17,84(sp)
   273d8:	d8c01917 	ldw	r3,100(sp)
   273dc:	34c00005 	stb	r19,0(r6)
   273e0:	d8800517 	ldw	r2,20(sp)
   273e4:	d9401917 	ldw	r5,100(sp)
   273e8:	d9801417 	ldw	r6,80(sp)
   273ec:	b009883a 	mov	r4,r22
   273f0:	880f883a 	mov	r7,r17
   273f4:	182f883a 	mov	r23,r3
   273f8:	17000044 	addi	fp,r2,1
   273fc:	0022b7c0 	call	22b7c <__gtdf2>
   27400:	00804e16 	blt	zero,r2,2753c <_dtoa_r+0x1158>
   27404:	d9801417 	ldw	r6,80(sp)
   27408:	0005883a 	mov	r2,zero
   2740c:	00cffc34 	movhi	r3,16368
   27410:	180b883a 	mov	r5,r3
   27414:	880f883a 	mov	r7,r17
   27418:	1009883a 	mov	r4,r2
   2741c:	002246c0 	call	2246c <__subdf3>
   27420:	d9401917 	ldw	r5,100(sp)
   27424:	180f883a 	mov	r7,r3
   27428:	b009883a 	mov	r4,r22
   2742c:	100d883a 	mov	r6,r2
   27430:	0022b7c0 	call	22b7c <__gtdf2>
   27434:	00bda216 	blt	zero,r2,26ac0 <_dtoa_r+0x6dc>
   27438:	d8c00317 	ldw	r3,12(sp)
   2743c:	00800044 	movi	r2,1
   27440:	10c01216 	blt	r2,r3,2748c <_dtoa_r+0x10a8>
   27444:	003d4506 	br	2695c <_dtoa_r+0x578>
   27448:	d9801417 	ldw	r6,80(sp)
   2744c:	0005883a 	mov	r2,zero
   27450:	00cffc34 	movhi	r3,16368
   27454:	180b883a 	mov	r5,r3
   27458:	880f883a 	mov	r7,r17
   2745c:	1009883a 	mov	r4,r2
   27460:	002246c0 	call	2246c <__subdf3>
   27464:	d9c01b17 	ldw	r7,108(sp)
   27468:	180b883a 	mov	r5,r3
   2746c:	1009883a 	mov	r4,r2
   27470:	b00d883a 	mov	r6,r22
   27474:	0022c040 	call	22c04 <__ltdf2>
   27478:	103d9116 	blt	r2,zero,26ac0 <_dtoa_r+0x6dc>
   2747c:	d9800517 	ldw	r6,20(sp)
   27480:	d9000317 	ldw	r4,12(sp)
   27484:	3105883a 	add	r2,r6,r4
   27488:	e0bd3426 	beq	fp,r2,2695c <_dtoa_r+0x578>
   2748c:	04500934 	movhi	r17,16420
   27490:	0021883a 	mov	r16,zero
   27494:	b80b883a 	mov	r5,r23
   27498:	b009883a 	mov	r4,r22
   2749c:	800d883a 	mov	r6,r16
   274a0:	880f883a 	mov	r7,r17
   274a4:	00225600 	call	22560 <__muldf3>
   274a8:	d9401517 	ldw	r5,84(sp)
   274ac:	d9001417 	ldw	r4,80(sp)
   274b0:	880f883a 	mov	r7,r17
   274b4:	000d883a 	mov	r6,zero
   274b8:	d8801a15 	stw	r2,104(sp)
   274bc:	d8c01b15 	stw	r3,108(sp)
   274c0:	00225600 	call	22560 <__muldf3>
   274c4:	180b883a 	mov	r5,r3
   274c8:	1009883a 	mov	r4,r2
   274cc:	1823883a 	mov	r17,r3
   274d0:	1021883a 	mov	r16,r2
   274d4:	0022d840 	call	22d84 <__fixdfsi>
   274d8:	1009883a 	mov	r4,r2
   274dc:	102b883a 	mov	r21,r2
   274e0:	0022c8c0 	call	22c8c <__floatsidf>
   274e4:	880b883a 	mov	r5,r17
   274e8:	8009883a 	mov	r4,r16
   274ec:	180f883a 	mov	r7,r3
   274f0:	100d883a 	mov	r6,r2
   274f4:	002246c0 	call	2246c <__subdf3>
   274f8:	1021883a 	mov	r16,r2
   274fc:	d9001b17 	ldw	r4,108(sp)
   27500:	1823883a 	mov	r17,r3
   27504:	dc001415 	stw	r16,80(sp)
   27508:	ad400c04 	addi	r21,r21,48
   2750c:	dc401515 	stw	r17,84(sp)
   27510:	d8801a17 	ldw	r2,104(sp)
   27514:	e5400005 	stb	r21,0(fp)
   27518:	202f883a 	mov	r23,r4
   2751c:	d9c01b17 	ldw	r7,108(sp)
   27520:	d9001417 	ldw	r4,80(sp)
   27524:	880b883a 	mov	r5,r17
   27528:	100d883a 	mov	r6,r2
   2752c:	102d883a 	mov	r22,r2
   27530:	e7000044 	addi	fp,fp,1
   27534:	0022c040 	call	22c04 <__ltdf2>
   27538:	103fc30e 	bge	r2,zero,27448 <_dtoa_r+0x1064>
   2753c:	d9000417 	ldw	r4,16(sp)
   27540:	d9000d15 	stw	r4,52(sp)
   27544:	003d7106 	br	26b0c <_dtoa_r+0x728>
   27548:	d9801717 	ldw	r6,92(sp)
   2754c:	00800084 	movi	r2,2
   27550:	11bde60e 	bge	r2,r6,26cec <_dtoa_r+0x908>
   27554:	203cfb1e 	bne	r4,zero,26944 <_dtoa_r+0x560>
   27558:	d9001617 	ldw	r4,88(sp)
   2755c:	900b883a 	mov	r5,r18
   27560:	01800144 	movi	r6,5
   27564:	000f883a 	mov	r7,zero
   27568:	0029ac00 	call	29ac0 <__multadd>
   2756c:	d9000717 	ldw	r4,28(sp)
   27570:	100b883a 	mov	r5,r2
   27574:	1025883a 	mov	r18,r2
   27578:	0028f680 	call	28f68 <__mcmp>
   2757c:	00bcf10e 	bge	zero,r2,26944 <_dtoa_r+0x560>
   27580:	d8c00d17 	ldw	r3,52(sp)
   27584:	d9000517 	ldw	r4,20(sp)
   27588:	d8000615 	stw	zero,24(sp)
   2758c:	18c00044 	addi	r3,r3,1
   27590:	d8c00d15 	stw	r3,52(sp)
   27594:	00800c44 	movi	r2,49
   27598:	27000044 	addi	fp,r4,1
   2759c:	20800005 	stb	r2,0(r4)
   275a0:	003e8906 	br	26fc8 <_dtoa_r+0xbe4>
   275a4:	d8c00517 	ldw	r3,20(sp)
   275a8:	003bc206 	br	264b4 <_dtoa_r+0xd0>
   275ac:	018000f4 	movhi	r6,3
   275b0:	31bb3204 	addi	r6,r6,-4920
   275b4:	30c00917 	ldw	r3,36(r6)
   275b8:	30800817 	ldw	r2,32(r6)
   275bc:	d9001217 	ldw	r4,72(sp)
   275c0:	d9401317 	ldw	r5,76(sp)
   275c4:	180f883a 	mov	r7,r3
   275c8:	100d883a 	mov	r6,r2
   275cc:	00229240 	call	22924 <__divdf3>
   275d0:	948003cc 	andi	r18,r18,15
   275d4:	058000c4 	movi	r22,3
   275d8:	1029883a 	mov	r20,r2
   275dc:	182b883a 	mov	r21,r3
   275e0:	003c8906 	br	26808 <_dtoa_r+0x424>
   275e4:	d9001017 	ldw	r4,64(sp)
   275e8:	d9800917 	ldw	r6,36(sp)
   275ec:	0025883a 	mov	r18,zero
   275f0:	1105c83a 	sub	r2,r2,r4
   275f4:	2089883a 	add	r4,r4,r2
   275f8:	308d883a 	add	r6,r6,r2
   275fc:	d9001015 	stw	r4,64(sp)
   27600:	d9800915 	stw	r6,36(sp)
   27604:	003e3206 	br	26ed0 <_dtoa_r+0xaec>
   27608:	28800044 	addi	r2,r5,1
   2760c:	27000044 	addi	fp,r4,1
   27610:	20800005 	stb	r2,0(r4)
   27614:	003e6c06 	br	26fc8 <_dtoa_r+0xbe4>
   27618:	d8800f17 	ldw	r2,60(sp)
   2761c:	00bce016 	blt	zero,r2,269a0 <_dtoa_r+0x5bc>
   27620:	d9800f17 	ldw	r6,60(sp)
   27624:	303cc51e 	bne	r6,zero,2693c <_dtoa_r+0x558>
   27628:	0005883a 	mov	r2,zero
   2762c:	00d00534 	movhi	r3,16404
   27630:	980b883a 	mov	r5,r19
   27634:	180f883a 	mov	r7,r3
   27638:	9009883a 	mov	r4,r18
   2763c:	100d883a 	mov	r6,r2
   27640:	00225600 	call	22560 <__muldf3>
   27644:	180b883a 	mov	r5,r3
   27648:	a80f883a 	mov	r7,r21
   2764c:	1009883a 	mov	r4,r2
   27650:	a00d883a 	mov	r6,r20
   27654:	002b8100 	call	2b810 <__gedf2>
   27658:	103cb80e 	bge	r2,zero,2693c <_dtoa_r+0x558>
   2765c:	0027883a 	mov	r19,zero
   27660:	0025883a 	mov	r18,zero
   27664:	003fc606 	br	27580 <_dtoa_r+0x119c>
   27668:	99400117 	ldw	r5,4(r19)
   2766c:	d9001617 	ldw	r4,88(sp)
   27670:	002938c0 	call	2938c <_Balloc>
   27674:	99800417 	ldw	r6,16(r19)
   27678:	11000304 	addi	r4,r2,12
   2767c:	99400304 	addi	r5,r19,12
   27680:	318d883a 	add	r6,r6,r6
   27684:	318d883a 	add	r6,r6,r6
   27688:	31800204 	addi	r6,r6,8
   2768c:	1023883a 	mov	r17,r2
   27690:	0023ef00 	call	23ef0 <memcpy>
   27694:	d9001617 	ldw	r4,88(sp)
   27698:	880b883a 	mov	r5,r17
   2769c:	01800044 	movi	r6,1
   276a0:	00297500 	call	29750 <__lshift>
   276a4:	100b883a 	mov	r5,r2
   276a8:	003d9c06 	br	26d1c <_dtoa_r+0x938>
   276ac:	00800e44 	movi	r2,57
   276b0:	b8807026 	beq	r23,r2,27874 <_dtoa_r+0x1490>
   276b4:	b8800044 	addi	r2,r23,1
   276b8:	b7000044 	addi	fp,r22,1
   276bc:	b0800005 	stb	r2,0(r22)
   276c0:	003e4106 	br	26fc8 <_dtoa_r+0xbe4>
   276c4:	d8800317 	ldw	r2,12(sp)
   276c8:	018000f4 	movhi	r6,3
   276cc:	31bb0004 	addi	r6,r6,-5120
   276d0:	b009883a 	mov	r4,r22
   276d4:	100e90fa 	slli	r7,r2,3
   276d8:	b80b883a 	mov	r5,r23
   276dc:	398f883a 	add	r7,r7,r6
   276e0:	38bffe17 	ldw	r2,-8(r7)
   276e4:	d9800517 	ldw	r6,20(sp)
   276e8:	38ffff17 	ldw	r3,-4(r7)
   276ec:	37000044 	addi	fp,r6,1
   276f0:	180f883a 	mov	r7,r3
   276f4:	100d883a 	mov	r6,r2
   276f8:	00225600 	call	22560 <__muldf3>
   276fc:	a80b883a 	mov	r5,r21
   27700:	a009883a 	mov	r4,r20
   27704:	182f883a 	mov	r23,r3
   27708:	102d883a 	mov	r22,r2
   2770c:	0022d840 	call	22d84 <__fixdfsi>
   27710:	1009883a 	mov	r4,r2
   27714:	1027883a 	mov	r19,r2
   27718:	0022c8c0 	call	22c8c <__floatsidf>
   2771c:	a80b883a 	mov	r5,r21
   27720:	a009883a 	mov	r4,r20
   27724:	180f883a 	mov	r7,r3
   27728:	100d883a 	mov	r6,r2
   2772c:	002246c0 	call	2246c <__subdf3>
   27730:	180b883a 	mov	r5,r3
   27734:	d8c00517 	ldw	r3,20(sp)
   27738:	9cc00c04 	addi	r19,r19,48
   2773c:	1009883a 	mov	r4,r2
   27740:	1cc00005 	stb	r19,0(r3)
   27744:	2021883a 	mov	r16,r4
   27748:	d9000317 	ldw	r4,12(sp)
   2774c:	00800044 	movi	r2,1
   27750:	2823883a 	mov	r17,r5
   27754:	20802226 	beq	r4,r2,277e0 <_dtoa_r+0x13fc>
   27758:	1029883a 	mov	r20,r2
   2775c:	0005883a 	mov	r2,zero
   27760:	00d00934 	movhi	r3,16420
   27764:	180f883a 	mov	r7,r3
   27768:	100d883a 	mov	r6,r2
   2776c:	880b883a 	mov	r5,r17
   27770:	8009883a 	mov	r4,r16
   27774:	00225600 	call	22560 <__muldf3>
   27778:	180b883a 	mov	r5,r3
   2777c:	1009883a 	mov	r4,r2
   27780:	1823883a 	mov	r17,r3
   27784:	1021883a 	mov	r16,r2
   27788:	0022d840 	call	22d84 <__fixdfsi>
   2778c:	1009883a 	mov	r4,r2
   27790:	102b883a 	mov	r21,r2
   27794:	0022c8c0 	call	22c8c <__floatsidf>
   27798:	880b883a 	mov	r5,r17
   2779c:	8009883a 	mov	r4,r16
   277a0:	180f883a 	mov	r7,r3
   277a4:	100d883a 	mov	r6,r2
   277a8:	002246c0 	call	2246c <__subdf3>
   277ac:	180b883a 	mov	r5,r3
   277b0:	d8c00517 	ldw	r3,20(sp)
   277b4:	1009883a 	mov	r4,r2
   277b8:	ad400c04 	addi	r21,r21,48
   277bc:	1d05883a 	add	r2,r3,r20
   277c0:	15400005 	stb	r21,0(r2)
   277c4:	2021883a 	mov	r16,r4
   277c8:	d9000317 	ldw	r4,12(sp)
   277cc:	a5000044 	addi	r20,r20,1
   277d0:	2823883a 	mov	r17,r5
   277d4:	a13fe11e 	bne	r20,r4,2775c <_dtoa_r+0x1378>
   277d8:	e505883a 	add	r2,fp,r20
   277dc:	173fffc4 	addi	fp,r2,-1
   277e0:	0025883a 	mov	r18,zero
   277e4:	04cff834 	movhi	r19,16352
   277e8:	b009883a 	mov	r4,r22
   277ec:	b80b883a 	mov	r5,r23
   277f0:	900d883a 	mov	r6,r18
   277f4:	980f883a 	mov	r7,r19
   277f8:	00224ec0 	call	224ec <__adddf3>
   277fc:	180b883a 	mov	r5,r3
   27800:	1009883a 	mov	r4,r2
   27804:	800d883a 	mov	r6,r16
   27808:	880f883a 	mov	r7,r17
   2780c:	0022c040 	call	22c04 <__ltdf2>
   27810:	103cab16 	blt	r2,zero,26ac0 <_dtoa_r+0x6dc>
   27814:	0009883a 	mov	r4,zero
   27818:	980b883a 	mov	r5,r19
   2781c:	b80f883a 	mov	r7,r23
   27820:	b00d883a 	mov	r6,r22
   27824:	002246c0 	call	2246c <__subdf3>
   27828:	180b883a 	mov	r5,r3
   2782c:	880f883a 	mov	r7,r17
   27830:	1009883a 	mov	r4,r2
   27834:	800d883a 	mov	r6,r16
   27838:	0022b7c0 	call	22b7c <__gtdf2>
   2783c:	00bc470e 	bge	zero,r2,2695c <_dtoa_r+0x578>
   27840:	00c00c04 	movi	r3,48
   27844:	e73fffc4 	addi	fp,fp,-1
   27848:	e0800007 	ldb	r2,0(fp)
   2784c:	10fffd26 	beq	r2,r3,27844 <_dtoa_r+0x1460>
   27850:	d9800417 	ldw	r6,16(sp)
   27854:	e7000044 	addi	fp,fp,1
   27858:	d9800d15 	stw	r6,52(sp)
   2785c:	003cab06 	br	26b0c <_dtoa_r+0x728>
   27860:	d8c00f17 	ldw	r3,60(sp)
   27864:	d9001117 	ldw	r4,68(sp)
   27868:	20e1c83a 	sub	r16,r4,r3
   2786c:	0007883a 	mov	r3,zero
   27870:	003d9b06 	br	26ee0 <_dtoa_r+0xafc>
   27874:	00800e44 	movi	r2,57
   27878:	b0800005 	stb	r2,0(r22)
   2787c:	b5800044 	addi	r22,r22,1
   27880:	003dc106 	br	26f88 <_dtoa_r+0xba4>
   27884:	05800084 	movi	r22,2
   27888:	003bf706 	br	26868 <_dtoa_r+0x484>
   2788c:	d9000f17 	ldw	r4,60(sp)
   27890:	013c000e 	bge	zero,r4,26894 <_dtoa_r+0x4b0>
   27894:	d9800e17 	ldw	r6,56(sp)
   27898:	01bc300e 	bge	zero,r6,2695c <_dtoa_r+0x578>
   2789c:	0005883a 	mov	r2,zero
   278a0:	00d00934 	movhi	r3,16420
   278a4:	a80b883a 	mov	r5,r21
   278a8:	180f883a 	mov	r7,r3
   278ac:	a009883a 	mov	r4,r20
   278b0:	100d883a 	mov	r6,r2
   278b4:	00225600 	call	22560 <__muldf3>
   278b8:	b1000044 	addi	r4,r22,1
   278bc:	1021883a 	mov	r16,r2
   278c0:	1823883a 	mov	r17,r3
   278c4:	0022c8c0 	call	22c8c <__floatsidf>
   278c8:	880b883a 	mov	r5,r17
   278cc:	8009883a 	mov	r4,r16
   278d0:	180f883a 	mov	r7,r3
   278d4:	100d883a 	mov	r6,r2
   278d8:	00225600 	call	22560 <__muldf3>
   278dc:	0011883a 	mov	r8,zero
   278e0:	02500734 	movhi	r9,16412
   278e4:	180b883a 	mov	r5,r3
   278e8:	480f883a 	mov	r7,r9
   278ec:	1009883a 	mov	r4,r2
   278f0:	400d883a 	mov	r6,r8
   278f4:	00224ec0 	call	224ec <__adddf3>
   278f8:	102d883a 	mov	r22,r2
   278fc:	00bf3034 	movhi	r2,64704
   27900:	10ef883a 	add	r23,r2,r3
   27904:	d8800d17 	ldw	r2,52(sp)
   27908:	d8c00e17 	ldw	r3,56(sp)
   2790c:	8029883a 	mov	r20,r16
   27910:	10bfffc4 	addi	r2,r2,-1
   27914:	882b883a 	mov	r21,r17
   27918:	d8800415 	stw	r2,16(sp)
   2791c:	d8c00315 	stw	r3,12(sp)
   27920:	003e8306 	br	27330 <_dtoa_r+0xf4c>
   27924:	d8800117 	ldw	r2,4(sp)
   27928:	dc001117 	ldw	r16,68(sp)
   2792c:	dc801017 	ldw	r18,64(sp)
   27930:	00c00d84 	movi	r3,54
   27934:	1887c83a 	sub	r3,r3,r2
   27938:	003d6906 	br	26ee0 <_dtoa_r+0xafc>
   2793c:	01800044 	movi	r6,1
   27940:	3021883a 	mov	r16,r6
   27944:	d9800f15 	stw	r6,60(sp)
   27948:	d9802615 	stw	r6,152(sp)
   2794c:	d9800e15 	stw	r6,56(sp)
   27950:	003b9306 	br	267a0 <_dtoa_r+0x3bc>
   27954:	b021883a 	mov	r16,r22
   27958:	dd800f15 	stw	r22,60(sp)
   2795c:	003b9006 	br	267a0 <_dtoa_r+0x3bc>
   27960:	103e221e 	bne	r2,zero,271ec <_dtoa_r+0xe08>
   27964:	b880004c 	andi	r2,r23,1
   27968:	1005003a 	cmpeq	r2,r2,zero
   2796c:	103e1f1e 	bne	r2,zero,271ec <_dtoa_r+0xe08>
   27970:	003e1b06 	br	271e0 <_dtoa_r+0xdfc>
   27974:	d9001617 	ldw	r4,88(sp)
   27978:	980b883a 	mov	r5,r19
   2797c:	01800284 	movi	r6,10
   27980:	000f883a 	mov	r7,zero
   27984:	0029ac00 	call	29ac0 <__multadd>
   27988:	d8c00e17 	ldw	r3,56(sp)
   2798c:	1027883a 	mov	r19,r2
   27990:	d8c00f15 	stw	r3,60(sp)
   27994:	003cd306 	br	26ce4 <_dtoa_r+0x900>

00027998 <_fflush_r>:
   27998:	defffb04 	addi	sp,sp,-20
   2799c:	dcc00315 	stw	r19,12(sp)
   279a0:	dc800215 	stw	r18,8(sp)
   279a4:	dfc00415 	stw	ra,16(sp)
   279a8:	dc400115 	stw	r17,4(sp)
   279ac:	dc000015 	stw	r16,0(sp)
   279b0:	2027883a 	mov	r19,r4
   279b4:	2825883a 	mov	r18,r5
   279b8:	20000226 	beq	r4,zero,279c4 <_fflush_r+0x2c>
   279bc:	20800e17 	ldw	r2,56(r4)
   279c0:	10005626 	beq	r2,zero,27b1c <_fflush_r+0x184>
   279c4:	9100030b 	ldhu	r4,12(r18)
   279c8:	20ffffcc 	andi	r3,r4,65535
   279cc:	18e0001c 	xori	r3,r3,32768
   279d0:	18e00004 	addi	r3,r3,-32768
   279d4:	1880020c 	andi	r2,r3,8
   279d8:	1000261e 	bne	r2,zero,27a74 <_fflush_r+0xdc>
   279dc:	90c00117 	ldw	r3,4(r18)
   279e0:	20820014 	ori	r2,r4,2048
   279e4:	9080030d 	sth	r2,12(r18)
   279e8:	1009883a 	mov	r4,r2
   279ec:	00c0400e 	bge	zero,r3,27af0 <_fflush_r+0x158>
   279f0:	92000a17 	ldw	r8,40(r18)
   279f4:	40004026 	beq	r8,zero,27af8 <_fflush_r+0x160>
   279f8:	2084000c 	andi	r2,r4,4096
   279fc:	10005326 	beq	r2,zero,27b4c <_fflush_r+0x1b4>
   27a00:	94001417 	ldw	r16,80(r18)
   27a04:	9080030b 	ldhu	r2,12(r18)
   27a08:	1080010c 	andi	r2,r2,4
   27a0c:	1000481e 	bne	r2,zero,27b30 <_fflush_r+0x198>
   27a10:	91400717 	ldw	r5,28(r18)
   27a14:	9809883a 	mov	r4,r19
   27a18:	800d883a 	mov	r6,r16
   27a1c:	000f883a 	mov	r7,zero
   27a20:	403ee83a 	callr	r8
   27a24:	8080261e 	bne	r16,r2,27ac0 <_fflush_r+0x128>
   27a28:	9080030b 	ldhu	r2,12(r18)
   27a2c:	91000417 	ldw	r4,16(r18)
   27a30:	90000115 	stw	zero,4(r18)
   27a34:	10bdffcc 	andi	r2,r2,63487
   27a38:	10ffffcc 	andi	r3,r2,65535
   27a3c:	18c4000c 	andi	r3,r3,4096
   27a40:	9080030d 	sth	r2,12(r18)
   27a44:	91000015 	stw	r4,0(r18)
   27a48:	18002b26 	beq	r3,zero,27af8 <_fflush_r+0x160>
   27a4c:	0007883a 	mov	r3,zero
   27a50:	1805883a 	mov	r2,r3
   27a54:	94001415 	stw	r16,80(r18)
   27a58:	dfc00417 	ldw	ra,16(sp)
   27a5c:	dcc00317 	ldw	r19,12(sp)
   27a60:	dc800217 	ldw	r18,8(sp)
   27a64:	dc400117 	ldw	r17,4(sp)
   27a68:	dc000017 	ldw	r16,0(sp)
   27a6c:	dec00504 	addi	sp,sp,20
   27a70:	f800283a 	ret
   27a74:	94400417 	ldw	r17,16(r18)
   27a78:	88001f26 	beq	r17,zero,27af8 <_fflush_r+0x160>
   27a7c:	90800017 	ldw	r2,0(r18)
   27a80:	18c000cc 	andi	r3,r3,3
   27a84:	94400015 	stw	r17,0(r18)
   27a88:	1461c83a 	sub	r16,r2,r17
   27a8c:	18002526 	beq	r3,zero,27b24 <_fflush_r+0x18c>
   27a90:	0005883a 	mov	r2,zero
   27a94:	90800215 	stw	r2,8(r18)
   27a98:	0400170e 	bge	zero,r16,27af8 <_fflush_r+0x160>
   27a9c:	90c00917 	ldw	r3,36(r18)
   27aa0:	91400717 	ldw	r5,28(r18)
   27aa4:	880d883a 	mov	r6,r17
   27aa8:	800f883a 	mov	r7,r16
   27aac:	9809883a 	mov	r4,r19
   27ab0:	183ee83a 	callr	r3
   27ab4:	88a3883a 	add	r17,r17,r2
   27ab8:	80a1c83a 	sub	r16,r16,r2
   27abc:	00bff616 	blt	zero,r2,27a98 <_fflush_r+0x100>
   27ac0:	9080030b 	ldhu	r2,12(r18)
   27ac4:	00ffffc4 	movi	r3,-1
   27ac8:	10801014 	ori	r2,r2,64
   27acc:	9080030d 	sth	r2,12(r18)
   27ad0:	1805883a 	mov	r2,r3
   27ad4:	dfc00417 	ldw	ra,16(sp)
   27ad8:	dcc00317 	ldw	r19,12(sp)
   27adc:	dc800217 	ldw	r18,8(sp)
   27ae0:	dc400117 	ldw	r17,4(sp)
   27ae4:	dc000017 	ldw	r16,0(sp)
   27ae8:	dec00504 	addi	sp,sp,20
   27aec:	f800283a 	ret
   27af0:	90800f17 	ldw	r2,60(r18)
   27af4:	00bfbe16 	blt	zero,r2,279f0 <_fflush_r+0x58>
   27af8:	0007883a 	mov	r3,zero
   27afc:	1805883a 	mov	r2,r3
   27b00:	dfc00417 	ldw	ra,16(sp)
   27b04:	dcc00317 	ldw	r19,12(sp)
   27b08:	dc800217 	ldw	r18,8(sp)
   27b0c:	dc400117 	ldw	r17,4(sp)
   27b10:	dc000017 	ldw	r16,0(sp)
   27b14:	dec00504 	addi	sp,sp,20
   27b18:	f800283a 	ret
   27b1c:	0027c300 	call	27c30 <__sinit>
   27b20:	003fa806 	br	279c4 <_fflush_r+0x2c>
   27b24:	90800517 	ldw	r2,20(r18)
   27b28:	90800215 	stw	r2,8(r18)
   27b2c:	003fda06 	br	27a98 <_fflush_r+0x100>
   27b30:	90800117 	ldw	r2,4(r18)
   27b34:	90c00c17 	ldw	r3,48(r18)
   27b38:	80a1c83a 	sub	r16,r16,r2
   27b3c:	183fb426 	beq	r3,zero,27a10 <_fflush_r+0x78>
   27b40:	90800f17 	ldw	r2,60(r18)
   27b44:	80a1c83a 	sub	r16,r16,r2
   27b48:	003fb106 	br	27a10 <_fflush_r+0x78>
   27b4c:	91400717 	ldw	r5,28(r18)
   27b50:	9809883a 	mov	r4,r19
   27b54:	000d883a 	mov	r6,zero
   27b58:	01c00044 	movi	r7,1
   27b5c:	403ee83a 	callr	r8
   27b60:	1021883a 	mov	r16,r2
   27b64:	00bfffc4 	movi	r2,-1
   27b68:	80800226 	beq	r16,r2,27b74 <_fflush_r+0x1dc>
   27b6c:	92000a17 	ldw	r8,40(r18)
   27b70:	003fa406 	br	27a04 <_fflush_r+0x6c>
   27b74:	98c00017 	ldw	r3,0(r19)
   27b78:	00800744 	movi	r2,29
   27b7c:	18bfde26 	beq	r3,r2,27af8 <_fflush_r+0x160>
   27b80:	9080030b 	ldhu	r2,12(r18)
   27b84:	8007883a 	mov	r3,r16
   27b88:	10801014 	ori	r2,r2,64
   27b8c:	9080030d 	sth	r2,12(r18)
   27b90:	003fcf06 	br	27ad0 <_fflush_r+0x138>

00027b94 <fflush>:
   27b94:	014000b4 	movhi	r5,2
   27b98:	295e6604 	addi	r5,r5,31128
   27b9c:	2007883a 	mov	r3,r4
   27ba0:	20000526 	beq	r4,zero,27bb8 <fflush+0x24>
   27ba4:	008000f4 	movhi	r2,3
   27ba8:	1081df04 	addi	r2,r2,1916
   27bac:	11000017 	ldw	r4,0(r2)
   27bb0:	180b883a 	mov	r5,r3
   27bb4:	00279981 	jmpi	27998 <_fflush_r>
   27bb8:	008000f4 	movhi	r2,3
   27bbc:	1081e004 	addi	r2,r2,1920
   27bc0:	11000017 	ldw	r4,0(r2)
   27bc4:	00287641 	jmpi	28764 <_fwalk_reent>

00027bc8 <std>:
   27bc8:	008000f4 	movhi	r2,3
   27bcc:	10a91904 	addi	r2,r2,-23452
   27bd0:	20800b15 	stw	r2,44(r4)
   27bd4:	008000f4 	movhi	r2,3
   27bd8:	10a95404 	addi	r2,r2,-23216
   27bdc:	20800815 	stw	r2,32(r4)
   27be0:	00c000f4 	movhi	r3,3
   27be4:	18e93504 	addi	r3,r3,-23340
   27be8:	008000f4 	movhi	r2,3
   27bec:	10a91b04 	addi	r2,r2,-23444
   27bf0:	2140030d 	sth	r5,12(r4)
   27bf4:	2180038d 	sth	r6,14(r4)
   27bf8:	20c00915 	stw	r3,36(r4)
   27bfc:	20800a15 	stw	r2,40(r4)
   27c00:	20000015 	stw	zero,0(r4)
   27c04:	20000115 	stw	zero,4(r4)
   27c08:	20000215 	stw	zero,8(r4)
   27c0c:	20000415 	stw	zero,16(r4)
   27c10:	20000515 	stw	zero,20(r4)
   27c14:	20000615 	stw	zero,24(r4)
   27c18:	21000715 	stw	r4,28(r4)
   27c1c:	f800283a 	ret

00027c20 <__sfp_lock_acquire>:
   27c20:	f800283a 	ret

00027c24 <__sfp_lock_release>:
   27c24:	f800283a 	ret

00027c28 <__sinit_lock_acquire>:
   27c28:	f800283a 	ret

00027c2c <__sinit_lock_release>:
   27c2c:	f800283a 	ret

00027c30 <__sinit>:
   27c30:	20800e17 	ldw	r2,56(r4)
   27c34:	defffd04 	addi	sp,sp,-12
   27c38:	dc400115 	stw	r17,4(sp)
   27c3c:	dc000015 	stw	r16,0(sp)
   27c40:	dfc00215 	stw	ra,8(sp)
   27c44:	04400044 	movi	r17,1
   27c48:	01400104 	movi	r5,4
   27c4c:	000d883a 	mov	r6,zero
   27c50:	2021883a 	mov	r16,r4
   27c54:	2200bb04 	addi	r8,r4,748
   27c58:	200f883a 	mov	r7,r4
   27c5c:	10000526 	beq	r2,zero,27c74 <__sinit+0x44>
   27c60:	dfc00217 	ldw	ra,8(sp)
   27c64:	dc400117 	ldw	r17,4(sp)
   27c68:	dc000017 	ldw	r16,0(sp)
   27c6c:	dec00304 	addi	sp,sp,12
   27c70:	f800283a 	ret
   27c74:	21000117 	ldw	r4,4(r4)
   27c78:	008000b4 	movhi	r2,2
   27c7c:	109f4504 	addi	r2,r2,32020
   27c80:	00c000c4 	movi	r3,3
   27c84:	80800f15 	stw	r2,60(r16)
   27c88:	80c0b915 	stw	r3,740(r16)
   27c8c:	8200ba15 	stw	r8,744(r16)
   27c90:	84400e15 	stw	r17,56(r16)
   27c94:	8000b815 	stw	zero,736(r16)
   27c98:	0027bc80 	call	27bc8 <std>
   27c9c:	81000217 	ldw	r4,8(r16)
   27ca0:	880d883a 	mov	r6,r17
   27ca4:	800f883a 	mov	r7,r16
   27ca8:	01400284 	movi	r5,10
   27cac:	0027bc80 	call	27bc8 <std>
   27cb0:	81000317 	ldw	r4,12(r16)
   27cb4:	800f883a 	mov	r7,r16
   27cb8:	01400484 	movi	r5,18
   27cbc:	01800084 	movi	r6,2
   27cc0:	dfc00217 	ldw	ra,8(sp)
   27cc4:	dc400117 	ldw	r17,4(sp)
   27cc8:	dc000017 	ldw	r16,0(sp)
   27ccc:	dec00304 	addi	sp,sp,12
   27cd0:	0027bc81 	jmpi	27bc8 <std>

00027cd4 <__fp_lock>:
   27cd4:	0005883a 	mov	r2,zero
   27cd8:	f800283a 	ret

00027cdc <__fp_unlock>:
   27cdc:	0005883a 	mov	r2,zero
   27ce0:	f800283a 	ret

00027ce4 <__fp_unlock_all>:
   27ce4:	008000f4 	movhi	r2,3
   27ce8:	1081df04 	addi	r2,r2,1916
   27cec:	11000017 	ldw	r4,0(r2)
   27cf0:	014000b4 	movhi	r5,2
   27cf4:	295f3704 	addi	r5,r5,31964
   27cf8:	002882c1 	jmpi	2882c <_fwalk>

00027cfc <__fp_lock_all>:
   27cfc:	008000f4 	movhi	r2,3
   27d00:	1081df04 	addi	r2,r2,1916
   27d04:	11000017 	ldw	r4,0(r2)
   27d08:	014000b4 	movhi	r5,2
   27d0c:	295f3504 	addi	r5,r5,31956
   27d10:	002882c1 	jmpi	2882c <_fwalk>

00027d14 <_cleanup_r>:
   27d14:	014000f4 	movhi	r5,3
   27d18:	296a6304 	addi	r5,r5,-22132
   27d1c:	002882c1 	jmpi	2882c <_fwalk>

00027d20 <_cleanup>:
   27d20:	008000f4 	movhi	r2,3
   27d24:	1081e004 	addi	r2,r2,1920
   27d28:	11000017 	ldw	r4,0(r2)
   27d2c:	0027d141 	jmpi	27d14 <_cleanup_r>

00027d30 <__sfmoreglue>:
   27d30:	defffc04 	addi	sp,sp,-16
   27d34:	dc400115 	stw	r17,4(sp)
   27d38:	2c401724 	muli	r17,r5,92
   27d3c:	dc800215 	stw	r18,8(sp)
   27d40:	2825883a 	mov	r18,r5
   27d44:	89400304 	addi	r5,r17,12
   27d48:	dc000015 	stw	r16,0(sp)
   27d4c:	dfc00315 	stw	ra,12(sp)
   27d50:	00237b00 	call	237b0 <_malloc_r>
   27d54:	0021883a 	mov	r16,zero
   27d58:	880d883a 	mov	r6,r17
   27d5c:	000b883a 	mov	r5,zero
   27d60:	10000626 	beq	r2,zero,27d7c <__sfmoreglue+0x4c>
   27d64:	11000304 	addi	r4,r2,12
   27d68:	14800115 	stw	r18,4(r2)
   27d6c:	10000015 	stw	zero,0(r2)
   27d70:	11000215 	stw	r4,8(r2)
   27d74:	1021883a 	mov	r16,r2
   27d78:	0028d740 	call	28d74 <memset>
   27d7c:	8005883a 	mov	r2,r16
   27d80:	dfc00317 	ldw	ra,12(sp)
   27d84:	dc800217 	ldw	r18,8(sp)
   27d88:	dc400117 	ldw	r17,4(sp)
   27d8c:	dc000017 	ldw	r16,0(sp)
   27d90:	dec00404 	addi	sp,sp,16
   27d94:	f800283a 	ret

00027d98 <__sfp>:
   27d98:	defffd04 	addi	sp,sp,-12
   27d9c:	008000f4 	movhi	r2,3
   27da0:	1081e004 	addi	r2,r2,1920
   27da4:	dc000015 	stw	r16,0(sp)
   27da8:	14000017 	ldw	r16,0(r2)
   27dac:	dc400115 	stw	r17,4(sp)
   27db0:	dfc00215 	stw	ra,8(sp)
   27db4:	80800e17 	ldw	r2,56(r16)
   27db8:	2023883a 	mov	r17,r4
   27dbc:	10002626 	beq	r2,zero,27e58 <__sfp+0xc0>
   27dc0:	8400b804 	addi	r16,r16,736
   27dc4:	80800117 	ldw	r2,4(r16)
   27dc8:	81000217 	ldw	r4,8(r16)
   27dcc:	10ffffc4 	addi	r3,r2,-1
   27dd0:	18000916 	blt	r3,zero,27df8 <__sfp+0x60>
   27dd4:	2080030f 	ldh	r2,12(r4)
   27dd8:	10000b26 	beq	r2,zero,27e08 <__sfp+0x70>
   27ddc:	017fffc4 	movi	r5,-1
   27de0:	00000206 	br	27dec <__sfp+0x54>
   27de4:	2080030f 	ldh	r2,12(r4)
   27de8:	10000726 	beq	r2,zero,27e08 <__sfp+0x70>
   27dec:	18ffffc4 	addi	r3,r3,-1
   27df0:	21001704 	addi	r4,r4,92
   27df4:	197ffb1e 	bne	r3,r5,27de4 <__sfp+0x4c>
   27df8:	80800017 	ldw	r2,0(r16)
   27dfc:	10001926 	beq	r2,zero,27e64 <__sfp+0xcc>
   27e00:	1021883a 	mov	r16,r2
   27e04:	003fef06 	br	27dc4 <__sfp+0x2c>
   27e08:	00bfffc4 	movi	r2,-1
   27e0c:	00c00044 	movi	r3,1
   27e10:	2080038d 	sth	r2,14(r4)
   27e14:	20c0030d 	sth	r3,12(r4)
   27e18:	20000015 	stw	zero,0(r4)
   27e1c:	20000215 	stw	zero,8(r4)
   27e20:	20000115 	stw	zero,4(r4)
   27e24:	20000415 	stw	zero,16(r4)
   27e28:	20000515 	stw	zero,20(r4)
   27e2c:	20000615 	stw	zero,24(r4)
   27e30:	20000c15 	stw	zero,48(r4)
   27e34:	20000d15 	stw	zero,52(r4)
   27e38:	20001115 	stw	zero,68(r4)
   27e3c:	20001215 	stw	zero,72(r4)
   27e40:	2005883a 	mov	r2,r4
   27e44:	dfc00217 	ldw	ra,8(sp)
   27e48:	dc400117 	ldw	r17,4(sp)
   27e4c:	dc000017 	ldw	r16,0(sp)
   27e50:	dec00304 	addi	sp,sp,12
   27e54:	f800283a 	ret
   27e58:	8009883a 	mov	r4,r16
   27e5c:	0027c300 	call	27c30 <__sinit>
   27e60:	003fd706 	br	27dc0 <__sfp+0x28>
   27e64:	8809883a 	mov	r4,r17
   27e68:	01400104 	movi	r5,4
   27e6c:	0027d300 	call	27d30 <__sfmoreglue>
   27e70:	80800015 	stw	r2,0(r16)
   27e74:	103fe21e 	bne	r2,zero,27e00 <__sfp+0x68>
   27e78:	00800304 	movi	r2,12
   27e7c:	0009883a 	mov	r4,zero
   27e80:	88800015 	stw	r2,0(r17)
   27e84:	003fee06 	br	27e40 <__sfp+0xa8>

00027e88 <_malloc_trim_r>:
   27e88:	defffb04 	addi	sp,sp,-20
   27e8c:	dcc00315 	stw	r19,12(sp)
   27e90:	04c000f4 	movhi	r19,3
   27e94:	9cfb5604 	addi	r19,r19,-4776
   27e98:	dc800215 	stw	r18,8(sp)
   27e9c:	dc400115 	stw	r17,4(sp)
   27ea0:	dc000015 	stw	r16,0(sp)
   27ea4:	2823883a 	mov	r17,r5
   27ea8:	2025883a 	mov	r18,r4
   27eac:	dfc00415 	stw	ra,16(sp)
   27eb0:	002c4040 	call	2c404 <__malloc_lock>
   27eb4:	98800217 	ldw	r2,8(r19)
   27eb8:	9009883a 	mov	r4,r18
   27ebc:	000b883a 	mov	r5,zero
   27ec0:	10c00117 	ldw	r3,4(r2)
   27ec4:	00bfff04 	movi	r2,-4
   27ec8:	18a0703a 	and	r16,r3,r2
   27ecc:	8463c83a 	sub	r17,r16,r17
   27ed0:	8c43fbc4 	addi	r17,r17,4079
   27ed4:	8822d33a 	srli	r17,r17,12
   27ed8:	0083ffc4 	movi	r2,4095
   27edc:	8c7fffc4 	addi	r17,r17,-1
   27ee0:	8822933a 	slli	r17,r17,12
   27ee4:	1440060e 	bge	r2,r17,27f00 <_malloc_trim_r+0x78>
   27ee8:	002409c0 	call	2409c <_sbrk_r>
   27eec:	98c00217 	ldw	r3,8(r19)
   27ef0:	9009883a 	mov	r4,r18
   27ef4:	044bc83a 	sub	r5,zero,r17
   27ef8:	80c7883a 	add	r3,r16,r3
   27efc:	10c00926 	beq	r2,r3,27f24 <_malloc_trim_r+0x9c>
   27f00:	002c4240 	call	2c424 <__malloc_unlock>
   27f04:	0005883a 	mov	r2,zero
   27f08:	dfc00417 	ldw	ra,16(sp)
   27f0c:	dcc00317 	ldw	r19,12(sp)
   27f10:	dc800217 	ldw	r18,8(sp)
   27f14:	dc400117 	ldw	r17,4(sp)
   27f18:	dc000017 	ldw	r16,0(sp)
   27f1c:	dec00504 	addi	sp,sp,20
   27f20:	f800283a 	ret
   27f24:	9009883a 	mov	r4,r18
   27f28:	002409c0 	call	2409c <_sbrk_r>
   27f2c:	844dc83a 	sub	r6,r16,r17
   27f30:	00ffffc4 	movi	r3,-1
   27f34:	9009883a 	mov	r4,r18
   27f38:	000b883a 	mov	r5,zero
   27f3c:	01c000f4 	movhi	r7,3
   27f40:	39c89604 	addi	r7,r7,8792
   27f44:	31800054 	ori	r6,r6,1
   27f48:	10c00926 	beq	r2,r3,27f70 <_malloc_trim_r+0xe8>
   27f4c:	38800017 	ldw	r2,0(r7)
   27f50:	98c00217 	ldw	r3,8(r19)
   27f54:	9009883a 	mov	r4,r18
   27f58:	1445c83a 	sub	r2,r2,r17
   27f5c:	38800015 	stw	r2,0(r7)
   27f60:	19800115 	stw	r6,4(r3)
   27f64:	002c4240 	call	2c424 <__malloc_unlock>
   27f68:	00800044 	movi	r2,1
   27f6c:	003fe606 	br	27f08 <_malloc_trim_r+0x80>
   27f70:	002409c0 	call	2409c <_sbrk_r>
   27f74:	99800217 	ldw	r6,8(r19)
   27f78:	100f883a 	mov	r7,r2
   27f7c:	9009883a 	mov	r4,r18
   27f80:	1187c83a 	sub	r3,r2,r6
   27f84:	008003c4 	movi	r2,15
   27f88:	19400054 	ori	r5,r3,1
   27f8c:	10ffdc0e 	bge	r2,r3,27f00 <_malloc_trim_r+0x78>
   27f90:	008000f4 	movhi	r2,3
   27f94:	1081de04 	addi	r2,r2,1912
   27f98:	10c00017 	ldw	r3,0(r2)
   27f9c:	008000f4 	movhi	r2,3
   27fa0:	10889604 	addi	r2,r2,8792
   27fa4:	31400115 	stw	r5,4(r6)
   27fa8:	38c7c83a 	sub	r3,r7,r3
   27fac:	10c00015 	stw	r3,0(r2)
   27fb0:	003fd306 	br	27f00 <_malloc_trim_r+0x78>

00027fb4 <_free_r>:
   27fb4:	defffd04 	addi	sp,sp,-12
   27fb8:	dc400115 	stw	r17,4(sp)
   27fbc:	dc000015 	stw	r16,0(sp)
   27fc0:	dfc00215 	stw	ra,8(sp)
   27fc4:	2821883a 	mov	r16,r5
   27fc8:	2023883a 	mov	r17,r4
   27fcc:	28005a26 	beq	r5,zero,28138 <_free_r+0x184>
   27fd0:	002c4040 	call	2c404 <__malloc_lock>
   27fd4:	823ffe04 	addi	r8,r16,-8
   27fd8:	41400117 	ldw	r5,4(r8)
   27fdc:	00bfff84 	movi	r2,-2
   27fe0:	028000f4 	movhi	r10,3
   27fe4:	52bb5604 	addi	r10,r10,-4776
   27fe8:	288e703a 	and	r7,r5,r2
   27fec:	41cd883a 	add	r6,r8,r7
   27ff0:	30c00117 	ldw	r3,4(r6)
   27ff4:	51000217 	ldw	r4,8(r10)
   27ff8:	00bfff04 	movi	r2,-4
   27ffc:	1892703a 	and	r9,r3,r2
   28000:	5017883a 	mov	r11,r10
   28004:	31006726 	beq	r6,r4,281a4 <_free_r+0x1f0>
   28008:	2880004c 	andi	r2,r5,1
   2800c:	1005003a 	cmpeq	r2,r2,zero
   28010:	32400115 	stw	r9,4(r6)
   28014:	10001a1e 	bne	r2,zero,28080 <_free_r+0xcc>
   28018:	000b883a 	mov	r5,zero
   2801c:	3247883a 	add	r3,r6,r9
   28020:	18800117 	ldw	r2,4(r3)
   28024:	1080004c 	andi	r2,r2,1
   28028:	1000231e 	bne	r2,zero,280b8 <_free_r+0x104>
   2802c:	280ac03a 	cmpne	r5,r5,zero
   28030:	3a4f883a 	add	r7,r7,r9
   28034:	2800451e 	bne	r5,zero,2814c <_free_r+0x198>
   28038:	31000217 	ldw	r4,8(r6)
   2803c:	008000f4 	movhi	r2,3
   28040:	10bb5804 	addi	r2,r2,-4768
   28044:	20807b26 	beq	r4,r2,28234 <_free_r+0x280>
   28048:	30800317 	ldw	r2,12(r6)
   2804c:	3a07883a 	add	r3,r7,r8
   28050:	19c00015 	stw	r7,0(r3)
   28054:	11000215 	stw	r4,8(r2)
   28058:	20800315 	stw	r2,12(r4)
   2805c:	38800054 	ori	r2,r7,1
   28060:	40800115 	stw	r2,4(r8)
   28064:	28001a26 	beq	r5,zero,280d0 <_free_r+0x11c>
   28068:	8809883a 	mov	r4,r17
   2806c:	dfc00217 	ldw	ra,8(sp)
   28070:	dc400117 	ldw	r17,4(sp)
   28074:	dc000017 	ldw	r16,0(sp)
   28078:	dec00304 	addi	sp,sp,12
   2807c:	002c4241 	jmpi	2c424 <__malloc_unlock>
   28080:	80bffe17 	ldw	r2,-8(r16)
   28084:	50c00204 	addi	r3,r10,8
   28088:	4091c83a 	sub	r8,r8,r2
   2808c:	41000217 	ldw	r4,8(r8)
   28090:	388f883a 	add	r7,r7,r2
   28094:	20c06126 	beq	r4,r3,2821c <_free_r+0x268>
   28098:	40800317 	ldw	r2,12(r8)
   2809c:	3247883a 	add	r3,r6,r9
   280a0:	000b883a 	mov	r5,zero
   280a4:	11000215 	stw	r4,8(r2)
   280a8:	20800315 	stw	r2,12(r4)
   280ac:	18800117 	ldw	r2,4(r3)
   280b0:	1080004c 	andi	r2,r2,1
   280b4:	103fdd26 	beq	r2,zero,2802c <_free_r+0x78>
   280b8:	38800054 	ori	r2,r7,1
   280bc:	3a07883a 	add	r3,r7,r8
   280c0:	280ac03a 	cmpne	r5,r5,zero
   280c4:	40800115 	stw	r2,4(r8)
   280c8:	19c00015 	stw	r7,0(r3)
   280cc:	283fe61e 	bne	r5,zero,28068 <_free_r+0xb4>
   280d0:	00807fc4 	movi	r2,511
   280d4:	11c01f2e 	bgeu	r2,r7,28154 <_free_r+0x1a0>
   280d8:	3806d27a 	srli	r3,r7,9
   280dc:	1800481e 	bne	r3,zero,28200 <_free_r+0x24c>
   280e0:	3804d0fa 	srli	r2,r7,3
   280e4:	100690fa 	slli	r3,r2,3
   280e8:	1acd883a 	add	r6,r3,r11
   280ec:	31400217 	ldw	r5,8(r6)
   280f0:	31405926 	beq	r6,r5,28258 <_free_r+0x2a4>
   280f4:	28800117 	ldw	r2,4(r5)
   280f8:	00ffff04 	movi	r3,-4
   280fc:	10c4703a 	and	r2,r2,r3
   28100:	3880022e 	bgeu	r7,r2,2810c <_free_r+0x158>
   28104:	29400217 	ldw	r5,8(r5)
   28108:	317ffa1e 	bne	r6,r5,280f4 <_free_r+0x140>
   2810c:	29800317 	ldw	r6,12(r5)
   28110:	41800315 	stw	r6,12(r8)
   28114:	41400215 	stw	r5,8(r8)
   28118:	8809883a 	mov	r4,r17
   2811c:	2a000315 	stw	r8,12(r5)
   28120:	32000215 	stw	r8,8(r6)
   28124:	dfc00217 	ldw	ra,8(sp)
   28128:	dc400117 	ldw	r17,4(sp)
   2812c:	dc000017 	ldw	r16,0(sp)
   28130:	dec00304 	addi	sp,sp,12
   28134:	002c4241 	jmpi	2c424 <__malloc_unlock>
   28138:	dfc00217 	ldw	ra,8(sp)
   2813c:	dc400117 	ldw	r17,4(sp)
   28140:	dc000017 	ldw	r16,0(sp)
   28144:	dec00304 	addi	sp,sp,12
   28148:	f800283a 	ret
   2814c:	31000217 	ldw	r4,8(r6)
   28150:	003fbd06 	br	28048 <_free_r+0x94>
   28154:	3806d0fa 	srli	r3,r7,3
   28158:	00800044 	movi	r2,1
   2815c:	51400117 	ldw	r5,4(r10)
   28160:	180890fa 	slli	r4,r3,3
   28164:	1807d0ba 	srai	r3,r3,2
   28168:	22c9883a 	add	r4,r4,r11
   2816c:	21800217 	ldw	r6,8(r4)
   28170:	10c4983a 	sll	r2,r2,r3
   28174:	41000315 	stw	r4,12(r8)
   28178:	41800215 	stw	r6,8(r8)
   2817c:	288ab03a 	or	r5,r5,r2
   28180:	22000215 	stw	r8,8(r4)
   28184:	8809883a 	mov	r4,r17
   28188:	51400115 	stw	r5,4(r10)
   2818c:	32000315 	stw	r8,12(r6)
   28190:	dfc00217 	ldw	ra,8(sp)
   28194:	dc400117 	ldw	r17,4(sp)
   28198:	dc000017 	ldw	r16,0(sp)
   2819c:	dec00304 	addi	sp,sp,12
   281a0:	002c4241 	jmpi	2c424 <__malloc_unlock>
   281a4:	2880004c 	andi	r2,r5,1
   281a8:	3a4d883a 	add	r6,r7,r9
   281ac:	1000071e 	bne	r2,zero,281cc <_free_r+0x218>
   281b0:	80bffe17 	ldw	r2,-8(r16)
   281b4:	4091c83a 	sub	r8,r8,r2
   281b8:	41000317 	ldw	r4,12(r8)
   281bc:	40c00217 	ldw	r3,8(r8)
   281c0:	308d883a 	add	r6,r6,r2
   281c4:	20c00215 	stw	r3,8(r4)
   281c8:	19000315 	stw	r4,12(r3)
   281cc:	008000f4 	movhi	r2,3
   281d0:	1081dd04 	addi	r2,r2,1908
   281d4:	11000017 	ldw	r4,0(r2)
   281d8:	30c00054 	ori	r3,r6,1
   281dc:	52000215 	stw	r8,8(r10)
   281e0:	40c00115 	stw	r3,4(r8)
   281e4:	313fa036 	bltu	r6,r4,28068 <_free_r+0xb4>
   281e8:	008000f4 	movhi	r2,3
   281ec:	10888504 	addi	r2,r2,8724
   281f0:	11400017 	ldw	r5,0(r2)
   281f4:	8809883a 	mov	r4,r17
   281f8:	0027e880 	call	27e88 <_malloc_trim_r>
   281fc:	003f9a06 	br	28068 <_free_r+0xb4>
   28200:	00800104 	movi	r2,4
   28204:	10c0072e 	bgeu	r2,r3,28224 <_free_r+0x270>
   28208:	00800504 	movi	r2,20
   2820c:	10c01936 	bltu	r2,r3,28274 <_free_r+0x2c0>
   28210:	188016c4 	addi	r2,r3,91
   28214:	100690fa 	slli	r3,r2,3
   28218:	003fb306 	br	280e8 <_free_r+0x134>
   2821c:	01400044 	movi	r5,1
   28220:	003f7e06 	br	2801c <_free_r+0x68>
   28224:	3804d1ba 	srli	r2,r7,6
   28228:	10800e04 	addi	r2,r2,56
   2822c:	100690fa 	slli	r3,r2,3
   28230:	003fad06 	br	280e8 <_free_r+0x134>
   28234:	22000315 	stw	r8,12(r4)
   28238:	22000215 	stw	r8,8(r4)
   2823c:	3a05883a 	add	r2,r7,r8
   28240:	38c00054 	ori	r3,r7,1
   28244:	11c00015 	stw	r7,0(r2)
   28248:	41000215 	stw	r4,8(r8)
   2824c:	40c00115 	stw	r3,4(r8)
   28250:	41000315 	stw	r4,12(r8)
   28254:	003f8406 	br	28068 <_free_r+0xb4>
   28258:	1005d0ba 	srai	r2,r2,2
   2825c:	00c00044 	movi	r3,1
   28260:	51000117 	ldw	r4,4(r10)
   28264:	1886983a 	sll	r3,r3,r2
   28268:	20c8b03a 	or	r4,r4,r3
   2826c:	51000115 	stw	r4,4(r10)
   28270:	003fa706 	br	28110 <_free_r+0x15c>
   28274:	00801504 	movi	r2,84
   28278:	10c00436 	bltu	r2,r3,2828c <_free_r+0x2d8>
   2827c:	3804d33a 	srli	r2,r7,12
   28280:	10801b84 	addi	r2,r2,110
   28284:	100690fa 	slli	r3,r2,3
   28288:	003f9706 	br	280e8 <_free_r+0x134>
   2828c:	00805504 	movi	r2,340
   28290:	10c00436 	bltu	r2,r3,282a4 <_free_r+0x2f0>
   28294:	3804d3fa 	srli	r2,r7,15
   28298:	10801dc4 	addi	r2,r2,119
   2829c:	100690fa 	slli	r3,r2,3
   282a0:	003f9106 	br	280e8 <_free_r+0x134>
   282a4:	00815504 	movi	r2,1364
   282a8:	10c0032e 	bgeu	r2,r3,282b8 <_free_r+0x304>
   282ac:	00801f84 	movi	r2,126
   282b0:	00c0fc04 	movi	r3,1008
   282b4:	003f8c06 	br	280e8 <_free_r+0x134>
   282b8:	3804d4ba 	srli	r2,r7,18
   282bc:	10801f04 	addi	r2,r2,124
   282c0:	100690fa 	slli	r3,r2,3
   282c4:	003f8806 	br	280e8 <_free_r+0x134>

000282c8 <__sfvwrite_r>:
   282c8:	30800217 	ldw	r2,8(r6)
   282cc:	defff504 	addi	sp,sp,-44
   282d0:	df000915 	stw	fp,36(sp)
   282d4:	dd800715 	stw	r22,28(sp)
   282d8:	dc800315 	stw	r18,12(sp)
   282dc:	dfc00a15 	stw	ra,40(sp)
   282e0:	ddc00815 	stw	r23,32(sp)
   282e4:	dd400615 	stw	r21,24(sp)
   282e8:	dd000515 	stw	r20,20(sp)
   282ec:	dcc00415 	stw	r19,16(sp)
   282f0:	dc400215 	stw	r17,8(sp)
   282f4:	dc000115 	stw	r16,4(sp)
   282f8:	302d883a 	mov	r22,r6
   282fc:	2039883a 	mov	fp,r4
   28300:	2825883a 	mov	r18,r5
   28304:	10001c26 	beq	r2,zero,28378 <__sfvwrite_r+0xb0>
   28308:	29c0030b 	ldhu	r7,12(r5)
   2830c:	3880020c 	andi	r2,r7,8
   28310:	10002726 	beq	r2,zero,283b0 <__sfvwrite_r+0xe8>
   28314:	28800417 	ldw	r2,16(r5)
   28318:	10002526 	beq	r2,zero,283b0 <__sfvwrite_r+0xe8>
   2831c:	3880008c 	andi	r2,r7,2
   28320:	b5400017 	ldw	r21,0(r22)
   28324:	10002826 	beq	r2,zero,283c8 <__sfvwrite_r+0x100>
   28328:	0021883a 	mov	r16,zero
   2832c:	0023883a 	mov	r17,zero
   28330:	880d883a 	mov	r6,r17
   28334:	e009883a 	mov	r4,fp
   28338:	00810004 	movi	r2,1024
   2833c:	80006e26 	beq	r16,zero,284f8 <__sfvwrite_r+0x230>
   28340:	800f883a 	mov	r7,r16
   28344:	91400717 	ldw	r5,28(r18)
   28348:	1400012e 	bgeu	r2,r16,28350 <__sfvwrite_r+0x88>
   2834c:	100f883a 	mov	r7,r2
   28350:	90c00917 	ldw	r3,36(r18)
   28354:	183ee83a 	callr	r3
   28358:	1007883a 	mov	r3,r2
   2835c:	80a1c83a 	sub	r16,r16,r2
   28360:	88a3883a 	add	r17,r17,r2
   28364:	00806d0e 	bge	zero,r2,2851c <__sfvwrite_r+0x254>
   28368:	b0800217 	ldw	r2,8(r22)
   2836c:	10c5c83a 	sub	r2,r2,r3
   28370:	b0800215 	stw	r2,8(r22)
   28374:	103fee1e 	bne	r2,zero,28330 <__sfvwrite_r+0x68>
   28378:	0009883a 	mov	r4,zero
   2837c:	2005883a 	mov	r2,r4
   28380:	dfc00a17 	ldw	ra,40(sp)
   28384:	df000917 	ldw	fp,36(sp)
   28388:	ddc00817 	ldw	r23,32(sp)
   2838c:	dd800717 	ldw	r22,28(sp)
   28390:	dd400617 	ldw	r21,24(sp)
   28394:	dd000517 	ldw	r20,20(sp)
   28398:	dcc00417 	ldw	r19,16(sp)
   2839c:	dc800317 	ldw	r18,12(sp)
   283a0:	dc400217 	ldw	r17,8(sp)
   283a4:	dc000117 	ldw	r16,4(sp)
   283a8:	dec00b04 	addi	sp,sp,44
   283ac:	f800283a 	ret
   283b0:	00260900 	call	26090 <__swsetup_r>
   283b4:	1000e41e 	bne	r2,zero,28748 <__sfvwrite_r+0x480>
   283b8:	91c0030b 	ldhu	r7,12(r18)
   283bc:	b5400017 	ldw	r21,0(r22)
   283c0:	3880008c 	andi	r2,r7,2
   283c4:	103fd81e 	bne	r2,zero,28328 <__sfvwrite_r+0x60>
   283c8:	3880004c 	andi	r2,r7,1
   283cc:	1005003a 	cmpeq	r2,r2,zero
   283d0:	10005726 	beq	r2,zero,28530 <__sfvwrite_r+0x268>
   283d4:	0029883a 	mov	r20,zero
   283d8:	002f883a 	mov	r23,zero
   283dc:	a0004226 	beq	r20,zero,284e8 <__sfvwrite_r+0x220>
   283e0:	3880800c 	andi	r2,r7,512
   283e4:	94000217 	ldw	r16,8(r18)
   283e8:	10008b26 	beq	r2,zero,28618 <__sfvwrite_r+0x350>
   283ec:	800d883a 	mov	r6,r16
   283f0:	a400a536 	bltu	r20,r16,28688 <__sfvwrite_r+0x3c0>
   283f4:	3881200c 	andi	r2,r7,1152
   283f8:	10002726 	beq	r2,zero,28498 <__sfvwrite_r+0x1d0>
   283fc:	90800517 	ldw	r2,20(r18)
   28400:	92000417 	ldw	r8,16(r18)
   28404:	91400017 	ldw	r5,0(r18)
   28408:	1087883a 	add	r3,r2,r2
   2840c:	1887883a 	add	r3,r3,r2
   28410:	1808d7fa 	srli	r4,r3,31
   28414:	2a21c83a 	sub	r16,r5,r8
   28418:	80800044 	addi	r2,r16,1
   2841c:	20c9883a 	add	r4,r4,r3
   28420:	2027d07a 	srai	r19,r4,1
   28424:	a085883a 	add	r2,r20,r2
   28428:	980d883a 	mov	r6,r19
   2842c:	9880022e 	bgeu	r19,r2,28438 <__sfvwrite_r+0x170>
   28430:	1027883a 	mov	r19,r2
   28434:	100d883a 	mov	r6,r2
   28438:	3881000c 	andi	r2,r7,1024
   2843c:	1000b826 	beq	r2,zero,28720 <__sfvwrite_r+0x458>
   28440:	300b883a 	mov	r5,r6
   28444:	e009883a 	mov	r4,fp
   28448:	00237b00 	call	237b0 <_malloc_r>
   2844c:	10003126 	beq	r2,zero,28514 <__sfvwrite_r+0x24c>
   28450:	91400417 	ldw	r5,16(r18)
   28454:	1009883a 	mov	r4,r2
   28458:	800d883a 	mov	r6,r16
   2845c:	1023883a 	mov	r17,r2
   28460:	0023ef00 	call	23ef0 <memcpy>
   28464:	90c0030b 	ldhu	r3,12(r18)
   28468:	00beffc4 	movi	r2,-1025
   2846c:	1886703a 	and	r3,r3,r2
   28470:	18c02014 	ori	r3,r3,128
   28474:	90c0030d 	sth	r3,12(r18)
   28478:	9c07c83a 	sub	r3,r19,r16
   2847c:	8c05883a 	add	r2,r17,r16
   28480:	a00d883a 	mov	r6,r20
   28484:	a021883a 	mov	r16,r20
   28488:	90800015 	stw	r2,0(r18)
   2848c:	90c00215 	stw	r3,8(r18)
   28490:	94400415 	stw	r17,16(r18)
   28494:	94c00515 	stw	r19,20(r18)
   28498:	91000017 	ldw	r4,0(r18)
   2849c:	b80b883a 	mov	r5,r23
   284a0:	a023883a 	mov	r17,r20
   284a4:	0028c940 	call	28c94 <memmove>
   284a8:	90c00217 	ldw	r3,8(r18)
   284ac:	90800017 	ldw	r2,0(r18)
   284b0:	a027883a 	mov	r19,r20
   284b4:	1c07c83a 	sub	r3,r3,r16
   284b8:	1405883a 	add	r2,r2,r16
   284bc:	90c00215 	stw	r3,8(r18)
   284c0:	a021883a 	mov	r16,r20
   284c4:	90800015 	stw	r2,0(r18)
   284c8:	b0800217 	ldw	r2,8(r22)
   284cc:	1405c83a 	sub	r2,r2,r16
   284d0:	b0800215 	stw	r2,8(r22)
   284d4:	103fa826 	beq	r2,zero,28378 <__sfvwrite_r+0xb0>
   284d8:	a469c83a 	sub	r20,r20,r17
   284dc:	91c0030b 	ldhu	r7,12(r18)
   284e0:	bcef883a 	add	r23,r23,r19
   284e4:	a03fbe1e 	bne	r20,zero,283e0 <__sfvwrite_r+0x118>
   284e8:	adc00017 	ldw	r23,0(r21)
   284ec:	ad000117 	ldw	r20,4(r21)
   284f0:	ad400204 	addi	r21,r21,8
   284f4:	003fb906 	br	283dc <__sfvwrite_r+0x114>
   284f8:	ac400017 	ldw	r17,0(r21)
   284fc:	ac000117 	ldw	r16,4(r21)
   28500:	ad400204 	addi	r21,r21,8
   28504:	003f8a06 	br	28330 <__sfvwrite_r+0x68>
   28508:	91400417 	ldw	r5,16(r18)
   2850c:	e009883a 	mov	r4,fp
   28510:	0027fb40 	call	27fb4 <_free_r>
   28514:	00800304 	movi	r2,12
   28518:	e0800015 	stw	r2,0(fp)
   2851c:	9080030b 	ldhu	r2,12(r18)
   28520:	013fffc4 	movi	r4,-1
   28524:	10801014 	ori	r2,r2,64
   28528:	9080030d 	sth	r2,12(r18)
   2852c:	003f9306 	br	2837c <__sfvwrite_r+0xb4>
   28530:	0027883a 	mov	r19,zero
   28534:	002f883a 	mov	r23,zero
   28538:	d8000015 	stw	zero,0(sp)
   2853c:	0029883a 	mov	r20,zero
   28540:	98001e26 	beq	r19,zero,285bc <__sfvwrite_r+0x2f4>
   28544:	d8c00017 	ldw	r3,0(sp)
   28548:	1804c03a 	cmpne	r2,r3,zero
   2854c:	10005e26 	beq	r2,zero,286c8 <__sfvwrite_r+0x400>
   28550:	9821883a 	mov	r16,r19
   28554:	a4c0012e 	bgeu	r20,r19,2855c <__sfvwrite_r+0x294>
   28558:	a021883a 	mov	r16,r20
   2855c:	91000017 	ldw	r4,0(r18)
   28560:	90800417 	ldw	r2,16(r18)
   28564:	91800217 	ldw	r6,8(r18)
   28568:	91c00517 	ldw	r7,20(r18)
   2856c:	1100022e 	bgeu	r2,r4,28578 <__sfvwrite_r+0x2b0>
   28570:	31e3883a 	add	r17,r6,r7
   28574:	8c001616 	blt	r17,r16,285d0 <__sfvwrite_r+0x308>
   28578:	81c03816 	blt	r16,r7,2865c <__sfvwrite_r+0x394>
   2857c:	90c00917 	ldw	r3,36(r18)
   28580:	91400717 	ldw	r5,28(r18)
   28584:	e009883a 	mov	r4,fp
   28588:	b80d883a 	mov	r6,r23
   2858c:	183ee83a 	callr	r3
   28590:	1023883a 	mov	r17,r2
   28594:	00bfe10e 	bge	zero,r2,2851c <__sfvwrite_r+0x254>
   28598:	a469c83a 	sub	r20,r20,r17
   2859c:	a0001826 	beq	r20,zero,28600 <__sfvwrite_r+0x338>
   285a0:	b0800217 	ldw	r2,8(r22)
   285a4:	1445c83a 	sub	r2,r2,r17
   285a8:	b0800215 	stw	r2,8(r22)
   285ac:	103f7226 	beq	r2,zero,28378 <__sfvwrite_r+0xb0>
   285b0:	9c67c83a 	sub	r19,r19,r17
   285b4:	bc6f883a 	add	r23,r23,r17
   285b8:	983fe21e 	bne	r19,zero,28544 <__sfvwrite_r+0x27c>
   285bc:	adc00017 	ldw	r23,0(r21)
   285c0:	acc00117 	ldw	r19,4(r21)
   285c4:	ad400204 	addi	r21,r21,8
   285c8:	d8000015 	stw	zero,0(sp)
   285cc:	003fdc06 	br	28540 <__sfvwrite_r+0x278>
   285d0:	b80b883a 	mov	r5,r23
   285d4:	880d883a 	mov	r6,r17
   285d8:	0028c940 	call	28c94 <memmove>
   285dc:	90c00017 	ldw	r3,0(r18)
   285e0:	e009883a 	mov	r4,fp
   285e4:	900b883a 	mov	r5,r18
   285e8:	1c47883a 	add	r3,r3,r17
   285ec:	90c00015 	stw	r3,0(r18)
   285f0:	00279980 	call	27998 <_fflush_r>
   285f4:	103fc91e 	bne	r2,zero,2851c <__sfvwrite_r+0x254>
   285f8:	a469c83a 	sub	r20,r20,r17
   285fc:	a03fe81e 	bne	r20,zero,285a0 <__sfvwrite_r+0x2d8>
   28600:	e009883a 	mov	r4,fp
   28604:	900b883a 	mov	r5,r18
   28608:	00279980 	call	27998 <_fflush_r>
   2860c:	103fc31e 	bne	r2,zero,2851c <__sfvwrite_r+0x254>
   28610:	d8000015 	stw	zero,0(sp)
   28614:	003fe206 	br	285a0 <__sfvwrite_r+0x2d8>
   28618:	91000017 	ldw	r4,0(r18)
   2861c:	90800417 	ldw	r2,16(r18)
   28620:	1100022e 	bgeu	r2,r4,2862c <__sfvwrite_r+0x364>
   28624:	8023883a 	mov	r17,r16
   28628:	85003136 	bltu	r16,r20,286f0 <__sfvwrite_r+0x428>
   2862c:	91c00517 	ldw	r7,20(r18)
   28630:	a1c01836 	bltu	r20,r7,28694 <__sfvwrite_r+0x3cc>
   28634:	90c00917 	ldw	r3,36(r18)
   28638:	91400717 	ldw	r5,28(r18)
   2863c:	e009883a 	mov	r4,fp
   28640:	b80d883a 	mov	r6,r23
   28644:	183ee83a 	callr	r3
   28648:	1021883a 	mov	r16,r2
   2864c:	00bfb30e 	bge	zero,r2,2851c <__sfvwrite_r+0x254>
   28650:	1023883a 	mov	r17,r2
   28654:	1027883a 	mov	r19,r2
   28658:	003f9b06 	br	284c8 <__sfvwrite_r+0x200>
   2865c:	b80b883a 	mov	r5,r23
   28660:	800d883a 	mov	r6,r16
   28664:	0028c940 	call	28c94 <memmove>
   28668:	90c00217 	ldw	r3,8(r18)
   2866c:	90800017 	ldw	r2,0(r18)
   28670:	8023883a 	mov	r17,r16
   28674:	1c07c83a 	sub	r3,r3,r16
   28678:	1405883a 	add	r2,r2,r16
   2867c:	90c00215 	stw	r3,8(r18)
   28680:	90800015 	stw	r2,0(r18)
   28684:	003fc406 	br	28598 <__sfvwrite_r+0x2d0>
   28688:	a00d883a 	mov	r6,r20
   2868c:	a021883a 	mov	r16,r20
   28690:	003f8106 	br	28498 <__sfvwrite_r+0x1d0>
   28694:	b80b883a 	mov	r5,r23
   28698:	a00d883a 	mov	r6,r20
   2869c:	0028c940 	call	28c94 <memmove>
   286a0:	90c00217 	ldw	r3,8(r18)
   286a4:	90800017 	ldw	r2,0(r18)
   286a8:	a021883a 	mov	r16,r20
   286ac:	1d07c83a 	sub	r3,r3,r20
   286b0:	1505883a 	add	r2,r2,r20
   286b4:	a023883a 	mov	r17,r20
   286b8:	a027883a 	mov	r19,r20
   286bc:	90c00215 	stw	r3,8(r18)
   286c0:	90800015 	stw	r2,0(r18)
   286c4:	003f8006 	br	284c8 <__sfvwrite_r+0x200>
   286c8:	b809883a 	mov	r4,r23
   286cc:	01400284 	movi	r5,10
   286d0:	980d883a 	mov	r6,r19
   286d4:	0028bb00 	call	28bb0 <memchr>
   286d8:	10001726 	beq	r2,zero,28738 <__sfvwrite_r+0x470>
   286dc:	15c5c83a 	sub	r2,r2,r23
   286e0:	15000044 	addi	r20,r2,1
   286e4:	00800044 	movi	r2,1
   286e8:	d8800015 	stw	r2,0(sp)
   286ec:	003f9806 	br	28550 <__sfvwrite_r+0x288>
   286f0:	b80b883a 	mov	r5,r23
   286f4:	800d883a 	mov	r6,r16
   286f8:	0028c940 	call	28c94 <memmove>
   286fc:	90c00017 	ldw	r3,0(r18)
   28700:	e009883a 	mov	r4,fp
   28704:	900b883a 	mov	r5,r18
   28708:	1c07883a 	add	r3,r3,r16
   2870c:	90c00015 	stw	r3,0(r18)
   28710:	8027883a 	mov	r19,r16
   28714:	00279980 	call	27998 <_fflush_r>
   28718:	103f6b26 	beq	r2,zero,284c8 <__sfvwrite_r+0x200>
   2871c:	003f7f06 	br	2851c <__sfvwrite_r+0x254>
   28720:	400b883a 	mov	r5,r8
   28724:	e009883a 	mov	r4,fp
   28728:	0029e000 	call	29e00 <_realloc_r>
   2872c:	103f7626 	beq	r2,zero,28508 <__sfvwrite_r+0x240>
   28730:	1023883a 	mov	r17,r2
   28734:	003f5006 	br	28478 <__sfvwrite_r+0x1b0>
   28738:	00c00044 	movi	r3,1
   2873c:	9d000044 	addi	r20,r19,1
   28740:	d8c00015 	stw	r3,0(sp)
   28744:	003f8206 	br	28550 <__sfvwrite_r+0x288>
   28748:	9080030b 	ldhu	r2,12(r18)
   2874c:	00c00244 	movi	r3,9
   28750:	013fffc4 	movi	r4,-1
   28754:	10801014 	ori	r2,r2,64
   28758:	9080030d 	sth	r2,12(r18)
   2875c:	e0c00015 	stw	r3,0(fp)
   28760:	003f0606 	br	2837c <__sfvwrite_r+0xb4>

00028764 <_fwalk_reent>:
   28764:	defff704 	addi	sp,sp,-36
   28768:	dcc00315 	stw	r19,12(sp)
   2876c:	24c0b804 	addi	r19,r4,736
   28770:	dd800615 	stw	r22,24(sp)
   28774:	dd400515 	stw	r21,20(sp)
   28778:	dfc00815 	stw	ra,32(sp)
   2877c:	ddc00715 	stw	r23,28(sp)
   28780:	dd000415 	stw	r20,16(sp)
   28784:	dc800215 	stw	r18,8(sp)
   28788:	dc400115 	stw	r17,4(sp)
   2878c:	dc000015 	stw	r16,0(sp)
   28790:	202b883a 	mov	r21,r4
   28794:	282d883a 	mov	r22,r5
   28798:	0027c200 	call	27c20 <__sfp_lock_acquire>
   2879c:	98002126 	beq	r19,zero,28824 <_fwalk_reent+0xc0>
   287a0:	002f883a 	mov	r23,zero
   287a4:	9c800117 	ldw	r18,4(r19)
   287a8:	9c000217 	ldw	r16,8(r19)
   287ac:	90bfffc4 	addi	r2,r18,-1
   287b0:	10000d16 	blt	r2,zero,287e8 <_fwalk_reent+0x84>
   287b4:	0023883a 	mov	r17,zero
   287b8:	053fffc4 	movi	r20,-1
   287bc:	8080030f 	ldh	r2,12(r16)
   287c0:	8c400044 	addi	r17,r17,1
   287c4:	10000626 	beq	r2,zero,287e0 <_fwalk_reent+0x7c>
   287c8:	8080038f 	ldh	r2,14(r16)
   287cc:	800b883a 	mov	r5,r16
   287d0:	a809883a 	mov	r4,r21
   287d4:	15000226 	beq	r2,r20,287e0 <_fwalk_reent+0x7c>
   287d8:	b03ee83a 	callr	r22
   287dc:	b8aeb03a 	or	r23,r23,r2
   287e0:	84001704 	addi	r16,r16,92
   287e4:	947ff51e 	bne	r18,r17,287bc <_fwalk_reent+0x58>
   287e8:	9cc00017 	ldw	r19,0(r19)
   287ec:	983fed1e 	bne	r19,zero,287a4 <_fwalk_reent+0x40>
   287f0:	0027c240 	call	27c24 <__sfp_lock_release>
   287f4:	b805883a 	mov	r2,r23
   287f8:	dfc00817 	ldw	ra,32(sp)
   287fc:	ddc00717 	ldw	r23,28(sp)
   28800:	dd800617 	ldw	r22,24(sp)
   28804:	dd400517 	ldw	r21,20(sp)
   28808:	dd000417 	ldw	r20,16(sp)
   2880c:	dcc00317 	ldw	r19,12(sp)
   28810:	dc800217 	ldw	r18,8(sp)
   28814:	dc400117 	ldw	r17,4(sp)
   28818:	dc000017 	ldw	r16,0(sp)
   2881c:	dec00904 	addi	sp,sp,36
   28820:	f800283a 	ret
   28824:	002f883a 	mov	r23,zero
   28828:	003ff106 	br	287f0 <_fwalk_reent+0x8c>

0002882c <_fwalk>:
   2882c:	defff804 	addi	sp,sp,-32
   28830:	dcc00315 	stw	r19,12(sp)
   28834:	24c0b804 	addi	r19,r4,736
   28838:	dd400515 	stw	r21,20(sp)
   2883c:	dfc00715 	stw	ra,28(sp)
   28840:	dd800615 	stw	r22,24(sp)
   28844:	dd000415 	stw	r20,16(sp)
   28848:	dc800215 	stw	r18,8(sp)
   2884c:	dc400115 	stw	r17,4(sp)
   28850:	dc000015 	stw	r16,0(sp)
   28854:	282b883a 	mov	r21,r5
   28858:	0027c200 	call	27c20 <__sfp_lock_acquire>
   2885c:	98001f26 	beq	r19,zero,288dc <_fwalk+0xb0>
   28860:	002d883a 	mov	r22,zero
   28864:	9c800117 	ldw	r18,4(r19)
   28868:	9c000217 	ldw	r16,8(r19)
   2886c:	90bfffc4 	addi	r2,r18,-1
   28870:	10000c16 	blt	r2,zero,288a4 <_fwalk+0x78>
   28874:	0023883a 	mov	r17,zero
   28878:	053fffc4 	movi	r20,-1
   2887c:	8080030f 	ldh	r2,12(r16)
   28880:	8c400044 	addi	r17,r17,1
   28884:	10000526 	beq	r2,zero,2889c <_fwalk+0x70>
   28888:	8080038f 	ldh	r2,14(r16)
   2888c:	8009883a 	mov	r4,r16
   28890:	15000226 	beq	r2,r20,2889c <_fwalk+0x70>
   28894:	a83ee83a 	callr	r21
   28898:	b0acb03a 	or	r22,r22,r2
   2889c:	84001704 	addi	r16,r16,92
   288a0:	947ff61e 	bne	r18,r17,2887c <_fwalk+0x50>
   288a4:	9cc00017 	ldw	r19,0(r19)
   288a8:	983fee1e 	bne	r19,zero,28864 <_fwalk+0x38>
   288ac:	0027c240 	call	27c24 <__sfp_lock_release>
   288b0:	b005883a 	mov	r2,r22
   288b4:	dfc00717 	ldw	ra,28(sp)
   288b8:	dd800617 	ldw	r22,24(sp)
   288bc:	dd400517 	ldw	r21,20(sp)
   288c0:	dd000417 	ldw	r20,16(sp)
   288c4:	dcc00317 	ldw	r19,12(sp)
   288c8:	dc800217 	ldw	r18,8(sp)
   288cc:	dc400117 	ldw	r17,4(sp)
   288d0:	dc000017 	ldw	r16,0(sp)
   288d4:	dec00804 	addi	sp,sp,32
   288d8:	f800283a 	ret
   288dc:	002d883a 	mov	r22,zero
   288e0:	003ff206 	br	288ac <_fwalk+0x80>

000288e4 <_gettimeofday_r>:
   288e4:	defffd04 	addi	sp,sp,-12
   288e8:	dc000015 	stw	r16,0(sp)
   288ec:	040000f4 	movhi	r16,3
   288f0:	84088804 	addi	r16,r16,8736
   288f4:	dc400115 	stw	r17,4(sp)
   288f8:	80000015 	stw	zero,0(r16)
   288fc:	2023883a 	mov	r17,r4
   28900:	2809883a 	mov	r4,r5
   28904:	300b883a 	mov	r5,r6
   28908:	dfc00215 	stw	ra,8(sp)
   2890c:	002be340 	call	2be34 <gettimeofday>
   28910:	1007883a 	mov	r3,r2
   28914:	00bfffc4 	movi	r2,-1
   28918:	18800626 	beq	r3,r2,28934 <_gettimeofday_r+0x50>
   2891c:	1805883a 	mov	r2,r3
   28920:	dfc00217 	ldw	ra,8(sp)
   28924:	dc400117 	ldw	r17,4(sp)
   28928:	dc000017 	ldw	r16,0(sp)
   2892c:	dec00304 	addi	sp,sp,12
   28930:	f800283a 	ret
   28934:	80800017 	ldw	r2,0(r16)
   28938:	103ff826 	beq	r2,zero,2891c <_gettimeofday_r+0x38>
   2893c:	88800015 	stw	r2,0(r17)
   28940:	1805883a 	mov	r2,r3
   28944:	dfc00217 	ldw	ra,8(sp)
   28948:	dc400117 	ldw	r17,4(sp)
   2894c:	dc000017 	ldw	r16,0(sp)
   28950:	dec00304 	addi	sp,sp,12
   28954:	f800283a 	ret

00028958 <__locale_charset>:
   28958:	d0a00517 	ldw	r2,-32748(gp)
   2895c:	f800283a 	ret

00028960 <_localeconv_r>:
   28960:	008000f4 	movhi	r2,3
   28964:	10baf404 	addi	r2,r2,-5168
   28968:	f800283a 	ret

0002896c <localeconv>:
   2896c:	008000f4 	movhi	r2,3
   28970:	1081df04 	addi	r2,r2,1916
   28974:	11000017 	ldw	r4,0(r2)
   28978:	00289601 	jmpi	28960 <_localeconv_r>

0002897c <_setlocale_r>:
   2897c:	defffc04 	addi	sp,sp,-16
   28980:	00c000f4 	movhi	r3,3
   28984:	18faef04 	addi	r3,r3,-5188
   28988:	dc800215 	stw	r18,8(sp)
   2898c:	dc400115 	stw	r17,4(sp)
   28990:	dc000015 	stw	r16,0(sp)
   28994:	2023883a 	mov	r17,r4
   28998:	2825883a 	mov	r18,r5
   2899c:	dfc00315 	stw	ra,12(sp)
   289a0:	3021883a 	mov	r16,r6
   289a4:	3009883a 	mov	r4,r6
   289a8:	180b883a 	mov	r5,r3
   289ac:	30000926 	beq	r6,zero,289d4 <_setlocale_r+0x58>
   289b0:	002a5b00 	call	2a5b0 <strcmp>
   289b4:	8009883a 	mov	r4,r16
   289b8:	014000f4 	movhi	r5,3
   289bc:	297ada04 	addi	r5,r5,-5272
   289c0:	10000b1e 	bne	r2,zero,289f0 <_setlocale_r+0x74>
   289c4:	8c000d15 	stw	r16,52(r17)
   289c8:	8c800c15 	stw	r18,48(r17)
   289cc:	00c000f4 	movhi	r3,3
   289d0:	18faef04 	addi	r3,r3,-5188
   289d4:	1805883a 	mov	r2,r3
   289d8:	dfc00317 	ldw	ra,12(sp)
   289dc:	dc800217 	ldw	r18,8(sp)
   289e0:	dc400117 	ldw	r17,4(sp)
   289e4:	dc000017 	ldw	r16,0(sp)
   289e8:	dec00404 	addi	sp,sp,16
   289ec:	f800283a 	ret
   289f0:	002a5b00 	call	2a5b0 <strcmp>
   289f4:	0007883a 	mov	r3,zero
   289f8:	103ff226 	beq	r2,zero,289c4 <_setlocale_r+0x48>
   289fc:	003ff506 	br	289d4 <_setlocale_r+0x58>

00028a00 <setlocale>:
   28a00:	018000f4 	movhi	r6,3
   28a04:	3181df04 	addi	r6,r6,1916
   28a08:	2007883a 	mov	r3,r4
   28a0c:	31000017 	ldw	r4,0(r6)
   28a10:	280d883a 	mov	r6,r5
   28a14:	180b883a 	mov	r5,r3
   28a18:	002897c1 	jmpi	2897c <_setlocale_r>

00028a1c <__smakebuf_r>:
   28a1c:	2880030b 	ldhu	r2,12(r5)
   28a20:	deffed04 	addi	sp,sp,-76
   28a24:	dc401015 	stw	r17,64(sp)
   28a28:	1080008c 	andi	r2,r2,2
   28a2c:	dc000f15 	stw	r16,60(sp)
   28a30:	dfc01215 	stw	ra,72(sp)
   28a34:	dc801115 	stw	r18,68(sp)
   28a38:	2821883a 	mov	r16,r5
   28a3c:	2023883a 	mov	r17,r4
   28a40:	10000b26 	beq	r2,zero,28a70 <__smakebuf_r+0x54>
   28a44:	28c010c4 	addi	r3,r5,67
   28a48:	00800044 	movi	r2,1
   28a4c:	28800515 	stw	r2,20(r5)
   28a50:	28c00415 	stw	r3,16(r5)
   28a54:	28c00015 	stw	r3,0(r5)
   28a58:	dfc01217 	ldw	ra,72(sp)
   28a5c:	dc801117 	ldw	r18,68(sp)
   28a60:	dc401017 	ldw	r17,64(sp)
   28a64:	dc000f17 	ldw	r16,60(sp)
   28a68:	dec01304 	addi	sp,sp,76
   28a6c:	f800283a 	ret
   28a70:	2940038f 	ldh	r5,14(r5)
   28a74:	28002116 	blt	r5,zero,28afc <__smakebuf_r+0xe0>
   28a78:	d80d883a 	mov	r6,sp
   28a7c:	002a9a00 	call	2a9a0 <_fstat_r>
   28a80:	10001e16 	blt	r2,zero,28afc <__smakebuf_r+0xe0>
   28a84:	d8800117 	ldw	r2,4(sp)
   28a88:	00e00014 	movui	r3,32768
   28a8c:	113c000c 	andi	r4,r2,61440
   28a90:	20c03126 	beq	r4,r3,28b58 <__smakebuf_r+0x13c>
   28a94:	8080030b 	ldhu	r2,12(r16)
   28a98:	00c80004 	movi	r3,8192
   28a9c:	10820014 	ori	r2,r2,2048
   28aa0:	8080030d 	sth	r2,12(r16)
   28aa4:	20c01e26 	beq	r4,r3,28b20 <__smakebuf_r+0x104>
   28aa8:	04810004 	movi	r18,1024
   28aac:	8809883a 	mov	r4,r17
   28ab0:	900b883a 	mov	r5,r18
   28ab4:	00237b00 	call	237b0 <_malloc_r>
   28ab8:	1009883a 	mov	r4,r2
   28abc:	10003126 	beq	r2,zero,28b84 <__smakebuf_r+0x168>
   28ac0:	80c0030b 	ldhu	r3,12(r16)
   28ac4:	008000b4 	movhi	r2,2
   28ac8:	109f4504 	addi	r2,r2,32020
   28acc:	88800f15 	stw	r2,60(r17)
   28ad0:	18c02014 	ori	r3,r3,128
   28ad4:	84800515 	stw	r18,20(r16)
   28ad8:	80c0030d 	sth	r3,12(r16)
   28adc:	81000415 	stw	r4,16(r16)
   28ae0:	81000015 	stw	r4,0(r16)
   28ae4:	dfc01217 	ldw	ra,72(sp)
   28ae8:	dc801117 	ldw	r18,68(sp)
   28aec:	dc401017 	ldw	r17,64(sp)
   28af0:	dc000f17 	ldw	r16,60(sp)
   28af4:	dec01304 	addi	sp,sp,76
   28af8:	f800283a 	ret
   28afc:	80c0030b 	ldhu	r3,12(r16)
   28b00:	1880200c 	andi	r2,r3,128
   28b04:	10000426 	beq	r2,zero,28b18 <__smakebuf_r+0xfc>
   28b08:	04801004 	movi	r18,64
   28b0c:	18820014 	ori	r2,r3,2048
   28b10:	8080030d 	sth	r2,12(r16)
   28b14:	003fe506 	br	28aac <__smakebuf_r+0x90>
   28b18:	04810004 	movi	r18,1024
   28b1c:	003ffb06 	br	28b0c <__smakebuf_r+0xf0>
   28b20:	8140038f 	ldh	r5,14(r16)
   28b24:	8809883a 	mov	r4,r17
   28b28:	002aa140 	call	2aa14 <_isatty_r>
   28b2c:	103fde26 	beq	r2,zero,28aa8 <__smakebuf_r+0x8c>
   28b30:	8080030b 	ldhu	r2,12(r16)
   28b34:	80c010c4 	addi	r3,r16,67
   28b38:	04810004 	movi	r18,1024
   28b3c:	10800054 	ori	r2,r2,1
   28b40:	8080030d 	sth	r2,12(r16)
   28b44:	00800044 	movi	r2,1
   28b48:	80c00415 	stw	r3,16(r16)
   28b4c:	80800515 	stw	r2,20(r16)
   28b50:	80c00015 	stw	r3,0(r16)
   28b54:	003fd506 	br	28aac <__smakebuf_r+0x90>
   28b58:	80c00a17 	ldw	r3,40(r16)
   28b5c:	008000f4 	movhi	r2,3
   28b60:	10a91b04 	addi	r2,r2,-23444
   28b64:	18bfcb1e 	bne	r3,r2,28a94 <__smakebuf_r+0x78>
   28b68:	8080030b 	ldhu	r2,12(r16)
   28b6c:	00c10004 	movi	r3,1024
   28b70:	1825883a 	mov	r18,r3
   28b74:	10c4b03a 	or	r2,r2,r3
   28b78:	8080030d 	sth	r2,12(r16)
   28b7c:	80c01315 	stw	r3,76(r16)
   28b80:	003fca06 	br	28aac <__smakebuf_r+0x90>
   28b84:	8100030b 	ldhu	r4,12(r16)
   28b88:	2080800c 	andi	r2,r4,512
   28b8c:	103fb21e 	bne	r2,zero,28a58 <__smakebuf_r+0x3c>
   28b90:	80c010c4 	addi	r3,r16,67
   28b94:	21000094 	ori	r4,r4,2
   28b98:	00800044 	movi	r2,1
   28b9c:	80800515 	stw	r2,20(r16)
   28ba0:	8100030d 	sth	r4,12(r16)
   28ba4:	80c00415 	stw	r3,16(r16)
   28ba8:	80c00015 	stw	r3,0(r16)
   28bac:	003faa06 	br	28a58 <__smakebuf_r+0x3c>

00028bb0 <memchr>:
   28bb0:	008000c4 	movi	r2,3
   28bb4:	29403fcc 	andi	r5,r5,255
   28bb8:	2007883a 	mov	r3,r4
   28bbc:	1180022e 	bgeu	r2,r6,28bc8 <memchr+0x18>
   28bc0:	2084703a 	and	r2,r4,r2
   28bc4:	10000b26 	beq	r2,zero,28bf4 <memchr+0x44>
   28bc8:	313fffc4 	addi	r4,r6,-1
   28bcc:	3000051e 	bne	r6,zero,28be4 <memchr+0x34>
   28bd0:	00002c06 	br	28c84 <memchr+0xd4>
   28bd4:	213fffc4 	addi	r4,r4,-1
   28bd8:	00bfffc4 	movi	r2,-1
   28bdc:	18c00044 	addi	r3,r3,1
   28be0:	20802826 	beq	r4,r2,28c84 <memchr+0xd4>
   28be4:	18800003 	ldbu	r2,0(r3)
   28be8:	28bffa1e 	bne	r5,r2,28bd4 <memchr+0x24>
   28bec:	1805883a 	mov	r2,r3
   28bf0:	f800283a 	ret
   28bf4:	0011883a 	mov	r8,zero
   28bf8:	0007883a 	mov	r3,zero
   28bfc:	01c00104 	movi	r7,4
   28c00:	4004923a 	slli	r2,r8,8
   28c04:	18c00044 	addi	r3,r3,1
   28c08:	1151883a 	add	r8,r2,r5
   28c0c:	19fffc1e 	bne	r3,r7,28c00 <memchr+0x50>
   28c10:	02bfbff4 	movhi	r10,65279
   28c14:	52bfbfc4 	addi	r10,r10,-257
   28c18:	02602074 	movhi	r9,32897
   28c1c:	4a602004 	addi	r9,r9,-32640
   28c20:	02c000c4 	movi	r11,3
   28c24:	20800017 	ldw	r2,0(r4)
   28c28:	31bfff04 	addi	r6,r6,-4
   28c2c:	200f883a 	mov	r7,r4
   28c30:	1204f03a 	xor	r2,r2,r8
   28c34:	1287883a 	add	r3,r2,r10
   28c38:	1a46703a 	and	r3,r3,r9
   28c3c:	0084303a 	nor	r2,zero,r2
   28c40:	10c4703a 	and	r2,r2,r3
   28c44:	10000b26 	beq	r2,zero,28c74 <memchr+0xc4>
   28c48:	20800003 	ldbu	r2,0(r4)
   28c4c:	28800f26 	beq	r5,r2,28c8c <memchr+0xdc>
   28c50:	20800043 	ldbu	r2,1(r4)
   28c54:	21c00044 	addi	r7,r4,1
   28c58:	28800c26 	beq	r5,r2,28c8c <memchr+0xdc>
   28c5c:	20800083 	ldbu	r2,2(r4)
   28c60:	21c00084 	addi	r7,r4,2
   28c64:	28800926 	beq	r5,r2,28c8c <memchr+0xdc>
   28c68:	208000c3 	ldbu	r2,3(r4)
   28c6c:	21c000c4 	addi	r7,r4,3
   28c70:	28800626 	beq	r5,r2,28c8c <memchr+0xdc>
   28c74:	21000104 	addi	r4,r4,4
   28c78:	59bfea36 	bltu	r11,r6,28c24 <memchr+0x74>
   28c7c:	2007883a 	mov	r3,r4
   28c80:	003fd106 	br	28bc8 <memchr+0x18>
   28c84:	0005883a 	mov	r2,zero
   28c88:	f800283a 	ret
   28c8c:	3805883a 	mov	r2,r7
   28c90:	f800283a 	ret

00028c94 <memmove>:
   28c94:	2807883a 	mov	r3,r5
   28c98:	2011883a 	mov	r8,r4
   28c9c:	29000c2e 	bgeu	r5,r4,28cd0 <memmove+0x3c>
   28ca0:	298f883a 	add	r7,r5,r6
   28ca4:	21c00a2e 	bgeu	r4,r7,28cd0 <memmove+0x3c>
   28ca8:	30000726 	beq	r6,zero,28cc8 <memmove+0x34>
   28cac:	2187883a 	add	r3,r4,r6
   28cb0:	198dc83a 	sub	r6,r3,r6
   28cb4:	39ffffc4 	addi	r7,r7,-1
   28cb8:	38800003 	ldbu	r2,0(r7)
   28cbc:	18ffffc4 	addi	r3,r3,-1
   28cc0:	18800005 	stb	r2,0(r3)
   28cc4:	19bffb1e 	bne	r3,r6,28cb4 <memmove+0x20>
   28cc8:	2005883a 	mov	r2,r4
   28ccc:	f800283a 	ret
   28cd0:	01c003c4 	movi	r7,15
   28cd4:	39800a36 	bltu	r7,r6,28d00 <memmove+0x6c>
   28cd8:	303ffb26 	beq	r6,zero,28cc8 <memmove+0x34>
   28cdc:	400f883a 	mov	r7,r8
   28ce0:	320d883a 	add	r6,r6,r8
   28ce4:	28800003 	ldbu	r2,0(r5)
   28ce8:	29400044 	addi	r5,r5,1
   28cec:	38800005 	stb	r2,0(r7)
   28cf0:	39c00044 	addi	r7,r7,1
   28cf4:	39bffb1e 	bne	r7,r6,28ce4 <memmove+0x50>
   28cf8:	2005883a 	mov	r2,r4
   28cfc:	f800283a 	ret
   28d00:	1904b03a 	or	r2,r3,r4
   28d04:	108000cc 	andi	r2,r2,3
   28d08:	103ff31e 	bne	r2,zero,28cd8 <memmove+0x44>
   28d0c:	3811883a 	mov	r8,r7
   28d10:	180b883a 	mov	r5,r3
   28d14:	200f883a 	mov	r7,r4
   28d18:	28c00017 	ldw	r3,0(r5)
   28d1c:	31bffc04 	addi	r6,r6,-16
   28d20:	38c00015 	stw	r3,0(r7)
   28d24:	28800117 	ldw	r2,4(r5)
   28d28:	38800115 	stw	r2,4(r7)
   28d2c:	28c00217 	ldw	r3,8(r5)
   28d30:	38c00215 	stw	r3,8(r7)
   28d34:	28800317 	ldw	r2,12(r5)
   28d38:	29400404 	addi	r5,r5,16
   28d3c:	38800315 	stw	r2,12(r7)
   28d40:	39c00404 	addi	r7,r7,16
   28d44:	41bff436 	bltu	r8,r6,28d18 <memmove+0x84>
   28d48:	008000c4 	movi	r2,3
   28d4c:	1180072e 	bgeu	r2,r6,28d6c <memmove+0xd8>
   28d50:	1007883a 	mov	r3,r2
   28d54:	28800017 	ldw	r2,0(r5)
   28d58:	31bfff04 	addi	r6,r6,-4
   28d5c:	29400104 	addi	r5,r5,4
   28d60:	38800015 	stw	r2,0(r7)
   28d64:	39c00104 	addi	r7,r7,4
   28d68:	19bffa36 	bltu	r3,r6,28d54 <memmove+0xc0>
   28d6c:	3811883a 	mov	r8,r7
   28d70:	003fd906 	br	28cd8 <memmove+0x44>

00028d74 <memset>:
   28d74:	008000c4 	movi	r2,3
   28d78:	29403fcc 	andi	r5,r5,255
   28d7c:	2007883a 	mov	r3,r4
   28d80:	1180022e 	bgeu	r2,r6,28d8c <memset+0x18>
   28d84:	2084703a 	and	r2,r4,r2
   28d88:	10000826 	beq	r2,zero,28dac <memset+0x38>
   28d8c:	30000526 	beq	r6,zero,28da4 <memset+0x30>
   28d90:	2805883a 	mov	r2,r5
   28d94:	30cd883a 	add	r6,r6,r3
   28d98:	18800005 	stb	r2,0(r3)
   28d9c:	18c00044 	addi	r3,r3,1
   28da0:	19bffd1e 	bne	r3,r6,28d98 <memset+0x24>
   28da4:	2005883a 	mov	r2,r4
   28da8:	f800283a 	ret
   28dac:	2804923a 	slli	r2,r5,8
   28db0:	020003c4 	movi	r8,15
   28db4:	200f883a 	mov	r7,r4
   28db8:	2884b03a 	or	r2,r5,r2
   28dbc:	1006943a 	slli	r3,r2,16
   28dc0:	10c6b03a 	or	r3,r2,r3
   28dc4:	41800a2e 	bgeu	r8,r6,28df0 <memset+0x7c>
   28dc8:	4005883a 	mov	r2,r8
   28dcc:	31bffc04 	addi	r6,r6,-16
   28dd0:	38c00015 	stw	r3,0(r7)
   28dd4:	38c00115 	stw	r3,4(r7)
   28dd8:	38c00215 	stw	r3,8(r7)
   28ddc:	38c00315 	stw	r3,12(r7)
   28de0:	39c00404 	addi	r7,r7,16
   28de4:	11bff936 	bltu	r2,r6,28dcc <memset+0x58>
   28de8:	008000c4 	movi	r2,3
   28dec:	1180052e 	bgeu	r2,r6,28e04 <memset+0x90>
   28df0:	31bfff04 	addi	r6,r6,-4
   28df4:	008000c4 	movi	r2,3
   28df8:	38c00015 	stw	r3,0(r7)
   28dfc:	39c00104 	addi	r7,r7,4
   28e00:	11bffb36 	bltu	r2,r6,28df0 <memset+0x7c>
   28e04:	3807883a 	mov	r3,r7
   28e08:	003fe006 	br	28d8c <memset+0x18>

00028e0c <_Bfree>:
   28e0c:	28000826 	beq	r5,zero,28e30 <_Bfree+0x24>
   28e10:	28800117 	ldw	r2,4(r5)
   28e14:	21001317 	ldw	r4,76(r4)
   28e18:	1085883a 	add	r2,r2,r2
   28e1c:	1085883a 	add	r2,r2,r2
   28e20:	1105883a 	add	r2,r2,r4
   28e24:	10c00017 	ldw	r3,0(r2)
   28e28:	28c00015 	stw	r3,0(r5)
   28e2c:	11400015 	stw	r5,0(r2)
   28e30:	f800283a 	ret

00028e34 <__hi0bits>:
   28e34:	20bfffec 	andhi	r2,r4,65535
   28e38:	10001426 	beq	r2,zero,28e8c <__hi0bits+0x58>
   28e3c:	0007883a 	mov	r3,zero
   28e40:	20bfc02c 	andhi	r2,r4,65280
   28e44:	1000021e 	bne	r2,zero,28e50 <__hi0bits+0x1c>
   28e48:	2008923a 	slli	r4,r4,8
   28e4c:	18c00204 	addi	r3,r3,8
   28e50:	20bc002c 	andhi	r2,r4,61440
   28e54:	1000021e 	bne	r2,zero,28e60 <__hi0bits+0x2c>
   28e58:	2008913a 	slli	r4,r4,4
   28e5c:	18c00104 	addi	r3,r3,4
   28e60:	20b0002c 	andhi	r2,r4,49152
   28e64:	1000031e 	bne	r2,zero,28e74 <__hi0bits+0x40>
   28e68:	2105883a 	add	r2,r4,r4
   28e6c:	18c00084 	addi	r3,r3,2
   28e70:	1089883a 	add	r4,r2,r2
   28e74:	20000316 	blt	r4,zero,28e84 <__hi0bits+0x50>
   28e78:	2090002c 	andhi	r2,r4,16384
   28e7c:	10000626 	beq	r2,zero,28e98 <__hi0bits+0x64>
   28e80:	18c00044 	addi	r3,r3,1
   28e84:	1805883a 	mov	r2,r3
   28e88:	f800283a 	ret
   28e8c:	2008943a 	slli	r4,r4,16
   28e90:	00c00404 	movi	r3,16
   28e94:	003fea06 	br	28e40 <__hi0bits+0xc>
   28e98:	00c00804 	movi	r3,32
   28e9c:	1805883a 	mov	r2,r3
   28ea0:	f800283a 	ret

00028ea4 <__lo0bits>:
   28ea4:	20c00017 	ldw	r3,0(r4)
   28ea8:	188001cc 	andi	r2,r3,7
   28eac:	10000a26 	beq	r2,zero,28ed8 <__lo0bits+0x34>
   28eb0:	1880004c 	andi	r2,r3,1
   28eb4:	1005003a 	cmpeq	r2,r2,zero
   28eb8:	10002126 	beq	r2,zero,28f40 <__lo0bits+0x9c>
   28ebc:	1880008c 	andi	r2,r3,2
   28ec0:	1000251e 	bne	r2,zero,28f58 <__lo0bits+0xb4>
   28ec4:	1804d0ba 	srli	r2,r3,2
   28ec8:	01400084 	movi	r5,2
   28ecc:	20800015 	stw	r2,0(r4)
   28ed0:	2805883a 	mov	r2,r5
   28ed4:	f800283a 	ret
   28ed8:	18bfffcc 	andi	r2,r3,65535
   28edc:	10001526 	beq	r2,zero,28f34 <__lo0bits+0x90>
   28ee0:	000b883a 	mov	r5,zero
   28ee4:	18803fcc 	andi	r2,r3,255
   28ee8:	1000021e 	bne	r2,zero,28ef4 <__lo0bits+0x50>
   28eec:	1806d23a 	srli	r3,r3,8
   28ef0:	29400204 	addi	r5,r5,8
   28ef4:	188003cc 	andi	r2,r3,15
   28ef8:	1000021e 	bne	r2,zero,28f04 <__lo0bits+0x60>
   28efc:	1806d13a 	srli	r3,r3,4
   28f00:	29400104 	addi	r5,r5,4
   28f04:	188000cc 	andi	r2,r3,3
   28f08:	1000021e 	bne	r2,zero,28f14 <__lo0bits+0x70>
   28f0c:	1806d0ba 	srli	r3,r3,2
   28f10:	29400084 	addi	r5,r5,2
   28f14:	1880004c 	andi	r2,r3,1
   28f18:	1000031e 	bne	r2,zero,28f28 <__lo0bits+0x84>
   28f1c:	1806d07a 	srli	r3,r3,1
   28f20:	18000a26 	beq	r3,zero,28f4c <__lo0bits+0xa8>
   28f24:	29400044 	addi	r5,r5,1
   28f28:	2805883a 	mov	r2,r5
   28f2c:	20c00015 	stw	r3,0(r4)
   28f30:	f800283a 	ret
   28f34:	1806d43a 	srli	r3,r3,16
   28f38:	01400404 	movi	r5,16
   28f3c:	003fe906 	br	28ee4 <__lo0bits+0x40>
   28f40:	000b883a 	mov	r5,zero
   28f44:	2805883a 	mov	r2,r5
   28f48:	f800283a 	ret
   28f4c:	01400804 	movi	r5,32
   28f50:	2805883a 	mov	r2,r5
   28f54:	f800283a 	ret
   28f58:	1804d07a 	srli	r2,r3,1
   28f5c:	01400044 	movi	r5,1
   28f60:	20800015 	stw	r2,0(r4)
   28f64:	003fda06 	br	28ed0 <__lo0bits+0x2c>

00028f68 <__mcmp>:
   28f68:	20800417 	ldw	r2,16(r4)
   28f6c:	28c00417 	ldw	r3,16(r5)
   28f70:	10cfc83a 	sub	r7,r2,r3
   28f74:	38000c1e 	bne	r7,zero,28fa8 <__mcmp+0x40>
   28f78:	18c5883a 	add	r2,r3,r3
   28f7c:	1085883a 	add	r2,r2,r2
   28f80:	10c00504 	addi	r3,r2,20
   28f84:	21000504 	addi	r4,r4,20
   28f88:	28cb883a 	add	r5,r5,r3
   28f8c:	2085883a 	add	r2,r4,r2
   28f90:	10bfff04 	addi	r2,r2,-4
   28f94:	297fff04 	addi	r5,r5,-4
   28f98:	11800017 	ldw	r6,0(r2)
   28f9c:	28c00017 	ldw	r3,0(r5)
   28fa0:	30c0031e 	bne	r6,r3,28fb0 <__mcmp+0x48>
   28fa4:	20bffa36 	bltu	r4,r2,28f90 <__mcmp+0x28>
   28fa8:	3805883a 	mov	r2,r7
   28fac:	f800283a 	ret
   28fb0:	30c00336 	bltu	r6,r3,28fc0 <__mcmp+0x58>
   28fb4:	01c00044 	movi	r7,1
   28fb8:	3805883a 	mov	r2,r7
   28fbc:	f800283a 	ret
   28fc0:	01ffffc4 	movi	r7,-1
   28fc4:	003ff806 	br	28fa8 <__mcmp+0x40>

00028fc8 <__ulp>:
   28fc8:	295ffc2c 	andhi	r5,r5,32752
   28fcc:	013f3034 	movhi	r4,64704
   28fd0:	290b883a 	add	r5,r5,r4
   28fd4:	0145c83a 	sub	r2,zero,r5
   28fd8:	1007d53a 	srai	r3,r2,20
   28fdc:	000d883a 	mov	r6,zero
   28fe0:	0140040e 	bge	zero,r5,28ff4 <__ulp+0x2c>
   28fe4:	280f883a 	mov	r7,r5
   28fe8:	3807883a 	mov	r3,r7
   28fec:	3005883a 	mov	r2,r6
   28ff0:	f800283a 	ret
   28ff4:	008004c4 	movi	r2,19
   28ff8:	193ffb04 	addi	r4,r3,-20
   28ffc:	10c00c0e 	bge	r2,r3,29030 <__ulp+0x68>
   29000:	008007c4 	movi	r2,31
   29004:	1107c83a 	sub	r3,r2,r4
   29008:	00800784 	movi	r2,30
   2900c:	01400044 	movi	r5,1
   29010:	11000216 	blt	r2,r4,2901c <__ulp+0x54>
   29014:	00800044 	movi	r2,1
   29018:	10ca983a 	sll	r5,r2,r3
   2901c:	000f883a 	mov	r7,zero
   29020:	280d883a 	mov	r6,r5
   29024:	3807883a 	mov	r3,r7
   29028:	3005883a 	mov	r2,r6
   2902c:	f800283a 	ret
   29030:	00800234 	movhi	r2,8
   29034:	10cfd83a 	sra	r7,r2,r3
   29038:	000d883a 	mov	r6,zero
   2903c:	3005883a 	mov	r2,r6
   29040:	3807883a 	mov	r3,r7
   29044:	f800283a 	ret

00029048 <__b2d>:
   29048:	20800417 	ldw	r2,16(r4)
   2904c:	defff904 	addi	sp,sp,-28
   29050:	dd000415 	stw	r20,16(sp)
   29054:	1085883a 	add	r2,r2,r2
   29058:	25000504 	addi	r20,r4,20
   2905c:	1085883a 	add	r2,r2,r2
   29060:	dc000015 	stw	r16,0(sp)
   29064:	a0a1883a 	add	r16,r20,r2
   29068:	dd400515 	stw	r21,20(sp)
   2906c:	857fff17 	ldw	r21,-4(r16)
   29070:	dc400115 	stw	r17,4(sp)
   29074:	dfc00615 	stw	ra,24(sp)
   29078:	a809883a 	mov	r4,r21
   2907c:	2823883a 	mov	r17,r5
   29080:	dcc00315 	stw	r19,12(sp)
   29084:	dc800215 	stw	r18,8(sp)
   29088:	0028e340 	call	28e34 <__hi0bits>
   2908c:	100b883a 	mov	r5,r2
   29090:	00800804 	movi	r2,32
   29094:	1145c83a 	sub	r2,r2,r5
   29098:	88800015 	stw	r2,0(r17)
   2909c:	00800284 	movi	r2,10
   290a0:	80ffff04 	addi	r3,r16,-4
   290a4:	11401416 	blt	r2,r5,290f8 <__b2d+0xb0>
   290a8:	008002c4 	movi	r2,11
   290ac:	1149c83a 	sub	r4,r2,r5
   290b0:	a0c02736 	bltu	r20,r3,29150 <__b2d+0x108>
   290b4:	000d883a 	mov	r6,zero
   290b8:	28800544 	addi	r2,r5,21
   290bc:	a906d83a 	srl	r3,r21,r4
   290c0:	a884983a 	sll	r2,r21,r2
   290c4:	1ccffc34 	orhi	r19,r3,16368
   290c8:	11a4b03a 	or	r18,r2,r6
   290cc:	9005883a 	mov	r2,r18
   290d0:	9807883a 	mov	r3,r19
   290d4:	dfc00617 	ldw	ra,24(sp)
   290d8:	dd400517 	ldw	r21,20(sp)
   290dc:	dd000417 	ldw	r20,16(sp)
   290e0:	dcc00317 	ldw	r19,12(sp)
   290e4:	dc800217 	ldw	r18,8(sp)
   290e8:	dc400117 	ldw	r17,4(sp)
   290ec:	dc000017 	ldw	r16,0(sp)
   290f0:	dec00704 	addi	sp,sp,28
   290f4:	f800283a 	ret
   290f8:	a0c00e36 	bltu	r20,r3,29134 <__b2d+0xec>
   290fc:	293ffd44 	addi	r4,r5,-11
   29100:	000d883a 	mov	r6,zero
   29104:	20000f26 	beq	r4,zero,29144 <__b2d+0xfc>
   29108:	00800804 	movi	r2,32
   2910c:	110bc83a 	sub	r5,r2,r4
   29110:	a0c01236 	bltu	r20,r3,2915c <__b2d+0x114>
   29114:	000f883a 	mov	r7,zero
   29118:	a904983a 	sll	r2,r21,r4
   2911c:	3146d83a 	srl	r3,r6,r5
   29120:	3108983a 	sll	r4,r6,r4
   29124:	108ffc34 	orhi	r2,r2,16368
   29128:	18a6b03a 	or	r19,r3,r2
   2912c:	3924b03a 	or	r18,r7,r4
   29130:	003fe606 	br	290cc <__b2d+0x84>
   29134:	293ffd44 	addi	r4,r5,-11
   29138:	81bffe17 	ldw	r6,-8(r16)
   2913c:	80fffe04 	addi	r3,r16,-8
   29140:	203ff11e 	bne	r4,zero,29108 <__b2d+0xc0>
   29144:	accffc34 	orhi	r19,r21,16368
   29148:	3025883a 	mov	r18,r6
   2914c:	003fdf06 	br	290cc <__b2d+0x84>
   29150:	18bfff17 	ldw	r2,-4(r3)
   29154:	110cd83a 	srl	r6,r2,r4
   29158:	003fd706 	br	290b8 <__b2d+0x70>
   2915c:	18bfff17 	ldw	r2,-4(r3)
   29160:	114ed83a 	srl	r7,r2,r5
   29164:	003fec06 	br	29118 <__b2d+0xd0>

00029168 <__ratio>:
   29168:	defff904 	addi	sp,sp,-28
   2916c:	dc400215 	stw	r17,8(sp)
   29170:	2823883a 	mov	r17,r5
   29174:	d80b883a 	mov	r5,sp
   29178:	dfc00615 	stw	ra,24(sp)
   2917c:	dd000515 	stw	r20,20(sp)
   29180:	dcc00415 	stw	r19,16(sp)
   29184:	dc800315 	stw	r18,12(sp)
   29188:	2025883a 	mov	r18,r4
   2918c:	00290480 	call	29048 <__b2d>
   29190:	8809883a 	mov	r4,r17
   29194:	d9400104 	addi	r5,sp,4
   29198:	1027883a 	mov	r19,r2
   2919c:	1829883a 	mov	r20,r3
   291a0:	00290480 	call	29048 <__b2d>
   291a4:	89000417 	ldw	r4,16(r17)
   291a8:	91c00417 	ldw	r7,16(r18)
   291ac:	d9800117 	ldw	r6,4(sp)
   291b0:	180b883a 	mov	r5,r3
   291b4:	390fc83a 	sub	r7,r7,r4
   291b8:	1009883a 	mov	r4,r2
   291bc:	d8800017 	ldw	r2,0(sp)
   291c0:	380e917a 	slli	r7,r7,5
   291c4:	2011883a 	mov	r8,r4
   291c8:	1185c83a 	sub	r2,r2,r6
   291cc:	11c5883a 	add	r2,r2,r7
   291d0:	1006953a 	slli	r3,r2,20
   291d4:	2813883a 	mov	r9,r5
   291d8:	00800d0e 	bge	zero,r2,29210 <__ratio+0xa8>
   291dc:	1d29883a 	add	r20,r3,r20
   291e0:	a00b883a 	mov	r5,r20
   291e4:	480f883a 	mov	r7,r9
   291e8:	9809883a 	mov	r4,r19
   291ec:	400d883a 	mov	r6,r8
   291f0:	00229240 	call	22924 <__divdf3>
   291f4:	dfc00617 	ldw	ra,24(sp)
   291f8:	dd000517 	ldw	r20,20(sp)
   291fc:	dcc00417 	ldw	r19,16(sp)
   29200:	dc800317 	ldw	r18,12(sp)
   29204:	dc400217 	ldw	r17,8(sp)
   29208:	dec00704 	addi	sp,sp,28
   2920c:	f800283a 	ret
   29210:	28d3c83a 	sub	r9,r5,r3
   29214:	003ff206 	br	291e0 <__ratio+0x78>

00029218 <_mprec_log10>:
   29218:	defffe04 	addi	sp,sp,-8
   2921c:	008005c4 	movi	r2,23
   29220:	dc000015 	stw	r16,0(sp)
   29224:	dfc00115 	stw	ra,4(sp)
   29228:	2021883a 	mov	r16,r4
   2922c:	11000c16 	blt	r2,r4,29260 <_mprec_log10+0x48>
   29230:	200490fa 	slli	r2,r4,3
   29234:	00c000f4 	movhi	r3,3
   29238:	18fb0004 	addi	r3,r3,-5120
   2923c:	10c5883a 	add	r2,r2,r3
   29240:	12400117 	ldw	r9,4(r2)
   29244:	12000017 	ldw	r8,0(r2)
   29248:	4807883a 	mov	r3,r9
   2924c:	4005883a 	mov	r2,r8
   29250:	dfc00117 	ldw	ra,4(sp)
   29254:	dc000017 	ldw	r16,0(sp)
   29258:	dec00204 	addi	sp,sp,8
   2925c:	f800283a 	ret
   29260:	0011883a 	mov	r8,zero
   29264:	024ffc34 	movhi	r9,16368
   29268:	0005883a 	mov	r2,zero
   2926c:	00d00934 	movhi	r3,16420
   29270:	480b883a 	mov	r5,r9
   29274:	4009883a 	mov	r4,r8
   29278:	180f883a 	mov	r7,r3
   2927c:	100d883a 	mov	r6,r2
   29280:	00225600 	call	22560 <__muldf3>
   29284:	843fffc4 	addi	r16,r16,-1
   29288:	1011883a 	mov	r8,r2
   2928c:	1813883a 	mov	r9,r3
   29290:	803ff51e 	bne	r16,zero,29268 <_mprec_log10+0x50>
   29294:	4005883a 	mov	r2,r8
   29298:	4807883a 	mov	r3,r9
   2929c:	dfc00117 	ldw	ra,4(sp)
   292a0:	dc000017 	ldw	r16,0(sp)
   292a4:	dec00204 	addi	sp,sp,8
   292a8:	f800283a 	ret

000292ac <__copybits>:
   292ac:	297fffc4 	addi	r5,r5,-1
   292b0:	30800417 	ldw	r2,16(r6)
   292b4:	280bd17a 	srai	r5,r5,5
   292b8:	31800504 	addi	r6,r6,20
   292bc:	1085883a 	add	r2,r2,r2
   292c0:	294b883a 	add	r5,r5,r5
   292c4:	294b883a 	add	r5,r5,r5
   292c8:	1085883a 	add	r2,r2,r2
   292cc:	290b883a 	add	r5,r5,r4
   292d0:	3087883a 	add	r3,r6,r2
   292d4:	29400104 	addi	r5,r5,4
   292d8:	30c0052e 	bgeu	r6,r3,292f0 <__copybits+0x44>
   292dc:	30800017 	ldw	r2,0(r6)
   292e0:	31800104 	addi	r6,r6,4
   292e4:	20800015 	stw	r2,0(r4)
   292e8:	21000104 	addi	r4,r4,4
   292ec:	30fffb36 	bltu	r6,r3,292dc <__copybits+0x30>
   292f0:	2140032e 	bgeu	r4,r5,29300 <__copybits+0x54>
   292f4:	20000015 	stw	zero,0(r4)
   292f8:	21000104 	addi	r4,r4,4
   292fc:	217ffd36 	bltu	r4,r5,292f4 <__copybits+0x48>
   29300:	f800283a 	ret

00029304 <__any_on>:
   29304:	20800417 	ldw	r2,16(r4)
   29308:	2807d17a 	srai	r3,r5,5
   2930c:	21000504 	addi	r4,r4,20
   29310:	10c00d0e 	bge	r2,r3,29348 <__any_on+0x44>
   29314:	1085883a 	add	r2,r2,r2
   29318:	1085883a 	add	r2,r2,r2
   2931c:	208d883a 	add	r6,r4,r2
   29320:	2180182e 	bgeu	r4,r6,29384 <__any_on+0x80>
   29324:	30bfff17 	ldw	r2,-4(r6)
   29328:	30ffff04 	addi	r3,r6,-4
   2932c:	1000041e 	bne	r2,zero,29340 <__any_on+0x3c>
   29330:	20c0142e 	bgeu	r4,r3,29384 <__any_on+0x80>
   29334:	18ffff04 	addi	r3,r3,-4
   29338:	18800017 	ldw	r2,0(r3)
   2933c:	103ffc26 	beq	r2,zero,29330 <__any_on+0x2c>
   29340:	00800044 	movi	r2,1
   29344:	f800283a 	ret
   29348:	18800a0e 	bge	r3,r2,29374 <__any_on+0x70>
   2934c:	294007cc 	andi	r5,r5,31
   29350:	28000826 	beq	r5,zero,29374 <__any_on+0x70>
   29354:	18c5883a 	add	r2,r3,r3
   29358:	1085883a 	add	r2,r2,r2
   2935c:	208d883a 	add	r6,r4,r2
   29360:	30c00017 	ldw	r3,0(r6)
   29364:	1944d83a 	srl	r2,r3,r5
   29368:	1144983a 	sll	r2,r2,r5
   2936c:	18bff41e 	bne	r3,r2,29340 <__any_on+0x3c>
   29370:	003feb06 	br	29320 <__any_on+0x1c>
   29374:	18c5883a 	add	r2,r3,r3
   29378:	1085883a 	add	r2,r2,r2
   2937c:	208d883a 	add	r6,r4,r2
   29380:	003fe706 	br	29320 <__any_on+0x1c>
   29384:	0005883a 	mov	r2,zero
   29388:	f800283a 	ret

0002938c <_Balloc>:
   2938c:	20c01317 	ldw	r3,76(r4)
   29390:	defffb04 	addi	sp,sp,-20
   29394:	dcc00315 	stw	r19,12(sp)
   29398:	dc800215 	stw	r18,8(sp)
   2939c:	dfc00415 	stw	ra,16(sp)
   293a0:	2825883a 	mov	r18,r5
   293a4:	dc400115 	stw	r17,4(sp)
   293a8:	dc000015 	stw	r16,0(sp)
   293ac:	2027883a 	mov	r19,r4
   293b0:	01800404 	movi	r6,16
   293b4:	01400104 	movi	r5,4
   293b8:	18001726 	beq	r3,zero,29418 <_Balloc+0x8c>
   293bc:	01400044 	movi	r5,1
   293c0:	9485883a 	add	r2,r18,r18
   293c4:	2ca2983a 	sll	r17,r5,r18
   293c8:	1085883a 	add	r2,r2,r2
   293cc:	10c7883a 	add	r3,r2,r3
   293d0:	1c000017 	ldw	r16,0(r3)
   293d4:	8c4d883a 	add	r6,r17,r17
   293d8:	318d883a 	add	r6,r6,r6
   293dc:	9809883a 	mov	r4,r19
   293e0:	31800504 	addi	r6,r6,20
   293e4:	80001226 	beq	r16,zero,29430 <_Balloc+0xa4>
   293e8:	80800017 	ldw	r2,0(r16)
   293ec:	18800015 	stw	r2,0(r3)
   293f0:	80000415 	stw	zero,16(r16)
   293f4:	80000315 	stw	zero,12(r16)
   293f8:	8005883a 	mov	r2,r16
   293fc:	dfc00417 	ldw	ra,16(sp)
   29400:	dcc00317 	ldw	r19,12(sp)
   29404:	dc800217 	ldw	r18,8(sp)
   29408:	dc400117 	ldw	r17,4(sp)
   2940c:	dc000017 	ldw	r16,0(sp)
   29410:	dec00504 	addi	sp,sp,20
   29414:	f800283a 	ret
   29418:	002a7580 	call	2a758 <_calloc_r>
   2941c:	1007883a 	mov	r3,r2
   29420:	0021883a 	mov	r16,zero
   29424:	98801315 	stw	r2,76(r19)
   29428:	103fe41e 	bne	r2,zero,293bc <_Balloc+0x30>
   2942c:	003ff206 	br	293f8 <_Balloc+0x6c>
   29430:	002a7580 	call	2a758 <_calloc_r>
   29434:	103ff026 	beq	r2,zero,293f8 <_Balloc+0x6c>
   29438:	1021883a 	mov	r16,r2
   2943c:	14800115 	stw	r18,4(r2)
   29440:	14400215 	stw	r17,8(r2)
   29444:	003fea06 	br	293f0 <_Balloc+0x64>

00029448 <__d2b>:
   29448:	defff504 	addi	sp,sp,-44
   2944c:	dcc00515 	stw	r19,20(sp)
   29450:	04c00044 	movi	r19,1
   29454:	dc000215 	stw	r16,8(sp)
   29458:	2821883a 	mov	r16,r5
   2945c:	980b883a 	mov	r5,r19
   29460:	ddc00915 	stw	r23,36(sp)
   29464:	dd800815 	stw	r22,32(sp)
   29468:	dd400715 	stw	r21,28(sp)
   2946c:	dd000615 	stw	r20,24(sp)
   29470:	dc800415 	stw	r18,16(sp)
   29474:	dc400315 	stw	r17,12(sp)
   29478:	dfc00a15 	stw	ra,40(sp)
   2947c:	3023883a 	mov	r17,r6
   29480:	382d883a 	mov	r22,r7
   29484:	ddc00b17 	ldw	r23,44(sp)
   29488:	002938c0 	call	2938c <_Balloc>
   2948c:	1025883a 	mov	r18,r2
   29490:	00a00034 	movhi	r2,32768
   29494:	10bfffc4 	addi	r2,r2,-1
   29498:	8888703a 	and	r4,r17,r2
   2949c:	202ad53a 	srli	r21,r4,20
   294a0:	00800434 	movhi	r2,16
   294a4:	10bfffc4 	addi	r2,r2,-1
   294a8:	8886703a 	and	r3,r17,r2
   294ac:	a829003a 	cmpeq	r20,r21,zero
   294b0:	800b883a 	mov	r5,r16
   294b4:	d8c00115 	stw	r3,4(sp)
   294b8:	94000504 	addi	r16,r18,20
   294bc:	a000021e 	bne	r20,zero,294c8 <__d2b+0x80>
   294c0:	18c00434 	orhi	r3,r3,16
   294c4:	d8c00115 	stw	r3,4(sp)
   294c8:	28002726 	beq	r5,zero,29568 <__d2b+0x120>
   294cc:	d809883a 	mov	r4,sp
   294d0:	d9400015 	stw	r5,0(sp)
   294d4:	0028ea40 	call	28ea4 <__lo0bits>
   294d8:	100d883a 	mov	r6,r2
   294dc:	10003526 	beq	r2,zero,295b4 <__d2b+0x16c>
   294e0:	d8c00117 	ldw	r3,4(sp)
   294e4:	00800804 	movi	r2,32
   294e8:	1185c83a 	sub	r2,r2,r6
   294ec:	d9000017 	ldw	r4,0(sp)
   294f0:	1886983a 	sll	r3,r3,r2
   294f4:	1906b03a 	or	r3,r3,r4
   294f8:	90c00515 	stw	r3,20(r18)
   294fc:	d8c00117 	ldw	r3,4(sp)
   29500:	1986d83a 	srl	r3,r3,r6
   29504:	d8c00115 	stw	r3,4(sp)
   29508:	180b003a 	cmpeq	r5,r3,zero
   2950c:	00800084 	movi	r2,2
   29510:	114bc83a 	sub	r5,r2,r5
   29514:	80c00115 	stw	r3,4(r16)
   29518:	91400415 	stw	r5,16(r18)
   2951c:	a0001a1e 	bne	r20,zero,29588 <__d2b+0x140>
   29520:	3545883a 	add	r2,r6,r21
   29524:	10bef344 	addi	r2,r2,-1075
   29528:	00c00d44 	movi	r3,53
   2952c:	b0800015 	stw	r2,0(r22)
   29530:	1987c83a 	sub	r3,r3,r6
   29534:	b8c00015 	stw	r3,0(r23)
   29538:	9005883a 	mov	r2,r18
   2953c:	dfc00a17 	ldw	ra,40(sp)
   29540:	ddc00917 	ldw	r23,36(sp)
   29544:	dd800817 	ldw	r22,32(sp)
   29548:	dd400717 	ldw	r21,28(sp)
   2954c:	dd000617 	ldw	r20,24(sp)
   29550:	dcc00517 	ldw	r19,20(sp)
   29554:	dc800417 	ldw	r18,16(sp)
   29558:	dc400317 	ldw	r17,12(sp)
   2955c:	dc000217 	ldw	r16,8(sp)
   29560:	dec00b04 	addi	sp,sp,44
   29564:	f800283a 	ret
   29568:	d9000104 	addi	r4,sp,4
   2956c:	0028ea40 	call	28ea4 <__lo0bits>
   29570:	11800804 	addi	r6,r2,32
   29574:	d8800117 	ldw	r2,4(sp)
   29578:	94c00415 	stw	r19,16(r18)
   2957c:	980b883a 	mov	r5,r19
   29580:	90800515 	stw	r2,20(r18)
   29584:	a03fe626 	beq	r20,zero,29520 <__d2b+0xd8>
   29588:	2945883a 	add	r2,r5,r5
   2958c:	1085883a 	add	r2,r2,r2
   29590:	1405883a 	add	r2,r2,r16
   29594:	113fff17 	ldw	r4,-4(r2)
   29598:	30fef384 	addi	r3,r6,-1074
   2959c:	2820917a 	slli	r16,r5,5
   295a0:	b0c00015 	stw	r3,0(r22)
   295a4:	0028e340 	call	28e34 <__hi0bits>
   295a8:	80a1c83a 	sub	r16,r16,r2
   295ac:	bc000015 	stw	r16,0(r23)
   295b0:	003fe106 	br	29538 <__d2b+0xf0>
   295b4:	d8800017 	ldw	r2,0(sp)
   295b8:	90800515 	stw	r2,20(r18)
   295bc:	d8c00117 	ldw	r3,4(sp)
   295c0:	003fd106 	br	29508 <__d2b+0xc0>

000295c4 <__mdiff>:
   295c4:	defffb04 	addi	sp,sp,-20
   295c8:	dc000015 	stw	r16,0(sp)
   295cc:	2821883a 	mov	r16,r5
   295d0:	dc800215 	stw	r18,8(sp)
   295d4:	300b883a 	mov	r5,r6
   295d8:	2025883a 	mov	r18,r4
   295dc:	8009883a 	mov	r4,r16
   295e0:	dc400115 	stw	r17,4(sp)
   295e4:	dfc00415 	stw	ra,16(sp)
   295e8:	dcc00315 	stw	r19,12(sp)
   295ec:	3023883a 	mov	r17,r6
   295f0:	0028f680 	call	28f68 <__mcmp>
   295f4:	10004226 	beq	r2,zero,29700 <__mdiff+0x13c>
   295f8:	10005016 	blt	r2,zero,2973c <__mdiff+0x178>
   295fc:	0027883a 	mov	r19,zero
   29600:	81400117 	ldw	r5,4(r16)
   29604:	9009883a 	mov	r4,r18
   29608:	002938c0 	call	2938c <_Balloc>
   2960c:	1019883a 	mov	r12,r2
   29610:	82800417 	ldw	r10,16(r16)
   29614:	88800417 	ldw	r2,16(r17)
   29618:	81800504 	addi	r6,r16,20
   2961c:	5287883a 	add	r3,r10,r10
   29620:	1085883a 	add	r2,r2,r2
   29624:	18c7883a 	add	r3,r3,r3
   29628:	1085883a 	add	r2,r2,r2
   2962c:	8a000504 	addi	r8,r17,20
   29630:	64c00315 	stw	r19,12(r12)
   29634:	30db883a 	add	r13,r6,r3
   29638:	4097883a 	add	r11,r8,r2
   2963c:	61c00504 	addi	r7,r12,20
   29640:	0013883a 	mov	r9,zero
   29644:	31000017 	ldw	r4,0(r6)
   29648:	41400017 	ldw	r5,0(r8)
   2964c:	42000104 	addi	r8,r8,4
   29650:	20bfffcc 	andi	r2,r4,65535
   29654:	28ffffcc 	andi	r3,r5,65535
   29658:	10c5c83a 	sub	r2,r2,r3
   2965c:	1245883a 	add	r2,r2,r9
   29660:	2008d43a 	srli	r4,r4,16
   29664:	280ad43a 	srli	r5,r5,16
   29668:	1007d43a 	srai	r3,r2,16
   2966c:	3880000d 	sth	r2,0(r7)
   29670:	2149c83a 	sub	r4,r4,r5
   29674:	20c9883a 	add	r4,r4,r3
   29678:	3900008d 	sth	r4,2(r7)
   2967c:	31800104 	addi	r6,r6,4
   29680:	39c00104 	addi	r7,r7,4
   29684:	2013d43a 	srai	r9,r4,16
   29688:	42ffee36 	bltu	r8,r11,29644 <__mdiff+0x80>
   2968c:	33400c2e 	bgeu	r6,r13,296c0 <__mdiff+0xfc>
   29690:	30800017 	ldw	r2,0(r6)
   29694:	31800104 	addi	r6,r6,4
   29698:	10ffffcc 	andi	r3,r2,65535
   2969c:	1a47883a 	add	r3,r3,r9
   296a0:	1004d43a 	srli	r2,r2,16
   296a4:	1809d43a 	srai	r4,r3,16
   296a8:	38c0000d 	sth	r3,0(r7)
   296ac:	1105883a 	add	r2,r2,r4
   296b0:	3880008d 	sth	r2,2(r7)
   296b4:	1013d43a 	srai	r9,r2,16
   296b8:	39c00104 	addi	r7,r7,4
   296bc:	337ff436 	bltu	r6,r13,29690 <__mdiff+0xcc>
   296c0:	38bfff17 	ldw	r2,-4(r7)
   296c4:	38ffff04 	addi	r3,r7,-4
   296c8:	1000041e 	bne	r2,zero,296dc <__mdiff+0x118>
   296cc:	18ffff04 	addi	r3,r3,-4
   296d0:	18800017 	ldw	r2,0(r3)
   296d4:	52bfffc4 	addi	r10,r10,-1
   296d8:	103ffc26 	beq	r2,zero,296cc <__mdiff+0x108>
   296dc:	6005883a 	mov	r2,r12
   296e0:	62800415 	stw	r10,16(r12)
   296e4:	dfc00417 	ldw	ra,16(sp)
   296e8:	dcc00317 	ldw	r19,12(sp)
   296ec:	dc800217 	ldw	r18,8(sp)
   296f0:	dc400117 	ldw	r17,4(sp)
   296f4:	dc000017 	ldw	r16,0(sp)
   296f8:	dec00504 	addi	sp,sp,20
   296fc:	f800283a 	ret
   29700:	9009883a 	mov	r4,r18
   29704:	000b883a 	mov	r5,zero
   29708:	002938c0 	call	2938c <_Balloc>
   2970c:	1019883a 	mov	r12,r2
   29710:	00800044 	movi	r2,1
   29714:	60800415 	stw	r2,16(r12)
   29718:	6005883a 	mov	r2,r12
   2971c:	60000515 	stw	zero,20(r12)
   29720:	dfc00417 	ldw	ra,16(sp)
   29724:	dcc00317 	ldw	r19,12(sp)
   29728:	dc800217 	ldw	r18,8(sp)
   2972c:	dc400117 	ldw	r17,4(sp)
   29730:	dc000017 	ldw	r16,0(sp)
   29734:	dec00504 	addi	sp,sp,20
   29738:	f800283a 	ret
   2973c:	880d883a 	mov	r6,r17
   29740:	04c00044 	movi	r19,1
   29744:	8023883a 	mov	r17,r16
   29748:	3021883a 	mov	r16,r6
   2974c:	003fac06 	br	29600 <__mdiff+0x3c>

00029750 <__lshift>:
   29750:	defff904 	addi	sp,sp,-28
   29754:	28800417 	ldw	r2,16(r5)
   29758:	dc000015 	stw	r16,0(sp)
   2975c:	3021d17a 	srai	r16,r6,5
   29760:	28c00217 	ldw	r3,8(r5)
   29764:	10800044 	addi	r2,r2,1
   29768:	dc400115 	stw	r17,4(sp)
   2976c:	80a3883a 	add	r17,r16,r2
   29770:	dd400515 	stw	r21,20(sp)
   29774:	dd000415 	stw	r20,16(sp)
   29778:	dc800215 	stw	r18,8(sp)
   2977c:	dfc00615 	stw	ra,24(sp)
   29780:	2825883a 	mov	r18,r5
   29784:	dcc00315 	stw	r19,12(sp)
   29788:	3029883a 	mov	r20,r6
   2978c:	202b883a 	mov	r21,r4
   29790:	29400117 	ldw	r5,4(r5)
   29794:	1c40030e 	bge	r3,r17,297a4 <__lshift+0x54>
   29798:	18c7883a 	add	r3,r3,r3
   2979c:	29400044 	addi	r5,r5,1
   297a0:	1c7ffd16 	blt	r3,r17,29798 <__lshift+0x48>
   297a4:	a809883a 	mov	r4,r21
   297a8:	002938c0 	call	2938c <_Balloc>
   297ac:	1027883a 	mov	r19,r2
   297b0:	11400504 	addi	r5,r2,20
   297b4:	0400090e 	bge	zero,r16,297dc <__lshift+0x8c>
   297b8:	2805883a 	mov	r2,r5
   297bc:	0007883a 	mov	r3,zero
   297c0:	18c00044 	addi	r3,r3,1
   297c4:	10000015 	stw	zero,0(r2)
   297c8:	10800104 	addi	r2,r2,4
   297cc:	80fffc1e 	bne	r16,r3,297c0 <__lshift+0x70>
   297d0:	8405883a 	add	r2,r16,r16
   297d4:	1085883a 	add	r2,r2,r2
   297d8:	288b883a 	add	r5,r5,r2
   297dc:	90800417 	ldw	r2,16(r18)
   297e0:	91000504 	addi	r4,r18,20
   297e4:	a18007cc 	andi	r6,r20,31
   297e8:	1085883a 	add	r2,r2,r2
   297ec:	1085883a 	add	r2,r2,r2
   297f0:	208f883a 	add	r7,r4,r2
   297f4:	30001e26 	beq	r6,zero,29870 <__lshift+0x120>
   297f8:	00800804 	movi	r2,32
   297fc:	1191c83a 	sub	r8,r2,r6
   29800:	0007883a 	mov	r3,zero
   29804:	20800017 	ldw	r2,0(r4)
   29808:	1184983a 	sll	r2,r2,r6
   2980c:	1884b03a 	or	r2,r3,r2
   29810:	28800015 	stw	r2,0(r5)
   29814:	20c00017 	ldw	r3,0(r4)
   29818:	21000104 	addi	r4,r4,4
   2981c:	29400104 	addi	r5,r5,4
   29820:	1a06d83a 	srl	r3,r3,r8
   29824:	21fff736 	bltu	r4,r7,29804 <__lshift+0xb4>
   29828:	28c00015 	stw	r3,0(r5)
   2982c:	18000126 	beq	r3,zero,29834 <__lshift+0xe4>
   29830:	8c400044 	addi	r17,r17,1
   29834:	88bfffc4 	addi	r2,r17,-1
   29838:	98800415 	stw	r2,16(r19)
   2983c:	a809883a 	mov	r4,r21
   29840:	900b883a 	mov	r5,r18
   29844:	0028e0c0 	call	28e0c <_Bfree>
   29848:	9805883a 	mov	r2,r19
   2984c:	dfc00617 	ldw	ra,24(sp)
   29850:	dd400517 	ldw	r21,20(sp)
   29854:	dd000417 	ldw	r20,16(sp)
   29858:	dcc00317 	ldw	r19,12(sp)
   2985c:	dc800217 	ldw	r18,8(sp)
   29860:	dc400117 	ldw	r17,4(sp)
   29864:	dc000017 	ldw	r16,0(sp)
   29868:	dec00704 	addi	sp,sp,28
   2986c:	f800283a 	ret
   29870:	20800017 	ldw	r2,0(r4)
   29874:	21000104 	addi	r4,r4,4
   29878:	28800015 	stw	r2,0(r5)
   2987c:	29400104 	addi	r5,r5,4
   29880:	21ffec2e 	bgeu	r4,r7,29834 <__lshift+0xe4>
   29884:	20800017 	ldw	r2,0(r4)
   29888:	21000104 	addi	r4,r4,4
   2988c:	28800015 	stw	r2,0(r5)
   29890:	29400104 	addi	r5,r5,4
   29894:	21fff636 	bltu	r4,r7,29870 <__lshift+0x120>
   29898:	003fe606 	br	29834 <__lshift+0xe4>

0002989c <__multiply>:
   2989c:	defff904 	addi	sp,sp,-28
   298a0:	dcc00315 	stw	r19,12(sp)
   298a4:	dc800215 	stw	r18,8(sp)
   298a8:	2cc00417 	ldw	r19,16(r5)
   298ac:	34800417 	ldw	r18,16(r6)
   298b0:	dd000415 	stw	r20,16(sp)
   298b4:	dc400115 	stw	r17,4(sp)
   298b8:	dfc00615 	stw	ra,24(sp)
   298bc:	dd400515 	stw	r21,20(sp)
   298c0:	dc000015 	stw	r16,0(sp)
   298c4:	2823883a 	mov	r17,r5
   298c8:	3029883a 	mov	r20,r6
   298cc:	9c80040e 	bge	r19,r18,298e0 <__multiply+0x44>
   298d0:	9027883a 	mov	r19,r18
   298d4:	2c800417 	ldw	r18,16(r5)
   298d8:	2829883a 	mov	r20,r5
   298dc:	3023883a 	mov	r17,r6
   298e0:	88800217 	ldw	r2,8(r17)
   298e4:	9ca1883a 	add	r16,r19,r18
   298e8:	89400117 	ldw	r5,4(r17)
   298ec:	1400010e 	bge	r2,r16,298f4 <__multiply+0x58>
   298f0:	29400044 	addi	r5,r5,1
   298f4:	002938c0 	call	2938c <_Balloc>
   298f8:	102b883a 	mov	r21,r2
   298fc:	8405883a 	add	r2,r16,r16
   29900:	1085883a 	add	r2,r2,r2
   29904:	a9000504 	addi	r4,r21,20
   29908:	209d883a 	add	r14,r4,r2
   2990c:	2380042e 	bgeu	r4,r14,29920 <__multiply+0x84>
   29910:	2005883a 	mov	r2,r4
   29914:	10000015 	stw	zero,0(r2)
   29918:	10800104 	addi	r2,r2,4
   2991c:	13bffd36 	bltu	r2,r14,29914 <__multiply+0x78>
   29920:	9485883a 	add	r2,r18,r18
   29924:	9cc7883a 	add	r3,r19,r19
   29928:	a1800504 	addi	r6,r20,20
   2992c:	1085883a 	add	r2,r2,r2
   29930:	8b400504 	addi	r13,r17,20
   29934:	18c7883a 	add	r3,r3,r3
   29938:	309f883a 	add	r15,r6,r2
   2993c:	68d7883a 	add	r11,r13,r3
   29940:	33c03b2e 	bgeu	r6,r15,29a30 <__multiply+0x194>
   29944:	2019883a 	mov	r12,r4
   29948:	30800017 	ldw	r2,0(r6)
   2994c:	127fffcc 	andi	r9,r2,65535
   29950:	48001826 	beq	r9,zero,299b4 <__multiply+0x118>
   29954:	6811883a 	mov	r8,r13
   29958:	600f883a 	mov	r7,r12
   2995c:	0015883a 	mov	r10,zero
   29960:	40c00017 	ldw	r3,0(r8)
   29964:	39400017 	ldw	r5,0(r7)
   29968:	42000104 	addi	r8,r8,4
   2996c:	193fffcc 	andi	r4,r3,65535
   29970:	4909383a 	mul	r4,r9,r4
   29974:	1806d43a 	srli	r3,r3,16
   29978:	28bfffcc 	andi	r2,r5,65535
   2997c:	5085883a 	add	r2,r10,r2
   29980:	2089883a 	add	r4,r4,r2
   29984:	48c7383a 	mul	r3,r9,r3
   29988:	280ad43a 	srli	r5,r5,16
   2998c:	2004d43a 	srli	r2,r4,16
   29990:	3900000d 	sth	r4,0(r7)
   29994:	1947883a 	add	r3,r3,r5
   29998:	10c5883a 	add	r2,r2,r3
   2999c:	3880008d 	sth	r2,2(r7)
   299a0:	1014d43a 	srli	r10,r2,16
   299a4:	39c00104 	addi	r7,r7,4
   299a8:	42ffed36 	bltu	r8,r11,29960 <__multiply+0xc4>
   299ac:	3a800015 	stw	r10,0(r7)
   299b0:	30800017 	ldw	r2,0(r6)
   299b4:	1012d43a 	srli	r9,r2,16
   299b8:	48001926 	beq	r9,zero,29a20 <__multiply+0x184>
   299bc:	60800017 	ldw	r2,0(r12)
   299c0:	6811883a 	mov	r8,r13
   299c4:	600f883a 	mov	r7,r12
   299c8:	0015883a 	mov	r10,zero
   299cc:	100b883a 	mov	r5,r2
   299d0:	41000017 	ldw	r4,0(r8)
   299d4:	2806d43a 	srli	r3,r5,16
   299d8:	3880000d 	sth	r2,0(r7)
   299dc:	20bfffcc 	andi	r2,r4,65535
   299e0:	4885383a 	mul	r2,r9,r2
   299e4:	50c7883a 	add	r3,r10,r3
   299e8:	2008d43a 	srli	r4,r4,16
   299ec:	10c5883a 	add	r2,r2,r3
   299f0:	3880008d 	sth	r2,2(r7)
   299f4:	39c00104 	addi	r7,r7,4
   299f8:	39400017 	ldw	r5,0(r7)
   299fc:	4909383a 	mul	r4,r9,r4
   29a00:	1004d43a 	srli	r2,r2,16
   29a04:	28ffffcc 	andi	r3,r5,65535
   29a08:	20c9883a 	add	r4,r4,r3
   29a0c:	1105883a 	add	r2,r2,r4
   29a10:	42000104 	addi	r8,r8,4
   29a14:	1014d43a 	srli	r10,r2,16
   29a18:	42ffed36 	bltu	r8,r11,299d0 <__multiply+0x134>
   29a1c:	38800015 	stw	r2,0(r7)
   29a20:	31800104 	addi	r6,r6,4
   29a24:	33c0022e 	bgeu	r6,r15,29a30 <__multiply+0x194>
   29a28:	63000104 	addi	r12,r12,4
   29a2c:	003fc606 	br	29948 <__multiply+0xac>
   29a30:	0400090e 	bge	zero,r16,29a58 <__multiply+0x1bc>
   29a34:	70bfff17 	ldw	r2,-4(r14)
   29a38:	70ffff04 	addi	r3,r14,-4
   29a3c:	10000326 	beq	r2,zero,29a4c <__multiply+0x1b0>
   29a40:	00000506 	br	29a58 <__multiply+0x1bc>
   29a44:	18800017 	ldw	r2,0(r3)
   29a48:	1000031e 	bne	r2,zero,29a58 <__multiply+0x1bc>
   29a4c:	843fffc4 	addi	r16,r16,-1
   29a50:	18ffff04 	addi	r3,r3,-4
   29a54:	803ffb1e 	bne	r16,zero,29a44 <__multiply+0x1a8>
   29a58:	a805883a 	mov	r2,r21
   29a5c:	ac000415 	stw	r16,16(r21)
   29a60:	dfc00617 	ldw	ra,24(sp)
   29a64:	dd400517 	ldw	r21,20(sp)
   29a68:	dd000417 	ldw	r20,16(sp)
   29a6c:	dcc00317 	ldw	r19,12(sp)
   29a70:	dc800217 	ldw	r18,8(sp)
   29a74:	dc400117 	ldw	r17,4(sp)
   29a78:	dc000017 	ldw	r16,0(sp)
   29a7c:	dec00704 	addi	sp,sp,28
   29a80:	f800283a 	ret

00029a84 <__i2b>:
   29a84:	defffd04 	addi	sp,sp,-12
   29a88:	dc000015 	stw	r16,0(sp)
   29a8c:	04000044 	movi	r16,1
   29a90:	dc800115 	stw	r18,4(sp)
   29a94:	2825883a 	mov	r18,r5
   29a98:	800b883a 	mov	r5,r16
   29a9c:	dfc00215 	stw	ra,8(sp)
   29aa0:	002938c0 	call	2938c <_Balloc>
   29aa4:	14000415 	stw	r16,16(r2)
   29aa8:	14800515 	stw	r18,20(r2)
   29aac:	dfc00217 	ldw	ra,8(sp)
   29ab0:	dc800117 	ldw	r18,4(sp)
   29ab4:	dc000017 	ldw	r16,0(sp)
   29ab8:	dec00304 	addi	sp,sp,12
   29abc:	f800283a 	ret

00029ac0 <__multadd>:
   29ac0:	defffa04 	addi	sp,sp,-24
   29ac4:	dc800215 	stw	r18,8(sp)
   29ac8:	2c800417 	ldw	r18,16(r5)
   29acc:	dd000415 	stw	r20,16(sp)
   29ad0:	dcc00315 	stw	r19,12(sp)
   29ad4:	dc000015 	stw	r16,0(sp)
   29ad8:	dfc00515 	stw	ra,20(sp)
   29adc:	3821883a 	mov	r16,r7
   29ae0:	dc400115 	stw	r17,4(sp)
   29ae4:	2827883a 	mov	r19,r5
   29ae8:	2029883a 	mov	r20,r4
   29aec:	2a000504 	addi	r8,r5,20
   29af0:	000f883a 	mov	r7,zero
   29af4:	40800017 	ldw	r2,0(r8)
   29af8:	39c00044 	addi	r7,r7,1
   29afc:	10ffffcc 	andi	r3,r2,65535
   29b00:	1987383a 	mul	r3,r3,r6
   29b04:	1004d43a 	srli	r2,r2,16
   29b08:	1c07883a 	add	r3,r3,r16
   29b0c:	180ad43a 	srli	r5,r3,16
   29b10:	1185383a 	mul	r2,r2,r6
   29b14:	18ffffcc 	andi	r3,r3,65535
   29b18:	1145883a 	add	r2,r2,r5
   29b1c:	1008943a 	slli	r4,r2,16
   29b20:	1020d43a 	srli	r16,r2,16
   29b24:	20c9883a 	add	r4,r4,r3
   29b28:	41000015 	stw	r4,0(r8)
   29b2c:	42000104 	addi	r8,r8,4
   29b30:	3cbff016 	blt	r7,r18,29af4 <__multadd+0x34>
   29b34:	80000826 	beq	r16,zero,29b58 <__multadd+0x98>
   29b38:	98800217 	ldw	r2,8(r19)
   29b3c:	90800f0e 	bge	r18,r2,29b7c <__multadd+0xbc>
   29b40:	9485883a 	add	r2,r18,r18
   29b44:	1085883a 	add	r2,r2,r2
   29b48:	14c5883a 	add	r2,r2,r19
   29b4c:	90c00044 	addi	r3,r18,1
   29b50:	14000515 	stw	r16,20(r2)
   29b54:	98c00415 	stw	r3,16(r19)
   29b58:	9805883a 	mov	r2,r19
   29b5c:	dfc00517 	ldw	ra,20(sp)
   29b60:	dd000417 	ldw	r20,16(sp)
   29b64:	dcc00317 	ldw	r19,12(sp)
   29b68:	dc800217 	ldw	r18,8(sp)
   29b6c:	dc400117 	ldw	r17,4(sp)
   29b70:	dc000017 	ldw	r16,0(sp)
   29b74:	dec00604 	addi	sp,sp,24
   29b78:	f800283a 	ret
   29b7c:	99400117 	ldw	r5,4(r19)
   29b80:	a009883a 	mov	r4,r20
   29b84:	29400044 	addi	r5,r5,1
   29b88:	002938c0 	call	2938c <_Balloc>
   29b8c:	99800417 	ldw	r6,16(r19)
   29b90:	99400304 	addi	r5,r19,12
   29b94:	11000304 	addi	r4,r2,12
   29b98:	318d883a 	add	r6,r6,r6
   29b9c:	318d883a 	add	r6,r6,r6
   29ba0:	31800204 	addi	r6,r6,8
   29ba4:	1023883a 	mov	r17,r2
   29ba8:	0023ef00 	call	23ef0 <memcpy>
   29bac:	980b883a 	mov	r5,r19
   29bb0:	a009883a 	mov	r4,r20
   29bb4:	0028e0c0 	call	28e0c <_Bfree>
   29bb8:	8827883a 	mov	r19,r17
   29bbc:	003fe006 	br	29b40 <__multadd+0x80>

00029bc0 <__pow5mult>:
   29bc0:	defffa04 	addi	sp,sp,-24
   29bc4:	308000cc 	andi	r2,r6,3
   29bc8:	dd000415 	stw	r20,16(sp)
   29bcc:	dcc00315 	stw	r19,12(sp)
   29bd0:	dc000015 	stw	r16,0(sp)
   29bd4:	dfc00515 	stw	ra,20(sp)
   29bd8:	dc800215 	stw	r18,8(sp)
   29bdc:	dc400115 	stw	r17,4(sp)
   29be0:	3021883a 	mov	r16,r6
   29be4:	2027883a 	mov	r19,r4
   29be8:	2829883a 	mov	r20,r5
   29bec:	10002b1e 	bne	r2,zero,29c9c <__pow5mult+0xdc>
   29bf0:	8025d0ba 	srai	r18,r16,2
   29bf4:	90001b26 	beq	r18,zero,29c64 <__pow5mult+0xa4>
   29bf8:	9c001217 	ldw	r16,72(r19)
   29bfc:	8000081e 	bne	r16,zero,29c20 <__pow5mult+0x60>
   29c00:	00003006 	br	29cc4 <__pow5mult+0x104>
   29c04:	800b883a 	mov	r5,r16
   29c08:	800d883a 	mov	r6,r16
   29c0c:	9809883a 	mov	r4,r19
   29c10:	90001426 	beq	r18,zero,29c64 <__pow5mult+0xa4>
   29c14:	80800017 	ldw	r2,0(r16)
   29c18:	10001b26 	beq	r2,zero,29c88 <__pow5mult+0xc8>
   29c1c:	1021883a 	mov	r16,r2
   29c20:	9080004c 	andi	r2,r18,1
   29c24:	1005003a 	cmpeq	r2,r2,zero
   29c28:	9025d07a 	srai	r18,r18,1
   29c2c:	800d883a 	mov	r6,r16
   29c30:	9809883a 	mov	r4,r19
   29c34:	a00b883a 	mov	r5,r20
   29c38:	103ff21e 	bne	r2,zero,29c04 <__pow5mult+0x44>
   29c3c:	002989c0 	call	2989c <__multiply>
   29c40:	a00b883a 	mov	r5,r20
   29c44:	9809883a 	mov	r4,r19
   29c48:	1023883a 	mov	r17,r2
   29c4c:	0028e0c0 	call	28e0c <_Bfree>
   29c50:	8829883a 	mov	r20,r17
   29c54:	800b883a 	mov	r5,r16
   29c58:	800d883a 	mov	r6,r16
   29c5c:	9809883a 	mov	r4,r19
   29c60:	903fec1e 	bne	r18,zero,29c14 <__pow5mult+0x54>
   29c64:	a005883a 	mov	r2,r20
   29c68:	dfc00517 	ldw	ra,20(sp)
   29c6c:	dd000417 	ldw	r20,16(sp)
   29c70:	dcc00317 	ldw	r19,12(sp)
   29c74:	dc800217 	ldw	r18,8(sp)
   29c78:	dc400117 	ldw	r17,4(sp)
   29c7c:	dc000017 	ldw	r16,0(sp)
   29c80:	dec00604 	addi	sp,sp,24
   29c84:	f800283a 	ret
   29c88:	002989c0 	call	2989c <__multiply>
   29c8c:	80800015 	stw	r2,0(r16)
   29c90:	1021883a 	mov	r16,r2
   29c94:	10000015 	stw	zero,0(r2)
   29c98:	003fe106 	br	29c20 <__pow5mult+0x60>
   29c9c:	1085883a 	add	r2,r2,r2
   29ca0:	00c000f4 	movhi	r3,3
   29ca4:	18fb4604 	addi	r3,r3,-4840
   29ca8:	1085883a 	add	r2,r2,r2
   29cac:	10c5883a 	add	r2,r2,r3
   29cb0:	11bfff17 	ldw	r6,-4(r2)
   29cb4:	000f883a 	mov	r7,zero
   29cb8:	0029ac00 	call	29ac0 <__multadd>
   29cbc:	1029883a 	mov	r20,r2
   29cc0:	003fcb06 	br	29bf0 <__pow5mult+0x30>
   29cc4:	9809883a 	mov	r4,r19
   29cc8:	01409c44 	movi	r5,625
   29ccc:	0029a840 	call	29a84 <__i2b>
   29cd0:	98801215 	stw	r2,72(r19)
   29cd4:	1021883a 	mov	r16,r2
   29cd8:	10000015 	stw	zero,0(r2)
   29cdc:	003fd006 	br	29c20 <__pow5mult+0x60>

00029ce0 <__s2b>:
   29ce0:	defff904 	addi	sp,sp,-28
   29ce4:	dcc00315 	stw	r19,12(sp)
   29ce8:	dc800215 	stw	r18,8(sp)
   29cec:	2827883a 	mov	r19,r5
   29cf0:	2025883a 	mov	r18,r4
   29cf4:	01400244 	movi	r5,9
   29cf8:	39000204 	addi	r4,r7,8
   29cfc:	dd000415 	stw	r20,16(sp)
   29d00:	dc400115 	stw	r17,4(sp)
   29d04:	dfc00615 	stw	ra,24(sp)
   29d08:	dd400515 	stw	r21,20(sp)
   29d0c:	dc000015 	stw	r16,0(sp)
   29d10:	3829883a 	mov	r20,r7
   29d14:	3023883a 	mov	r17,r6
   29d18:	002baa80 	call	2baa8 <__divsi3>
   29d1c:	00c00044 	movi	r3,1
   29d20:	1880350e 	bge	r3,r2,29df8 <__s2b+0x118>
   29d24:	000b883a 	mov	r5,zero
   29d28:	18c7883a 	add	r3,r3,r3
   29d2c:	29400044 	addi	r5,r5,1
   29d30:	18bffd16 	blt	r3,r2,29d28 <__s2b+0x48>
   29d34:	9009883a 	mov	r4,r18
   29d38:	002938c0 	call	2938c <_Balloc>
   29d3c:	1011883a 	mov	r8,r2
   29d40:	d8800717 	ldw	r2,28(sp)
   29d44:	00c00044 	movi	r3,1
   29d48:	01800244 	movi	r6,9
   29d4c:	40800515 	stw	r2,20(r8)
   29d50:	40c00415 	stw	r3,16(r8)
   29d54:	3440260e 	bge	r6,r17,29df0 <__s2b+0x110>
   29d58:	3021883a 	mov	r16,r6
   29d5c:	99ab883a 	add	r21,r19,r6
   29d60:	9c05883a 	add	r2,r19,r16
   29d64:	11c00007 	ldb	r7,0(r2)
   29d68:	400b883a 	mov	r5,r8
   29d6c:	9009883a 	mov	r4,r18
   29d70:	39fff404 	addi	r7,r7,-48
   29d74:	01800284 	movi	r6,10
   29d78:	0029ac00 	call	29ac0 <__multadd>
   29d7c:	84000044 	addi	r16,r16,1
   29d80:	1011883a 	mov	r8,r2
   29d84:	8c3ff61e 	bne	r17,r16,29d60 <__s2b+0x80>
   29d88:	ac45883a 	add	r2,r21,r17
   29d8c:	117ffe04 	addi	r5,r2,-8
   29d90:	880d883a 	mov	r6,r17
   29d94:	35000c0e 	bge	r6,r20,29dc8 <__s2b+0xe8>
   29d98:	a185c83a 	sub	r2,r20,r6
   29d9c:	2821883a 	mov	r16,r5
   29da0:	28a3883a 	add	r17,r5,r2
   29da4:	81c00007 	ldb	r7,0(r16)
   29da8:	400b883a 	mov	r5,r8
   29dac:	9009883a 	mov	r4,r18
   29db0:	39fff404 	addi	r7,r7,-48
   29db4:	01800284 	movi	r6,10
   29db8:	0029ac00 	call	29ac0 <__multadd>
   29dbc:	84000044 	addi	r16,r16,1
   29dc0:	1011883a 	mov	r8,r2
   29dc4:	847ff71e 	bne	r16,r17,29da4 <__s2b+0xc4>
   29dc8:	4005883a 	mov	r2,r8
   29dcc:	dfc00617 	ldw	ra,24(sp)
   29dd0:	dd400517 	ldw	r21,20(sp)
   29dd4:	dd000417 	ldw	r20,16(sp)
   29dd8:	dcc00317 	ldw	r19,12(sp)
   29ddc:	dc800217 	ldw	r18,8(sp)
   29de0:	dc400117 	ldw	r17,4(sp)
   29de4:	dc000017 	ldw	r16,0(sp)
   29de8:	dec00704 	addi	sp,sp,28
   29dec:	f800283a 	ret
   29df0:	99400284 	addi	r5,r19,10
   29df4:	003fe706 	br	29d94 <__s2b+0xb4>
   29df8:	000b883a 	mov	r5,zero
   29dfc:	003fcd06 	br	29d34 <__s2b+0x54>

00029e00 <_realloc_r>:
   29e00:	defff404 	addi	sp,sp,-48
   29e04:	dd800815 	stw	r22,32(sp)
   29e08:	dc800415 	stw	r18,16(sp)
   29e0c:	dc400315 	stw	r17,12(sp)
   29e10:	dfc00b15 	stw	ra,44(sp)
   29e14:	df000a15 	stw	fp,40(sp)
   29e18:	ddc00915 	stw	r23,36(sp)
   29e1c:	dd400715 	stw	r21,28(sp)
   29e20:	dd000615 	stw	r20,24(sp)
   29e24:	dcc00515 	stw	r19,20(sp)
   29e28:	dc000215 	stw	r16,8(sp)
   29e2c:	2825883a 	mov	r18,r5
   29e30:	3023883a 	mov	r17,r6
   29e34:	202d883a 	mov	r22,r4
   29e38:	2800c926 	beq	r5,zero,2a160 <_realloc_r+0x360>
   29e3c:	002c4040 	call	2c404 <__malloc_lock>
   29e40:	943ffe04 	addi	r16,r18,-8
   29e44:	88c002c4 	addi	r3,r17,11
   29e48:	00800584 	movi	r2,22
   29e4c:	82000117 	ldw	r8,4(r16)
   29e50:	10c01b2e 	bgeu	r2,r3,29ec0 <_realloc_r+0xc0>
   29e54:	00bffe04 	movi	r2,-8
   29e58:	188e703a 	and	r7,r3,r2
   29e5c:	3839883a 	mov	fp,r7
   29e60:	38001a16 	blt	r7,zero,29ecc <_realloc_r+0xcc>
   29e64:	e4401936 	bltu	fp,r17,29ecc <_realloc_r+0xcc>
   29e68:	013fff04 	movi	r4,-4
   29e6c:	4126703a 	and	r19,r8,r4
   29e70:	99c02616 	blt	r19,r7,29f0c <_realloc_r+0x10c>
   29e74:	802b883a 	mov	r21,r16
   29e78:	9829883a 	mov	r20,r19
   29e7c:	84000204 	addi	r16,r16,8
   29e80:	a80f883a 	mov	r7,r21
   29e84:	a70dc83a 	sub	r6,r20,fp
   29e88:	008003c4 	movi	r2,15
   29e8c:	1180c136 	bltu	r2,r6,2a194 <_realloc_r+0x394>
   29e90:	38800117 	ldw	r2,4(r7)
   29e94:	a549883a 	add	r4,r20,r21
   29e98:	1080004c 	andi	r2,r2,1
   29e9c:	a084b03a 	or	r2,r20,r2
   29ea0:	38800115 	stw	r2,4(r7)
   29ea4:	20c00117 	ldw	r3,4(r4)
   29ea8:	18c00054 	ori	r3,r3,1
   29eac:	20c00115 	stw	r3,4(r4)
   29eb0:	b009883a 	mov	r4,r22
   29eb4:	002c4240 	call	2c424 <__malloc_unlock>
   29eb8:	8023883a 	mov	r17,r16
   29ebc:	00000606 	br	29ed8 <_realloc_r+0xd8>
   29ec0:	01c00404 	movi	r7,16
   29ec4:	3839883a 	mov	fp,r7
   29ec8:	e47fe72e 	bgeu	fp,r17,29e68 <_realloc_r+0x68>
   29ecc:	00800304 	movi	r2,12
   29ed0:	0023883a 	mov	r17,zero
   29ed4:	b0800015 	stw	r2,0(r22)
   29ed8:	8805883a 	mov	r2,r17
   29edc:	dfc00b17 	ldw	ra,44(sp)
   29ee0:	df000a17 	ldw	fp,40(sp)
   29ee4:	ddc00917 	ldw	r23,36(sp)
   29ee8:	dd800817 	ldw	r22,32(sp)
   29eec:	dd400717 	ldw	r21,28(sp)
   29ef0:	dd000617 	ldw	r20,24(sp)
   29ef4:	dcc00517 	ldw	r19,20(sp)
   29ef8:	dc800417 	ldw	r18,16(sp)
   29efc:	dc400317 	ldw	r17,12(sp)
   29f00:	dc000217 	ldw	r16,8(sp)
   29f04:	dec00c04 	addi	sp,sp,48
   29f08:	f800283a 	ret
   29f0c:	008000f4 	movhi	r2,3
   29f10:	10bb5604 	addi	r2,r2,-4776
   29f14:	12400217 	ldw	r9,8(r2)
   29f18:	84cd883a 	add	r6,r16,r19
   29f1c:	802b883a 	mov	r21,r16
   29f20:	3240b926 	beq	r6,r9,2a208 <_realloc_r+0x408>
   29f24:	31400117 	ldw	r5,4(r6)
   29f28:	00bfff84 	movi	r2,-2
   29f2c:	2884703a 	and	r2,r5,r2
   29f30:	1185883a 	add	r2,r2,r6
   29f34:	10c00117 	ldw	r3,4(r2)
   29f38:	18c0004c 	andi	r3,r3,1
   29f3c:	1807003a 	cmpeq	r3,r3,zero
   29f40:	1800a326 	beq	r3,zero,2a1d0 <_realloc_r+0x3d0>
   29f44:	2908703a 	and	r4,r5,r4
   29f48:	9929883a 	add	r20,r19,r4
   29f4c:	a1c0a30e 	bge	r20,r7,2a1dc <_realloc_r+0x3dc>
   29f50:	4080004c 	andi	r2,r8,1
   29f54:	1000551e 	bne	r2,zero,2a0ac <_realloc_r+0x2ac>
   29f58:	80800017 	ldw	r2,0(r16)
   29f5c:	80afc83a 	sub	r23,r16,r2
   29f60:	b8c00117 	ldw	r3,4(r23)
   29f64:	00bfff04 	movi	r2,-4
   29f68:	1884703a 	and	r2,r3,r2
   29f6c:	30002e26 	beq	r6,zero,2a028 <_realloc_r+0x228>
   29f70:	3240b926 	beq	r6,r9,2a258 <_realloc_r+0x458>
   29f74:	98a9883a 	add	r20,r19,r2
   29f78:	2509883a 	add	r4,r4,r20
   29f7c:	d9000015 	stw	r4,0(sp)
   29f80:	21c02a16 	blt	r4,r7,2a02c <_realloc_r+0x22c>
   29f84:	30800317 	ldw	r2,12(r6)
   29f88:	30c00217 	ldw	r3,8(r6)
   29f8c:	01400904 	movi	r5,36
   29f90:	99bfff04 	addi	r6,r19,-4
   29f94:	18800315 	stw	r2,12(r3)
   29f98:	10c00215 	stw	r3,8(r2)
   29f9c:	b9000317 	ldw	r4,12(r23)
   29fa0:	b8800217 	ldw	r2,8(r23)
   29fa4:	b82b883a 	mov	r21,r23
   29fa8:	bc000204 	addi	r16,r23,8
   29fac:	20800215 	stw	r2,8(r4)
   29fb0:	11000315 	stw	r4,12(r2)
   29fb4:	2980e436 	bltu	r5,r6,2a348 <_realloc_r+0x548>
   29fb8:	008004c4 	movi	r2,19
   29fbc:	9009883a 	mov	r4,r18
   29fc0:	8011883a 	mov	r8,r16
   29fc4:	11800f2e 	bgeu	r2,r6,2a004 <_realloc_r+0x204>
   29fc8:	90800017 	ldw	r2,0(r18)
   29fcc:	ba000404 	addi	r8,r23,16
   29fd0:	91000204 	addi	r4,r18,8
   29fd4:	b8800215 	stw	r2,8(r23)
   29fd8:	90c00117 	ldw	r3,4(r18)
   29fdc:	008006c4 	movi	r2,27
   29fe0:	b8c00315 	stw	r3,12(r23)
   29fe4:	1180072e 	bgeu	r2,r6,2a004 <_realloc_r+0x204>
   29fe8:	90c00217 	ldw	r3,8(r18)
   29fec:	ba000604 	addi	r8,r23,24
   29ff0:	91000404 	addi	r4,r18,16
   29ff4:	b8c00415 	stw	r3,16(r23)
   29ff8:	90800317 	ldw	r2,12(r18)
   29ffc:	b8800515 	stw	r2,20(r23)
   2a000:	3140e726 	beq	r6,r5,2a3a0 <_realloc_r+0x5a0>
   2a004:	20800017 	ldw	r2,0(r4)
   2a008:	dd000017 	ldw	r20,0(sp)
   2a00c:	b80f883a 	mov	r7,r23
   2a010:	40800015 	stw	r2,0(r8)
   2a014:	20c00117 	ldw	r3,4(r4)
   2a018:	40c00115 	stw	r3,4(r8)
   2a01c:	20800217 	ldw	r2,8(r4)
   2a020:	40800215 	stw	r2,8(r8)
   2a024:	003f9706 	br	29e84 <_realloc_r+0x84>
   2a028:	98a9883a 	add	r20,r19,r2
   2a02c:	a1c01f16 	blt	r20,r7,2a0ac <_realloc_r+0x2ac>
   2a030:	b8c00317 	ldw	r3,12(r23)
   2a034:	b8800217 	ldw	r2,8(r23)
   2a038:	99bfff04 	addi	r6,r19,-4
   2a03c:	01400904 	movi	r5,36
   2a040:	b82b883a 	mov	r21,r23
   2a044:	18800215 	stw	r2,8(r3)
   2a048:	10c00315 	stw	r3,12(r2)
   2a04c:	bc000204 	addi	r16,r23,8
   2a050:	2980c336 	bltu	r5,r6,2a360 <_realloc_r+0x560>
   2a054:	008004c4 	movi	r2,19
   2a058:	9009883a 	mov	r4,r18
   2a05c:	8011883a 	mov	r8,r16
   2a060:	11800f2e 	bgeu	r2,r6,2a0a0 <_realloc_r+0x2a0>
   2a064:	90800017 	ldw	r2,0(r18)
   2a068:	ba000404 	addi	r8,r23,16
   2a06c:	91000204 	addi	r4,r18,8
   2a070:	b8800215 	stw	r2,8(r23)
   2a074:	90c00117 	ldw	r3,4(r18)
   2a078:	008006c4 	movi	r2,27
   2a07c:	b8c00315 	stw	r3,12(r23)
   2a080:	1180072e 	bgeu	r2,r6,2a0a0 <_realloc_r+0x2a0>
   2a084:	90c00217 	ldw	r3,8(r18)
   2a088:	ba000604 	addi	r8,r23,24
   2a08c:	91000404 	addi	r4,r18,16
   2a090:	b8c00415 	stw	r3,16(r23)
   2a094:	90800317 	ldw	r2,12(r18)
   2a098:	b8800515 	stw	r2,20(r23)
   2a09c:	3140c726 	beq	r6,r5,2a3bc <_realloc_r+0x5bc>
   2a0a0:	20800017 	ldw	r2,0(r4)
   2a0a4:	b80f883a 	mov	r7,r23
   2a0a8:	003fd906 	br	2a010 <_realloc_r+0x210>
   2a0ac:	880b883a 	mov	r5,r17
   2a0b0:	b009883a 	mov	r4,r22
   2a0b4:	00237b00 	call	237b0 <_malloc_r>
   2a0b8:	1023883a 	mov	r17,r2
   2a0bc:	10002526 	beq	r2,zero,2a154 <_realloc_r+0x354>
   2a0c0:	80800117 	ldw	r2,4(r16)
   2a0c4:	00ffff84 	movi	r3,-2
   2a0c8:	893ffe04 	addi	r4,r17,-8
   2a0cc:	10c4703a 	and	r2,r2,r3
   2a0d0:	8085883a 	add	r2,r16,r2
   2a0d4:	20809526 	beq	r4,r2,2a32c <_realloc_r+0x52c>
   2a0d8:	99bfff04 	addi	r6,r19,-4
   2a0dc:	01c00904 	movi	r7,36
   2a0e0:	39804536 	bltu	r7,r6,2a1f8 <_realloc_r+0x3f8>
   2a0e4:	008004c4 	movi	r2,19
   2a0e8:	9009883a 	mov	r4,r18
   2a0ec:	880b883a 	mov	r5,r17
   2a0f0:	11800f2e 	bgeu	r2,r6,2a130 <_realloc_r+0x330>
   2a0f4:	90800017 	ldw	r2,0(r18)
   2a0f8:	89400204 	addi	r5,r17,8
   2a0fc:	91000204 	addi	r4,r18,8
   2a100:	88800015 	stw	r2,0(r17)
   2a104:	90c00117 	ldw	r3,4(r18)
   2a108:	008006c4 	movi	r2,27
   2a10c:	88c00115 	stw	r3,4(r17)
   2a110:	1180072e 	bgeu	r2,r6,2a130 <_realloc_r+0x330>
   2a114:	90c00217 	ldw	r3,8(r18)
   2a118:	89400404 	addi	r5,r17,16
   2a11c:	91000404 	addi	r4,r18,16
   2a120:	88c00215 	stw	r3,8(r17)
   2a124:	90800317 	ldw	r2,12(r18)
   2a128:	88800315 	stw	r2,12(r17)
   2a12c:	31c09126 	beq	r6,r7,2a374 <_realloc_r+0x574>
   2a130:	20800017 	ldw	r2,0(r4)
   2a134:	28800015 	stw	r2,0(r5)
   2a138:	20c00117 	ldw	r3,4(r4)
   2a13c:	28c00115 	stw	r3,4(r5)
   2a140:	20800217 	ldw	r2,8(r4)
   2a144:	28800215 	stw	r2,8(r5)
   2a148:	900b883a 	mov	r5,r18
   2a14c:	b009883a 	mov	r4,r22
   2a150:	0027fb40 	call	27fb4 <_free_r>
   2a154:	b009883a 	mov	r4,r22
   2a158:	002c4240 	call	2c424 <__malloc_unlock>
   2a15c:	003f5e06 	br	29ed8 <_realloc_r+0xd8>
   2a160:	300b883a 	mov	r5,r6
   2a164:	dfc00b17 	ldw	ra,44(sp)
   2a168:	df000a17 	ldw	fp,40(sp)
   2a16c:	ddc00917 	ldw	r23,36(sp)
   2a170:	dd800817 	ldw	r22,32(sp)
   2a174:	dd400717 	ldw	r21,28(sp)
   2a178:	dd000617 	ldw	r20,24(sp)
   2a17c:	dcc00517 	ldw	r19,20(sp)
   2a180:	dc800417 	ldw	r18,16(sp)
   2a184:	dc400317 	ldw	r17,12(sp)
   2a188:	dc000217 	ldw	r16,8(sp)
   2a18c:	dec00c04 	addi	sp,sp,48
   2a190:	00237b01 	jmpi	237b0 <_malloc_r>
   2a194:	38800117 	ldw	r2,4(r7)
   2a198:	e54b883a 	add	r5,fp,r21
   2a19c:	31000054 	ori	r4,r6,1
   2a1a0:	1080004c 	andi	r2,r2,1
   2a1a4:	1704b03a 	or	r2,r2,fp
   2a1a8:	38800115 	stw	r2,4(r7)
   2a1ac:	29000115 	stw	r4,4(r5)
   2a1b0:	2987883a 	add	r3,r5,r6
   2a1b4:	18800117 	ldw	r2,4(r3)
   2a1b8:	29400204 	addi	r5,r5,8
   2a1bc:	b009883a 	mov	r4,r22
   2a1c0:	10800054 	ori	r2,r2,1
   2a1c4:	18800115 	stw	r2,4(r3)
   2a1c8:	0027fb40 	call	27fb4 <_free_r>
   2a1cc:	003f3806 	br	29eb0 <_realloc_r+0xb0>
   2a1d0:	000d883a 	mov	r6,zero
   2a1d4:	0009883a 	mov	r4,zero
   2a1d8:	003f5d06 	br	29f50 <_realloc_r+0x150>
   2a1dc:	30c00217 	ldw	r3,8(r6)
   2a1e0:	30800317 	ldw	r2,12(r6)
   2a1e4:	800f883a 	mov	r7,r16
   2a1e8:	84000204 	addi	r16,r16,8
   2a1ec:	10c00215 	stw	r3,8(r2)
   2a1f0:	18800315 	stw	r2,12(r3)
   2a1f4:	003f2306 	br	29e84 <_realloc_r+0x84>
   2a1f8:	8809883a 	mov	r4,r17
   2a1fc:	900b883a 	mov	r5,r18
   2a200:	0028c940 	call	28c94 <memmove>
   2a204:	003fd006 	br	2a148 <_realloc_r+0x348>
   2a208:	30800117 	ldw	r2,4(r6)
   2a20c:	e0c00404 	addi	r3,fp,16
   2a210:	1108703a 	and	r4,r2,r4
   2a214:	9905883a 	add	r2,r19,r4
   2a218:	10ff4d16 	blt	r2,r3,29f50 <_realloc_r+0x150>
   2a21c:	1705c83a 	sub	r2,r2,fp
   2a220:	870b883a 	add	r5,r16,fp
   2a224:	10800054 	ori	r2,r2,1
   2a228:	28800115 	stw	r2,4(r5)
   2a22c:	80c00117 	ldw	r3,4(r16)
   2a230:	008000f4 	movhi	r2,3
   2a234:	10bb5604 	addi	r2,r2,-4776
   2a238:	b009883a 	mov	r4,r22
   2a23c:	18c0004c 	andi	r3,r3,1
   2a240:	e0c6b03a 	or	r3,fp,r3
   2a244:	11400215 	stw	r5,8(r2)
   2a248:	80c00115 	stw	r3,4(r16)
   2a24c:	002c4240 	call	2c424 <__malloc_unlock>
   2a250:	84400204 	addi	r17,r16,8
   2a254:	003f2006 	br	29ed8 <_realloc_r+0xd8>
   2a258:	98a9883a 	add	r20,r19,r2
   2a25c:	2509883a 	add	r4,r4,r20
   2a260:	e0800404 	addi	r2,fp,16
   2a264:	d9000115 	stw	r4,4(sp)
   2a268:	20bf7016 	blt	r4,r2,2a02c <_realloc_r+0x22c>
   2a26c:	b8c00317 	ldw	r3,12(r23)
   2a270:	b8800217 	ldw	r2,8(r23)
   2a274:	99bfff04 	addi	r6,r19,-4
   2a278:	01400904 	movi	r5,36
   2a27c:	18800215 	stw	r2,8(r3)
   2a280:	10c00315 	stw	r3,12(r2)
   2a284:	bc400204 	addi	r17,r23,8
   2a288:	29804136 	bltu	r5,r6,2a390 <_realloc_r+0x590>
   2a28c:	008004c4 	movi	r2,19
   2a290:	9009883a 	mov	r4,r18
   2a294:	880f883a 	mov	r7,r17
   2a298:	11800f2e 	bgeu	r2,r6,2a2d8 <_realloc_r+0x4d8>
   2a29c:	90800017 	ldw	r2,0(r18)
   2a2a0:	b9c00404 	addi	r7,r23,16
   2a2a4:	91000204 	addi	r4,r18,8
   2a2a8:	b8800215 	stw	r2,8(r23)
   2a2ac:	90c00117 	ldw	r3,4(r18)
   2a2b0:	008006c4 	movi	r2,27
   2a2b4:	b8c00315 	stw	r3,12(r23)
   2a2b8:	1180072e 	bgeu	r2,r6,2a2d8 <_realloc_r+0x4d8>
   2a2bc:	90c00217 	ldw	r3,8(r18)
   2a2c0:	b9c00604 	addi	r7,r23,24
   2a2c4:	91000404 	addi	r4,r18,16
   2a2c8:	b8c00415 	stw	r3,16(r23)
   2a2cc:	90800317 	ldw	r2,12(r18)
   2a2d0:	b8800515 	stw	r2,20(r23)
   2a2d4:	31404026 	beq	r6,r5,2a3d8 <_realloc_r+0x5d8>
   2a2d8:	20800017 	ldw	r2,0(r4)
   2a2dc:	38800015 	stw	r2,0(r7)
   2a2e0:	20c00117 	ldw	r3,4(r4)
   2a2e4:	38c00115 	stw	r3,4(r7)
   2a2e8:	20800217 	ldw	r2,8(r4)
   2a2ec:	38800215 	stw	r2,8(r7)
   2a2f0:	d8c00117 	ldw	r3,4(sp)
   2a2f4:	bf0b883a 	add	r5,r23,fp
   2a2f8:	b009883a 	mov	r4,r22
   2a2fc:	1f05c83a 	sub	r2,r3,fp
   2a300:	10800054 	ori	r2,r2,1
   2a304:	28800115 	stw	r2,4(r5)
   2a308:	b8c00117 	ldw	r3,4(r23)
   2a30c:	008000f4 	movhi	r2,3
   2a310:	10bb5604 	addi	r2,r2,-4776
   2a314:	11400215 	stw	r5,8(r2)
   2a318:	18c0004c 	andi	r3,r3,1
   2a31c:	e0c6b03a 	or	r3,fp,r3
   2a320:	b8c00115 	stw	r3,4(r23)
   2a324:	002c4240 	call	2c424 <__malloc_unlock>
   2a328:	003eeb06 	br	29ed8 <_realloc_r+0xd8>
   2a32c:	20800117 	ldw	r2,4(r4)
   2a330:	00ffff04 	movi	r3,-4
   2a334:	800f883a 	mov	r7,r16
   2a338:	10c4703a 	and	r2,r2,r3
   2a33c:	98a9883a 	add	r20,r19,r2
   2a340:	84000204 	addi	r16,r16,8
   2a344:	003ecf06 	br	29e84 <_realloc_r+0x84>
   2a348:	900b883a 	mov	r5,r18
   2a34c:	8009883a 	mov	r4,r16
   2a350:	0028c940 	call	28c94 <memmove>
   2a354:	dd000017 	ldw	r20,0(sp)
   2a358:	b80f883a 	mov	r7,r23
   2a35c:	003ec906 	br	29e84 <_realloc_r+0x84>
   2a360:	900b883a 	mov	r5,r18
   2a364:	8009883a 	mov	r4,r16
   2a368:	0028c940 	call	28c94 <memmove>
   2a36c:	b80f883a 	mov	r7,r23
   2a370:	003ec406 	br	29e84 <_realloc_r+0x84>
   2a374:	90c00417 	ldw	r3,16(r18)
   2a378:	89400604 	addi	r5,r17,24
   2a37c:	91000604 	addi	r4,r18,24
   2a380:	88c00415 	stw	r3,16(r17)
   2a384:	90800517 	ldw	r2,20(r18)
   2a388:	88800515 	stw	r2,20(r17)
   2a38c:	003f6806 	br	2a130 <_realloc_r+0x330>
   2a390:	900b883a 	mov	r5,r18
   2a394:	8809883a 	mov	r4,r17
   2a398:	0028c940 	call	28c94 <memmove>
   2a39c:	003fd406 	br	2a2f0 <_realloc_r+0x4f0>
   2a3a0:	90c00417 	ldw	r3,16(r18)
   2a3a4:	91000604 	addi	r4,r18,24
   2a3a8:	ba000804 	addi	r8,r23,32
   2a3ac:	b8c00615 	stw	r3,24(r23)
   2a3b0:	90800517 	ldw	r2,20(r18)
   2a3b4:	b8800715 	stw	r2,28(r23)
   2a3b8:	003f1206 	br	2a004 <_realloc_r+0x204>
   2a3bc:	90c00417 	ldw	r3,16(r18)
   2a3c0:	91000604 	addi	r4,r18,24
   2a3c4:	ba000804 	addi	r8,r23,32
   2a3c8:	b8c00615 	stw	r3,24(r23)
   2a3cc:	90800517 	ldw	r2,20(r18)
   2a3d0:	b8800715 	stw	r2,28(r23)
   2a3d4:	003f3206 	br	2a0a0 <_realloc_r+0x2a0>
   2a3d8:	90c00417 	ldw	r3,16(r18)
   2a3dc:	91000604 	addi	r4,r18,24
   2a3e0:	b9c00804 	addi	r7,r23,32
   2a3e4:	b8c00615 	stw	r3,24(r23)
   2a3e8:	90800517 	ldw	r2,20(r18)
   2a3ec:	b8800715 	stw	r2,28(r23)
   2a3f0:	003fb906 	br	2a2d8 <_realloc_r+0x4d8>

0002a3f4 <__isinfd>:
   2a3f4:	200d883a 	mov	r6,r4
   2a3f8:	0109c83a 	sub	r4,zero,r4
   2a3fc:	2188b03a 	or	r4,r4,r6
   2a400:	2008d7fa 	srli	r4,r4,31
   2a404:	00a00034 	movhi	r2,32768
   2a408:	10bfffc4 	addi	r2,r2,-1
   2a40c:	1144703a 	and	r2,r2,r5
   2a410:	2088b03a 	or	r4,r4,r2
   2a414:	009ffc34 	movhi	r2,32752
   2a418:	1105c83a 	sub	r2,r2,r4
   2a41c:	0087c83a 	sub	r3,zero,r2
   2a420:	10c4b03a 	or	r2,r2,r3
   2a424:	1004d7fa 	srli	r2,r2,31
   2a428:	00c00044 	movi	r3,1
   2a42c:	1885c83a 	sub	r2,r3,r2
   2a430:	f800283a 	ret

0002a434 <__isnand>:
   2a434:	200d883a 	mov	r6,r4
   2a438:	0109c83a 	sub	r4,zero,r4
   2a43c:	2188b03a 	or	r4,r4,r6
   2a440:	2008d7fa 	srli	r4,r4,31
   2a444:	00a00034 	movhi	r2,32768
   2a448:	10bfffc4 	addi	r2,r2,-1
   2a44c:	1144703a 	and	r2,r2,r5
   2a450:	2088b03a 	or	r4,r4,r2
   2a454:	009ffc34 	movhi	r2,32752
   2a458:	1105c83a 	sub	r2,r2,r4
   2a45c:	1004d7fa 	srli	r2,r2,31
   2a460:	f800283a 	ret

0002a464 <__sclose>:
   2a464:	2940038f 	ldh	r5,14(r5)
   2a468:	002a80c1 	jmpi	2a80c <_close_r>

0002a46c <__sseek>:
   2a46c:	defffe04 	addi	sp,sp,-8
   2a470:	dc000015 	stw	r16,0(sp)
   2a474:	2821883a 	mov	r16,r5
   2a478:	2940038f 	ldh	r5,14(r5)
   2a47c:	dfc00115 	stw	ra,4(sp)
   2a480:	002aa840 	call	2aa84 <_lseek_r>
   2a484:	1007883a 	mov	r3,r2
   2a488:	00bfffc4 	movi	r2,-1
   2a48c:	18800926 	beq	r3,r2,2a4b4 <__sseek+0x48>
   2a490:	8080030b 	ldhu	r2,12(r16)
   2a494:	80c01415 	stw	r3,80(r16)
   2a498:	10840014 	ori	r2,r2,4096
   2a49c:	8080030d 	sth	r2,12(r16)
   2a4a0:	1805883a 	mov	r2,r3
   2a4a4:	dfc00117 	ldw	ra,4(sp)
   2a4a8:	dc000017 	ldw	r16,0(sp)
   2a4ac:	dec00204 	addi	sp,sp,8
   2a4b0:	f800283a 	ret
   2a4b4:	8080030b 	ldhu	r2,12(r16)
   2a4b8:	10bbffcc 	andi	r2,r2,61439
   2a4bc:	8080030d 	sth	r2,12(r16)
   2a4c0:	1805883a 	mov	r2,r3
   2a4c4:	dfc00117 	ldw	ra,4(sp)
   2a4c8:	dc000017 	ldw	r16,0(sp)
   2a4cc:	dec00204 	addi	sp,sp,8
   2a4d0:	f800283a 	ret

0002a4d4 <__swrite>:
   2a4d4:	2880030b 	ldhu	r2,12(r5)
   2a4d8:	defffb04 	addi	sp,sp,-20
   2a4dc:	dcc00315 	stw	r19,12(sp)
   2a4e0:	1080400c 	andi	r2,r2,256
   2a4e4:	dc800215 	stw	r18,8(sp)
   2a4e8:	dc400115 	stw	r17,4(sp)
   2a4ec:	dc000015 	stw	r16,0(sp)
   2a4f0:	3027883a 	mov	r19,r6
   2a4f4:	3825883a 	mov	r18,r7
   2a4f8:	dfc00415 	stw	ra,16(sp)
   2a4fc:	2821883a 	mov	r16,r5
   2a500:	000d883a 	mov	r6,zero
   2a504:	01c00084 	movi	r7,2
   2a508:	2023883a 	mov	r17,r4
   2a50c:	10000226 	beq	r2,zero,2a518 <__swrite+0x44>
   2a510:	2940038f 	ldh	r5,14(r5)
   2a514:	002aa840 	call	2aa84 <_lseek_r>
   2a518:	8080030b 	ldhu	r2,12(r16)
   2a51c:	8140038f 	ldh	r5,14(r16)
   2a520:	8809883a 	mov	r4,r17
   2a524:	10bbffcc 	andi	r2,r2,61439
   2a528:	980d883a 	mov	r6,r19
   2a52c:	900f883a 	mov	r7,r18
   2a530:	8080030d 	sth	r2,12(r16)
   2a534:	dfc00417 	ldw	ra,16(sp)
   2a538:	dcc00317 	ldw	r19,12(sp)
   2a53c:	dc800217 	ldw	r18,8(sp)
   2a540:	dc400117 	ldw	r17,4(sp)
   2a544:	dc000017 	ldw	r16,0(sp)
   2a548:	dec00504 	addi	sp,sp,20
   2a54c:	002a6e01 	jmpi	2a6e0 <_write_r>

0002a550 <__sread>:
   2a550:	defffe04 	addi	sp,sp,-8
   2a554:	dc000015 	stw	r16,0(sp)
   2a558:	2821883a 	mov	r16,r5
   2a55c:	2940038f 	ldh	r5,14(r5)
   2a560:	dfc00115 	stw	ra,4(sp)
   2a564:	002aafc0 	call	2aafc <_read_r>
   2a568:	1007883a 	mov	r3,r2
   2a56c:	10000816 	blt	r2,zero,2a590 <__sread+0x40>
   2a570:	80801417 	ldw	r2,80(r16)
   2a574:	10c5883a 	add	r2,r2,r3
   2a578:	80801415 	stw	r2,80(r16)
   2a57c:	1805883a 	mov	r2,r3
   2a580:	dfc00117 	ldw	ra,4(sp)
   2a584:	dc000017 	ldw	r16,0(sp)
   2a588:	dec00204 	addi	sp,sp,8
   2a58c:	f800283a 	ret
   2a590:	8080030b 	ldhu	r2,12(r16)
   2a594:	10bbffcc 	andi	r2,r2,61439
   2a598:	8080030d 	sth	r2,12(r16)
   2a59c:	1805883a 	mov	r2,r3
   2a5a0:	dfc00117 	ldw	ra,4(sp)
   2a5a4:	dc000017 	ldw	r16,0(sp)
   2a5a8:	dec00204 	addi	sp,sp,8
   2a5ac:	f800283a 	ret

0002a5b0 <strcmp>:
   2a5b0:	2144b03a 	or	r2,r4,r5
   2a5b4:	108000cc 	andi	r2,r2,3
   2a5b8:	10001d1e 	bne	r2,zero,2a630 <strcmp+0x80>
   2a5bc:	200f883a 	mov	r7,r4
   2a5c0:	28800017 	ldw	r2,0(r5)
   2a5c4:	21000017 	ldw	r4,0(r4)
   2a5c8:	280d883a 	mov	r6,r5
   2a5cc:	2080161e 	bne	r4,r2,2a628 <strcmp+0x78>
   2a5d0:	023fbff4 	movhi	r8,65279
   2a5d4:	423fbfc4 	addi	r8,r8,-257
   2a5d8:	2207883a 	add	r3,r4,r8
   2a5dc:	01602074 	movhi	r5,32897
   2a5e0:	29602004 	addi	r5,r5,-32640
   2a5e4:	1946703a 	and	r3,r3,r5
   2a5e8:	0104303a 	nor	r2,zero,r4
   2a5ec:	10c4703a 	and	r2,r2,r3
   2a5f0:	10001c1e 	bne	r2,zero,2a664 <strcmp+0xb4>
   2a5f4:	4013883a 	mov	r9,r8
   2a5f8:	2811883a 	mov	r8,r5
   2a5fc:	00000106 	br	2a604 <strcmp+0x54>
   2a600:	1800181e 	bne	r3,zero,2a664 <strcmp+0xb4>
   2a604:	39c00104 	addi	r7,r7,4
   2a608:	39000017 	ldw	r4,0(r7)
   2a60c:	31800104 	addi	r6,r6,4
   2a610:	31400017 	ldw	r5,0(r6)
   2a614:	2245883a 	add	r2,r4,r9
   2a618:	1204703a 	and	r2,r2,r8
   2a61c:	0106303a 	nor	r3,zero,r4
   2a620:	1886703a 	and	r3,r3,r2
   2a624:	217ff626 	beq	r4,r5,2a600 <strcmp+0x50>
   2a628:	3809883a 	mov	r4,r7
   2a62c:	300b883a 	mov	r5,r6
   2a630:	20c00007 	ldb	r3,0(r4)
   2a634:	1800051e 	bne	r3,zero,2a64c <strcmp+0x9c>
   2a638:	00000606 	br	2a654 <strcmp+0xa4>
   2a63c:	21000044 	addi	r4,r4,1
   2a640:	20c00007 	ldb	r3,0(r4)
   2a644:	29400044 	addi	r5,r5,1
   2a648:	18000226 	beq	r3,zero,2a654 <strcmp+0xa4>
   2a64c:	28800007 	ldb	r2,0(r5)
   2a650:	18bffa26 	beq	r3,r2,2a63c <strcmp+0x8c>
   2a654:	20c00003 	ldbu	r3,0(r4)
   2a658:	28800003 	ldbu	r2,0(r5)
   2a65c:	1885c83a 	sub	r2,r3,r2
   2a660:	f800283a 	ret
   2a664:	0005883a 	mov	r2,zero
   2a668:	f800283a 	ret

0002a66c <strlen>:
   2a66c:	208000cc 	andi	r2,r4,3
   2a670:	2011883a 	mov	r8,r4
   2a674:	1000161e 	bne	r2,zero,2a6d0 <strlen+0x64>
   2a678:	20c00017 	ldw	r3,0(r4)
   2a67c:	017fbff4 	movhi	r5,65279
   2a680:	297fbfc4 	addi	r5,r5,-257
   2a684:	01e02074 	movhi	r7,32897
   2a688:	39e02004 	addi	r7,r7,-32640
   2a68c:	1945883a 	add	r2,r3,r5
   2a690:	11c4703a 	and	r2,r2,r7
   2a694:	00c6303a 	nor	r3,zero,r3
   2a698:	1886703a 	and	r3,r3,r2
   2a69c:	18000c1e 	bne	r3,zero,2a6d0 <strlen+0x64>
   2a6a0:	280d883a 	mov	r6,r5
   2a6a4:	380b883a 	mov	r5,r7
   2a6a8:	21000104 	addi	r4,r4,4
   2a6ac:	20800017 	ldw	r2,0(r4)
   2a6b0:	1187883a 	add	r3,r2,r6
   2a6b4:	1946703a 	and	r3,r3,r5
   2a6b8:	0084303a 	nor	r2,zero,r2
   2a6bc:	10c4703a 	and	r2,r2,r3
   2a6c0:	103ff926 	beq	r2,zero,2a6a8 <strlen+0x3c>
   2a6c4:	20800007 	ldb	r2,0(r4)
   2a6c8:	10000326 	beq	r2,zero,2a6d8 <strlen+0x6c>
   2a6cc:	21000044 	addi	r4,r4,1
   2a6d0:	20800007 	ldb	r2,0(r4)
   2a6d4:	103ffd1e 	bne	r2,zero,2a6cc <strlen+0x60>
   2a6d8:	2205c83a 	sub	r2,r4,r8
   2a6dc:	f800283a 	ret

0002a6e0 <_write_r>:
   2a6e0:	defffd04 	addi	sp,sp,-12
   2a6e4:	dc000015 	stw	r16,0(sp)
   2a6e8:	040000f4 	movhi	r16,3
   2a6ec:	84088804 	addi	r16,r16,8736
   2a6f0:	dc400115 	stw	r17,4(sp)
   2a6f4:	80000015 	stw	zero,0(r16)
   2a6f8:	2023883a 	mov	r17,r4
   2a6fc:	2809883a 	mov	r4,r5
   2a700:	300b883a 	mov	r5,r6
   2a704:	380d883a 	mov	r6,r7
   2a708:	dfc00215 	stw	ra,8(sp)
   2a70c:	002c8840 	call	2c884 <write>
   2a710:	1007883a 	mov	r3,r2
   2a714:	00bfffc4 	movi	r2,-1
   2a718:	18800626 	beq	r3,r2,2a734 <_write_r+0x54>
   2a71c:	1805883a 	mov	r2,r3
   2a720:	dfc00217 	ldw	ra,8(sp)
   2a724:	dc400117 	ldw	r17,4(sp)
   2a728:	dc000017 	ldw	r16,0(sp)
   2a72c:	dec00304 	addi	sp,sp,12
   2a730:	f800283a 	ret
   2a734:	80800017 	ldw	r2,0(r16)
   2a738:	103ff826 	beq	r2,zero,2a71c <_write_r+0x3c>
   2a73c:	88800015 	stw	r2,0(r17)
   2a740:	1805883a 	mov	r2,r3
   2a744:	dfc00217 	ldw	ra,8(sp)
   2a748:	dc400117 	ldw	r17,4(sp)
   2a74c:	dc000017 	ldw	r16,0(sp)
   2a750:	dec00304 	addi	sp,sp,12
   2a754:	f800283a 	ret

0002a758 <_calloc_r>:
   2a758:	298b383a 	mul	r5,r5,r6
   2a75c:	defffe04 	addi	sp,sp,-8
   2a760:	dc000015 	stw	r16,0(sp)
   2a764:	dfc00115 	stw	ra,4(sp)
   2a768:	00237b00 	call	237b0 <_malloc_r>
   2a76c:	1021883a 	mov	r16,r2
   2a770:	01c00904 	movi	r7,36
   2a774:	10000d26 	beq	r2,zero,2a7ac <_calloc_r+0x54>
   2a778:	10ffff17 	ldw	r3,-4(r2)
   2a77c:	1009883a 	mov	r4,r2
   2a780:	00bfff04 	movi	r2,-4
   2a784:	1886703a 	and	r3,r3,r2
   2a788:	1887883a 	add	r3,r3,r2
   2a78c:	180d883a 	mov	r6,r3
   2a790:	000b883a 	mov	r5,zero
   2a794:	38c01736 	bltu	r7,r3,2a7f4 <_calloc_r+0x9c>
   2a798:	008004c4 	movi	r2,19
   2a79c:	10c00836 	bltu	r2,r3,2a7c0 <_calloc_r+0x68>
   2a7a0:	20000215 	stw	zero,8(r4)
   2a7a4:	20000015 	stw	zero,0(r4)
   2a7a8:	20000115 	stw	zero,4(r4)
   2a7ac:	8005883a 	mov	r2,r16
   2a7b0:	dfc00117 	ldw	ra,4(sp)
   2a7b4:	dc000017 	ldw	r16,0(sp)
   2a7b8:	dec00204 	addi	sp,sp,8
   2a7bc:	f800283a 	ret
   2a7c0:	008006c4 	movi	r2,27
   2a7c4:	80000015 	stw	zero,0(r16)
   2a7c8:	80000115 	stw	zero,4(r16)
   2a7cc:	81000204 	addi	r4,r16,8
   2a7d0:	10fff32e 	bgeu	r2,r3,2a7a0 <_calloc_r+0x48>
   2a7d4:	80000215 	stw	zero,8(r16)
   2a7d8:	80000315 	stw	zero,12(r16)
   2a7dc:	81000404 	addi	r4,r16,16
   2a7e0:	19ffef1e 	bne	r3,r7,2a7a0 <_calloc_r+0x48>
   2a7e4:	81000604 	addi	r4,r16,24
   2a7e8:	80000415 	stw	zero,16(r16)
   2a7ec:	80000515 	stw	zero,20(r16)
   2a7f0:	003feb06 	br	2a7a0 <_calloc_r+0x48>
   2a7f4:	0028d740 	call	28d74 <memset>
   2a7f8:	8005883a 	mov	r2,r16
   2a7fc:	dfc00117 	ldw	ra,4(sp)
   2a800:	dc000017 	ldw	r16,0(sp)
   2a804:	dec00204 	addi	sp,sp,8
   2a808:	f800283a 	ret

0002a80c <_close_r>:
   2a80c:	defffd04 	addi	sp,sp,-12
   2a810:	dc000015 	stw	r16,0(sp)
   2a814:	040000f4 	movhi	r16,3
   2a818:	84088804 	addi	r16,r16,8736
   2a81c:	dc400115 	stw	r17,4(sp)
   2a820:	80000015 	stw	zero,0(r16)
   2a824:	2023883a 	mov	r17,r4
   2a828:	2809883a 	mov	r4,r5
   2a82c:	dfc00215 	stw	ra,8(sp)
   2a830:	002bb780 	call	2bb78 <close>
   2a834:	1007883a 	mov	r3,r2
   2a838:	00bfffc4 	movi	r2,-1
   2a83c:	18800626 	beq	r3,r2,2a858 <_close_r+0x4c>
   2a840:	1805883a 	mov	r2,r3
   2a844:	dfc00217 	ldw	ra,8(sp)
   2a848:	dc400117 	ldw	r17,4(sp)
   2a84c:	dc000017 	ldw	r16,0(sp)
   2a850:	dec00304 	addi	sp,sp,12
   2a854:	f800283a 	ret
   2a858:	80800017 	ldw	r2,0(r16)
   2a85c:	103ff826 	beq	r2,zero,2a840 <_close_r+0x34>
   2a860:	88800015 	stw	r2,0(r17)
   2a864:	1805883a 	mov	r2,r3
   2a868:	dfc00217 	ldw	ra,8(sp)
   2a86c:	dc400117 	ldw	r17,4(sp)
   2a870:	dc000017 	ldw	r16,0(sp)
   2a874:	dec00304 	addi	sp,sp,12
   2a878:	f800283a 	ret

0002a87c <_fclose_r>:
   2a87c:	defffc04 	addi	sp,sp,-16
   2a880:	dc400115 	stw	r17,4(sp)
   2a884:	dc000015 	stw	r16,0(sp)
   2a888:	dfc00315 	stw	ra,12(sp)
   2a88c:	dc800215 	stw	r18,8(sp)
   2a890:	2821883a 	mov	r16,r5
   2a894:	2023883a 	mov	r17,r4
   2a898:	28002926 	beq	r5,zero,2a940 <_fclose_r+0xc4>
   2a89c:	0027c200 	call	27c20 <__sfp_lock_acquire>
   2a8a0:	88000226 	beq	r17,zero,2a8ac <_fclose_r+0x30>
   2a8a4:	88800e17 	ldw	r2,56(r17)
   2a8a8:	10002d26 	beq	r2,zero,2a960 <_fclose_r+0xe4>
   2a8ac:	8080030f 	ldh	r2,12(r16)
   2a8b0:	10002226 	beq	r2,zero,2a93c <_fclose_r+0xc0>
   2a8b4:	8809883a 	mov	r4,r17
   2a8b8:	800b883a 	mov	r5,r16
   2a8bc:	00279980 	call	27998 <_fflush_r>
   2a8c0:	1025883a 	mov	r18,r2
   2a8c4:	80800b17 	ldw	r2,44(r16)
   2a8c8:	10000426 	beq	r2,zero,2a8dc <_fclose_r+0x60>
   2a8cc:	81400717 	ldw	r5,28(r16)
   2a8d0:	8809883a 	mov	r4,r17
   2a8d4:	103ee83a 	callr	r2
   2a8d8:	10002a16 	blt	r2,zero,2a984 <_fclose_r+0x108>
   2a8dc:	8080030b 	ldhu	r2,12(r16)
   2a8e0:	1080200c 	andi	r2,r2,128
   2a8e4:	1000231e 	bne	r2,zero,2a974 <_fclose_r+0xf8>
   2a8e8:	81400c17 	ldw	r5,48(r16)
   2a8ec:	28000526 	beq	r5,zero,2a904 <_fclose_r+0x88>
   2a8f0:	80801004 	addi	r2,r16,64
   2a8f4:	28800226 	beq	r5,r2,2a900 <_fclose_r+0x84>
   2a8f8:	8809883a 	mov	r4,r17
   2a8fc:	0027fb40 	call	27fb4 <_free_r>
   2a900:	80000c15 	stw	zero,48(r16)
   2a904:	81401117 	ldw	r5,68(r16)
   2a908:	28000326 	beq	r5,zero,2a918 <_fclose_r+0x9c>
   2a90c:	8809883a 	mov	r4,r17
   2a910:	0027fb40 	call	27fb4 <_free_r>
   2a914:	80001115 	stw	zero,68(r16)
   2a918:	8000030d 	sth	zero,12(r16)
   2a91c:	0027c240 	call	27c24 <__sfp_lock_release>
   2a920:	9005883a 	mov	r2,r18
   2a924:	dfc00317 	ldw	ra,12(sp)
   2a928:	dc800217 	ldw	r18,8(sp)
   2a92c:	dc400117 	ldw	r17,4(sp)
   2a930:	dc000017 	ldw	r16,0(sp)
   2a934:	dec00404 	addi	sp,sp,16
   2a938:	f800283a 	ret
   2a93c:	0027c240 	call	27c24 <__sfp_lock_release>
   2a940:	0025883a 	mov	r18,zero
   2a944:	9005883a 	mov	r2,r18
   2a948:	dfc00317 	ldw	ra,12(sp)
   2a94c:	dc800217 	ldw	r18,8(sp)
   2a950:	dc400117 	ldw	r17,4(sp)
   2a954:	dc000017 	ldw	r16,0(sp)
   2a958:	dec00404 	addi	sp,sp,16
   2a95c:	f800283a 	ret
   2a960:	8809883a 	mov	r4,r17
   2a964:	0027c300 	call	27c30 <__sinit>
   2a968:	8080030f 	ldh	r2,12(r16)
   2a96c:	103fd11e 	bne	r2,zero,2a8b4 <_fclose_r+0x38>
   2a970:	003ff206 	br	2a93c <_fclose_r+0xc0>
   2a974:	81400417 	ldw	r5,16(r16)
   2a978:	8809883a 	mov	r4,r17
   2a97c:	0027fb40 	call	27fb4 <_free_r>
   2a980:	003fd906 	br	2a8e8 <_fclose_r+0x6c>
   2a984:	04bfffc4 	movi	r18,-1
   2a988:	003fd406 	br	2a8dc <_fclose_r+0x60>

0002a98c <fclose>:
   2a98c:	008000f4 	movhi	r2,3
   2a990:	1081df04 	addi	r2,r2,1916
   2a994:	200b883a 	mov	r5,r4
   2a998:	11000017 	ldw	r4,0(r2)
   2a99c:	002a87c1 	jmpi	2a87c <_fclose_r>

0002a9a0 <_fstat_r>:
   2a9a0:	defffd04 	addi	sp,sp,-12
   2a9a4:	dc000015 	stw	r16,0(sp)
   2a9a8:	040000f4 	movhi	r16,3
   2a9ac:	84088804 	addi	r16,r16,8736
   2a9b0:	dc400115 	stw	r17,4(sp)
   2a9b4:	80000015 	stw	zero,0(r16)
   2a9b8:	2023883a 	mov	r17,r4
   2a9bc:	2809883a 	mov	r4,r5
   2a9c0:	300b883a 	mov	r5,r6
   2a9c4:	dfc00215 	stw	ra,8(sp)
   2a9c8:	002bd000 	call	2bd00 <fstat>
   2a9cc:	1007883a 	mov	r3,r2
   2a9d0:	00bfffc4 	movi	r2,-1
   2a9d4:	18800626 	beq	r3,r2,2a9f0 <_fstat_r+0x50>
   2a9d8:	1805883a 	mov	r2,r3
   2a9dc:	dfc00217 	ldw	ra,8(sp)
   2a9e0:	dc400117 	ldw	r17,4(sp)
   2a9e4:	dc000017 	ldw	r16,0(sp)
   2a9e8:	dec00304 	addi	sp,sp,12
   2a9ec:	f800283a 	ret
   2a9f0:	80800017 	ldw	r2,0(r16)
   2a9f4:	103ff826 	beq	r2,zero,2a9d8 <_fstat_r+0x38>
   2a9f8:	88800015 	stw	r2,0(r17)
   2a9fc:	1805883a 	mov	r2,r3
   2aa00:	dfc00217 	ldw	ra,8(sp)
   2aa04:	dc400117 	ldw	r17,4(sp)
   2aa08:	dc000017 	ldw	r16,0(sp)
   2aa0c:	dec00304 	addi	sp,sp,12
   2aa10:	f800283a 	ret

0002aa14 <_isatty_r>:
   2aa14:	defffd04 	addi	sp,sp,-12
   2aa18:	dc000015 	stw	r16,0(sp)
   2aa1c:	040000f4 	movhi	r16,3
   2aa20:	84088804 	addi	r16,r16,8736
   2aa24:	dc400115 	stw	r17,4(sp)
   2aa28:	80000015 	stw	zero,0(r16)
   2aa2c:	2023883a 	mov	r17,r4
   2aa30:	2809883a 	mov	r4,r5
   2aa34:	dfc00215 	stw	ra,8(sp)
   2aa38:	002c03c0 	call	2c03c <isatty>
   2aa3c:	1007883a 	mov	r3,r2
   2aa40:	00bfffc4 	movi	r2,-1
   2aa44:	18800626 	beq	r3,r2,2aa60 <_isatty_r+0x4c>
   2aa48:	1805883a 	mov	r2,r3
   2aa4c:	dfc00217 	ldw	ra,8(sp)
   2aa50:	dc400117 	ldw	r17,4(sp)
   2aa54:	dc000017 	ldw	r16,0(sp)
   2aa58:	dec00304 	addi	sp,sp,12
   2aa5c:	f800283a 	ret
   2aa60:	80800017 	ldw	r2,0(r16)
   2aa64:	103ff826 	beq	r2,zero,2aa48 <_isatty_r+0x34>
   2aa68:	88800015 	stw	r2,0(r17)
   2aa6c:	1805883a 	mov	r2,r3
   2aa70:	dfc00217 	ldw	ra,8(sp)
   2aa74:	dc400117 	ldw	r17,4(sp)
   2aa78:	dc000017 	ldw	r16,0(sp)
   2aa7c:	dec00304 	addi	sp,sp,12
   2aa80:	f800283a 	ret

0002aa84 <_lseek_r>:
   2aa84:	defffd04 	addi	sp,sp,-12
   2aa88:	dc000015 	stw	r16,0(sp)
   2aa8c:	040000f4 	movhi	r16,3
   2aa90:	84088804 	addi	r16,r16,8736
   2aa94:	dc400115 	stw	r17,4(sp)
   2aa98:	80000015 	stw	zero,0(r16)
   2aa9c:	2023883a 	mov	r17,r4
   2aaa0:	2809883a 	mov	r4,r5
   2aaa4:	300b883a 	mov	r5,r6
   2aaa8:	380d883a 	mov	r6,r7
   2aaac:	dfc00215 	stw	ra,8(sp)
   2aab0:	002c2480 	call	2c248 <lseek>
   2aab4:	1007883a 	mov	r3,r2
   2aab8:	00bfffc4 	movi	r2,-1
   2aabc:	18800626 	beq	r3,r2,2aad8 <_lseek_r+0x54>
   2aac0:	1805883a 	mov	r2,r3
   2aac4:	dfc00217 	ldw	ra,8(sp)
   2aac8:	dc400117 	ldw	r17,4(sp)
   2aacc:	dc000017 	ldw	r16,0(sp)
   2aad0:	dec00304 	addi	sp,sp,12
   2aad4:	f800283a 	ret
   2aad8:	80800017 	ldw	r2,0(r16)
   2aadc:	103ff826 	beq	r2,zero,2aac0 <_lseek_r+0x3c>
   2aae0:	88800015 	stw	r2,0(r17)
   2aae4:	1805883a 	mov	r2,r3
   2aae8:	dfc00217 	ldw	ra,8(sp)
   2aaec:	dc400117 	ldw	r17,4(sp)
   2aaf0:	dc000017 	ldw	r16,0(sp)
   2aaf4:	dec00304 	addi	sp,sp,12
   2aaf8:	f800283a 	ret

0002aafc <_read_r>:
   2aafc:	defffd04 	addi	sp,sp,-12
   2ab00:	dc000015 	stw	r16,0(sp)
   2ab04:	040000f4 	movhi	r16,3
   2ab08:	84088804 	addi	r16,r16,8736
   2ab0c:	dc400115 	stw	r17,4(sp)
   2ab10:	80000015 	stw	zero,0(r16)
   2ab14:	2023883a 	mov	r17,r4
   2ab18:	2809883a 	mov	r4,r5
   2ab1c:	300b883a 	mov	r5,r6
   2ab20:	380d883a 	mov	r6,r7
   2ab24:	dfc00215 	stw	ra,8(sp)
   2ab28:	002c4440 	call	2c444 <read>
   2ab2c:	1007883a 	mov	r3,r2
   2ab30:	00bfffc4 	movi	r2,-1
   2ab34:	18800626 	beq	r3,r2,2ab50 <_read_r+0x54>
   2ab38:	1805883a 	mov	r2,r3
   2ab3c:	dfc00217 	ldw	ra,8(sp)
   2ab40:	dc400117 	ldw	r17,4(sp)
   2ab44:	dc000017 	ldw	r16,0(sp)
   2ab48:	dec00304 	addi	sp,sp,12
   2ab4c:	f800283a 	ret
   2ab50:	80800017 	ldw	r2,0(r16)
   2ab54:	103ff826 	beq	r2,zero,2ab38 <_read_r+0x3c>
   2ab58:	88800015 	stw	r2,0(r17)
   2ab5c:	1805883a 	mov	r2,r3
   2ab60:	dfc00217 	ldw	ra,8(sp)
   2ab64:	dc400117 	ldw	r17,4(sp)
   2ab68:	dc000017 	ldw	r16,0(sp)
   2ab6c:	dec00304 	addi	sp,sp,12
   2ab70:	f800283a 	ret

0002ab74 <__udivdi3>:
   2ab74:	defff004 	addi	sp,sp,-64
   2ab78:	2005883a 	mov	r2,r4
   2ab7c:	3011883a 	mov	r8,r6
   2ab80:	df000e15 	stw	fp,56(sp)
   2ab84:	dd000a15 	stw	r20,40(sp)
   2ab88:	dc000615 	stw	r16,24(sp)
   2ab8c:	dfc00f15 	stw	ra,60(sp)
   2ab90:	ddc00d15 	stw	r23,52(sp)
   2ab94:	dd800c15 	stw	r22,48(sp)
   2ab98:	dd400b15 	stw	r21,44(sp)
   2ab9c:	dcc00915 	stw	r19,36(sp)
   2aba0:	dc800815 	stw	r18,32(sp)
   2aba4:	dc400715 	stw	r17,28(sp)
   2aba8:	4021883a 	mov	r16,r8
   2abac:	1039883a 	mov	fp,r2
   2abb0:	2829883a 	mov	r20,r5
   2abb4:	38003b1e 	bne	r7,zero,2aca4 <__udivdi3+0x130>
   2abb8:	2a005c36 	bltu	r5,r8,2ad2c <__udivdi3+0x1b8>
   2abbc:	4000a626 	beq	r8,zero,2ae58 <__udivdi3+0x2e4>
   2abc0:	00bfffd4 	movui	r2,65535
   2abc4:	14009e36 	bltu	r2,r16,2ae40 <__udivdi3+0x2cc>
   2abc8:	00803fc4 	movi	r2,255
   2abcc:	14013d36 	bltu	r2,r16,2b0c4 <__udivdi3+0x550>
   2abd0:	000b883a 	mov	r5,zero
   2abd4:	0005883a 	mov	r2,zero
   2abd8:	8084d83a 	srl	r2,r16,r2
   2abdc:	010000f4 	movhi	r4,3
   2abe0:	213a8b04 	addi	r4,r4,-5588
   2abe4:	01800804 	movi	r6,32
   2abe8:	1105883a 	add	r2,r2,r4
   2abec:	10c00003 	ldbu	r3,0(r2)
   2abf0:	28c7883a 	add	r3,r5,r3
   2abf4:	30edc83a 	sub	r22,r6,r3
   2abf8:	b000ee1e 	bne	r22,zero,2afb4 <__udivdi3+0x440>
   2abfc:	802ad43a 	srli	r21,r16,16
   2ac00:	00800044 	movi	r2,1
   2ac04:	a423c83a 	sub	r17,r20,r16
   2ac08:	85ffffcc 	andi	r23,r16,65535
   2ac0c:	d8800315 	stw	r2,12(sp)
   2ac10:	8809883a 	mov	r4,r17
   2ac14:	a80b883a 	mov	r5,r21
   2ac18:	002bb680 	call	2bb68 <__udivsi3>
   2ac1c:	8809883a 	mov	r4,r17
   2ac20:	a80b883a 	mov	r5,r21
   2ac24:	102d883a 	mov	r22,r2
   2ac28:	002bb700 	call	2bb70 <__umodsi3>
   2ac2c:	1004943a 	slli	r2,r2,16
   2ac30:	e006d43a 	srli	r3,fp,16
   2ac34:	bda3383a 	mul	r17,r23,r22
   2ac38:	10c4b03a 	or	r2,r2,r3
   2ac3c:	1440042e 	bgeu	r2,r17,2ac50 <__udivdi3+0xdc>
   2ac40:	1405883a 	add	r2,r2,r16
   2ac44:	b5bfffc4 	addi	r22,r22,-1
   2ac48:	14000136 	bltu	r2,r16,2ac50 <__udivdi3+0xdc>
   2ac4c:	14413d36 	bltu	r2,r17,2b144 <__udivdi3+0x5d0>
   2ac50:	1463c83a 	sub	r17,r2,r17
   2ac54:	8809883a 	mov	r4,r17
   2ac58:	a80b883a 	mov	r5,r21
   2ac5c:	002bb680 	call	2bb68 <__udivsi3>
   2ac60:	8809883a 	mov	r4,r17
   2ac64:	a80b883a 	mov	r5,r21
   2ac68:	1029883a 	mov	r20,r2
   2ac6c:	002bb700 	call	2bb70 <__umodsi3>
   2ac70:	1004943a 	slli	r2,r2,16
   2ac74:	bd09383a 	mul	r4,r23,r20
   2ac78:	e0ffffcc 	andi	r3,fp,65535
   2ac7c:	10c4b03a 	or	r2,r2,r3
   2ac80:	1100042e 	bgeu	r2,r4,2ac94 <__udivdi3+0x120>
   2ac84:	8085883a 	add	r2,r16,r2
   2ac88:	a53fffc4 	addi	r20,r20,-1
   2ac8c:	14000136 	bltu	r2,r16,2ac94 <__udivdi3+0x120>
   2ac90:	11012036 	bltu	r2,r4,2b114 <__udivdi3+0x5a0>
   2ac94:	b004943a 	slli	r2,r22,16
   2ac98:	d9000317 	ldw	r4,12(sp)
   2ac9c:	a084b03a 	or	r2,r20,r2
   2aca0:	00001506 	br	2acf8 <__udivdi3+0x184>
   2aca4:	380d883a 	mov	r6,r7
   2aca8:	29c06236 	bltu	r5,r7,2ae34 <__udivdi3+0x2c0>
   2acac:	00bfffd4 	movui	r2,65535
   2acb0:	11c05a36 	bltu	r2,r7,2ae1c <__udivdi3+0x2a8>
   2acb4:	00803fc4 	movi	r2,255
   2acb8:	11c0fc36 	bltu	r2,r7,2b0ac <__udivdi3+0x538>
   2acbc:	000b883a 	mov	r5,zero
   2acc0:	0005883a 	mov	r2,zero
   2acc4:	3084d83a 	srl	r2,r6,r2
   2acc8:	010000f4 	movhi	r4,3
   2accc:	213a8b04 	addi	r4,r4,-5588
   2acd0:	01c00804 	movi	r7,32
   2acd4:	1105883a 	add	r2,r2,r4
   2acd8:	10c00003 	ldbu	r3,0(r2)
   2acdc:	28c7883a 	add	r3,r5,r3
   2ace0:	38efc83a 	sub	r23,r7,r3
   2ace4:	b800691e 	bne	r23,zero,2ae8c <__udivdi3+0x318>
   2ace8:	35000136 	bltu	r6,r20,2acf0 <__udivdi3+0x17c>
   2acec:	e4005136 	bltu	fp,r16,2ae34 <__udivdi3+0x2c0>
   2acf0:	00800044 	movi	r2,1
   2acf4:	0009883a 	mov	r4,zero
   2acf8:	2007883a 	mov	r3,r4
   2acfc:	dfc00f17 	ldw	ra,60(sp)
   2ad00:	df000e17 	ldw	fp,56(sp)
   2ad04:	ddc00d17 	ldw	r23,52(sp)
   2ad08:	dd800c17 	ldw	r22,48(sp)
   2ad0c:	dd400b17 	ldw	r21,44(sp)
   2ad10:	dd000a17 	ldw	r20,40(sp)
   2ad14:	dcc00917 	ldw	r19,36(sp)
   2ad18:	dc800817 	ldw	r18,32(sp)
   2ad1c:	dc400717 	ldw	r17,28(sp)
   2ad20:	dc000617 	ldw	r16,24(sp)
   2ad24:	dec01004 	addi	sp,sp,64
   2ad28:	f800283a 	ret
   2ad2c:	00bfffd4 	movui	r2,65535
   2ad30:	12005036 	bltu	r2,r8,2ae74 <__udivdi3+0x300>
   2ad34:	00803fc4 	movi	r2,255
   2ad38:	1200e836 	bltu	r2,r8,2b0dc <__udivdi3+0x568>
   2ad3c:	000b883a 	mov	r5,zero
   2ad40:	0005883a 	mov	r2,zero
   2ad44:	8084d83a 	srl	r2,r16,r2
   2ad48:	010000f4 	movhi	r4,3
   2ad4c:	213a8b04 	addi	r4,r4,-5588
   2ad50:	01800804 	movi	r6,32
   2ad54:	1105883a 	add	r2,r2,r4
   2ad58:	10c00003 	ldbu	r3,0(r2)
   2ad5c:	28c7883a 	add	r3,r5,r3
   2ad60:	30cbc83a 	sub	r5,r6,r3
   2ad64:	28000626 	beq	r5,zero,2ad80 <__udivdi3+0x20c>
   2ad68:	3145c83a 	sub	r2,r6,r5
   2ad6c:	e084d83a 	srl	r2,fp,r2
   2ad70:	a146983a 	sll	r3,r20,r5
   2ad74:	e178983a 	sll	fp,fp,r5
   2ad78:	8160983a 	sll	r16,r16,r5
   2ad7c:	18a8b03a 	or	r20,r3,r2
   2ad80:	802ad43a 	srli	r21,r16,16
   2ad84:	a009883a 	mov	r4,r20
   2ad88:	85ffffcc 	andi	r23,r16,65535
   2ad8c:	a80b883a 	mov	r5,r21
   2ad90:	002bb680 	call	2bb68 <__udivsi3>
   2ad94:	a009883a 	mov	r4,r20
   2ad98:	a80b883a 	mov	r5,r21
   2ad9c:	102d883a 	mov	r22,r2
   2ada0:	002bb700 	call	2bb70 <__umodsi3>
   2ada4:	1004943a 	slli	r2,r2,16
   2ada8:	e006d43a 	srli	r3,fp,16
   2adac:	bda3383a 	mul	r17,r23,r22
   2adb0:	10c4b03a 	or	r2,r2,r3
   2adb4:	1440042e 	bgeu	r2,r17,2adc8 <__udivdi3+0x254>
   2adb8:	1405883a 	add	r2,r2,r16
   2adbc:	b5bfffc4 	addi	r22,r22,-1
   2adc0:	14000136 	bltu	r2,r16,2adc8 <__udivdi3+0x254>
   2adc4:	1440d536 	bltu	r2,r17,2b11c <__udivdi3+0x5a8>
   2adc8:	1463c83a 	sub	r17,r2,r17
   2adcc:	8809883a 	mov	r4,r17
   2add0:	a80b883a 	mov	r5,r21
   2add4:	002bb680 	call	2bb68 <__udivsi3>
   2add8:	8809883a 	mov	r4,r17
   2addc:	a80b883a 	mov	r5,r21
   2ade0:	1029883a 	mov	r20,r2
   2ade4:	002bb700 	call	2bb70 <__umodsi3>
   2ade8:	1004943a 	slli	r2,r2,16
   2adec:	bd09383a 	mul	r4,r23,r20
   2adf0:	e0ffffcc 	andi	r3,fp,65535
   2adf4:	10c4b03a 	or	r2,r2,r3
   2adf8:	1100042e 	bgeu	r2,r4,2ae0c <__udivdi3+0x298>
   2adfc:	8085883a 	add	r2,r16,r2
   2ae00:	a53fffc4 	addi	r20,r20,-1
   2ae04:	14000136 	bltu	r2,r16,2ae0c <__udivdi3+0x298>
   2ae08:	1100c736 	bltu	r2,r4,2b128 <__udivdi3+0x5b4>
   2ae0c:	b004943a 	slli	r2,r22,16
   2ae10:	0009883a 	mov	r4,zero
   2ae14:	a084b03a 	or	r2,r20,r2
   2ae18:	003fb706 	br	2acf8 <__udivdi3+0x184>
   2ae1c:	00804034 	movhi	r2,256
   2ae20:	10bfffc4 	addi	r2,r2,-1
   2ae24:	11c0a436 	bltu	r2,r7,2b0b8 <__udivdi3+0x544>
   2ae28:	01400404 	movi	r5,16
   2ae2c:	2805883a 	mov	r2,r5
   2ae30:	003fa406 	br	2acc4 <__udivdi3+0x150>
   2ae34:	0005883a 	mov	r2,zero
   2ae38:	0009883a 	mov	r4,zero
   2ae3c:	003fae06 	br	2acf8 <__udivdi3+0x184>
   2ae40:	00804034 	movhi	r2,256
   2ae44:	10bfffc4 	addi	r2,r2,-1
   2ae48:	1400a136 	bltu	r2,r16,2b0d0 <__udivdi3+0x55c>
   2ae4c:	01400404 	movi	r5,16
   2ae50:	2805883a 	mov	r2,r5
   2ae54:	003f6006 	br	2abd8 <__udivdi3+0x64>
   2ae58:	01000044 	movi	r4,1
   2ae5c:	000b883a 	mov	r5,zero
   2ae60:	002bb680 	call	2bb68 <__udivsi3>
   2ae64:	1021883a 	mov	r16,r2
   2ae68:	00bfffd4 	movui	r2,65535
   2ae6c:	143ff436 	bltu	r2,r16,2ae40 <__udivdi3+0x2cc>
   2ae70:	003f5506 	br	2abc8 <__udivdi3+0x54>
   2ae74:	00804034 	movhi	r2,256
   2ae78:	10bfffc4 	addi	r2,r2,-1
   2ae7c:	12009a36 	bltu	r2,r8,2b0e8 <__udivdi3+0x574>
   2ae80:	01400404 	movi	r5,16
   2ae84:	2805883a 	mov	r2,r5
   2ae88:	003fae06 	br	2ad44 <__udivdi3+0x1d0>
   2ae8c:	3dc5c83a 	sub	r2,r7,r23
   2ae90:	35c8983a 	sll	r4,r6,r23
   2ae94:	8086d83a 	srl	r3,r16,r2
   2ae98:	a0a2d83a 	srl	r17,r20,r2
   2ae9c:	e084d83a 	srl	r2,fp,r2
   2aea0:	20eab03a 	or	r21,r4,r3
   2aea4:	a82cd43a 	srli	r22,r21,16
   2aea8:	a5c6983a 	sll	r3,r20,r23
   2aeac:	8809883a 	mov	r4,r17
   2aeb0:	b00b883a 	mov	r5,r22
   2aeb4:	1886b03a 	or	r3,r3,r2
   2aeb8:	d8c00215 	stw	r3,8(sp)
   2aebc:	002bb680 	call	2bb68 <__udivsi3>
   2aec0:	8809883a 	mov	r4,r17
   2aec4:	b00b883a 	mov	r5,r22
   2aec8:	1029883a 	mov	r20,r2
   2aecc:	002bb700 	call	2bb70 <__umodsi3>
   2aed0:	a8ffffcc 	andi	r3,r21,65535
   2aed4:	d8c00515 	stw	r3,20(sp)
   2aed8:	d9000217 	ldw	r4,8(sp)
   2aedc:	d9400517 	ldw	r5,20(sp)
   2aee0:	1004943a 	slli	r2,r2,16
   2aee4:	2006d43a 	srli	r3,r4,16
   2aee8:	85e0983a 	sll	r16,r16,r23
   2aeec:	2d23383a 	mul	r17,r5,r20
   2aef0:	10c4b03a 	or	r2,r2,r3
   2aef4:	dc000015 	stw	r16,0(sp)
   2aef8:	1440032e 	bgeu	r2,r17,2af08 <__udivdi3+0x394>
   2aefc:	1545883a 	add	r2,r2,r21
   2af00:	a53fffc4 	addi	r20,r20,-1
   2af04:	15407f2e 	bgeu	r2,r21,2b104 <__udivdi3+0x590>
   2af08:	1463c83a 	sub	r17,r2,r17
   2af0c:	8809883a 	mov	r4,r17
   2af10:	b00b883a 	mov	r5,r22
   2af14:	002bb680 	call	2bb68 <__udivsi3>
   2af18:	8809883a 	mov	r4,r17
   2af1c:	b00b883a 	mov	r5,r22
   2af20:	1021883a 	mov	r16,r2
   2af24:	002bb700 	call	2bb70 <__umodsi3>
   2af28:	d8c00517 	ldw	r3,20(sp)
   2af2c:	d9000217 	ldw	r4,8(sp)
   2af30:	1004943a 	slli	r2,r2,16
   2af34:	1c0f383a 	mul	r7,r3,r16
   2af38:	20ffffcc 	andi	r3,r4,65535
   2af3c:	10e2b03a 	or	r17,r2,r3
   2af40:	89c0032e 	bgeu	r17,r7,2af50 <__udivdi3+0x3dc>
   2af44:	8d63883a 	add	r17,r17,r21
   2af48:	843fffc4 	addi	r16,r16,-1
   2af4c:	8d40692e 	bgeu	r17,r21,2b0f4 <__udivdi3+0x580>
   2af50:	a008943a 	slli	r4,r20,16
   2af54:	d9400017 	ldw	r5,0(sp)
   2af58:	89e3c83a 	sub	r17,r17,r7
   2af5c:	8110b03a 	or	r8,r16,r4
   2af60:	280cd43a 	srli	r6,r5,16
   2af64:	28ffffcc 	andi	r3,r5,65535
   2af68:	40bfffcc 	andi	r2,r8,65535
   2af6c:	400ad43a 	srli	r5,r8,16
   2af70:	10d3383a 	mul	r9,r2,r3
   2af74:	1185383a 	mul	r2,r2,r6
   2af78:	28c7383a 	mul	r3,r5,r3
   2af7c:	4808d43a 	srli	r4,r9,16
   2af80:	298b383a 	mul	r5,r5,r6
   2af84:	10c5883a 	add	r2,r2,r3
   2af88:	2089883a 	add	r4,r4,r2
   2af8c:	20c0022e 	bgeu	r4,r3,2af98 <__udivdi3+0x424>
   2af90:	00800074 	movhi	r2,1
   2af94:	288b883a 	add	r5,r5,r2
   2af98:	2004d43a 	srli	r2,r4,16
   2af9c:	288b883a 	add	r5,r5,r2
   2afa0:	89403f36 	bltu	r17,r5,2b0a0 <__udivdi3+0x52c>
   2afa4:	89403926 	beq	r17,r5,2b08c <__udivdi3+0x518>
   2afa8:	4005883a 	mov	r2,r8
   2afac:	0009883a 	mov	r4,zero
   2afb0:	003f5106 	br	2acf8 <__udivdi3+0x184>
   2afb4:	85a0983a 	sll	r16,r16,r22
   2afb8:	3585c83a 	sub	r2,r6,r22
   2afbc:	a0a2d83a 	srl	r17,r20,r2
   2afc0:	802ad43a 	srli	r21,r16,16
   2afc4:	e084d83a 	srl	r2,fp,r2
   2afc8:	a586983a 	sll	r3,r20,r22
   2afcc:	8809883a 	mov	r4,r17
   2afd0:	a80b883a 	mov	r5,r21
   2afd4:	1886b03a 	or	r3,r3,r2
   2afd8:	d8c00115 	stw	r3,4(sp)
   2afdc:	002bb680 	call	2bb68 <__udivsi3>
   2afe0:	8809883a 	mov	r4,r17
   2afe4:	a80b883a 	mov	r5,r21
   2afe8:	d8800415 	stw	r2,16(sp)
   2afec:	002bb700 	call	2bb70 <__umodsi3>
   2aff0:	d9000117 	ldw	r4,4(sp)
   2aff4:	d9400417 	ldw	r5,16(sp)
   2aff8:	1004943a 	slli	r2,r2,16
   2affc:	85ffffcc 	andi	r23,r16,65535
   2b000:	2006d43a 	srli	r3,r4,16
   2b004:	b963383a 	mul	r17,r23,r5
   2b008:	10c4b03a 	or	r2,r2,r3
   2b00c:	1440042e 	bgeu	r2,r17,2b020 <__udivdi3+0x4ac>
   2b010:	297fffc4 	addi	r5,r5,-1
   2b014:	1405883a 	add	r2,r2,r16
   2b018:	d9400415 	stw	r5,16(sp)
   2b01c:	1400442e 	bgeu	r2,r16,2b130 <__udivdi3+0x5bc>
   2b020:	1463c83a 	sub	r17,r2,r17
   2b024:	8809883a 	mov	r4,r17
   2b028:	a80b883a 	mov	r5,r21
   2b02c:	002bb680 	call	2bb68 <__udivsi3>
   2b030:	8809883a 	mov	r4,r17
   2b034:	a80b883a 	mov	r5,r21
   2b038:	1029883a 	mov	r20,r2
   2b03c:	002bb700 	call	2bb70 <__umodsi3>
   2b040:	d9400117 	ldw	r5,4(sp)
   2b044:	1004943a 	slli	r2,r2,16
   2b048:	bd09383a 	mul	r4,r23,r20
   2b04c:	28ffffcc 	andi	r3,r5,65535
   2b050:	10c6b03a 	or	r3,r2,r3
   2b054:	1900062e 	bgeu	r3,r4,2b070 <__udivdi3+0x4fc>
   2b058:	1c07883a 	add	r3,r3,r16
   2b05c:	a53fffc4 	addi	r20,r20,-1
   2b060:	1c000336 	bltu	r3,r16,2b070 <__udivdi3+0x4fc>
   2b064:	1900022e 	bgeu	r3,r4,2b070 <__udivdi3+0x4fc>
   2b068:	a53fffc4 	addi	r20,r20,-1
   2b06c:	1c07883a 	add	r3,r3,r16
   2b070:	d9400417 	ldw	r5,16(sp)
   2b074:	e5b8983a 	sll	fp,fp,r22
   2b078:	1923c83a 	sub	r17,r3,r4
   2b07c:	2804943a 	slli	r2,r5,16
   2b080:	a0a8b03a 	or	r20,r20,r2
   2b084:	dd000315 	stw	r20,12(sp)
   2b088:	003ee106 	br	2ac10 <__udivdi3+0x9c>
   2b08c:	2004943a 	slli	r2,r4,16
   2b090:	e5c8983a 	sll	r4,fp,r23
   2b094:	48ffffcc 	andi	r3,r9,65535
   2b098:	10c5883a 	add	r2,r2,r3
   2b09c:	20bfc22e 	bgeu	r4,r2,2afa8 <__udivdi3+0x434>
   2b0a0:	40bfffc4 	addi	r2,r8,-1
   2b0a4:	0009883a 	mov	r4,zero
   2b0a8:	003f1306 	br	2acf8 <__udivdi3+0x184>
   2b0ac:	01400204 	movi	r5,8
   2b0b0:	2805883a 	mov	r2,r5
   2b0b4:	003f0306 	br	2acc4 <__udivdi3+0x150>
   2b0b8:	01400604 	movi	r5,24
   2b0bc:	2805883a 	mov	r2,r5
   2b0c0:	003f0006 	br	2acc4 <__udivdi3+0x150>
   2b0c4:	01400204 	movi	r5,8
   2b0c8:	2805883a 	mov	r2,r5
   2b0cc:	003ec206 	br	2abd8 <__udivdi3+0x64>
   2b0d0:	01400604 	movi	r5,24
   2b0d4:	2805883a 	mov	r2,r5
   2b0d8:	003ebf06 	br	2abd8 <__udivdi3+0x64>
   2b0dc:	01400204 	movi	r5,8
   2b0e0:	2805883a 	mov	r2,r5
   2b0e4:	003f1706 	br	2ad44 <__udivdi3+0x1d0>
   2b0e8:	01400604 	movi	r5,24
   2b0ec:	2805883a 	mov	r2,r5
   2b0f0:	003f1406 	br	2ad44 <__udivdi3+0x1d0>
   2b0f4:	89ff962e 	bgeu	r17,r7,2af50 <__udivdi3+0x3dc>
   2b0f8:	8d63883a 	add	r17,r17,r21
   2b0fc:	843fffc4 	addi	r16,r16,-1
   2b100:	003f9306 	br	2af50 <__udivdi3+0x3dc>
   2b104:	147f802e 	bgeu	r2,r17,2af08 <__udivdi3+0x394>
   2b108:	a53fffc4 	addi	r20,r20,-1
   2b10c:	1545883a 	add	r2,r2,r21
   2b110:	003f7d06 	br	2af08 <__udivdi3+0x394>
   2b114:	a53fffc4 	addi	r20,r20,-1
   2b118:	003ede06 	br	2ac94 <__udivdi3+0x120>
   2b11c:	b5bfffc4 	addi	r22,r22,-1
   2b120:	1405883a 	add	r2,r2,r16
   2b124:	003f2806 	br	2adc8 <__udivdi3+0x254>
   2b128:	a53fffc4 	addi	r20,r20,-1
   2b12c:	003f3706 	br	2ae0c <__udivdi3+0x298>
   2b130:	147fbb2e 	bgeu	r2,r17,2b020 <__udivdi3+0x4ac>
   2b134:	297fffc4 	addi	r5,r5,-1
   2b138:	1405883a 	add	r2,r2,r16
   2b13c:	d9400415 	stw	r5,16(sp)
   2b140:	003fb706 	br	2b020 <__udivdi3+0x4ac>
   2b144:	b5bfffc4 	addi	r22,r22,-1
   2b148:	1405883a 	add	r2,r2,r16
   2b14c:	003ec006 	br	2ac50 <__udivdi3+0xdc>

0002b150 <__umoddi3>:
   2b150:	defff104 	addi	sp,sp,-60
   2b154:	dd800b15 	stw	r22,44(sp)
   2b158:	dd000915 	stw	r20,36(sp)
   2b15c:	dc000515 	stw	r16,20(sp)
   2b160:	dfc00e15 	stw	ra,56(sp)
   2b164:	df000d15 	stw	fp,52(sp)
   2b168:	ddc00c15 	stw	r23,48(sp)
   2b16c:	dd400a15 	stw	r21,40(sp)
   2b170:	dcc00815 	stw	r19,32(sp)
   2b174:	dc800715 	stw	r18,28(sp)
   2b178:	dc400615 	stw	r17,24(sp)
   2b17c:	3021883a 	mov	r16,r6
   2b180:	202d883a 	mov	r22,r4
   2b184:	2829883a 	mov	r20,r5
   2b188:	38002b1e 	bne	r7,zero,2b238 <__umoddi3+0xe8>
   2b18c:	29805036 	bltu	r5,r6,2b2d0 <__umoddi3+0x180>
   2b190:	30008a26 	beq	r6,zero,2b3bc <__umoddi3+0x26c>
   2b194:	00bfffd4 	movui	r2,65535
   2b198:	14008236 	bltu	r2,r16,2b3a4 <__umoddi3+0x254>
   2b19c:	00803fc4 	movi	r2,255
   2b1a0:	14013636 	bltu	r2,r16,2b67c <__umoddi3+0x52c>
   2b1a4:	000b883a 	mov	r5,zero
   2b1a8:	0005883a 	mov	r2,zero
   2b1ac:	8084d83a 	srl	r2,r16,r2
   2b1b0:	010000f4 	movhi	r4,3
   2b1b4:	213a8b04 	addi	r4,r4,-5588
   2b1b8:	01800804 	movi	r6,32
   2b1bc:	1105883a 	add	r2,r2,r4
   2b1c0:	10c00003 	ldbu	r3,0(r2)
   2b1c4:	28c7883a 	add	r3,r5,r3
   2b1c8:	30efc83a 	sub	r23,r6,r3
   2b1cc:	b800941e 	bne	r23,zero,2b420 <__umoddi3+0x2d0>
   2b1d0:	802ad43a 	srli	r21,r16,16
   2b1d4:	a423c83a 	sub	r17,r20,r16
   2b1d8:	0039883a 	mov	fp,zero
   2b1dc:	853fffcc 	andi	r20,r16,65535
   2b1e0:	8809883a 	mov	r4,r17
   2b1e4:	a80b883a 	mov	r5,r21
   2b1e8:	002bb680 	call	2bb68 <__udivsi3>
   2b1ec:	8809883a 	mov	r4,r17
   2b1f0:	a80b883a 	mov	r5,r21
   2b1f4:	a0a3383a 	mul	r17,r20,r2
   2b1f8:	002bb700 	call	2bb70 <__umodsi3>
   2b1fc:	1004943a 	slli	r2,r2,16
   2b200:	b006d43a 	srli	r3,r22,16
   2b204:	10c4b03a 	or	r2,r2,r3
   2b208:	1440032e 	bgeu	r2,r17,2b218 <__umoddi3+0xc8>
   2b20c:	1405883a 	add	r2,r2,r16
   2b210:	14000136 	bltu	r2,r16,2b218 <__umoddi3+0xc8>
   2b214:	14413536 	bltu	r2,r17,2b6ec <__umoddi3+0x59c>
   2b218:	1463c83a 	sub	r17,r2,r17
   2b21c:	8809883a 	mov	r4,r17
   2b220:	a80b883a 	mov	r5,r21
   2b224:	002bb680 	call	2bb68 <__udivsi3>
   2b228:	8809883a 	mov	r4,r17
   2b22c:	a0a3383a 	mul	r17,r20,r2
   2b230:	a80b883a 	mov	r5,r21
   2b234:	00004d06 	br	2b36c <__umoddi3+0x21c>
   2b238:	380d883a 	mov	r6,r7
   2b23c:	29c0102e 	bgeu	r5,r7,2b280 <__umoddi3+0x130>
   2b240:	2011883a 	mov	r8,r4
   2b244:	2813883a 	mov	r9,r5
   2b248:	4005883a 	mov	r2,r8
   2b24c:	4807883a 	mov	r3,r9
   2b250:	dfc00e17 	ldw	ra,56(sp)
   2b254:	df000d17 	ldw	fp,52(sp)
   2b258:	ddc00c17 	ldw	r23,48(sp)
   2b25c:	dd800b17 	ldw	r22,44(sp)
   2b260:	dd400a17 	ldw	r21,40(sp)
   2b264:	dd000917 	ldw	r20,36(sp)
   2b268:	dcc00817 	ldw	r19,32(sp)
   2b26c:	dc800717 	ldw	r18,28(sp)
   2b270:	dc400617 	ldw	r17,24(sp)
   2b274:	dc000517 	ldw	r16,20(sp)
   2b278:	dec00f04 	addi	sp,sp,60
   2b27c:	f800283a 	ret
   2b280:	00bfffd4 	movui	r2,65535
   2b284:	11c05a36 	bltu	r2,r7,2b3f0 <__umoddi3+0x2a0>
   2b288:	00803fc4 	movi	r2,255
   2b28c:	11c0fe36 	bltu	r2,r7,2b688 <__umoddi3+0x538>
   2b290:	000b883a 	mov	r5,zero
   2b294:	0005883a 	mov	r2,zero
   2b298:	3084d83a 	srl	r2,r6,r2
   2b29c:	010000f4 	movhi	r4,3
   2b2a0:	213a8b04 	addi	r4,r4,-5588
   2b2a4:	01c00804 	movi	r7,32
   2b2a8:	1105883a 	add	r2,r2,r4
   2b2ac:	10c00003 	ldbu	r3,0(r2)
   2b2b0:	28c7883a 	add	r3,r5,r3
   2b2b4:	38ebc83a 	sub	r21,r7,r3
   2b2b8:	a800851e 	bne	r21,zero,2b4d0 <__umoddi3+0x380>
   2b2bc:	35005236 	bltu	r6,r20,2b408 <__umoddi3+0x2b8>
   2b2c0:	b400512e 	bgeu	r22,r16,2b408 <__umoddi3+0x2b8>
   2b2c4:	b011883a 	mov	r8,r22
   2b2c8:	a013883a 	mov	r9,r20
   2b2cc:	003fde06 	br	2b248 <__umoddi3+0xf8>
   2b2d0:	00bfffd4 	movui	r2,65535
   2b2d4:	11804036 	bltu	r2,r6,2b3d8 <__umoddi3+0x288>
   2b2d8:	00803fc4 	movi	r2,255
   2b2dc:	1180ed36 	bltu	r2,r6,2b694 <__umoddi3+0x544>
   2b2e0:	000b883a 	mov	r5,zero
   2b2e4:	0005883a 	mov	r2,zero
   2b2e8:	8084d83a 	srl	r2,r16,r2
   2b2ec:	010000f4 	movhi	r4,3
   2b2f0:	213a8b04 	addi	r4,r4,-5588
   2b2f4:	01800804 	movi	r6,32
   2b2f8:	1105883a 	add	r2,r2,r4
   2b2fc:	10c00003 	ldbu	r3,0(r2)
   2b300:	28c7883a 	add	r3,r5,r3
   2b304:	30c7c83a 	sub	r3,r6,r3
   2b308:	1800bf1e 	bne	r3,zero,2b608 <__umoddi3+0x4b8>
   2b30c:	0039883a 	mov	fp,zero
   2b310:	802ad43a 	srli	r21,r16,16
   2b314:	a009883a 	mov	r4,r20
   2b318:	85ffffcc 	andi	r23,r16,65535
   2b31c:	a80b883a 	mov	r5,r21
   2b320:	002bb680 	call	2bb68 <__udivsi3>
   2b324:	a009883a 	mov	r4,r20
   2b328:	a80b883a 	mov	r5,r21
   2b32c:	b8a3383a 	mul	r17,r23,r2
   2b330:	002bb700 	call	2bb70 <__umodsi3>
   2b334:	1004943a 	slli	r2,r2,16
   2b338:	b006d43a 	srli	r3,r22,16
   2b33c:	10c4b03a 	or	r2,r2,r3
   2b340:	1440032e 	bgeu	r2,r17,2b350 <__umoddi3+0x200>
   2b344:	1405883a 	add	r2,r2,r16
   2b348:	14000136 	bltu	r2,r16,2b350 <__umoddi3+0x200>
   2b34c:	1440e536 	bltu	r2,r17,2b6e4 <__umoddi3+0x594>
   2b350:	1463c83a 	sub	r17,r2,r17
   2b354:	8809883a 	mov	r4,r17
   2b358:	a80b883a 	mov	r5,r21
   2b35c:	002bb680 	call	2bb68 <__udivsi3>
   2b360:	8809883a 	mov	r4,r17
   2b364:	b8a3383a 	mul	r17,r23,r2
   2b368:	a80b883a 	mov	r5,r21
   2b36c:	002bb700 	call	2bb70 <__umodsi3>
   2b370:	1004943a 	slli	r2,r2,16
   2b374:	b0ffffcc 	andi	r3,r22,65535
   2b378:	10c4b03a 	or	r2,r2,r3
   2b37c:	1440042e 	bgeu	r2,r17,2b390 <__umoddi3+0x240>
   2b380:	1405883a 	add	r2,r2,r16
   2b384:	14000236 	bltu	r2,r16,2b390 <__umoddi3+0x240>
   2b388:	1440012e 	bgeu	r2,r17,2b390 <__umoddi3+0x240>
   2b38c:	1405883a 	add	r2,r2,r16
   2b390:	1445c83a 	sub	r2,r2,r17
   2b394:	1724d83a 	srl	r18,r2,fp
   2b398:	0013883a 	mov	r9,zero
   2b39c:	9011883a 	mov	r8,r18
   2b3a0:	003fa906 	br	2b248 <__umoddi3+0xf8>
   2b3a4:	00804034 	movhi	r2,256
   2b3a8:	10bfffc4 	addi	r2,r2,-1
   2b3ac:	1400b036 	bltu	r2,r16,2b670 <__umoddi3+0x520>
   2b3b0:	01400404 	movi	r5,16
   2b3b4:	2805883a 	mov	r2,r5
   2b3b8:	003f7c06 	br	2b1ac <__umoddi3+0x5c>
   2b3bc:	01000044 	movi	r4,1
   2b3c0:	000b883a 	mov	r5,zero
   2b3c4:	002bb680 	call	2bb68 <__udivsi3>
   2b3c8:	1021883a 	mov	r16,r2
   2b3cc:	00bfffd4 	movui	r2,65535
   2b3d0:	143ff436 	bltu	r2,r16,2b3a4 <__umoddi3+0x254>
   2b3d4:	003f7106 	br	2b19c <__umoddi3+0x4c>
   2b3d8:	00804034 	movhi	r2,256
   2b3dc:	10bfffc4 	addi	r2,r2,-1
   2b3e0:	1180af36 	bltu	r2,r6,2b6a0 <__umoddi3+0x550>
   2b3e4:	01400404 	movi	r5,16
   2b3e8:	2805883a 	mov	r2,r5
   2b3ec:	003fbe06 	br	2b2e8 <__umoddi3+0x198>
   2b3f0:	00804034 	movhi	r2,256
   2b3f4:	10bfffc4 	addi	r2,r2,-1
   2b3f8:	11c0ac36 	bltu	r2,r7,2b6ac <__umoddi3+0x55c>
   2b3fc:	01400404 	movi	r5,16
   2b400:	2805883a 	mov	r2,r5
   2b404:	003fa406 	br	2b298 <__umoddi3+0x148>
   2b408:	b409c83a 	sub	r4,r22,r16
   2b40c:	b105803a 	cmpltu	r2,r22,r4
   2b410:	a187c83a 	sub	r3,r20,r6
   2b414:	18a9c83a 	sub	r20,r3,r2
   2b418:	202d883a 	mov	r22,r4
   2b41c:	003fa906 	br	2b2c4 <__umoddi3+0x174>
   2b420:	85e0983a 	sll	r16,r16,r23
   2b424:	35c5c83a 	sub	r2,r6,r23
   2b428:	a0a2d83a 	srl	r17,r20,r2
   2b42c:	802ad43a 	srli	r21,r16,16
   2b430:	b084d83a 	srl	r2,r22,r2
   2b434:	a5c6983a 	sll	r3,r20,r23
   2b438:	8809883a 	mov	r4,r17
   2b43c:	a80b883a 	mov	r5,r21
   2b440:	1886b03a 	or	r3,r3,r2
   2b444:	d8c00115 	stw	r3,4(sp)
   2b448:	853fffcc 	andi	r20,r16,65535
   2b44c:	002bb680 	call	2bb68 <__udivsi3>
   2b450:	8809883a 	mov	r4,r17
   2b454:	a80b883a 	mov	r5,r21
   2b458:	a0a3383a 	mul	r17,r20,r2
   2b45c:	002bb700 	call	2bb70 <__umodsi3>
   2b460:	d9000117 	ldw	r4,4(sp)
   2b464:	1004943a 	slli	r2,r2,16
   2b468:	b839883a 	mov	fp,r23
   2b46c:	2006d43a 	srli	r3,r4,16
   2b470:	10c4b03a 	or	r2,r2,r3
   2b474:	1440022e 	bgeu	r2,r17,2b480 <__umoddi3+0x330>
   2b478:	1405883a 	add	r2,r2,r16
   2b47c:	1400962e 	bgeu	r2,r16,2b6d8 <__umoddi3+0x588>
   2b480:	1463c83a 	sub	r17,r2,r17
   2b484:	8809883a 	mov	r4,r17
   2b488:	a80b883a 	mov	r5,r21
   2b48c:	002bb680 	call	2bb68 <__udivsi3>
   2b490:	8809883a 	mov	r4,r17
   2b494:	a80b883a 	mov	r5,r21
   2b498:	a0a3383a 	mul	r17,r20,r2
   2b49c:	002bb700 	call	2bb70 <__umodsi3>
   2b4a0:	d9400117 	ldw	r5,4(sp)
   2b4a4:	1004943a 	slli	r2,r2,16
   2b4a8:	28ffffcc 	andi	r3,r5,65535
   2b4ac:	10c4b03a 	or	r2,r2,r3
   2b4b0:	1440042e 	bgeu	r2,r17,2b4c4 <__umoddi3+0x374>
   2b4b4:	1405883a 	add	r2,r2,r16
   2b4b8:	14000236 	bltu	r2,r16,2b4c4 <__umoddi3+0x374>
   2b4bc:	1440012e 	bgeu	r2,r17,2b4c4 <__umoddi3+0x374>
   2b4c0:	1405883a 	add	r2,r2,r16
   2b4c4:	b5ec983a 	sll	r22,r22,r23
   2b4c8:	1463c83a 	sub	r17,r2,r17
   2b4cc:	003f4406 	br	2b1e0 <__umoddi3+0x90>
   2b4d0:	3d4fc83a 	sub	r7,r7,r21
   2b4d4:	3546983a 	sll	r3,r6,r21
   2b4d8:	81c4d83a 	srl	r2,r16,r7
   2b4dc:	a1e2d83a 	srl	r17,r20,r7
   2b4e0:	a54c983a 	sll	r6,r20,r21
   2b4e4:	18aeb03a 	or	r23,r3,r2
   2b4e8:	b828d43a 	srli	r20,r23,16
   2b4ec:	b1c4d83a 	srl	r2,r22,r7
   2b4f0:	8809883a 	mov	r4,r17
   2b4f4:	a00b883a 	mov	r5,r20
   2b4f8:	308cb03a 	or	r6,r6,r2
   2b4fc:	d9c00315 	stw	r7,12(sp)
   2b500:	d9800215 	stw	r6,8(sp)
   2b504:	002bb680 	call	2bb68 <__udivsi3>
   2b508:	8809883a 	mov	r4,r17
   2b50c:	a00b883a 	mov	r5,r20
   2b510:	1039883a 	mov	fp,r2
   2b514:	002bb700 	call	2bb70 <__umodsi3>
   2b518:	b8ffffcc 	andi	r3,r23,65535
   2b51c:	d8c00415 	stw	r3,16(sp)
   2b520:	d9000217 	ldw	r4,8(sp)
   2b524:	d9400417 	ldw	r5,16(sp)
   2b528:	1004943a 	slli	r2,r2,16
   2b52c:	2006d43a 	srli	r3,r4,16
   2b530:	8560983a 	sll	r16,r16,r21
   2b534:	2f23383a 	mul	r17,r5,fp
   2b538:	10c4b03a 	or	r2,r2,r3
   2b53c:	dc000015 	stw	r16,0(sp)
   2b540:	b56c983a 	sll	r22,r22,r21
   2b544:	1440032e 	bgeu	r2,r17,2b554 <__umoddi3+0x404>
   2b548:	15c5883a 	add	r2,r2,r23
   2b54c:	e73fffc4 	addi	fp,fp,-1
   2b550:	15c05d2e 	bgeu	r2,r23,2b6c8 <__umoddi3+0x578>
   2b554:	1463c83a 	sub	r17,r2,r17
   2b558:	8809883a 	mov	r4,r17
   2b55c:	a00b883a 	mov	r5,r20
   2b560:	002bb680 	call	2bb68 <__udivsi3>
   2b564:	8809883a 	mov	r4,r17
   2b568:	a00b883a 	mov	r5,r20
   2b56c:	1021883a 	mov	r16,r2
   2b570:	002bb700 	call	2bb70 <__umodsi3>
   2b574:	d8c00417 	ldw	r3,16(sp)
   2b578:	d9000217 	ldw	r4,8(sp)
   2b57c:	1004943a 	slli	r2,r2,16
   2b580:	1c23383a 	mul	r17,r3,r16
   2b584:	20ffffcc 	andi	r3,r4,65535
   2b588:	10ceb03a 	or	r7,r2,r3
   2b58c:	3c40032e 	bgeu	r7,r17,2b59c <__umoddi3+0x44c>
   2b590:	3dcf883a 	add	r7,r7,r23
   2b594:	843fffc4 	addi	r16,r16,-1
   2b598:	3dc0472e 	bgeu	r7,r23,2b6b8 <__umoddi3+0x568>
   2b59c:	e004943a 	slli	r2,fp,16
   2b5a0:	d9400017 	ldw	r5,0(sp)
   2b5a4:	3c4fc83a 	sub	r7,r7,r17
   2b5a8:	8084b03a 	or	r2,r16,r2
   2b5ac:	28ffffcc 	andi	r3,r5,65535
   2b5b0:	280cd43a 	srli	r6,r5,16
   2b5b4:	100ad43a 	srli	r5,r2,16
   2b5b8:	10bfffcc 	andi	r2,r2,65535
   2b5bc:	10d1383a 	mul	r8,r2,r3
   2b5c0:	28c7383a 	mul	r3,r5,r3
   2b5c4:	1185383a 	mul	r2,r2,r6
   2b5c8:	4008d43a 	srli	r4,r8,16
   2b5cc:	298b383a 	mul	r5,r5,r6
   2b5d0:	10c5883a 	add	r2,r2,r3
   2b5d4:	2089883a 	add	r4,r4,r2
   2b5d8:	20c0022e 	bgeu	r4,r3,2b5e4 <__umoddi3+0x494>
   2b5dc:	00800074 	movhi	r2,1
   2b5e0:	288b883a 	add	r5,r5,r2
   2b5e4:	2004d43a 	srli	r2,r4,16
   2b5e8:	2008943a 	slli	r4,r4,16
   2b5ec:	40ffffcc 	andi	r3,r8,65535
   2b5f0:	288b883a 	add	r5,r5,r2
   2b5f4:	20c9883a 	add	r4,r4,r3
   2b5f8:	39400b36 	bltu	r7,r5,2b628 <__umoddi3+0x4d8>
   2b5fc:	39403d26 	beq	r7,r5,2b6f4 <__umoddi3+0x5a4>
   2b600:	394bc83a 	sub	r5,r7,r5
   2b604:	00000f06 	br	2b644 <__umoddi3+0x4f4>
   2b608:	30c5c83a 	sub	r2,r6,r3
   2b60c:	1839883a 	mov	fp,r3
   2b610:	b084d83a 	srl	r2,r22,r2
   2b614:	a0c6983a 	sll	r3,r20,r3
   2b618:	8720983a 	sll	r16,r16,fp
   2b61c:	b72c983a 	sll	r22,r22,fp
   2b620:	18a8b03a 	or	r20,r3,r2
   2b624:	003f3a06 	br	2b310 <__umoddi3+0x1c0>
   2b628:	d8c00017 	ldw	r3,0(sp)
   2b62c:	20c5c83a 	sub	r2,r4,r3
   2b630:	2089803a 	cmpltu	r4,r4,r2
   2b634:	2dc7c83a 	sub	r3,r5,r23
   2b638:	1907c83a 	sub	r3,r3,r4
   2b63c:	38cbc83a 	sub	r5,r7,r3
   2b640:	1009883a 	mov	r4,r2
   2b644:	b105c83a 	sub	r2,r22,r4
   2b648:	b087803a 	cmpltu	r3,r22,r2
   2b64c:	28c7c83a 	sub	r3,r5,r3
   2b650:	d9400317 	ldw	r5,12(sp)
   2b654:	1544d83a 	srl	r2,r2,r21
   2b658:	1948983a 	sll	r4,r3,r5
   2b65c:	1d46d83a 	srl	r3,r3,r21
   2b660:	20a4b03a 	or	r18,r4,r2
   2b664:	9011883a 	mov	r8,r18
   2b668:	1813883a 	mov	r9,r3
   2b66c:	003ef606 	br	2b248 <__umoddi3+0xf8>
   2b670:	01400604 	movi	r5,24
   2b674:	2805883a 	mov	r2,r5
   2b678:	003ecc06 	br	2b1ac <__umoddi3+0x5c>
   2b67c:	01400204 	movi	r5,8
   2b680:	2805883a 	mov	r2,r5
   2b684:	003ec906 	br	2b1ac <__umoddi3+0x5c>
   2b688:	01400204 	movi	r5,8
   2b68c:	2805883a 	mov	r2,r5
   2b690:	003f0106 	br	2b298 <__umoddi3+0x148>
   2b694:	01400204 	movi	r5,8
   2b698:	2805883a 	mov	r2,r5
   2b69c:	003f1206 	br	2b2e8 <__umoddi3+0x198>
   2b6a0:	01400604 	movi	r5,24
   2b6a4:	2805883a 	mov	r2,r5
   2b6a8:	003f0f06 	br	2b2e8 <__umoddi3+0x198>
   2b6ac:	01400604 	movi	r5,24
   2b6b0:	2805883a 	mov	r2,r5
   2b6b4:	003ef806 	br	2b298 <__umoddi3+0x148>
   2b6b8:	3c7fb82e 	bgeu	r7,r17,2b59c <__umoddi3+0x44c>
   2b6bc:	843fffc4 	addi	r16,r16,-1
   2b6c0:	3dcf883a 	add	r7,r7,r23
   2b6c4:	003fb506 	br	2b59c <__umoddi3+0x44c>
   2b6c8:	147fa22e 	bgeu	r2,r17,2b554 <__umoddi3+0x404>
   2b6cc:	e73fffc4 	addi	fp,fp,-1
   2b6d0:	15c5883a 	add	r2,r2,r23
   2b6d4:	003f9f06 	br	2b554 <__umoddi3+0x404>
   2b6d8:	147f692e 	bgeu	r2,r17,2b480 <__umoddi3+0x330>
   2b6dc:	1405883a 	add	r2,r2,r16
   2b6e0:	003f6706 	br	2b480 <__umoddi3+0x330>
   2b6e4:	1405883a 	add	r2,r2,r16
   2b6e8:	003f1906 	br	2b350 <__umoddi3+0x200>
   2b6ec:	1405883a 	add	r2,r2,r16
   2b6f0:	003ec906 	br	2b218 <__umoddi3+0xc8>
   2b6f4:	b13fcc36 	bltu	r22,r4,2b628 <__umoddi3+0x4d8>
   2b6f8:	000b883a 	mov	r5,zero
   2b6fc:	003fd106 	br	2b644 <__umoddi3+0x4f4>

0002b700 <__eqdf2>:
   2b700:	deffef04 	addi	sp,sp,-68
   2b704:	dc400f15 	stw	r17,60(sp)
   2b708:	dc400404 	addi	r17,sp,16
   2b70c:	2005883a 	mov	r2,r4
   2b710:	2807883a 	mov	r3,r5
   2b714:	dc000e15 	stw	r16,56(sp)
   2b718:	d809883a 	mov	r4,sp
   2b71c:	880b883a 	mov	r5,r17
   2b720:	dc000904 	addi	r16,sp,36
   2b724:	d8c00115 	stw	r3,4(sp)
   2b728:	d8800015 	stw	r2,0(sp)
   2b72c:	d9800215 	stw	r6,8(sp)
   2b730:	dfc01015 	stw	ra,64(sp)
   2b734:	d9c00315 	stw	r7,12(sp)
   2b738:	00235880 	call	23588 <__unpack_d>
   2b73c:	d9000204 	addi	r4,sp,8
   2b740:	800b883a 	mov	r5,r16
   2b744:	00235880 	call	23588 <__unpack_d>
   2b748:	d8800417 	ldw	r2,16(sp)
   2b74c:	00c00044 	movi	r3,1
   2b750:	180d883a 	mov	r6,r3
   2b754:	1880062e 	bgeu	r3,r2,2b770 <__eqdf2+0x70>
   2b758:	d8800917 	ldw	r2,36(sp)
   2b75c:	8809883a 	mov	r4,r17
   2b760:	800b883a 	mov	r5,r16
   2b764:	1880022e 	bgeu	r3,r2,2b770 <__eqdf2+0x70>
   2b768:	00236c00 	call	236c0 <__fpcmp_parts_d>
   2b76c:	100d883a 	mov	r6,r2
   2b770:	3005883a 	mov	r2,r6
   2b774:	dfc01017 	ldw	ra,64(sp)
   2b778:	dc400f17 	ldw	r17,60(sp)
   2b77c:	dc000e17 	ldw	r16,56(sp)
   2b780:	dec01104 	addi	sp,sp,68
   2b784:	f800283a 	ret

0002b788 <__nedf2>:
   2b788:	deffef04 	addi	sp,sp,-68
   2b78c:	dc400f15 	stw	r17,60(sp)
   2b790:	dc400404 	addi	r17,sp,16
   2b794:	2005883a 	mov	r2,r4
   2b798:	2807883a 	mov	r3,r5
   2b79c:	dc000e15 	stw	r16,56(sp)
   2b7a0:	d809883a 	mov	r4,sp
   2b7a4:	880b883a 	mov	r5,r17
   2b7a8:	dc000904 	addi	r16,sp,36
   2b7ac:	d8c00115 	stw	r3,4(sp)
   2b7b0:	d8800015 	stw	r2,0(sp)
   2b7b4:	d9800215 	stw	r6,8(sp)
   2b7b8:	dfc01015 	stw	ra,64(sp)
   2b7bc:	d9c00315 	stw	r7,12(sp)
   2b7c0:	00235880 	call	23588 <__unpack_d>
   2b7c4:	d9000204 	addi	r4,sp,8
   2b7c8:	800b883a 	mov	r5,r16
   2b7cc:	00235880 	call	23588 <__unpack_d>
   2b7d0:	d8800417 	ldw	r2,16(sp)
   2b7d4:	00c00044 	movi	r3,1
   2b7d8:	180d883a 	mov	r6,r3
   2b7dc:	1880062e 	bgeu	r3,r2,2b7f8 <__nedf2+0x70>
   2b7e0:	d8800917 	ldw	r2,36(sp)
   2b7e4:	8809883a 	mov	r4,r17
   2b7e8:	800b883a 	mov	r5,r16
   2b7ec:	1880022e 	bgeu	r3,r2,2b7f8 <__nedf2+0x70>
   2b7f0:	00236c00 	call	236c0 <__fpcmp_parts_d>
   2b7f4:	100d883a 	mov	r6,r2
   2b7f8:	3005883a 	mov	r2,r6
   2b7fc:	dfc01017 	ldw	ra,64(sp)
   2b800:	dc400f17 	ldw	r17,60(sp)
   2b804:	dc000e17 	ldw	r16,56(sp)
   2b808:	dec01104 	addi	sp,sp,68
   2b80c:	f800283a 	ret

0002b810 <__gedf2>:
   2b810:	deffef04 	addi	sp,sp,-68
   2b814:	dc400f15 	stw	r17,60(sp)
   2b818:	dc400404 	addi	r17,sp,16
   2b81c:	2005883a 	mov	r2,r4
   2b820:	2807883a 	mov	r3,r5
   2b824:	dc000e15 	stw	r16,56(sp)
   2b828:	d809883a 	mov	r4,sp
   2b82c:	880b883a 	mov	r5,r17
   2b830:	dc000904 	addi	r16,sp,36
   2b834:	d8c00115 	stw	r3,4(sp)
   2b838:	d8800015 	stw	r2,0(sp)
   2b83c:	d9800215 	stw	r6,8(sp)
   2b840:	dfc01015 	stw	ra,64(sp)
   2b844:	d9c00315 	stw	r7,12(sp)
   2b848:	00235880 	call	23588 <__unpack_d>
   2b84c:	d9000204 	addi	r4,sp,8
   2b850:	800b883a 	mov	r5,r16
   2b854:	00235880 	call	23588 <__unpack_d>
   2b858:	d8800417 	ldw	r2,16(sp)
   2b85c:	00c00044 	movi	r3,1
   2b860:	01bfffc4 	movi	r6,-1
   2b864:	1880062e 	bgeu	r3,r2,2b880 <__gedf2+0x70>
   2b868:	d8800917 	ldw	r2,36(sp)
   2b86c:	8809883a 	mov	r4,r17
   2b870:	800b883a 	mov	r5,r16
   2b874:	1880022e 	bgeu	r3,r2,2b880 <__gedf2+0x70>
   2b878:	00236c00 	call	236c0 <__fpcmp_parts_d>
   2b87c:	100d883a 	mov	r6,r2
   2b880:	3005883a 	mov	r2,r6
   2b884:	dfc01017 	ldw	ra,64(sp)
   2b888:	dc400f17 	ldw	r17,60(sp)
   2b88c:	dc000e17 	ldw	r16,56(sp)
   2b890:	dec01104 	addi	sp,sp,68
   2b894:	f800283a 	ret

0002b898 <__floatunsidf>:
   2b898:	defff204 	addi	sp,sp,-56
   2b89c:	dfc00d15 	stw	ra,52(sp)
   2b8a0:	ddc00c15 	stw	r23,48(sp)
   2b8a4:	dd800b15 	stw	r22,44(sp)
   2b8a8:	dd400a15 	stw	r21,40(sp)
   2b8ac:	dd000915 	stw	r20,36(sp)
   2b8b0:	dcc00815 	stw	r19,32(sp)
   2b8b4:	dc800715 	stw	r18,28(sp)
   2b8b8:	dc400615 	stw	r17,24(sp)
   2b8bc:	dc000515 	stw	r16,20(sp)
   2b8c0:	d8000115 	stw	zero,4(sp)
   2b8c4:	20000f1e 	bne	r4,zero,2b904 <__floatunsidf+0x6c>
   2b8c8:	00800084 	movi	r2,2
   2b8cc:	d8800015 	stw	r2,0(sp)
   2b8d0:	d809883a 	mov	r4,sp
   2b8d4:	00232740 	call	23274 <__pack_d>
   2b8d8:	dfc00d17 	ldw	ra,52(sp)
   2b8dc:	ddc00c17 	ldw	r23,48(sp)
   2b8e0:	dd800b17 	ldw	r22,44(sp)
   2b8e4:	dd400a17 	ldw	r21,40(sp)
   2b8e8:	dd000917 	ldw	r20,36(sp)
   2b8ec:	dcc00817 	ldw	r19,32(sp)
   2b8f0:	dc800717 	ldw	r18,28(sp)
   2b8f4:	dc400617 	ldw	r17,24(sp)
   2b8f8:	dc000517 	ldw	r16,20(sp)
   2b8fc:	dec00e04 	addi	sp,sp,56
   2b900:	f800283a 	ret
   2b904:	008000c4 	movi	r2,3
   2b908:	00c00f04 	movi	r3,60
   2b90c:	002f883a 	mov	r23,zero
   2b910:	202d883a 	mov	r22,r4
   2b914:	d8800015 	stw	r2,0(sp)
   2b918:	d8c00215 	stw	r3,8(sp)
   2b91c:	d9000315 	stw	r4,12(sp)
   2b920:	ddc00415 	stw	r23,16(sp)
   2b924:	0022fa00 	call	22fa0 <__clzsi2>
   2b928:	12400744 	addi	r9,r2,29
   2b92c:	48000b16 	blt	r9,zero,2b95c <__floatunsidf+0xc4>
   2b930:	483fe726 	beq	r9,zero,2b8d0 <__floatunsidf+0x38>
   2b934:	10bfff44 	addi	r2,r2,-3
   2b938:	10002e16 	blt	r2,zero,2b9f4 <__floatunsidf+0x15c>
   2b93c:	b0a2983a 	sll	r17,r22,r2
   2b940:	0021883a 	mov	r16,zero
   2b944:	d8800217 	ldw	r2,8(sp)
   2b948:	dc400415 	stw	r17,16(sp)
   2b94c:	dc000315 	stw	r16,12(sp)
   2b950:	1245c83a 	sub	r2,r2,r9
   2b954:	d8800215 	stw	r2,8(sp)
   2b958:	003fdd06 	br	2b8d0 <__floatunsidf+0x38>
   2b95c:	0255c83a 	sub	r10,zero,r9
   2b960:	51bff804 	addi	r6,r10,-32
   2b964:	30001b16 	blt	r6,zero,2b9d4 <__floatunsidf+0x13c>
   2b968:	b9a8d83a 	srl	r20,r23,r6
   2b96c:	002b883a 	mov	r21,zero
   2b970:	000f883a 	mov	r7,zero
   2b974:	01000044 	movi	r4,1
   2b978:	0011883a 	mov	r8,zero
   2b97c:	30002516 	blt	r6,zero,2ba14 <__floatunsidf+0x17c>
   2b980:	21a6983a 	sll	r19,r4,r6
   2b984:	0025883a 	mov	r18,zero
   2b988:	00bfffc4 	movi	r2,-1
   2b98c:	9089883a 	add	r4,r18,r2
   2b990:	988b883a 	add	r5,r19,r2
   2b994:	248d803a 	cmpltu	r6,r4,r18
   2b998:	314b883a 	add	r5,r6,r5
   2b99c:	b104703a 	and	r2,r22,r4
   2b9a0:	b946703a 	and	r3,r23,r5
   2b9a4:	10c4b03a 	or	r2,r2,r3
   2b9a8:	10000226 	beq	r2,zero,2b9b4 <__floatunsidf+0x11c>
   2b9ac:	01c00044 	movi	r7,1
   2b9b0:	0011883a 	mov	r8,zero
   2b9b4:	d9000217 	ldw	r4,8(sp)
   2b9b8:	a1c4b03a 	or	r2,r20,r7
   2b9bc:	aa06b03a 	or	r3,r21,r8
   2b9c0:	2249c83a 	sub	r4,r4,r9
   2b9c4:	d8c00415 	stw	r3,16(sp)
   2b9c8:	d9000215 	stw	r4,8(sp)
   2b9cc:	d8800315 	stw	r2,12(sp)
   2b9d0:	003fbf06 	br	2b8d0 <__floatunsidf+0x38>
   2b9d4:	bdc7883a 	add	r3,r23,r23
   2b9d8:	008007c4 	movi	r2,31
   2b9dc:	1285c83a 	sub	r2,r2,r10
   2b9e0:	1886983a 	sll	r3,r3,r2
   2b9e4:	b2a8d83a 	srl	r20,r22,r10
   2b9e8:	baaad83a 	srl	r21,r23,r10
   2b9ec:	1d28b03a 	or	r20,r3,r20
   2b9f0:	003fdf06 	br	2b970 <__floatunsidf+0xd8>
   2b9f4:	b006d07a 	srli	r3,r22,1
   2b9f8:	008007c4 	movi	r2,31
   2b9fc:	1245c83a 	sub	r2,r2,r9
   2ba00:	1886d83a 	srl	r3,r3,r2
   2ba04:	ba62983a 	sll	r17,r23,r9
   2ba08:	b260983a 	sll	r16,r22,r9
   2ba0c:	1c62b03a 	or	r17,r3,r17
   2ba10:	003fcc06 	br	2b944 <__floatunsidf+0xac>
   2ba14:	2006d07a 	srli	r3,r4,1
   2ba18:	008007c4 	movi	r2,31
   2ba1c:	1285c83a 	sub	r2,r2,r10
   2ba20:	18a6d83a 	srl	r19,r3,r2
   2ba24:	22a4983a 	sll	r18,r4,r10
   2ba28:	003fd706 	br	2b988 <__floatunsidf+0xf0>

0002ba2c <udivmodsi4>:
   2ba2c:	29001b2e 	bgeu	r5,r4,2ba9c <udivmodsi4+0x70>
   2ba30:	28001a16 	blt	r5,zero,2ba9c <udivmodsi4+0x70>
   2ba34:	00800044 	movi	r2,1
   2ba38:	0007883a 	mov	r3,zero
   2ba3c:	01c007c4 	movi	r7,31
   2ba40:	00000306 	br	2ba50 <udivmodsi4+0x24>
   2ba44:	19c01326 	beq	r3,r7,2ba94 <udivmodsi4+0x68>
   2ba48:	18c00044 	addi	r3,r3,1
   2ba4c:	28000416 	blt	r5,zero,2ba60 <udivmodsi4+0x34>
   2ba50:	294b883a 	add	r5,r5,r5
   2ba54:	1085883a 	add	r2,r2,r2
   2ba58:	293ffa36 	bltu	r5,r4,2ba44 <udivmodsi4+0x18>
   2ba5c:	10000d26 	beq	r2,zero,2ba94 <udivmodsi4+0x68>
   2ba60:	0007883a 	mov	r3,zero
   2ba64:	21400236 	bltu	r4,r5,2ba70 <udivmodsi4+0x44>
   2ba68:	2149c83a 	sub	r4,r4,r5
   2ba6c:	1886b03a 	or	r3,r3,r2
   2ba70:	1004d07a 	srli	r2,r2,1
   2ba74:	280ad07a 	srli	r5,r5,1
   2ba78:	103ffa1e 	bne	r2,zero,2ba64 <udivmodsi4+0x38>
   2ba7c:	30000226 	beq	r6,zero,2ba88 <udivmodsi4+0x5c>
   2ba80:	2005883a 	mov	r2,r4
   2ba84:	f800283a 	ret
   2ba88:	1809883a 	mov	r4,r3
   2ba8c:	2005883a 	mov	r2,r4
   2ba90:	f800283a 	ret
   2ba94:	0007883a 	mov	r3,zero
   2ba98:	003ff806 	br	2ba7c <udivmodsi4+0x50>
   2ba9c:	00800044 	movi	r2,1
   2baa0:	0007883a 	mov	r3,zero
   2baa4:	003fef06 	br	2ba64 <udivmodsi4+0x38>

0002baa8 <__divsi3>:
   2baa8:	defffe04 	addi	sp,sp,-8
   2baac:	dc000015 	stw	r16,0(sp)
   2bab0:	dfc00115 	stw	ra,4(sp)
   2bab4:	0021883a 	mov	r16,zero
   2bab8:	20000c16 	blt	r4,zero,2baec <__divsi3+0x44>
   2babc:	000d883a 	mov	r6,zero
   2bac0:	28000e16 	blt	r5,zero,2bafc <__divsi3+0x54>
   2bac4:	002ba2c0 	call	2ba2c <udivmodsi4>
   2bac8:	1007883a 	mov	r3,r2
   2bacc:	8005003a 	cmpeq	r2,r16,zero
   2bad0:	1000011e 	bne	r2,zero,2bad8 <__divsi3+0x30>
   2bad4:	00c7c83a 	sub	r3,zero,r3
   2bad8:	1805883a 	mov	r2,r3
   2badc:	dfc00117 	ldw	ra,4(sp)
   2bae0:	dc000017 	ldw	r16,0(sp)
   2bae4:	dec00204 	addi	sp,sp,8
   2bae8:	f800283a 	ret
   2baec:	0109c83a 	sub	r4,zero,r4
   2baf0:	04000044 	movi	r16,1
   2baf4:	000d883a 	mov	r6,zero
   2baf8:	283ff20e 	bge	r5,zero,2bac4 <__divsi3+0x1c>
   2bafc:	014bc83a 	sub	r5,zero,r5
   2bb00:	8021003a 	cmpeq	r16,r16,zero
   2bb04:	003fef06 	br	2bac4 <__divsi3+0x1c>

0002bb08 <__modsi3>:
   2bb08:	deffff04 	addi	sp,sp,-4
   2bb0c:	dfc00015 	stw	ra,0(sp)
   2bb10:	01800044 	movi	r6,1
   2bb14:	2807883a 	mov	r3,r5
   2bb18:	20000416 	blt	r4,zero,2bb2c <__modsi3+0x24>
   2bb1c:	28000c16 	blt	r5,zero,2bb50 <__modsi3+0x48>
   2bb20:	dfc00017 	ldw	ra,0(sp)
   2bb24:	dec00104 	addi	sp,sp,4
   2bb28:	002ba2c1 	jmpi	2ba2c <udivmodsi4>
   2bb2c:	0109c83a 	sub	r4,zero,r4
   2bb30:	28000b16 	blt	r5,zero,2bb60 <__modsi3+0x58>
   2bb34:	180b883a 	mov	r5,r3
   2bb38:	01800044 	movi	r6,1
   2bb3c:	002ba2c0 	call	2ba2c <udivmodsi4>
   2bb40:	0085c83a 	sub	r2,zero,r2
   2bb44:	dfc00017 	ldw	ra,0(sp)
   2bb48:	dec00104 	addi	sp,sp,4
   2bb4c:	f800283a 	ret
   2bb50:	014bc83a 	sub	r5,zero,r5
   2bb54:	dfc00017 	ldw	ra,0(sp)
   2bb58:	dec00104 	addi	sp,sp,4
   2bb5c:	002ba2c1 	jmpi	2ba2c <udivmodsi4>
   2bb60:	0147c83a 	sub	r3,zero,r5
   2bb64:	003ff306 	br	2bb34 <__modsi3+0x2c>

0002bb68 <__udivsi3>:
   2bb68:	000d883a 	mov	r6,zero
   2bb6c:	002ba2c1 	jmpi	2ba2c <udivmodsi4>

0002bb70 <__umodsi3>:
   2bb70:	01800044 	movi	r6,1
   2bb74:	002ba2c1 	jmpi	2ba2c <udivmodsi4>

0002bb78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2bb78:	defff804 	addi	sp,sp,-32
   2bb7c:	dfc00715 	stw	ra,28(sp)
   2bb80:	df000615 	stw	fp,24(sp)
   2bb84:	df000604 	addi	fp,sp,24
   2bb88:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2bb8c:	e0bffc17 	ldw	r2,-16(fp)
   2bb90:	1004803a 	cmplt	r2,r2,zero
   2bb94:	1000081e 	bne	r2,zero,2bbb8 <close+0x40>
   2bb98:	e0bffc17 	ldw	r2,-16(fp)
   2bb9c:	10800324 	muli	r2,r2,12
   2bba0:	1007883a 	mov	r3,r2
   2bba4:	008000f4 	movhi	r2,3
   2bba8:	10bd6504 	addi	r2,r2,-2668
   2bbac:	1887883a 	add	r3,r3,r2
   2bbb0:	e0ffff15 	stw	r3,-4(fp)
   2bbb4:	00000106 	br	2bbbc <close+0x44>
   2bbb8:	e03fff15 	stw	zero,-4(fp)
   2bbbc:	e0bfff17 	ldw	r2,-4(fp)
   2bbc0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   2bbc4:	e0bffb17 	ldw	r2,-20(fp)
   2bbc8:	1005003a 	cmpeq	r2,r2,zero
   2bbcc:	10001d1e 	bne	r2,zero,2bc44 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2bbd0:	e0bffb17 	ldw	r2,-20(fp)
   2bbd4:	10800017 	ldw	r2,0(r2)
   2bbd8:	10800417 	ldw	r2,16(r2)
   2bbdc:	1005003a 	cmpeq	r2,r2,zero
   2bbe0:	1000071e 	bne	r2,zero,2bc00 <close+0x88>
   2bbe4:	e0bffb17 	ldw	r2,-20(fp)
   2bbe8:	10800017 	ldw	r2,0(r2)
   2bbec:	10800417 	ldw	r2,16(r2)
   2bbf0:	e13ffb17 	ldw	r4,-20(fp)
   2bbf4:	103ee83a 	callr	r2
   2bbf8:	e0bffe15 	stw	r2,-8(fp)
   2bbfc:	00000106 	br	2bc04 <close+0x8c>
   2bc00:	e03ffe15 	stw	zero,-8(fp)
   2bc04:	e0bffe17 	ldw	r2,-8(fp)
   2bc08:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2bc0c:	e13ffc17 	ldw	r4,-16(fp)
   2bc10:	002c5c40 	call	2c5c4 <alt_release_fd>
    if (rval < 0)
   2bc14:	e0bffa17 	ldw	r2,-24(fp)
   2bc18:	1004403a 	cmpge	r2,r2,zero
   2bc1c:	1000071e 	bne	r2,zero,2bc3c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   2bc20:	002bc740 	call	2bc74 <alt_get_errno>
   2bc24:	e0fffa17 	ldw	r3,-24(fp)
   2bc28:	00c7c83a 	sub	r3,zero,r3
   2bc2c:	10c00015 	stw	r3,0(r2)
      return -1;
   2bc30:	00bfffc4 	movi	r2,-1
   2bc34:	e0bffd15 	stw	r2,-12(fp)
   2bc38:	00000806 	br	2bc5c <close+0xe4>
    }
    return 0;
   2bc3c:	e03ffd15 	stw	zero,-12(fp)
   2bc40:	00000606 	br	2bc5c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2bc44:	002bc740 	call	2bc74 <alt_get_errno>
   2bc48:	1007883a 	mov	r3,r2
   2bc4c:	00801444 	movi	r2,81
   2bc50:	18800015 	stw	r2,0(r3)
    return -1;
   2bc54:	00bfffc4 	movi	r2,-1
   2bc58:	e0bffd15 	stw	r2,-12(fp)
   2bc5c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   2bc60:	e037883a 	mov	sp,fp
   2bc64:	dfc00117 	ldw	ra,4(sp)
   2bc68:	df000017 	ldw	fp,0(sp)
   2bc6c:	dec00204 	addi	sp,sp,8
   2bc70:	f800283a 	ret

0002bc74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bc74:	defffd04 	addi	sp,sp,-12
   2bc78:	dfc00215 	stw	ra,8(sp)
   2bc7c:	df000115 	stw	fp,4(sp)
   2bc80:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2bc84:	008000f4 	movhi	r2,3
   2bc88:	1081e804 	addi	r2,r2,1952
   2bc8c:	10800017 	ldw	r2,0(r2)
   2bc90:	1005003a 	cmpeq	r2,r2,zero
   2bc94:	1000061e 	bne	r2,zero,2bcb0 <alt_get_errno+0x3c>
   2bc98:	008000f4 	movhi	r2,3
   2bc9c:	1081e804 	addi	r2,r2,1952
   2bca0:	10800017 	ldw	r2,0(r2)
   2bca4:	103ee83a 	callr	r2
   2bca8:	e0bfff15 	stw	r2,-4(fp)
   2bcac:	00000306 	br	2bcbc <alt_get_errno+0x48>
   2bcb0:	008000f4 	movhi	r2,3
   2bcb4:	10888804 	addi	r2,r2,8736
   2bcb8:	e0bfff15 	stw	r2,-4(fp)
   2bcbc:	e0bfff17 	ldw	r2,-4(fp)
}
   2bcc0:	e037883a 	mov	sp,fp
   2bcc4:	dfc00117 	ldw	ra,4(sp)
   2bcc8:	df000017 	ldw	fp,0(sp)
   2bccc:	dec00204 	addi	sp,sp,8
   2bcd0:	f800283a 	ret

0002bcd4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2bcd4:	defffc04 	addi	sp,sp,-16
   2bcd8:	df000315 	stw	fp,12(sp)
   2bcdc:	df000304 	addi	fp,sp,12
   2bce0:	e13ffd15 	stw	r4,-12(fp)
   2bce4:	e17ffe15 	stw	r5,-8(fp)
   2bce8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2bcec:	e0bfff17 	ldw	r2,-4(fp)
}
   2bcf0:	e037883a 	mov	sp,fp
   2bcf4:	df000017 	ldw	fp,0(sp)
   2bcf8:	dec00104 	addi	sp,sp,4
   2bcfc:	f800283a 	ret

0002bd00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2bd00:	defff904 	addi	sp,sp,-28
   2bd04:	dfc00615 	stw	ra,24(sp)
   2bd08:	df000515 	stw	fp,20(sp)
   2bd0c:	df000504 	addi	fp,sp,20
   2bd10:	e13ffc15 	stw	r4,-16(fp)
   2bd14:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2bd18:	e0bffc17 	ldw	r2,-16(fp)
   2bd1c:	1004803a 	cmplt	r2,r2,zero
   2bd20:	1000081e 	bne	r2,zero,2bd44 <fstat+0x44>
   2bd24:	e0bffc17 	ldw	r2,-16(fp)
   2bd28:	10800324 	muli	r2,r2,12
   2bd2c:	1007883a 	mov	r3,r2
   2bd30:	008000f4 	movhi	r2,3
   2bd34:	10bd6504 	addi	r2,r2,-2668
   2bd38:	1887883a 	add	r3,r3,r2
   2bd3c:	e0ffff15 	stw	r3,-4(fp)
   2bd40:	00000106 	br	2bd48 <fstat+0x48>
   2bd44:	e03fff15 	stw	zero,-4(fp)
   2bd48:	e0bfff17 	ldw	r2,-4(fp)
   2bd4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2bd50:	e0bffb17 	ldw	r2,-20(fp)
   2bd54:	1005003a 	cmpeq	r2,r2,zero
   2bd58:	1000121e 	bne	r2,zero,2bda4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2bd5c:	e0bffb17 	ldw	r2,-20(fp)
   2bd60:	10800017 	ldw	r2,0(r2)
   2bd64:	10800817 	ldw	r2,32(r2)
   2bd68:	1005003a 	cmpeq	r2,r2,zero
   2bd6c:	1000081e 	bne	r2,zero,2bd90 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   2bd70:	e0bffb17 	ldw	r2,-20(fp)
   2bd74:	10800017 	ldw	r2,0(r2)
   2bd78:	10800817 	ldw	r2,32(r2)
   2bd7c:	e13ffb17 	ldw	r4,-20(fp)
   2bd80:	e17ffd17 	ldw	r5,-12(fp)
   2bd84:	103ee83a 	callr	r2
   2bd88:	e0bffe15 	stw	r2,-8(fp)
   2bd8c:	00000b06 	br	2bdbc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2bd90:	e0fffd17 	ldw	r3,-12(fp)
   2bd94:	00880004 	movi	r2,8192
   2bd98:	18800115 	stw	r2,4(r3)
      return 0;
   2bd9c:	e03ffe15 	stw	zero,-8(fp)
   2bda0:	00000606 	br	2bdbc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2bda4:	002bdd40 	call	2bdd4 <alt_get_errno>
   2bda8:	1007883a 	mov	r3,r2
   2bdac:	00801444 	movi	r2,81
   2bdb0:	18800015 	stw	r2,0(r3)
    return -1;
   2bdb4:	00bfffc4 	movi	r2,-1
   2bdb8:	e0bffe15 	stw	r2,-8(fp)
   2bdbc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2bdc0:	e037883a 	mov	sp,fp
   2bdc4:	dfc00117 	ldw	ra,4(sp)
   2bdc8:	df000017 	ldw	fp,0(sp)
   2bdcc:	dec00204 	addi	sp,sp,8
   2bdd0:	f800283a 	ret

0002bdd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bdd4:	defffd04 	addi	sp,sp,-12
   2bdd8:	dfc00215 	stw	ra,8(sp)
   2bddc:	df000115 	stw	fp,4(sp)
   2bde0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2bde4:	008000f4 	movhi	r2,3
   2bde8:	1081e804 	addi	r2,r2,1952
   2bdec:	10800017 	ldw	r2,0(r2)
   2bdf0:	1005003a 	cmpeq	r2,r2,zero
   2bdf4:	1000061e 	bne	r2,zero,2be10 <alt_get_errno+0x3c>
   2bdf8:	008000f4 	movhi	r2,3
   2bdfc:	1081e804 	addi	r2,r2,1952
   2be00:	10800017 	ldw	r2,0(r2)
   2be04:	103ee83a 	callr	r2
   2be08:	e0bfff15 	stw	r2,-4(fp)
   2be0c:	00000306 	br	2be1c <alt_get_errno+0x48>
   2be10:	008000f4 	movhi	r2,3
   2be14:	10888804 	addi	r2,r2,8736
   2be18:	e0bfff15 	stw	r2,-4(fp)
   2be1c:	e0bfff17 	ldw	r2,-4(fp)
}
   2be20:	e037883a 	mov	sp,fp
   2be24:	dfc00117 	ldw	ra,4(sp)
   2be28:	df000017 	ldw	fp,0(sp)
   2be2c:	dec00204 	addi	sp,sp,8
   2be30:	f800283a 	ret

0002be34 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   2be34:	defff704 	addi	sp,sp,-36
   2be38:	dfc00815 	stw	ra,32(sp)
   2be3c:	df000715 	stw	fp,28(sp)
   2be40:	dc000615 	stw	r16,24(sp)
   2be44:	df000604 	addi	fp,sp,24
   2be48:	e13ffd15 	stw	r4,-12(fp)
   2be4c:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   2be50:	e0bffe17 	ldw	r2,-8(fp)
   2be54:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2be58:	008000f4 	movhi	r2,3
   2be5c:	10889404 	addi	r2,r2,8784
   2be60:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   2be64:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2be68:	008000f4 	movhi	r2,3
   2be6c:	10889304 	addi	r2,r2,8780
   2be70:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
   2be74:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   2be78:	e0bffa17 	ldw	r2,-24(fp)
   2be7c:	1005003a 	cmpeq	r2,r2,zero
   2be80:	1000651e 	bne	r2,zero,2c018 <gettimeofday+0x1e4>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   2be84:	d0a6b117 	ldw	r2,-25916(gp)
   2be88:	1009883a 	mov	r4,r2
   2be8c:	e0fffb17 	ldw	r3,-20(fp)
   2be90:	e0bffa17 	ldw	r2,-24(fp)
   2be94:	1885203a 	divu	r2,r3,r2
   2be98:	2085883a 	add	r2,r4,r2
   2be9c:	1007883a 	mov	r3,r2
   2bea0:	e0bffd17 	ldw	r2,-12(fp)
   2bea4:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   2bea8:	008000f4 	movhi	r2,3
   2beac:	10888f04 	addi	r2,r2,8764
   2beb0:	10800017 	ldw	r2,0(r2)
   2beb4:	1021883a 	mov	r16,r2
   2beb8:	e17ffb17 	ldw	r5,-20(fp)
   2bebc:	000d883a 	mov	r6,zero
   2bec0:	00c003f4 	movhi	r3,15
   2bec4:	18d09004 	addi	r3,r3,16960
   2bec8:	e0bffa17 	ldw	r2,-24(fp)
   2becc:	1889203a 	divu	r4,r3,r2
   2bed0:	2005883a 	mov	r2,r4
   2bed4:	0007883a 	mov	r3,zero
   2bed8:	2809883a 	mov	r4,r5
   2bedc:	300b883a 	mov	r5,r6
   2bee0:	100d883a 	mov	r6,r2
   2bee4:	180f883a 	mov	r7,r3
   2bee8:	0022f080 	call	22f08 <__muldi3>
   2beec:	1009883a 	mov	r4,r2
   2bef0:	180b883a 	mov	r5,r3
   2bef4:	2005883a 	mov	r2,r4
   2bef8:	2807883a 	mov	r3,r5
   2befc:	1009883a 	mov	r4,r2
   2bf00:	180b883a 	mov	r5,r3
   2bf04:	018003f4 	movhi	r6,15
   2bf08:	31909004 	addi	r6,r6,16960
   2bf0c:	000f883a 	mov	r7,zero
   2bf10:	002b1500 	call	2b150 <__umoddi3>
   2bf14:	1009883a 	mov	r4,r2
   2bf18:	180b883a 	mov	r5,r3
   2bf1c:	2005883a 	mov	r2,r4
   2bf20:	2807883a 	mov	r3,r5
   2bf24:	8085883a 	add	r2,r16,r2
   2bf28:	1007883a 	mov	r3,r2
   2bf2c:	e0bffd17 	ldw	r2,-12(fp)
   2bf30:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   2bf34:	00001506 	br	2bf8c <gettimeofday+0x158>
      if (ptimeval->tv_sec <= 0)
   2bf38:	e0bffd17 	ldw	r2,-12(fp)
   2bf3c:	10800017 	ldw	r2,0(r2)
   2bf40:	10800048 	cmpgei	r2,r2,1
   2bf44:	1000051e 	bne	r2,zero,2bf5c <gettimeofday+0x128>
      {
          ptimeval->tv_sec = 0;
   2bf48:	e0bffd17 	ldw	r2,-12(fp)
   2bf4c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   2bf50:	e0bffd17 	ldw	r2,-12(fp)
   2bf54:	10000115 	stw	zero,4(r2)
          break;
   2bf58:	00001d06 	br	2bfd0 <gettimeofday+0x19c>
      }
      else
      {
          ptimeval->tv_sec--;
   2bf5c:	e0bffd17 	ldw	r2,-12(fp)
   2bf60:	10800017 	ldw	r2,0(r2)
   2bf64:	10ffffc4 	addi	r3,r2,-1
   2bf68:	e0bffd17 	ldw	r2,-12(fp)
   2bf6c:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   2bf70:	e0bffd17 	ldw	r2,-12(fp)
   2bf74:	10c00117 	ldw	r3,4(r2)
   2bf78:	008003f4 	movhi	r2,15
   2bf7c:	10909004 	addi	r2,r2,16960
   2bf80:	1887883a 	add	r3,r3,r2
   2bf84:	e0bffd17 	ldw	r2,-12(fp)
   2bf88:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   2bf8c:	e0bffd17 	ldw	r2,-12(fp)
   2bf90:	10800117 	ldw	r2,4(r2)
   2bf94:	1004803a 	cmplt	r2,r2,zero
   2bf98:	103fe71e 	bne	r2,zero,2bf38 <gettimeofday+0x104>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   2bf9c:	00000c06 	br	2bfd0 <gettimeofday+0x19c>
      ptimeval->tv_sec++;
   2bfa0:	e0bffd17 	ldw	r2,-12(fp)
   2bfa4:	10800017 	ldw	r2,0(r2)
   2bfa8:	10c00044 	addi	r3,r2,1
   2bfac:	e0bffd17 	ldw	r2,-12(fp)
   2bfb0:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   2bfb4:	e0bffd17 	ldw	r2,-12(fp)
   2bfb8:	10c00117 	ldw	r3,4(r2)
   2bfbc:	00bffc74 	movhi	r2,65521
   2bfc0:	10af7004 	addi	r2,r2,-16960
   2bfc4:	1887883a 	add	r3,r3,r2
   2bfc8:	e0bffd17 	ldw	r2,-12(fp)
   2bfcc:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   2bfd0:	e0bffd17 	ldw	r2,-12(fp)
   2bfd4:	10c00117 	ldw	r3,4(r2)
   2bfd8:	008003f4 	movhi	r2,15
   2bfdc:	10908fc4 	addi	r2,r2,16959
   2bfe0:	10ffef16 	blt	r2,r3,2bfa0 <gettimeofday+0x16c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   2bfe4:	e0bffc17 	ldw	r2,-16(fp)
   2bfe8:	1005003a 	cmpeq	r2,r2,zero
   2bfec:	1000081e 	bne	r2,zero,2c010 <gettimeofday+0x1dc>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   2bff0:	d0e6af17 	ldw	r3,-25924(gp)
   2bff4:	e0bffc17 	ldw	r2,-16(fp)
   2bff8:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   2bffc:	008000f4 	movhi	r2,3
   2c000:	10888d04 	addi	r2,r2,8756
   2c004:	10c00017 	ldw	r3,0(r2)
   2c008:	e0bffc17 	ldw	r2,-16(fp)
   2c00c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   2c010:	e03fff15 	stw	zero,-4(fp)
   2c014:	00000206 	br	2c020 <gettimeofday+0x1ec>
  }

  return -ENOTSUP;
   2c018:	00bfde84 	movi	r2,-134
   2c01c:	e0bfff15 	stw	r2,-4(fp)
   2c020:	e0bfff17 	ldw	r2,-4(fp)
}
   2c024:	e037883a 	mov	sp,fp
   2c028:	dfc00217 	ldw	ra,8(sp)
   2c02c:	df000117 	ldw	fp,4(sp)
   2c030:	dc000017 	ldw	r16,0(sp)
   2c034:	dec00304 	addi	sp,sp,12
   2c038:	f800283a 	ret

0002c03c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2c03c:	deffeb04 	addi	sp,sp,-84
   2c040:	dfc01415 	stw	ra,80(sp)
   2c044:	df001315 	stw	fp,76(sp)
   2c048:	df001304 	addi	fp,sp,76
   2c04c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2c050:	e0bffd17 	ldw	r2,-12(fp)
   2c054:	1004803a 	cmplt	r2,r2,zero
   2c058:	1000081e 	bne	r2,zero,2c07c <isatty+0x40>
   2c05c:	e0bffd17 	ldw	r2,-12(fp)
   2c060:	10800324 	muli	r2,r2,12
   2c064:	1007883a 	mov	r3,r2
   2c068:	008000f4 	movhi	r2,3
   2c06c:	10bd6504 	addi	r2,r2,-2668
   2c070:	1887883a 	add	r3,r3,r2
   2c074:	e0ffff15 	stw	r3,-4(fp)
   2c078:	00000106 	br	2c080 <isatty+0x44>
   2c07c:	e03fff15 	stw	zero,-4(fp)
   2c080:	e0bfff17 	ldw	r2,-4(fp)
   2c084:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   2c088:	e0bfed17 	ldw	r2,-76(fp)
   2c08c:	1005003a 	cmpeq	r2,r2,zero
   2c090:	10000f1e 	bne	r2,zero,2c0d0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2c094:	e0bfed17 	ldw	r2,-76(fp)
   2c098:	10800017 	ldw	r2,0(r2)
   2c09c:	10800817 	ldw	r2,32(r2)
   2c0a0:	1004c03a 	cmpne	r2,r2,zero
   2c0a4:	1000031e 	bne	r2,zero,2c0b4 <isatty+0x78>
    {
      return 1;
   2c0a8:	00800044 	movi	r2,1
   2c0ac:	e0bffe15 	stw	r2,-8(fp)
   2c0b0:	00000c06 	br	2c0e4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2c0b4:	e17fee04 	addi	r5,fp,-72
   2c0b8:	e13ffd17 	ldw	r4,-12(fp)
   2c0bc:	002bd000 	call	2bd00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2c0c0:	e0bfef17 	ldw	r2,-68(fp)
   2c0c4:	10880020 	cmpeqi	r2,r2,8192
   2c0c8:	e0bffe15 	stw	r2,-8(fp)
   2c0cc:	00000506 	br	2c0e4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2c0d0:	002c0fc0 	call	2c0fc <alt_get_errno>
   2c0d4:	1007883a 	mov	r3,r2
   2c0d8:	00801444 	movi	r2,81
   2c0dc:	18800015 	stw	r2,0(r3)
    return 0;
   2c0e0:	e03ffe15 	stw	zero,-8(fp)
   2c0e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2c0e8:	e037883a 	mov	sp,fp
   2c0ec:	dfc00117 	ldw	ra,4(sp)
   2c0f0:	df000017 	ldw	fp,0(sp)
   2c0f4:	dec00204 	addi	sp,sp,8
   2c0f8:	f800283a 	ret

0002c0fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c0fc:	defffd04 	addi	sp,sp,-12
   2c100:	dfc00215 	stw	ra,8(sp)
   2c104:	df000115 	stw	fp,4(sp)
   2c108:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2c10c:	008000f4 	movhi	r2,3
   2c110:	1081e804 	addi	r2,r2,1952
   2c114:	10800017 	ldw	r2,0(r2)
   2c118:	1005003a 	cmpeq	r2,r2,zero
   2c11c:	1000061e 	bne	r2,zero,2c138 <alt_get_errno+0x3c>
   2c120:	008000f4 	movhi	r2,3
   2c124:	1081e804 	addi	r2,r2,1952
   2c128:	10800017 	ldw	r2,0(r2)
   2c12c:	103ee83a 	callr	r2
   2c130:	e0bfff15 	stw	r2,-4(fp)
   2c134:	00000306 	br	2c144 <alt_get_errno+0x48>
   2c138:	008000f4 	movhi	r2,3
   2c13c:	10888804 	addi	r2,r2,8736
   2c140:	e0bfff15 	stw	r2,-4(fp)
   2c144:	e0bfff17 	ldw	r2,-4(fp)
}
   2c148:	e037883a 	mov	sp,fp
   2c14c:	dfc00117 	ldw	ra,4(sp)
   2c150:	df000017 	ldw	fp,0(sp)
   2c154:	dec00204 	addi	sp,sp,8
   2c158:	f800283a 	ret

0002c15c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2c15c:	defffe04 	addi	sp,sp,-8
   2c160:	dfc00115 	stw	ra,4(sp)
   2c164:	df000015 	stw	fp,0(sp)
   2c168:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2c16c:	010000f4 	movhi	r4,3
   2c170:	2101ed04 	addi	r4,r4,1972
   2c174:	014000f4 	movhi	r5,3
   2c178:	297b5604 	addi	r5,r5,-4776
   2c17c:	018000f4 	movhi	r6,3
   2c180:	3181ed04 	addi	r6,r6,1972
   2c184:	002c1dc0 	call	2c1dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2c188:	010000b4 	movhi	r4,2
   2c18c:	21000804 	addi	r4,r4,32
   2c190:	014000b4 	movhi	r5,2
   2c194:	29400804 	addi	r5,r5,32
   2c198:	018000b4 	movhi	r6,2
   2c19c:	31806d04 	addi	r6,r6,436
   2c1a0:	002c1dc0 	call	2c1dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2c1a4:	010000f4 	movhi	r4,3
   2c1a8:	2139b404 	addi	r4,r4,-6448
   2c1ac:	014000f4 	movhi	r5,3
   2c1b0:	2979b404 	addi	r5,r5,-6448
   2c1b4:	018000f4 	movhi	r6,3
   2c1b8:	31bb5604 	addi	r6,r6,-4776
   2c1bc:	002c1dc0 	call	2c1dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2c1c0:	002d6b40 	call	2d6b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2c1c4:	002d8ac0 	call	2d8ac <alt_icache_flush_all>
}
   2c1c8:	e037883a 	mov	sp,fp
   2c1cc:	dfc00117 	ldw	ra,4(sp)
   2c1d0:	df000017 	ldw	fp,0(sp)
   2c1d4:	dec00204 	addi	sp,sp,8
   2c1d8:	f800283a 	ret

0002c1dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2c1dc:	defffc04 	addi	sp,sp,-16
   2c1e0:	df000315 	stw	fp,12(sp)
   2c1e4:	df000304 	addi	fp,sp,12
   2c1e8:	e13ffd15 	stw	r4,-12(fp)
   2c1ec:	e17ffe15 	stw	r5,-8(fp)
   2c1f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2c1f4:	e0fffe17 	ldw	r3,-8(fp)
   2c1f8:	e0bffd17 	ldw	r2,-12(fp)
   2c1fc:	18800e26 	beq	r3,r2,2c238 <alt_load_section+0x5c>
  {
    while( to != end )
   2c200:	00000a06 	br	2c22c <alt_load_section+0x50>
    {
      *to++ = *from++;
   2c204:	e0bffd17 	ldw	r2,-12(fp)
   2c208:	10c00017 	ldw	r3,0(r2)
   2c20c:	e0bffe17 	ldw	r2,-8(fp)
   2c210:	10c00015 	stw	r3,0(r2)
   2c214:	e0bffe17 	ldw	r2,-8(fp)
   2c218:	10800104 	addi	r2,r2,4
   2c21c:	e0bffe15 	stw	r2,-8(fp)
   2c220:	e0bffd17 	ldw	r2,-12(fp)
   2c224:	10800104 	addi	r2,r2,4
   2c228:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2c22c:	e0fffe17 	ldw	r3,-8(fp)
   2c230:	e0bfff17 	ldw	r2,-4(fp)
   2c234:	18bff31e 	bne	r3,r2,2c204 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2c238:	e037883a 	mov	sp,fp
   2c23c:	df000017 	ldw	fp,0(sp)
   2c240:	dec00104 	addi	sp,sp,4
   2c244:	f800283a 	ret

0002c248 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2c248:	defff804 	addi	sp,sp,-32
   2c24c:	dfc00715 	stw	ra,28(sp)
   2c250:	df000615 	stw	fp,24(sp)
   2c254:	df000604 	addi	fp,sp,24
   2c258:	e13ffc15 	stw	r4,-16(fp)
   2c25c:	e17ffd15 	stw	r5,-12(fp)
   2c260:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2c264:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2c268:	e0bffc17 	ldw	r2,-16(fp)
   2c26c:	1004803a 	cmplt	r2,r2,zero
   2c270:	1000081e 	bne	r2,zero,2c294 <lseek+0x4c>
   2c274:	e0bffc17 	ldw	r2,-16(fp)
   2c278:	10800324 	muli	r2,r2,12
   2c27c:	1007883a 	mov	r3,r2
   2c280:	008000f4 	movhi	r2,3
   2c284:	10bd6504 	addi	r2,r2,-2668
   2c288:	1887883a 	add	r3,r3,r2
   2c28c:	e0ffff15 	stw	r3,-4(fp)
   2c290:	00000106 	br	2c298 <lseek+0x50>
   2c294:	e03fff15 	stw	zero,-4(fp)
   2c298:	e0bfff17 	ldw	r2,-4(fp)
   2c29c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   2c2a0:	e0bffb17 	ldw	r2,-20(fp)
   2c2a4:	1005003a 	cmpeq	r2,r2,zero
   2c2a8:	1000111e 	bne	r2,zero,2c2f0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2c2ac:	e0bffb17 	ldw	r2,-20(fp)
   2c2b0:	10800017 	ldw	r2,0(r2)
   2c2b4:	10800717 	ldw	r2,28(r2)
   2c2b8:	1005003a 	cmpeq	r2,r2,zero
   2c2bc:	1000091e 	bne	r2,zero,2c2e4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2c2c0:	e0bffb17 	ldw	r2,-20(fp)
   2c2c4:	10800017 	ldw	r2,0(r2)
   2c2c8:	10800717 	ldw	r2,28(r2)
   2c2cc:	e13ffb17 	ldw	r4,-20(fp)
   2c2d0:	e17ffd17 	ldw	r5,-12(fp)
   2c2d4:	e1bffe17 	ldw	r6,-8(fp)
   2c2d8:	103ee83a 	callr	r2
   2c2dc:	e0bffa15 	stw	r2,-24(fp)
   2c2e0:	00000506 	br	2c2f8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2c2e4:	00bfde84 	movi	r2,-134
   2c2e8:	e0bffa15 	stw	r2,-24(fp)
   2c2ec:	00000206 	br	2c2f8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2c2f0:	00bfebc4 	movi	r2,-81
   2c2f4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   2c2f8:	e0bffa17 	ldw	r2,-24(fp)
   2c2fc:	1004403a 	cmpge	r2,r2,zero
   2c300:	1000071e 	bne	r2,zero,2c320 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   2c304:	002c3380 	call	2c338 <alt_get_errno>
   2c308:	1007883a 	mov	r3,r2
   2c30c:	e0bffa17 	ldw	r2,-24(fp)
   2c310:	0085c83a 	sub	r2,zero,r2
   2c314:	18800015 	stw	r2,0(r3)
    rc = -1;
   2c318:	00bfffc4 	movi	r2,-1
   2c31c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   2c320:	e0bffa17 	ldw	r2,-24(fp)
}
   2c324:	e037883a 	mov	sp,fp
   2c328:	dfc00117 	ldw	ra,4(sp)
   2c32c:	df000017 	ldw	fp,0(sp)
   2c330:	dec00204 	addi	sp,sp,8
   2c334:	f800283a 	ret

0002c338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c338:	defffd04 	addi	sp,sp,-12
   2c33c:	dfc00215 	stw	ra,8(sp)
   2c340:	df000115 	stw	fp,4(sp)
   2c344:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2c348:	008000f4 	movhi	r2,3
   2c34c:	1081e804 	addi	r2,r2,1952
   2c350:	10800017 	ldw	r2,0(r2)
   2c354:	1005003a 	cmpeq	r2,r2,zero
   2c358:	1000061e 	bne	r2,zero,2c374 <alt_get_errno+0x3c>
   2c35c:	008000f4 	movhi	r2,3
   2c360:	1081e804 	addi	r2,r2,1952
   2c364:	10800017 	ldw	r2,0(r2)
   2c368:	103ee83a 	callr	r2
   2c36c:	e0bfff15 	stw	r2,-4(fp)
   2c370:	00000306 	br	2c380 <alt_get_errno+0x48>
   2c374:	008000f4 	movhi	r2,3
   2c378:	10888804 	addi	r2,r2,8736
   2c37c:	e0bfff15 	stw	r2,-4(fp)
   2c380:	e0bfff17 	ldw	r2,-4(fp)
}
   2c384:	e037883a 	mov	sp,fp
   2c388:	dfc00117 	ldw	ra,4(sp)
   2c38c:	df000017 	ldw	fp,0(sp)
   2c390:	dec00204 	addi	sp,sp,8
   2c394:	f800283a 	ret

0002c398 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2c398:	defffd04 	addi	sp,sp,-12
   2c39c:	dfc00215 	stw	ra,8(sp)
   2c3a0:	df000115 	stw	fp,4(sp)
   2c3a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2c3a8:	0009883a 	mov	r4,zero
   2c3ac:	002ca040 	call	2ca04 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2c3b0:	002ca380 	call	2ca38 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2c3b4:	010000f4 	movhi	r4,3
   2c3b8:	213b4c04 	addi	r4,r4,-4816
   2c3bc:	014000f4 	movhi	r5,3
   2c3c0:	297b4c04 	addi	r5,r5,-4816
   2c3c4:	018000f4 	movhi	r6,3
   2c3c8:	31bb4c04 	addi	r6,r6,-4816
   2c3cc:	002dc6c0 	call	2dc6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2c3d0:	002d7e40 	call	2d7e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2c3d4:	010000f4 	movhi	r4,3
   2c3d8:	21361204 	addi	r4,r4,-10168
   2c3dc:	002e2c40 	call	2e2c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2c3e0:	d126b317 	ldw	r4,-25908(gp)
   2c3e4:	d166b417 	ldw	r5,-25904(gp)
   2c3e8:	d1a6b517 	ldw	r6,-25900(gp)
   2c3ec:	0020a5c0 	call	20a5c <main>
   2c3f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2c3f4:	01000044 	movi	r4,1
   2c3f8:	002bb780 	call	2bb78 <close>
  exit (result);
   2c3fc:	e13fff17 	ldw	r4,-4(fp)
   2c400:	002e2d80 	call	2e2d8 <exit>

0002c404 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2c404:	defffe04 	addi	sp,sp,-8
   2c408:	df000115 	stw	fp,4(sp)
   2c40c:	df000104 	addi	fp,sp,4
   2c410:	e13fff15 	stw	r4,-4(fp)
}
   2c414:	e037883a 	mov	sp,fp
   2c418:	df000017 	ldw	fp,0(sp)
   2c41c:	dec00104 	addi	sp,sp,4
   2c420:	f800283a 	ret

0002c424 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2c424:	defffe04 	addi	sp,sp,-8
   2c428:	df000115 	stw	fp,4(sp)
   2c42c:	df000104 	addi	fp,sp,4
   2c430:	e13fff15 	stw	r4,-4(fp)
}
   2c434:	e037883a 	mov	sp,fp
   2c438:	df000017 	ldw	fp,0(sp)
   2c43c:	dec00104 	addi	sp,sp,4
   2c440:	f800283a 	ret

0002c444 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2c444:	defff704 	addi	sp,sp,-36
   2c448:	dfc00815 	stw	ra,32(sp)
   2c44c:	df000715 	stw	fp,28(sp)
   2c450:	df000704 	addi	fp,sp,28
   2c454:	e13ffb15 	stw	r4,-20(fp)
   2c458:	e17ffc15 	stw	r5,-16(fp)
   2c45c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2c460:	e0bffb17 	ldw	r2,-20(fp)
   2c464:	1004803a 	cmplt	r2,r2,zero
   2c468:	1000081e 	bne	r2,zero,2c48c <read+0x48>
   2c46c:	e0bffb17 	ldw	r2,-20(fp)
   2c470:	10800324 	muli	r2,r2,12
   2c474:	1007883a 	mov	r3,r2
   2c478:	008000f4 	movhi	r2,3
   2c47c:	10bd6504 	addi	r2,r2,-2668
   2c480:	1887883a 	add	r3,r3,r2
   2c484:	e0ffff15 	stw	r3,-4(fp)
   2c488:	00000106 	br	2c490 <read+0x4c>
   2c48c:	e03fff15 	stw	zero,-4(fp)
   2c490:	e0bfff17 	ldw	r2,-4(fp)
   2c494:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2c498:	e0bffa17 	ldw	r2,-24(fp)
   2c49c:	1005003a 	cmpeq	r2,r2,zero
   2c4a0:	1000241e 	bne	r2,zero,2c534 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2c4a4:	e0bffa17 	ldw	r2,-24(fp)
   2c4a8:	10800217 	ldw	r2,8(r2)
   2c4ac:	108000cc 	andi	r2,r2,3
   2c4b0:	10800060 	cmpeqi	r2,r2,1
   2c4b4:	10001a1e 	bne	r2,zero,2c520 <read+0xdc>
   2c4b8:	e0bffa17 	ldw	r2,-24(fp)
   2c4bc:	10800017 	ldw	r2,0(r2)
   2c4c0:	10800517 	ldw	r2,20(r2)
   2c4c4:	1005003a 	cmpeq	r2,r2,zero
   2c4c8:	1000151e 	bne	r2,zero,2c520 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2c4cc:	e0bffa17 	ldw	r2,-24(fp)
   2c4d0:	10800017 	ldw	r2,0(r2)
   2c4d4:	10800517 	ldw	r2,20(r2)
   2c4d8:	e17ffc17 	ldw	r5,-16(fp)
   2c4dc:	e1bffd17 	ldw	r6,-12(fp)
   2c4e0:	e13ffa17 	ldw	r4,-24(fp)
   2c4e4:	103ee83a 	callr	r2
   2c4e8:	e0bff915 	stw	r2,-28(fp)
   2c4ec:	e0bff917 	ldw	r2,-28(fp)
   2c4f0:	1004403a 	cmpge	r2,r2,zero
   2c4f4:	1000071e 	bne	r2,zero,2c514 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   2c4f8:	002c5640 	call	2c564 <alt_get_errno>
   2c4fc:	e0fff917 	ldw	r3,-28(fp)
   2c500:	00c7c83a 	sub	r3,zero,r3
   2c504:	10c00015 	stw	r3,0(r2)
          return -1;
   2c508:	00bfffc4 	movi	r2,-1
   2c50c:	e0bffe15 	stw	r2,-8(fp)
   2c510:	00000e06 	br	2c54c <read+0x108>
        }
        return rval;
   2c514:	e0bff917 	ldw	r2,-28(fp)
   2c518:	e0bffe15 	stw	r2,-8(fp)
   2c51c:	00000b06 	br	2c54c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2c520:	002c5640 	call	2c564 <alt_get_errno>
   2c524:	1007883a 	mov	r3,r2
   2c528:	00800344 	movi	r2,13
   2c52c:	18800015 	stw	r2,0(r3)
   2c530:	00000406 	br	2c544 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2c534:	002c5640 	call	2c564 <alt_get_errno>
   2c538:	1007883a 	mov	r3,r2
   2c53c:	00801444 	movi	r2,81
   2c540:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2c544:	00bfffc4 	movi	r2,-1
   2c548:	e0bffe15 	stw	r2,-8(fp)
   2c54c:	e0bffe17 	ldw	r2,-8(fp)
}
   2c550:	e037883a 	mov	sp,fp
   2c554:	dfc00117 	ldw	ra,4(sp)
   2c558:	df000017 	ldw	fp,0(sp)
   2c55c:	dec00204 	addi	sp,sp,8
   2c560:	f800283a 	ret

0002c564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c564:	defffd04 	addi	sp,sp,-12
   2c568:	dfc00215 	stw	ra,8(sp)
   2c56c:	df000115 	stw	fp,4(sp)
   2c570:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2c574:	008000f4 	movhi	r2,3
   2c578:	1081e804 	addi	r2,r2,1952
   2c57c:	10800017 	ldw	r2,0(r2)
   2c580:	1005003a 	cmpeq	r2,r2,zero
   2c584:	1000061e 	bne	r2,zero,2c5a0 <alt_get_errno+0x3c>
   2c588:	008000f4 	movhi	r2,3
   2c58c:	1081e804 	addi	r2,r2,1952
   2c590:	10800017 	ldw	r2,0(r2)
   2c594:	103ee83a 	callr	r2
   2c598:	e0bfff15 	stw	r2,-4(fp)
   2c59c:	00000306 	br	2c5ac <alt_get_errno+0x48>
   2c5a0:	008000f4 	movhi	r2,3
   2c5a4:	10888804 	addi	r2,r2,8736
   2c5a8:	e0bfff15 	stw	r2,-4(fp)
   2c5ac:	e0bfff17 	ldw	r2,-4(fp)
}
   2c5b0:	e037883a 	mov	sp,fp
   2c5b4:	dfc00117 	ldw	ra,4(sp)
   2c5b8:	df000017 	ldw	fp,0(sp)
   2c5bc:	dec00204 	addi	sp,sp,8
   2c5c0:	f800283a 	ret

0002c5c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2c5c4:	defffe04 	addi	sp,sp,-8
   2c5c8:	df000115 	stw	fp,4(sp)
   2c5cc:	df000104 	addi	fp,sp,4
   2c5d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2c5d4:	e0bfff17 	ldw	r2,-4(fp)
   2c5d8:	108000d0 	cmplti	r2,r2,3
   2c5dc:	10000d1e 	bne	r2,zero,2c614 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2c5e0:	e0bfff17 	ldw	r2,-4(fp)
   2c5e4:	00c000f4 	movhi	r3,3
   2c5e8:	18fd6504 	addi	r3,r3,-2668
   2c5ec:	10800324 	muli	r2,r2,12
   2c5f0:	10c5883a 	add	r2,r2,r3
   2c5f4:	10800204 	addi	r2,r2,8
   2c5f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2c5fc:	e0bfff17 	ldw	r2,-4(fp)
   2c600:	00c000f4 	movhi	r3,3
   2c604:	18fd6504 	addi	r3,r3,-2668
   2c608:	10800324 	muli	r2,r2,12
   2c60c:	10c5883a 	add	r2,r2,r3
   2c610:	10000015 	stw	zero,0(r2)
  }
}
   2c614:	e037883a 	mov	sp,fp
   2c618:	df000017 	ldw	fp,0(sp)
   2c61c:	dec00104 	addi	sp,sp,4
   2c620:	f800283a 	ret

0002c624 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2c624:	defff804 	addi	sp,sp,-32
   2c628:	df000715 	stw	fp,28(sp)
   2c62c:	df000704 	addi	fp,sp,28
   2c630:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c634:	0005303a 	rdctl	r2,status
   2c638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c63c:	e0fffb17 	ldw	r3,-20(fp)
   2c640:	00bfff84 	movi	r2,-2
   2c644:	1884703a 	and	r2,r3,r2
   2c648:	1001703a 	wrctl	status,r2
  
  return context;
   2c64c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2c650:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2c654:	d0a00c17 	ldw	r2,-32720(gp)
   2c658:	10c000c4 	addi	r3,r2,3
   2c65c:	00bfff04 	movi	r2,-4
   2c660:	1884703a 	and	r2,r3,r2
   2c664:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2c668:	d0e00c17 	ldw	r3,-32720(gp)
   2c66c:	e0bffe17 	ldw	r2,-8(fp)
   2c670:	1887883a 	add	r3,r3,r2
   2c674:	00800134 	movhi	r2,4
   2c678:	10800004 	addi	r2,r2,0
   2c67c:	10c0072e 	bgeu	r2,r3,2c69c <sbrk+0x78>
   2c680:	e0bffd17 	ldw	r2,-12(fp)
   2c684:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c688:	e0bffa17 	ldw	r2,-24(fp)
   2c68c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2c690:	00bfffc4 	movi	r2,-1
   2c694:	e0bfff15 	stw	r2,-4(fp)
   2c698:	00000c06 	br	2c6cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   2c69c:	d0a00c17 	ldw	r2,-32720(gp)
   2c6a0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   2c6a4:	d0e00c17 	ldw	r3,-32720(gp)
   2c6a8:	e0bffe17 	ldw	r2,-8(fp)
   2c6ac:	1885883a 	add	r2,r3,r2
   2c6b0:	d0a00c15 	stw	r2,-32720(gp)
   2c6b4:	e0bffd17 	ldw	r2,-12(fp)
   2c6b8:	e0bff915 	stw	r2,-28(fp)
   2c6bc:	e0bff917 	ldw	r2,-28(fp)
   2c6c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2c6c4:	e0bffc17 	ldw	r2,-16(fp)
   2c6c8:	e0bfff15 	stw	r2,-4(fp)
   2c6cc:	e0bfff17 	ldw	r2,-4(fp)
} 
   2c6d0:	e037883a 	mov	sp,fp
   2c6d4:	df000017 	ldw	fp,0(sp)
   2c6d8:	dec00104 	addi	sp,sp,4
   2c6dc:	f800283a 	ret

0002c6e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2c6e0:	defffa04 	addi	sp,sp,-24
   2c6e4:	df000515 	stw	fp,20(sp)
   2c6e8:	df000504 	addi	fp,sp,20
   2c6ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c6f0:	0005303a 	rdctl	r2,status
   2c6f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c6f8:	e0fffd17 	ldw	r3,-12(fp)
   2c6fc:	00bfff84 	movi	r2,-2
   2c700:	1884703a 	and	r2,r3,r2
   2c704:	1001703a 	wrctl	status,r2
  
  return context;
   2c708:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2c70c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   2c710:	e0bfff17 	ldw	r2,-4(fp)
   2c714:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2c718:	e0bffc17 	ldw	r2,-16(fp)
   2c71c:	10c00017 	ldw	r3,0(r2)
   2c720:	e0bffc17 	ldw	r2,-16(fp)
   2c724:	10800117 	ldw	r2,4(r2)
   2c728:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   2c72c:	e0bffc17 	ldw	r2,-16(fp)
   2c730:	10c00117 	ldw	r3,4(r2)
   2c734:	e0bffc17 	ldw	r2,-16(fp)
   2c738:	10800017 	ldw	r2,0(r2)
   2c73c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2c740:	e0fffc17 	ldw	r3,-16(fp)
   2c744:	e0bffc17 	ldw	r2,-16(fp)
   2c748:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   2c74c:	e0fffc17 	ldw	r3,-16(fp)
   2c750:	e0bffc17 	ldw	r2,-16(fp)
   2c754:	18800015 	stw	r2,0(r3)
   2c758:	e0bffe17 	ldw	r2,-8(fp)
   2c75c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c760:	e0bffb17 	ldw	r2,-20(fp)
   2c764:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2c768:	e037883a 	mov	sp,fp
   2c76c:	df000017 	ldw	fp,0(sp)
   2c770:	dec00104 	addi	sp,sp,4
   2c774:	f800283a 	ret

0002c778 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2c778:	defffb04 	addi	sp,sp,-20
   2c77c:	dfc00415 	stw	ra,16(sp)
   2c780:	df000315 	stw	fp,12(sp)
   2c784:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2c788:	d0a00d17 	ldw	r2,-32716(gp)
   2c78c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2c790:	d0a6b717 	ldw	r2,-25892(gp)
   2c794:	10800044 	addi	r2,r2,1
   2c798:	d0a6b715 	stw	r2,-25892(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c79c:	00003106 	br	2c864 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   2c7a0:	e0bffe17 	ldw	r2,-8(fp)
   2c7a4:	10800017 	ldw	r2,0(r2)
   2c7a8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2c7ac:	e0bffe17 	ldw	r2,-8(fp)
   2c7b0:	10800403 	ldbu	r2,16(r2)
   2c7b4:	10803fcc 	andi	r2,r2,255
   2c7b8:	1005003a 	cmpeq	r2,r2,zero
   2c7bc:	1000051e 	bne	r2,zero,2c7d4 <alt_tick+0x5c>
   2c7c0:	d0a6b717 	ldw	r2,-25892(gp)
   2c7c4:	1004c03a 	cmpne	r2,r2,zero
   2c7c8:	1000021e 	bne	r2,zero,2c7d4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   2c7cc:	e0bffe17 	ldw	r2,-8(fp)
   2c7d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2c7d4:	e0bffe17 	ldw	r2,-8(fp)
   2c7d8:	10c00217 	ldw	r3,8(r2)
   2c7dc:	d0a6b717 	ldw	r2,-25892(gp)
   2c7e0:	10c01e36 	bltu	r2,r3,2c85c <alt_tick+0xe4>
   2c7e4:	e0bffe17 	ldw	r2,-8(fp)
   2c7e8:	10800403 	ldbu	r2,16(r2)
   2c7ec:	10803fcc 	andi	r2,r2,255
   2c7f0:	1004c03a 	cmpne	r2,r2,zero
   2c7f4:	1000191e 	bne	r2,zero,2c85c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   2c7f8:	e0bffe17 	ldw	r2,-8(fp)
   2c7fc:	10c00317 	ldw	r3,12(r2)
   2c800:	e0bffe17 	ldw	r2,-8(fp)
   2c804:	11000517 	ldw	r4,20(r2)
   2c808:	183ee83a 	callr	r3
   2c80c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2c810:	e0bffd17 	ldw	r2,-12(fp)
   2c814:	1004c03a 	cmpne	r2,r2,zero
   2c818:	1000031e 	bne	r2,zero,2c828 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   2c81c:	e13ffe17 	ldw	r4,-8(fp)
   2c820:	002c6e00 	call	2c6e0 <alt_alarm_stop>
   2c824:	00000d06 	br	2c85c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   2c828:	e0bffe17 	ldw	r2,-8(fp)
   2c82c:	10c00217 	ldw	r3,8(r2)
   2c830:	e0bffd17 	ldw	r2,-12(fp)
   2c834:	1887883a 	add	r3,r3,r2
   2c838:	e0bffe17 	ldw	r2,-8(fp)
   2c83c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2c840:	e0bffe17 	ldw	r2,-8(fp)
   2c844:	10c00217 	ldw	r3,8(r2)
   2c848:	d0a6b717 	ldw	r2,-25892(gp)
   2c84c:	1880032e 	bgeu	r3,r2,2c85c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   2c850:	e0fffe17 	ldw	r3,-8(fp)
   2c854:	00800044 	movi	r2,1
   2c858:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   2c85c:	e0bfff17 	ldw	r2,-4(fp)
   2c860:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c864:	d0e00d04 	addi	r3,gp,-32716
   2c868:	e0bffe17 	ldw	r2,-8(fp)
   2c86c:	10ffcc1e 	bne	r2,r3,2c7a0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   2c870:	e037883a 	mov	sp,fp
   2c874:	dfc00117 	ldw	ra,4(sp)
   2c878:	df000017 	ldw	fp,0(sp)
   2c87c:	dec00204 	addi	sp,sp,8
   2c880:	f800283a 	ret

0002c884 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2c884:	defff704 	addi	sp,sp,-36
   2c888:	dfc00815 	stw	ra,32(sp)
   2c88c:	df000715 	stw	fp,28(sp)
   2c890:	df000704 	addi	fp,sp,28
   2c894:	e13ffb15 	stw	r4,-20(fp)
   2c898:	e17ffc15 	stw	r5,-16(fp)
   2c89c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2c8a0:	e0bffb17 	ldw	r2,-20(fp)
   2c8a4:	1004803a 	cmplt	r2,r2,zero
   2c8a8:	1000081e 	bne	r2,zero,2c8cc <write+0x48>
   2c8ac:	e0bffb17 	ldw	r2,-20(fp)
   2c8b0:	10800324 	muli	r2,r2,12
   2c8b4:	1007883a 	mov	r3,r2
   2c8b8:	008000f4 	movhi	r2,3
   2c8bc:	10bd6504 	addi	r2,r2,-2668
   2c8c0:	1887883a 	add	r3,r3,r2
   2c8c4:	e0ffff15 	stw	r3,-4(fp)
   2c8c8:	00000106 	br	2c8d0 <write+0x4c>
   2c8cc:	e03fff15 	stw	zero,-4(fp)
   2c8d0:	e0bfff17 	ldw	r2,-4(fp)
   2c8d4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2c8d8:	e0bffa17 	ldw	r2,-24(fp)
   2c8dc:	1005003a 	cmpeq	r2,r2,zero
   2c8e0:	1000241e 	bne	r2,zero,2c974 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2c8e4:	e0bffa17 	ldw	r2,-24(fp)
   2c8e8:	10800217 	ldw	r2,8(r2)
   2c8ec:	108000cc 	andi	r2,r2,3
   2c8f0:	1005003a 	cmpeq	r2,r2,zero
   2c8f4:	10001a1e 	bne	r2,zero,2c960 <write+0xdc>
   2c8f8:	e0bffa17 	ldw	r2,-24(fp)
   2c8fc:	10800017 	ldw	r2,0(r2)
   2c900:	10800617 	ldw	r2,24(r2)
   2c904:	1005003a 	cmpeq	r2,r2,zero
   2c908:	1000151e 	bne	r2,zero,2c960 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2c90c:	e0bffa17 	ldw	r2,-24(fp)
   2c910:	10800017 	ldw	r2,0(r2)
   2c914:	10800617 	ldw	r2,24(r2)
   2c918:	e17ffc17 	ldw	r5,-16(fp)
   2c91c:	e1bffd17 	ldw	r6,-12(fp)
   2c920:	e13ffa17 	ldw	r4,-24(fp)
   2c924:	103ee83a 	callr	r2
   2c928:	e0bff915 	stw	r2,-28(fp)
   2c92c:	e0bff917 	ldw	r2,-28(fp)
   2c930:	1004403a 	cmpge	r2,r2,zero
   2c934:	1000071e 	bne	r2,zero,2c954 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   2c938:	002c9a40 	call	2c9a4 <alt_get_errno>
   2c93c:	e0fff917 	ldw	r3,-28(fp)
   2c940:	00c7c83a 	sub	r3,zero,r3
   2c944:	10c00015 	stw	r3,0(r2)
        return -1;
   2c948:	00bfffc4 	movi	r2,-1
   2c94c:	e0bffe15 	stw	r2,-8(fp)
   2c950:	00000e06 	br	2c98c <write+0x108>
      }
      return rval;
   2c954:	e0bff917 	ldw	r2,-28(fp)
   2c958:	e0bffe15 	stw	r2,-8(fp)
   2c95c:	00000b06 	br	2c98c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2c960:	002c9a40 	call	2c9a4 <alt_get_errno>
   2c964:	1007883a 	mov	r3,r2
   2c968:	00800344 	movi	r2,13
   2c96c:	18800015 	stw	r2,0(r3)
   2c970:	00000406 	br	2c984 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2c974:	002c9a40 	call	2c9a4 <alt_get_errno>
   2c978:	1007883a 	mov	r3,r2
   2c97c:	00801444 	movi	r2,81
   2c980:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2c984:	00bfffc4 	movi	r2,-1
   2c988:	e0bffe15 	stw	r2,-8(fp)
   2c98c:	e0bffe17 	ldw	r2,-8(fp)
}
   2c990:	e037883a 	mov	sp,fp
   2c994:	dfc00117 	ldw	ra,4(sp)
   2c998:	df000017 	ldw	fp,0(sp)
   2c99c:	dec00204 	addi	sp,sp,8
   2c9a0:	f800283a 	ret

0002c9a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c9a4:	defffd04 	addi	sp,sp,-12
   2c9a8:	dfc00215 	stw	ra,8(sp)
   2c9ac:	df000115 	stw	fp,4(sp)
   2c9b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2c9b4:	008000f4 	movhi	r2,3
   2c9b8:	1081e804 	addi	r2,r2,1952
   2c9bc:	10800017 	ldw	r2,0(r2)
   2c9c0:	1005003a 	cmpeq	r2,r2,zero
   2c9c4:	1000061e 	bne	r2,zero,2c9e0 <alt_get_errno+0x3c>
   2c9c8:	008000f4 	movhi	r2,3
   2c9cc:	1081e804 	addi	r2,r2,1952
   2c9d0:	10800017 	ldw	r2,0(r2)
   2c9d4:	103ee83a 	callr	r2
   2c9d8:	e0bfff15 	stw	r2,-4(fp)
   2c9dc:	00000306 	br	2c9ec <alt_get_errno+0x48>
   2c9e0:	008000f4 	movhi	r2,3
   2c9e4:	10888804 	addi	r2,r2,8736
   2c9e8:	e0bfff15 	stw	r2,-4(fp)
   2c9ec:	e0bfff17 	ldw	r2,-4(fp)
}
   2c9f0:	e037883a 	mov	sp,fp
   2c9f4:	dfc00117 	ldw	ra,4(sp)
   2c9f8:	df000017 	ldw	fp,0(sp)
   2c9fc:	dec00204 	addi	sp,sp,8
   2ca00:	f800283a 	ret

0002ca04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2ca04:	defffd04 	addi	sp,sp,-12
   2ca08:	dfc00215 	stw	ra,8(sp)
   2ca0c:	df000115 	stw	fp,4(sp)
   2ca10:	df000104 	addi	fp,sp,4
   2ca14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, NIOS);
   2ca18:	002dfa80 	call	2dfa8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2ca1c:	00800044 	movi	r2,1
   2ca20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2ca24:	e037883a 	mov	sp,fp
   2ca28:	dfc00117 	ldw	ra,4(sp)
   2ca2c:	df000017 	ldw	fp,0(sp)
   2ca30:	dec00204 	addi	sp,sp,8
   2ca34:	f800283a 	ret

0002ca38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2ca38:	defffe04 	addi	sp,sp,-8
   2ca3c:	dfc00115 	stw	ra,4(sp)
   2ca40:	df000015 	stw	fp,0(sp)
   2ca44:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2ca48:	010000f4 	movhi	r4,3
   2ca4c:	213dcf04 	addi	r4,r4,-2244
   2ca50:	000b883a 	mov	r5,zero
   2ca54:	01800404 	movi	r6,16
   2ca58:	002cbfc0 	call	2cbfc <altera_avalon_jtag_uart_init>
   2ca5c:	010000f4 	movhi	r4,3
   2ca60:	213dc504 	addi	r4,r4,-2284
   2ca64:	002ca7c0 	call	2ca7c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   2ca68:	e037883a 	mov	sp,fp
   2ca6c:	dfc00117 	ldw	ra,4(sp)
   2ca70:	df000017 	ldw	fp,0(sp)
   2ca74:	dec00204 	addi	sp,sp,8
   2ca78:	f800283a 	ret

0002ca7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2ca7c:	defffd04 	addi	sp,sp,-12
   2ca80:	dfc00215 	stw	ra,8(sp)
   2ca84:	df000115 	stw	fp,4(sp)
   2ca88:	df000104 	addi	fp,sp,4
   2ca8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2ca90:	e13fff17 	ldw	r4,-4(fp)
   2ca94:	014000f4 	movhi	r5,3
   2ca98:	2941e504 	addi	r5,r5,1940
   2ca9c:	002d6d00 	call	2d6d0 <alt_dev_llist_insert>
}
   2caa0:	e037883a 	mov	sp,fp
   2caa4:	dfc00117 	ldw	ra,4(sp)
   2caa8:	df000017 	ldw	fp,0(sp)
   2caac:	dec00204 	addi	sp,sp,8
   2cab0:	f800283a 	ret

0002cab4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2cab4:	defffa04 	addi	sp,sp,-24
   2cab8:	dfc00515 	stw	ra,20(sp)
   2cabc:	df000415 	stw	fp,16(sp)
   2cac0:	df000404 	addi	fp,sp,16
   2cac4:	e13ffd15 	stw	r4,-12(fp)
   2cac8:	e17ffe15 	stw	r5,-8(fp)
   2cacc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2cad0:	e0bffd17 	ldw	r2,-12(fp)
   2cad4:	10800017 	ldw	r2,0(r2)
   2cad8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2cadc:	e0bffc17 	ldw	r2,-16(fp)
   2cae0:	11000a04 	addi	r4,r2,40
   2cae4:	e0bffd17 	ldw	r2,-12(fp)
   2cae8:	11c00217 	ldw	r7,8(r2)
   2caec:	e17ffe17 	ldw	r5,-8(fp)
   2caf0:	e1bfff17 	ldw	r6,-4(fp)
   2caf4:	002d0fc0 	call	2d0fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2caf8:	e037883a 	mov	sp,fp
   2cafc:	dfc00117 	ldw	ra,4(sp)
   2cb00:	df000017 	ldw	fp,0(sp)
   2cb04:	dec00204 	addi	sp,sp,8
   2cb08:	f800283a 	ret

0002cb0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2cb0c:	defffa04 	addi	sp,sp,-24
   2cb10:	dfc00515 	stw	ra,20(sp)
   2cb14:	df000415 	stw	fp,16(sp)
   2cb18:	df000404 	addi	fp,sp,16
   2cb1c:	e13ffd15 	stw	r4,-12(fp)
   2cb20:	e17ffe15 	stw	r5,-8(fp)
   2cb24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2cb28:	e0bffd17 	ldw	r2,-12(fp)
   2cb2c:	10800017 	ldw	r2,0(r2)
   2cb30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2cb34:	e0bffc17 	ldw	r2,-16(fp)
   2cb38:	11000a04 	addi	r4,r2,40
   2cb3c:	e0bffd17 	ldw	r2,-12(fp)
   2cb40:	11c00217 	ldw	r7,8(r2)
   2cb44:	e17ffe17 	ldw	r5,-8(fp)
   2cb48:	e1bfff17 	ldw	r6,-4(fp)
   2cb4c:	002d3200 	call	2d320 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2cb50:	e037883a 	mov	sp,fp
   2cb54:	dfc00117 	ldw	ra,4(sp)
   2cb58:	df000017 	ldw	fp,0(sp)
   2cb5c:	dec00204 	addi	sp,sp,8
   2cb60:	f800283a 	ret

0002cb64 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2cb64:	defffc04 	addi	sp,sp,-16
   2cb68:	dfc00315 	stw	ra,12(sp)
   2cb6c:	df000215 	stw	fp,8(sp)
   2cb70:	df000204 	addi	fp,sp,8
   2cb74:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2cb78:	e0bfff17 	ldw	r2,-4(fp)
   2cb7c:	10800017 	ldw	r2,0(r2)
   2cb80:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2cb84:	e0bffe17 	ldw	r2,-8(fp)
   2cb88:	11000a04 	addi	r4,r2,40
   2cb8c:	e0bfff17 	ldw	r2,-4(fp)
   2cb90:	11400217 	ldw	r5,8(r2)
   2cb94:	002cf940 	call	2cf94 <altera_avalon_jtag_uart_close>
}
   2cb98:	e037883a 	mov	sp,fp
   2cb9c:	dfc00117 	ldw	ra,4(sp)
   2cba0:	df000017 	ldw	fp,0(sp)
   2cba4:	dec00204 	addi	sp,sp,8
   2cba8:	f800283a 	ret

0002cbac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2cbac:	defffa04 	addi	sp,sp,-24
   2cbb0:	dfc00515 	stw	ra,20(sp)
   2cbb4:	df000415 	stw	fp,16(sp)
   2cbb8:	df000404 	addi	fp,sp,16
   2cbbc:	e13ffd15 	stw	r4,-12(fp)
   2cbc0:	e17ffe15 	stw	r5,-8(fp)
   2cbc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2cbc8:	e0bffd17 	ldw	r2,-12(fp)
   2cbcc:	10800017 	ldw	r2,0(r2)
   2cbd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2cbd4:	e0bffc17 	ldw	r2,-16(fp)
   2cbd8:	11000a04 	addi	r4,r2,40
   2cbdc:	e17ffe17 	ldw	r5,-8(fp)
   2cbe0:	e1bfff17 	ldw	r6,-4(fp)
   2cbe4:	002d0080 	call	2d008 <altera_avalon_jtag_uart_ioctl>
}
   2cbe8:	e037883a 	mov	sp,fp
   2cbec:	dfc00117 	ldw	ra,4(sp)
   2cbf0:	df000017 	ldw	fp,0(sp)
   2cbf4:	dec00204 	addi	sp,sp,8
   2cbf8:	f800283a 	ret

0002cbfc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2cbfc:	defffa04 	addi	sp,sp,-24
   2cc00:	dfc00515 	stw	ra,20(sp)
   2cc04:	df000415 	stw	fp,16(sp)
   2cc08:	df000404 	addi	fp,sp,16
   2cc0c:	e13ffd15 	stw	r4,-12(fp)
   2cc10:	e17ffe15 	stw	r5,-8(fp)
   2cc14:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2cc18:	e0fffd17 	ldw	r3,-12(fp)
   2cc1c:	00800044 	movi	r2,1
   2cc20:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2cc24:	e0bffd17 	ldw	r2,-12(fp)
   2cc28:	10800017 	ldw	r2,0(r2)
   2cc2c:	11000104 	addi	r4,r2,4
   2cc30:	e0bffd17 	ldw	r2,-12(fp)
   2cc34:	10800817 	ldw	r2,32(r2)
   2cc38:	1007883a 	mov	r3,r2
   2cc3c:	2005883a 	mov	r2,r4
   2cc40:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2cc44:	e13ffe17 	ldw	r4,-8(fp)
   2cc48:	e17fff17 	ldw	r5,-4(fp)
   2cc4c:	d8000015 	stw	zero,0(sp)
   2cc50:	018000f4 	movhi	r6,3
   2cc54:	31b32f04 	addi	r6,r6,-13124
   2cc58:	e1fffd17 	ldw	r7,-12(fp)
   2cc5c:	002d8dc0 	call	2d8dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2cc60:	e0bffd17 	ldw	r2,-12(fp)
   2cc64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2cc68:	e0bffd17 	ldw	r2,-12(fp)
   2cc6c:	11000204 	addi	r4,r2,8
   2cc70:	008000f4 	movhi	r2,3
   2cc74:	10889304 	addi	r2,r2,8780
   2cc78:	10800017 	ldw	r2,0(r2)
   2cc7c:	100b883a 	mov	r5,r2
   2cc80:	018000f4 	movhi	r6,3
   2cc84:	31b3b904 	addi	r6,r6,-12572
   2cc88:	e1fffd17 	ldw	r7,-12(fp)
   2cc8c:	002d5600 	call	2d560 <alt_alarm_start>
   2cc90:	1004403a 	cmpge	r2,r2,zero
   2cc94:	1000041e 	bne	r2,zero,2cca8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2cc98:	e0fffd17 	ldw	r3,-12(fp)
   2cc9c:	00a00034 	movhi	r2,32768
   2cca0:	10bfffc4 	addi	r2,r2,-1
   2cca4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2cca8:	e037883a 	mov	sp,fp
   2ccac:	dfc00117 	ldw	ra,4(sp)
   2ccb0:	df000017 	ldw	fp,0(sp)
   2ccb4:	dec00204 	addi	sp,sp,8
   2ccb8:	f800283a 	ret

0002ccbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2ccbc:	defff804 	addi	sp,sp,-32
   2ccc0:	df000715 	stw	fp,28(sp)
   2ccc4:	df000704 	addi	fp,sp,28
   2ccc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2cccc:	e0bfff17 	ldw	r2,-4(fp)
   2ccd0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   2ccd4:	e0bffe17 	ldw	r2,-8(fp)
   2ccd8:	10800017 	ldw	r2,0(r2)
   2ccdc:	e0bffd15 	stw	r2,-12(fp)
   2cce0:	00000006 	br	2cce4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2cce4:	e0bffd17 	ldw	r2,-12(fp)
   2cce8:	10800104 	addi	r2,r2,4
   2ccec:	10800037 	ldwio	r2,0(r2)
   2ccf0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2ccf4:	e0bffc17 	ldw	r2,-16(fp)
   2ccf8:	1080c00c 	andi	r2,r2,768
   2ccfc:	1005003a 	cmpeq	r2,r2,zero
   2cd00:	1000741e 	bne	r2,zero,2ced4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2cd04:	e0bffc17 	ldw	r2,-16(fp)
   2cd08:	1080400c 	andi	r2,r2,256
   2cd0c:	1005003a 	cmpeq	r2,r2,zero
   2cd10:	1000351e 	bne	r2,zero,2cde8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2cd14:	00800074 	movhi	r2,1
   2cd18:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2cd1c:	e0bffe17 	ldw	r2,-8(fp)
   2cd20:	10800a17 	ldw	r2,40(r2)
   2cd24:	10800044 	addi	r2,r2,1
   2cd28:	1081ffcc 	andi	r2,r2,2047
   2cd2c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   2cd30:	e0bffe17 	ldw	r2,-8(fp)
   2cd34:	10c00b17 	ldw	r3,44(r2)
   2cd38:	e0bffa17 	ldw	r2,-24(fp)
   2cd3c:	18801626 	beq	r3,r2,2cd98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2cd40:	e0bffd17 	ldw	r2,-12(fp)
   2cd44:	10800037 	ldwio	r2,0(r2)
   2cd48:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2cd4c:	e0bffb17 	ldw	r2,-20(fp)
   2cd50:	10a0000c 	andi	r2,r2,32768
   2cd54:	1005003a 	cmpeq	r2,r2,zero
   2cd58:	10000f1e 	bne	r2,zero,2cd98 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2cd5c:	e0bffe17 	ldw	r2,-8(fp)
   2cd60:	10c00a17 	ldw	r3,40(r2)
   2cd64:	e0bffb17 	ldw	r2,-20(fp)
   2cd68:	1009883a 	mov	r4,r2
   2cd6c:	e0bffe17 	ldw	r2,-8(fp)
   2cd70:	1885883a 	add	r2,r3,r2
   2cd74:	10800e04 	addi	r2,r2,56
   2cd78:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2cd7c:	e0bffe17 	ldw	r2,-8(fp)
   2cd80:	10800a17 	ldw	r2,40(r2)
   2cd84:	10800044 	addi	r2,r2,1
   2cd88:	10c1ffcc 	andi	r3,r2,2047
   2cd8c:	e0bffe17 	ldw	r2,-8(fp)
   2cd90:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2cd94:	003fe106 	br	2cd1c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2cd98:	e0bffb17 	ldw	r2,-20(fp)
   2cd9c:	10bfffec 	andhi	r2,r2,65535
   2cda0:	1005003a 	cmpeq	r2,r2,zero
   2cda4:	1000101e 	bne	r2,zero,2cde8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2cda8:	e0bffe17 	ldw	r2,-8(fp)
   2cdac:	10c00817 	ldw	r3,32(r2)
   2cdb0:	00bfff84 	movi	r2,-2
   2cdb4:	1886703a 	and	r3,r3,r2
   2cdb8:	e0bffe17 	ldw	r2,-8(fp)
   2cdbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2cdc0:	e0bffd17 	ldw	r2,-12(fp)
   2cdc4:	11000104 	addi	r4,r2,4
   2cdc8:	e0bffe17 	ldw	r2,-8(fp)
   2cdcc:	10800817 	ldw	r2,32(r2)
   2cdd0:	1007883a 	mov	r3,r2
   2cdd4:	2005883a 	mov	r2,r4
   2cdd8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2cddc:	e0bffd17 	ldw	r2,-12(fp)
   2cde0:	10800104 	addi	r2,r2,4
   2cde4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2cde8:	e0bffc17 	ldw	r2,-16(fp)
   2cdec:	1080800c 	andi	r2,r2,512
   2cdf0:	1005003a 	cmpeq	r2,r2,zero
   2cdf4:	103fbb1e 	bne	r2,zero,2cce4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2cdf8:	e0bffc17 	ldw	r2,-16(fp)
   2cdfc:	10bfffec 	andhi	r2,r2,65535
   2ce00:	1004d43a 	srli	r2,r2,16
   2ce04:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2ce08:	00001506 	br	2ce60 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2ce0c:	e13ffd17 	ldw	r4,-12(fp)
   2ce10:	e0bffe17 	ldw	r2,-8(fp)
   2ce14:	10c00d17 	ldw	r3,52(r2)
   2ce18:	e0bffe17 	ldw	r2,-8(fp)
   2ce1c:	1885883a 	add	r2,r3,r2
   2ce20:	10820e04 	addi	r2,r2,2104
   2ce24:	10800003 	ldbu	r2,0(r2)
   2ce28:	10c03fcc 	andi	r3,r2,255
   2ce2c:	18c0201c 	xori	r3,r3,128
   2ce30:	18ffe004 	addi	r3,r3,-128
   2ce34:	2005883a 	mov	r2,r4
   2ce38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ce3c:	e0bffe17 	ldw	r2,-8(fp)
   2ce40:	10800d17 	ldw	r2,52(r2)
   2ce44:	10800044 	addi	r2,r2,1
   2ce48:	10c1ffcc 	andi	r3,r2,2047
   2ce4c:	e0bffe17 	ldw	r2,-8(fp)
   2ce50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2ce54:	e0bff917 	ldw	r2,-28(fp)
   2ce58:	10bfffc4 	addi	r2,r2,-1
   2ce5c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2ce60:	e0bff917 	ldw	r2,-28(fp)
   2ce64:	1005003a 	cmpeq	r2,r2,zero
   2ce68:	1000051e 	bne	r2,zero,2ce80 <altera_avalon_jtag_uart_irq+0x1c4>
   2ce6c:	e0bffe17 	ldw	r2,-8(fp)
   2ce70:	10c00d17 	ldw	r3,52(r2)
   2ce74:	e0bffe17 	ldw	r2,-8(fp)
   2ce78:	10800c17 	ldw	r2,48(r2)
   2ce7c:	18bfe31e 	bne	r3,r2,2ce0c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2ce80:	e0bff917 	ldw	r2,-28(fp)
   2ce84:	1005003a 	cmpeq	r2,r2,zero
   2ce88:	103f961e 	bne	r2,zero,2cce4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ce8c:	e0bffe17 	ldw	r2,-8(fp)
   2ce90:	10c00817 	ldw	r3,32(r2)
   2ce94:	00bfff44 	movi	r2,-3
   2ce98:	1886703a 	and	r3,r3,r2
   2ce9c:	e0bffe17 	ldw	r2,-8(fp)
   2cea0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2cea4:	e0bffe17 	ldw	r2,-8(fp)
   2cea8:	10800017 	ldw	r2,0(r2)
   2ceac:	11000104 	addi	r4,r2,4
   2ceb0:	e0bffe17 	ldw	r2,-8(fp)
   2ceb4:	10800817 	ldw	r2,32(r2)
   2ceb8:	1007883a 	mov	r3,r2
   2cebc:	2005883a 	mov	r2,r4
   2cec0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2cec4:	e0bffd17 	ldw	r2,-12(fp)
   2cec8:	10800104 	addi	r2,r2,4
   2cecc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2ced0:	003f8406 	br	2cce4 <altera_avalon_jtag_uart_irq+0x28>
}
   2ced4:	e037883a 	mov	sp,fp
   2ced8:	df000017 	ldw	fp,0(sp)
   2cedc:	dec00104 	addi	sp,sp,4
   2cee0:	f800283a 	ret

0002cee4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2cee4:	defffc04 	addi	sp,sp,-16
   2cee8:	df000315 	stw	fp,12(sp)
   2ceec:	df000304 	addi	fp,sp,12
   2cef0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2cef4:	e0bfff17 	ldw	r2,-4(fp)
   2cef8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2cefc:	e0bffe17 	ldw	r2,-8(fp)
   2cf00:	10800017 	ldw	r2,0(r2)
   2cf04:	10800104 	addi	r2,r2,4
   2cf08:	10800037 	ldwio	r2,0(r2)
   2cf0c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2cf10:	e0bffd17 	ldw	r2,-12(fp)
   2cf14:	1081000c 	andi	r2,r2,1024
   2cf18:	1005003a 	cmpeq	r2,r2,zero
   2cf1c:	10000c1e 	bne	r2,zero,2cf50 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2cf20:	e0bffe17 	ldw	r2,-8(fp)
   2cf24:	10800017 	ldw	r2,0(r2)
   2cf28:	11000104 	addi	r4,r2,4
   2cf2c:	e0bffe17 	ldw	r2,-8(fp)
   2cf30:	10800817 	ldw	r2,32(r2)
   2cf34:	10810014 	ori	r2,r2,1024
   2cf38:	1007883a 	mov	r3,r2
   2cf3c:	2005883a 	mov	r2,r4
   2cf40:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2cf44:	e0bffe17 	ldw	r2,-8(fp)
   2cf48:	10000915 	stw	zero,36(r2)
   2cf4c:	00000a06 	br	2cf78 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2cf50:	e0bffe17 	ldw	r2,-8(fp)
   2cf54:	10c00917 	ldw	r3,36(r2)
   2cf58:	00a00034 	movhi	r2,32768
   2cf5c:	10bfff04 	addi	r2,r2,-4
   2cf60:	10c00536 	bltu	r2,r3,2cf78 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   2cf64:	e0bffe17 	ldw	r2,-8(fp)
   2cf68:	10800917 	ldw	r2,36(r2)
   2cf6c:	10c00044 	addi	r3,r2,1
   2cf70:	e0bffe17 	ldw	r2,-8(fp)
   2cf74:	10c00915 	stw	r3,36(r2)
   2cf78:	008000f4 	movhi	r2,3
   2cf7c:	10889304 	addi	r2,r2,8780
   2cf80:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2cf84:	e037883a 	mov	sp,fp
   2cf88:	df000017 	ldw	fp,0(sp)
   2cf8c:	dec00104 	addi	sp,sp,4
   2cf90:	f800283a 	ret

0002cf94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2cf94:	defffc04 	addi	sp,sp,-16
   2cf98:	df000315 	stw	fp,12(sp)
   2cf9c:	df000304 	addi	fp,sp,12
   2cfa0:	e13ffd15 	stw	r4,-12(fp)
   2cfa4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2cfa8:	00000706 	br	2cfc8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   2cfac:	e0bffe17 	ldw	r2,-8(fp)
   2cfb0:	1090000c 	andi	r2,r2,16384
   2cfb4:	1005003a 	cmpeq	r2,r2,zero
   2cfb8:	1000031e 	bne	r2,zero,2cfc8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   2cfbc:	00bffd44 	movi	r2,-11
   2cfc0:	e0bfff15 	stw	r2,-4(fp)
   2cfc4:	00000b06 	br	2cff4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2cfc8:	e0bffd17 	ldw	r2,-12(fp)
   2cfcc:	10c00d17 	ldw	r3,52(r2)
   2cfd0:	e0bffd17 	ldw	r2,-12(fp)
   2cfd4:	10800c17 	ldw	r2,48(r2)
   2cfd8:	18800526 	beq	r3,r2,2cff0 <altera_avalon_jtag_uart_close+0x5c>
   2cfdc:	e0bffd17 	ldw	r2,-12(fp)
   2cfe0:	10c00917 	ldw	r3,36(r2)
   2cfe4:	e0bffd17 	ldw	r2,-12(fp)
   2cfe8:	10800117 	ldw	r2,4(r2)
   2cfec:	18bfef36 	bltu	r3,r2,2cfac <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2cff0:	e03fff15 	stw	zero,-4(fp)
   2cff4:	e0bfff17 	ldw	r2,-4(fp)
}
   2cff8:	e037883a 	mov	sp,fp
   2cffc:	df000017 	ldw	fp,0(sp)
   2d000:	dec00104 	addi	sp,sp,4
   2d004:	f800283a 	ret

0002d008 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2d008:	defff804 	addi	sp,sp,-32
   2d00c:	df000715 	stw	fp,28(sp)
   2d010:	df000704 	addi	fp,sp,28
   2d014:	e13ffb15 	stw	r4,-20(fp)
   2d018:	e17ffc15 	stw	r5,-16(fp)
   2d01c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   2d020:	00bff9c4 	movi	r2,-25
   2d024:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   2d028:	e0bffc17 	ldw	r2,-16(fp)
   2d02c:	e0bfff15 	stw	r2,-4(fp)
   2d030:	e0ffff17 	ldw	r3,-4(fp)
   2d034:	189a8060 	cmpeqi	r2,r3,27137
   2d038:	1000041e 	bne	r2,zero,2d04c <altera_avalon_jtag_uart_ioctl+0x44>
   2d03c:	e0ffff17 	ldw	r3,-4(fp)
   2d040:	189a80a0 	cmpeqi	r2,r3,27138
   2d044:	10001b1e 	bne	r2,zero,2d0b4 <altera_avalon_jtag_uart_ioctl+0xac>
   2d048:	00002706 	br	2d0e8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2d04c:	e0bffb17 	ldw	r2,-20(fp)
   2d050:	10c00117 	ldw	r3,4(r2)
   2d054:	00a00034 	movhi	r2,32768
   2d058:	10bfffc4 	addi	r2,r2,-1
   2d05c:	18802226 	beq	r3,r2,2d0e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   2d060:	e0bffd17 	ldw	r2,-12(fp)
   2d064:	10800017 	ldw	r2,0(r2)
   2d068:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2d06c:	e0bff917 	ldw	r2,-28(fp)
   2d070:	10800090 	cmplti	r2,r2,2
   2d074:	1000071e 	bne	r2,zero,2d094 <altera_avalon_jtag_uart_ioctl+0x8c>
   2d078:	e0fff917 	ldw	r3,-28(fp)
   2d07c:	00a00034 	movhi	r2,32768
   2d080:	10bfffc4 	addi	r2,r2,-1
   2d084:	18800326 	beq	r3,r2,2d094 <altera_avalon_jtag_uart_ioctl+0x8c>
   2d088:	e0bff917 	ldw	r2,-28(fp)
   2d08c:	e0bffe15 	stw	r2,-8(fp)
   2d090:	00000306 	br	2d0a0 <altera_avalon_jtag_uart_ioctl+0x98>
   2d094:	00e00034 	movhi	r3,32768
   2d098:	18ffff84 	addi	r3,r3,-2
   2d09c:	e0fffe15 	stw	r3,-8(fp)
   2d0a0:	e0bffb17 	ldw	r2,-20(fp)
   2d0a4:	e0fffe17 	ldw	r3,-8(fp)
   2d0a8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   2d0ac:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   2d0b0:	00000d06 	br	2d0e8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2d0b4:	e0bffb17 	ldw	r2,-20(fp)
   2d0b8:	10c00117 	ldw	r3,4(r2)
   2d0bc:	00a00034 	movhi	r2,32768
   2d0c0:	10bfffc4 	addi	r2,r2,-1
   2d0c4:	18800826 	beq	r3,r2,2d0e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2d0c8:	e13ffd17 	ldw	r4,-12(fp)
   2d0cc:	e0bffb17 	ldw	r2,-20(fp)
   2d0d0:	10c00917 	ldw	r3,36(r2)
   2d0d4:	e0bffb17 	ldw	r2,-20(fp)
   2d0d8:	10800117 	ldw	r2,4(r2)
   2d0dc:	1885803a 	cmpltu	r2,r3,r2
   2d0e0:	20800015 	stw	r2,0(r4)
      rc = 0;
   2d0e4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   2d0e8:	e0bffa17 	ldw	r2,-24(fp)
}
   2d0ec:	e037883a 	mov	sp,fp
   2d0f0:	df000017 	ldw	fp,0(sp)
   2d0f4:	dec00104 	addi	sp,sp,4
   2d0f8:	f800283a 	ret

0002d0fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2d0fc:	defff204 	addi	sp,sp,-56
   2d100:	dfc00d15 	stw	ra,52(sp)
   2d104:	df000c15 	stw	fp,48(sp)
   2d108:	df000c04 	addi	fp,sp,48
   2d10c:	e13ffb15 	stw	r4,-20(fp)
   2d110:	e17ffc15 	stw	r5,-16(fp)
   2d114:	e1bffd15 	stw	r6,-12(fp)
   2d118:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   2d11c:	e0bffc17 	ldw	r2,-16(fp)
   2d120:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2d124:	00004806 	br	2d248 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2d128:	e0bffb17 	ldw	r2,-20(fp)
   2d12c:	10800a17 	ldw	r2,40(r2)
   2d130:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2d134:	e0bffb17 	ldw	r2,-20(fp)
   2d138:	10800b17 	ldw	r2,44(r2)
   2d13c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   2d140:	e0fff717 	ldw	r3,-36(fp)
   2d144:	e0bff617 	ldw	r2,-40(fp)
   2d148:	18800536 	bltu	r3,r2,2d160 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2d14c:	e0bff717 	ldw	r2,-36(fp)
   2d150:	e0fff617 	ldw	r3,-40(fp)
   2d154:	10c5c83a 	sub	r2,r2,r3
   2d158:	e0bff815 	stw	r2,-32(fp)
   2d15c:	00000406 	br	2d170 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2d160:	00820004 	movi	r2,2048
   2d164:	e0fff617 	ldw	r3,-40(fp)
   2d168:	10c5c83a 	sub	r2,r2,r3
   2d16c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2d170:	e0bff817 	ldw	r2,-32(fp)
   2d174:	1005003a 	cmpeq	r2,r2,zero
   2d178:	10001f1e 	bne	r2,zero,2d1f8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   2d17c:	e0fffd17 	ldw	r3,-12(fp)
   2d180:	e0bff817 	ldw	r2,-32(fp)
   2d184:	1880022e 	bgeu	r3,r2,2d190 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2d188:	e0bffd17 	ldw	r2,-12(fp)
   2d18c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2d190:	e0bffb17 	ldw	r2,-20(fp)
   2d194:	10c00e04 	addi	r3,r2,56
   2d198:	e0bff617 	ldw	r2,-40(fp)
   2d19c:	1887883a 	add	r3,r3,r2
   2d1a0:	e0bffa17 	ldw	r2,-24(fp)
   2d1a4:	1009883a 	mov	r4,r2
   2d1a8:	180b883a 	mov	r5,r3
   2d1ac:	e1bff817 	ldw	r6,-32(fp)
   2d1b0:	0023ef00 	call	23ef0 <memcpy>
      ptr   += n;
   2d1b4:	e0fff817 	ldw	r3,-32(fp)
   2d1b8:	e0bffa17 	ldw	r2,-24(fp)
   2d1bc:	10c5883a 	add	r2,r2,r3
   2d1c0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   2d1c4:	e0fffd17 	ldw	r3,-12(fp)
   2d1c8:	e0bff817 	ldw	r2,-32(fp)
   2d1cc:	1885c83a 	sub	r2,r3,r2
   2d1d0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2d1d4:	e0fff617 	ldw	r3,-40(fp)
   2d1d8:	e0bff817 	ldw	r2,-32(fp)
   2d1dc:	1885883a 	add	r2,r3,r2
   2d1e0:	10c1ffcc 	andi	r3,r2,2047
   2d1e4:	e0bffb17 	ldw	r2,-20(fp)
   2d1e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2d1ec:	e0bffd17 	ldw	r2,-12(fp)
   2d1f0:	10800048 	cmpgei	r2,r2,1
   2d1f4:	103fcc1e 	bne	r2,zero,2d128 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   2d1f8:	e0fffa17 	ldw	r3,-24(fp)
   2d1fc:	e0bffc17 	ldw	r2,-16(fp)
   2d200:	1880141e 	bne	r3,r2,2d254 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2d204:	e0bffe17 	ldw	r2,-8(fp)
   2d208:	1090000c 	andi	r2,r2,16384
   2d20c:	1004c03a 	cmpne	r2,r2,zero
   2d210:	1000101e 	bne	r2,zero,2d254 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2d214:	e0bffb17 	ldw	r2,-20(fp)
   2d218:	10c00a17 	ldw	r3,40(r2)
   2d21c:	e0bff717 	ldw	r2,-36(fp)
   2d220:	1880051e 	bne	r3,r2,2d238 <altera_avalon_jtag_uart_read+0x13c>
   2d224:	e0bffb17 	ldw	r2,-20(fp)
   2d228:	10c00917 	ldw	r3,36(r2)
   2d22c:	e0bffb17 	ldw	r2,-20(fp)
   2d230:	10800117 	ldw	r2,4(r2)
   2d234:	18bff736 	bltu	r3,r2,2d214 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2d238:	e0bffb17 	ldw	r2,-20(fp)
   2d23c:	10c00a17 	ldw	r3,40(r2)
   2d240:	e0bff717 	ldw	r2,-36(fp)
   2d244:	18800326 	beq	r3,r2,2d254 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2d248:	e0bffd17 	ldw	r2,-12(fp)
   2d24c:	10800048 	cmpgei	r2,r2,1
   2d250:	103fb51e 	bne	r2,zero,2d128 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2d254:	e0fffa17 	ldw	r3,-24(fp)
   2d258:	e0bffc17 	ldw	r2,-16(fp)
   2d25c:	18801926 	beq	r3,r2,2d2c4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d260:	0005303a 	rdctl	r2,status
   2d264:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d268:	e0fff517 	ldw	r3,-44(fp)
   2d26c:	00bfff84 	movi	r2,-2
   2d270:	1884703a 	and	r2,r3,r2
   2d274:	1001703a 	wrctl	status,r2
  
  return context;
   2d278:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2d27c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2d280:	e0bffb17 	ldw	r2,-20(fp)
   2d284:	10800817 	ldw	r2,32(r2)
   2d288:	10c00054 	ori	r3,r2,1
   2d28c:	e0bffb17 	ldw	r2,-20(fp)
   2d290:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2d294:	e0bffb17 	ldw	r2,-20(fp)
   2d298:	10800017 	ldw	r2,0(r2)
   2d29c:	11000104 	addi	r4,r2,4
   2d2a0:	e0bffb17 	ldw	r2,-20(fp)
   2d2a4:	10800817 	ldw	r2,32(r2)
   2d2a8:	1007883a 	mov	r3,r2
   2d2ac:	2005883a 	mov	r2,r4
   2d2b0:	10c00035 	stwio	r3,0(r2)
   2d2b4:	e0bff917 	ldw	r2,-28(fp)
   2d2b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d2bc:	e0bff417 	ldw	r2,-48(fp)
   2d2c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2d2c4:	e0fffa17 	ldw	r3,-24(fp)
   2d2c8:	e0bffc17 	ldw	r2,-16(fp)
   2d2cc:	18800526 	beq	r3,r2,2d2e4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   2d2d0:	e0fffa17 	ldw	r3,-24(fp)
   2d2d4:	e0bffc17 	ldw	r2,-16(fp)
   2d2d8:	1887c83a 	sub	r3,r3,r2
   2d2dc:	e0ffff15 	stw	r3,-4(fp)
   2d2e0:	00000906 	br	2d308 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   2d2e4:	e0bffe17 	ldw	r2,-8(fp)
   2d2e8:	1090000c 	andi	r2,r2,16384
   2d2ec:	1005003a 	cmpeq	r2,r2,zero
   2d2f0:	1000031e 	bne	r2,zero,2d300 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2d2f4:	00bffd44 	movi	r2,-11
   2d2f8:	e0bfff15 	stw	r2,-4(fp)
   2d2fc:	00000206 	br	2d308 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   2d300:	00bffec4 	movi	r2,-5
   2d304:	e0bfff15 	stw	r2,-4(fp)
   2d308:	e0bfff17 	ldw	r2,-4(fp)
}
   2d30c:	e037883a 	mov	sp,fp
   2d310:	dfc00117 	ldw	ra,4(sp)
   2d314:	df000017 	ldw	fp,0(sp)
   2d318:	dec00204 	addi	sp,sp,8
   2d31c:	f800283a 	ret

0002d320 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2d320:	defff204 	addi	sp,sp,-56
   2d324:	dfc00d15 	stw	ra,52(sp)
   2d328:	df000c15 	stw	fp,48(sp)
   2d32c:	df000c04 	addi	fp,sp,48
   2d330:	e13ffb15 	stw	r4,-20(fp)
   2d334:	e17ffc15 	stw	r5,-16(fp)
   2d338:	e1bffd15 	stw	r6,-12(fp)
   2d33c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2d340:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2d344:	e0bffc17 	ldw	r2,-16(fp)
   2d348:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2d34c:	00003a06 	br	2d438 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2d350:	e0bffb17 	ldw	r2,-20(fp)
   2d354:	10800c17 	ldw	r2,48(r2)
   2d358:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   2d35c:	e0bffb17 	ldw	r2,-20(fp)
   2d360:	10800d17 	ldw	r2,52(r2)
   2d364:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   2d368:	e0fffa17 	ldw	r3,-24(fp)
   2d36c:	e0bff917 	ldw	r2,-28(fp)
   2d370:	1880062e 	bgeu	r3,r2,2d38c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2d374:	e0fff917 	ldw	r3,-28(fp)
   2d378:	e0bffa17 	ldw	r2,-24(fp)
   2d37c:	1885c83a 	sub	r2,r3,r2
   2d380:	10bfffc4 	addi	r2,r2,-1
   2d384:	e0bff815 	stw	r2,-32(fp)
   2d388:	00000c06 	br	2d3bc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   2d38c:	e0bff917 	ldw	r2,-28(fp)
   2d390:	1005003a 	cmpeq	r2,r2,zero
   2d394:	1000051e 	bne	r2,zero,2d3ac <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2d398:	00820004 	movi	r2,2048
   2d39c:	e0fffa17 	ldw	r3,-24(fp)
   2d3a0:	10c5c83a 	sub	r2,r2,r3
   2d3a4:	e0bff815 	stw	r2,-32(fp)
   2d3a8:	00000406 	br	2d3bc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2d3ac:	0081ffc4 	movi	r2,2047
   2d3b0:	e0fffa17 	ldw	r3,-24(fp)
   2d3b4:	10c5c83a 	sub	r2,r2,r3
   2d3b8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2d3bc:	e0bff817 	ldw	r2,-32(fp)
   2d3c0:	1005003a 	cmpeq	r2,r2,zero
   2d3c4:	10001f1e 	bne	r2,zero,2d444 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   2d3c8:	e0fffd17 	ldw	r3,-12(fp)
   2d3cc:	e0bff817 	ldw	r2,-32(fp)
   2d3d0:	1880022e 	bgeu	r3,r2,2d3dc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   2d3d4:	e0bffd17 	ldw	r2,-12(fp)
   2d3d8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2d3dc:	e0bffb17 	ldw	r2,-20(fp)
   2d3e0:	10c20e04 	addi	r3,r2,2104
   2d3e4:	e0bffa17 	ldw	r2,-24(fp)
   2d3e8:	1885883a 	add	r2,r3,r2
   2d3ec:	e0fffc17 	ldw	r3,-16(fp)
   2d3f0:	1009883a 	mov	r4,r2
   2d3f4:	180b883a 	mov	r5,r3
   2d3f8:	e1bff817 	ldw	r6,-32(fp)
   2d3fc:	0023ef00 	call	23ef0 <memcpy>
      ptr   += n;
   2d400:	e0fff817 	ldw	r3,-32(fp)
   2d404:	e0bffc17 	ldw	r2,-16(fp)
   2d408:	10c5883a 	add	r2,r2,r3
   2d40c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   2d410:	e0fffd17 	ldw	r3,-12(fp)
   2d414:	e0bff817 	ldw	r2,-32(fp)
   2d418:	1885c83a 	sub	r2,r3,r2
   2d41c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2d420:	e0fffa17 	ldw	r3,-24(fp)
   2d424:	e0bff817 	ldw	r2,-32(fp)
   2d428:	1885883a 	add	r2,r3,r2
   2d42c:	10c1ffcc 	andi	r3,r2,2047
   2d430:	e0bffb17 	ldw	r2,-20(fp)
   2d434:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2d438:	e0bffd17 	ldw	r2,-12(fp)
   2d43c:	10800048 	cmpgei	r2,r2,1
   2d440:	103fc31e 	bne	r2,zero,2d350 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d444:	0005303a 	rdctl	r2,status
   2d448:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d44c:	e0fff517 	ldw	r3,-44(fp)
   2d450:	00bfff84 	movi	r2,-2
   2d454:	1884703a 	and	r2,r3,r2
   2d458:	1001703a 	wrctl	status,r2
  
  return context;
   2d45c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2d460:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2d464:	e0bffb17 	ldw	r2,-20(fp)
   2d468:	10800817 	ldw	r2,32(r2)
   2d46c:	10c00094 	ori	r3,r2,2
   2d470:	e0bffb17 	ldw	r2,-20(fp)
   2d474:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2d478:	e0bffb17 	ldw	r2,-20(fp)
   2d47c:	10800017 	ldw	r2,0(r2)
   2d480:	11000104 	addi	r4,r2,4
   2d484:	e0bffb17 	ldw	r2,-20(fp)
   2d488:	10800817 	ldw	r2,32(r2)
   2d48c:	1007883a 	mov	r3,r2
   2d490:	2005883a 	mov	r2,r4
   2d494:	10c00035 	stwio	r3,0(r2)
   2d498:	e0bff717 	ldw	r2,-36(fp)
   2d49c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d4a0:	e0bff417 	ldw	r2,-48(fp)
   2d4a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2d4a8:	e0bffd17 	ldw	r2,-12(fp)
   2d4ac:	10800050 	cmplti	r2,r2,1
   2d4b0:	1000111e 	bne	r2,zero,2d4f8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   2d4b4:	e0bffe17 	ldw	r2,-8(fp)
   2d4b8:	1090000c 	andi	r2,r2,16384
   2d4bc:	1004c03a 	cmpne	r2,r2,zero
   2d4c0:	1000101e 	bne	r2,zero,2d504 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2d4c4:	e0bffb17 	ldw	r2,-20(fp)
   2d4c8:	10c00d17 	ldw	r3,52(r2)
   2d4cc:	e0bff917 	ldw	r2,-28(fp)
   2d4d0:	1880051e 	bne	r3,r2,2d4e8 <altera_avalon_jtag_uart_write+0x1c8>
   2d4d4:	e0bffb17 	ldw	r2,-20(fp)
   2d4d8:	10c00917 	ldw	r3,36(r2)
   2d4dc:	e0bffb17 	ldw	r2,-20(fp)
   2d4e0:	10800117 	ldw	r2,4(r2)
   2d4e4:	18bff736 	bltu	r3,r2,2d4c4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2d4e8:	e0bffb17 	ldw	r2,-20(fp)
   2d4ec:	10c00d17 	ldw	r3,52(r2)
   2d4f0:	e0bff917 	ldw	r2,-28(fp)
   2d4f4:	18800326 	beq	r3,r2,2d504 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   2d4f8:	e0bffd17 	ldw	r2,-12(fp)
   2d4fc:	10800048 	cmpgei	r2,r2,1
   2d500:	103fcd1e 	bne	r2,zero,2d438 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2d504:	e0fffc17 	ldw	r3,-16(fp)
   2d508:	e0bff617 	ldw	r2,-40(fp)
   2d50c:	18800526 	beq	r3,r2,2d524 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   2d510:	e0fffc17 	ldw	r3,-16(fp)
   2d514:	e0bff617 	ldw	r2,-40(fp)
   2d518:	1887c83a 	sub	r3,r3,r2
   2d51c:	e0ffff15 	stw	r3,-4(fp)
   2d520:	00000906 	br	2d548 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   2d524:	e0bffe17 	ldw	r2,-8(fp)
   2d528:	1090000c 	andi	r2,r2,16384
   2d52c:	1005003a 	cmpeq	r2,r2,zero
   2d530:	1000031e 	bne	r2,zero,2d540 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   2d534:	00bffd44 	movi	r2,-11
   2d538:	e0bfff15 	stw	r2,-4(fp)
   2d53c:	00000206 	br	2d548 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2d540:	00bffec4 	movi	r2,-5
   2d544:	e0bfff15 	stw	r2,-4(fp)
   2d548:	e0bfff17 	ldw	r2,-4(fp)
}
   2d54c:	e037883a 	mov	sp,fp
   2d550:	dfc00117 	ldw	ra,4(sp)
   2d554:	df000017 	ldw	fp,0(sp)
   2d558:	dec00204 	addi	sp,sp,8
   2d55c:	f800283a 	ret

0002d560 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2d560:	defff404 	addi	sp,sp,-48
   2d564:	df000b15 	stw	fp,44(sp)
   2d568:	df000b04 	addi	fp,sp,44
   2d56c:	e13ffb15 	stw	r4,-20(fp)
   2d570:	e17ffc15 	stw	r5,-16(fp)
   2d574:	e1bffd15 	stw	r6,-12(fp)
   2d578:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2d57c:	e03ff915 	stw	zero,-28(fp)
   2d580:	008000f4 	movhi	r2,3
   2d584:	10889304 	addi	r2,r2,8780
   2d588:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2d58c:	1005003a 	cmpeq	r2,r2,zero
   2d590:	1000411e 	bne	r2,zero,2d698 <alt_alarm_start+0x138>
  {
    if (alarm)
   2d594:	e0bffb17 	ldw	r2,-20(fp)
   2d598:	1005003a 	cmpeq	r2,r2,zero
   2d59c:	10003b1e 	bne	r2,zero,2d68c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   2d5a0:	e0fffb17 	ldw	r3,-20(fp)
   2d5a4:	e0bffd17 	ldw	r2,-12(fp)
   2d5a8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   2d5ac:	e0fffb17 	ldw	r3,-20(fp)
   2d5b0:	e0bffe17 	ldw	r2,-8(fp)
   2d5b4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d5b8:	0005303a 	rdctl	r2,status
   2d5bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d5c0:	e0fff817 	ldw	r3,-32(fp)
   2d5c4:	00bfff84 	movi	r2,-2
   2d5c8:	1884703a 	and	r2,r3,r2
   2d5cc:	1001703a 	wrctl	status,r2
  
  return context;
   2d5d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2d5d4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2d5d8:	008000f4 	movhi	r2,3
   2d5dc:	10889404 	addi	r2,r2,8784
   2d5e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2d5e4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2d5e8:	e0fffc17 	ldw	r3,-16(fp)
   2d5ec:	e0bff917 	ldw	r2,-28(fp)
   2d5f0:	1885883a 	add	r2,r3,r2
   2d5f4:	10c00044 	addi	r3,r2,1
   2d5f8:	e0bffb17 	ldw	r2,-20(fp)
   2d5fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2d600:	e0bffb17 	ldw	r2,-20(fp)
   2d604:	10c00217 	ldw	r3,8(r2)
   2d608:	e0bff917 	ldw	r2,-28(fp)
   2d60c:	1880042e 	bgeu	r3,r2,2d620 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   2d610:	e0fffb17 	ldw	r3,-20(fp)
   2d614:	00800044 	movi	r2,1
   2d618:	18800405 	stb	r2,16(r3)
   2d61c:	00000206 	br	2d628 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   2d620:	e0bffb17 	ldw	r2,-20(fp)
   2d624:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2d628:	e0fffb17 	ldw	r3,-20(fp)
   2d62c:	008000f4 	movhi	r2,3
   2d630:	1081ea04 	addi	r2,r2,1960
   2d634:	e0bff615 	stw	r2,-40(fp)
   2d638:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2d63c:	e0fff717 	ldw	r3,-36(fp)
   2d640:	e0bff617 	ldw	r2,-40(fp)
   2d644:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2d648:	e0bff617 	ldw	r2,-40(fp)
   2d64c:	10c00017 	ldw	r3,0(r2)
   2d650:	e0bff717 	ldw	r2,-36(fp)
   2d654:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2d658:	e0bff617 	ldw	r2,-40(fp)
   2d65c:	10c00017 	ldw	r3,0(r2)
   2d660:	e0bff717 	ldw	r2,-36(fp)
   2d664:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2d668:	e0fff617 	ldw	r3,-40(fp)
   2d66c:	e0bff717 	ldw	r2,-36(fp)
   2d670:	18800015 	stw	r2,0(r3)
   2d674:	e0bffa17 	ldw	r2,-24(fp)
   2d678:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d67c:	e0bff517 	ldw	r2,-44(fp)
   2d680:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2d684:	e03fff15 	stw	zero,-4(fp)
   2d688:	00000506 	br	2d6a0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   2d68c:	00bffa84 	movi	r2,-22
   2d690:	e0bfff15 	stw	r2,-4(fp)
   2d694:	00000206 	br	2d6a0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   2d698:	00bfde84 	movi	r2,-134
   2d69c:	e0bfff15 	stw	r2,-4(fp)
   2d6a0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   2d6a4:	e037883a 	mov	sp,fp
   2d6a8:	df000017 	ldw	fp,0(sp)
   2d6ac:	dec00104 	addi	sp,sp,4
   2d6b0:	f800283a 	ret

0002d6b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2d6b4:	deffff04 	addi	sp,sp,-4
   2d6b8:	df000015 	stw	fp,0(sp)
   2d6bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2d6c0:	e037883a 	mov	sp,fp
   2d6c4:	df000017 	ldw	fp,0(sp)
   2d6c8:	dec00104 	addi	sp,sp,4
   2d6cc:	f800283a 	ret

0002d6d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2d6d0:	defff904 	addi	sp,sp,-28
   2d6d4:	dfc00615 	stw	ra,24(sp)
   2d6d8:	df000515 	stw	fp,20(sp)
   2d6dc:	df000504 	addi	fp,sp,20
   2d6e0:	e13ffd15 	stw	r4,-12(fp)
   2d6e4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2d6e8:	e0bffd17 	ldw	r2,-12(fp)
   2d6ec:	1005003a 	cmpeq	r2,r2,zero
   2d6f0:	1000041e 	bne	r2,zero,2d704 <alt_dev_llist_insert+0x34>
   2d6f4:	e0bffd17 	ldw	r2,-12(fp)
   2d6f8:	10800217 	ldw	r2,8(r2)
   2d6fc:	1004c03a 	cmpne	r2,r2,zero
   2d700:	1000071e 	bne	r2,zero,2d720 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   2d704:	002d7840 	call	2d784 <alt_get_errno>
   2d708:	1007883a 	mov	r3,r2
   2d70c:	00800584 	movi	r2,22
   2d710:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2d714:	00bffa84 	movi	r2,-22
   2d718:	e0bfff15 	stw	r2,-4(fp)
   2d71c:	00001306 	br	2d76c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2d720:	e0fffd17 	ldw	r3,-12(fp)
   2d724:	e0bffe17 	ldw	r2,-8(fp)
   2d728:	e0bffb15 	stw	r2,-20(fp)
   2d72c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2d730:	e0fffc17 	ldw	r3,-16(fp)
   2d734:	e0bffb17 	ldw	r2,-20(fp)
   2d738:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2d73c:	e0bffb17 	ldw	r2,-20(fp)
   2d740:	10c00017 	ldw	r3,0(r2)
   2d744:	e0bffc17 	ldw	r2,-16(fp)
   2d748:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2d74c:	e0bffb17 	ldw	r2,-20(fp)
   2d750:	10c00017 	ldw	r3,0(r2)
   2d754:	e0bffc17 	ldw	r2,-16(fp)
   2d758:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2d75c:	e0fffb17 	ldw	r3,-20(fp)
   2d760:	e0bffc17 	ldw	r2,-16(fp)
   2d764:	18800015 	stw	r2,0(r3)

  return 0;  
   2d768:	e03fff15 	stw	zero,-4(fp)
   2d76c:	e0bfff17 	ldw	r2,-4(fp)
}
   2d770:	e037883a 	mov	sp,fp
   2d774:	dfc00117 	ldw	ra,4(sp)
   2d778:	df000017 	ldw	fp,0(sp)
   2d77c:	dec00204 	addi	sp,sp,8
   2d780:	f800283a 	ret

0002d784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d784:	defffd04 	addi	sp,sp,-12
   2d788:	dfc00215 	stw	ra,8(sp)
   2d78c:	df000115 	stw	fp,4(sp)
   2d790:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2d794:	008000f4 	movhi	r2,3
   2d798:	1081e804 	addi	r2,r2,1952
   2d79c:	10800017 	ldw	r2,0(r2)
   2d7a0:	1005003a 	cmpeq	r2,r2,zero
   2d7a4:	1000061e 	bne	r2,zero,2d7c0 <alt_get_errno+0x3c>
   2d7a8:	008000f4 	movhi	r2,3
   2d7ac:	1081e804 	addi	r2,r2,1952
   2d7b0:	10800017 	ldw	r2,0(r2)
   2d7b4:	103ee83a 	callr	r2
   2d7b8:	e0bfff15 	stw	r2,-4(fp)
   2d7bc:	00000306 	br	2d7cc <alt_get_errno+0x48>
   2d7c0:	008000f4 	movhi	r2,3
   2d7c4:	10888804 	addi	r2,r2,8736
   2d7c8:	e0bfff15 	stw	r2,-4(fp)
   2d7cc:	e0bfff17 	ldw	r2,-4(fp)
}
   2d7d0:	e037883a 	mov	sp,fp
   2d7d4:	dfc00117 	ldw	ra,4(sp)
   2d7d8:	df000017 	ldw	fp,0(sp)
   2d7dc:	dec00204 	addi	sp,sp,8
   2d7e0:	f800283a 	ret

0002d7e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2d7e4:	defffd04 	addi	sp,sp,-12
   2d7e8:	dfc00215 	stw	ra,8(sp)
   2d7ec:	df000115 	stw	fp,4(sp)
   2d7f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2d7f4:	00bfff04 	movi	r2,-4
   2d7f8:	00c000f4 	movhi	r3,3
   2d7fc:	18f9b404 	addi	r3,r3,-6448
   2d800:	1885883a 	add	r2,r3,r2
   2d804:	e0bfff15 	stw	r2,-4(fp)
   2d808:	00000606 	br	2d824 <_do_ctors+0x40>
        (*ctor) (); 
   2d80c:	e0bfff17 	ldw	r2,-4(fp)
   2d810:	10800017 	ldw	r2,0(r2)
   2d814:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2d818:	e0bfff17 	ldw	r2,-4(fp)
   2d81c:	10bfff04 	addi	r2,r2,-4
   2d820:	e0bfff15 	stw	r2,-4(fp)
   2d824:	e0ffff17 	ldw	r3,-4(fp)
   2d828:	008000f4 	movhi	r2,3
   2d82c:	10b9b304 	addi	r2,r2,-6452
   2d830:	18bff62e 	bgeu	r3,r2,2d80c <_do_ctors+0x28>
        (*ctor) (); 
}
   2d834:	e037883a 	mov	sp,fp
   2d838:	dfc00117 	ldw	ra,4(sp)
   2d83c:	df000017 	ldw	fp,0(sp)
   2d840:	dec00204 	addi	sp,sp,8
   2d844:	f800283a 	ret

0002d848 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2d848:	defffd04 	addi	sp,sp,-12
   2d84c:	dfc00215 	stw	ra,8(sp)
   2d850:	df000115 	stw	fp,4(sp)
   2d854:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2d858:	00bfff04 	movi	r2,-4
   2d85c:	00c000f4 	movhi	r3,3
   2d860:	18f9b404 	addi	r3,r3,-6448
   2d864:	1885883a 	add	r2,r3,r2
   2d868:	e0bfff15 	stw	r2,-4(fp)
   2d86c:	00000606 	br	2d888 <_do_dtors+0x40>
        (*dtor) (); 
   2d870:	e0bfff17 	ldw	r2,-4(fp)
   2d874:	10800017 	ldw	r2,0(r2)
   2d878:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2d87c:	e0bfff17 	ldw	r2,-4(fp)
   2d880:	10bfff04 	addi	r2,r2,-4
   2d884:	e0bfff15 	stw	r2,-4(fp)
   2d888:	e0ffff17 	ldw	r3,-4(fp)
   2d88c:	008000f4 	movhi	r2,3
   2d890:	10b9b404 	addi	r2,r2,-6448
   2d894:	18bff62e 	bgeu	r3,r2,2d870 <_do_dtors+0x28>
        (*dtor) (); 
}
   2d898:	e037883a 	mov	sp,fp
   2d89c:	dfc00117 	ldw	ra,4(sp)
   2d8a0:	df000017 	ldw	fp,0(sp)
   2d8a4:	dec00204 	addi	sp,sp,8
   2d8a8:	f800283a 	ret

0002d8ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2d8ac:	defffe04 	addi	sp,sp,-8
   2d8b0:	dfc00115 	stw	ra,4(sp)
   2d8b4:	df000015 	stw	fp,0(sp)
   2d8b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2d8bc:	0009883a 	mov	r4,zero
   2d8c0:	01440004 	movi	r5,4096
   2d8c4:	002e2340 	call	2e234 <alt_icache_flush>
#endif
}
   2d8c8:	e037883a 	mov	sp,fp
   2d8cc:	dfc00117 	ldw	ra,4(sp)
   2d8d0:	df000017 	ldw	fp,0(sp)
   2d8d4:	dec00204 	addi	sp,sp,8
   2d8d8:	f800283a 	ret

0002d8dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d8dc:	defff904 	addi	sp,sp,-28
   2d8e0:	dfc00615 	stw	ra,24(sp)
   2d8e4:	df000515 	stw	fp,20(sp)
   2d8e8:	df000504 	addi	fp,sp,20
   2d8ec:	e13ffc15 	stw	r4,-16(fp)
   2d8f0:	e17ffd15 	stw	r5,-12(fp)
   2d8f4:	e1bffe15 	stw	r6,-8(fp)
   2d8f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2d8fc:	e0800217 	ldw	r2,8(fp)
   2d900:	d8800015 	stw	r2,0(sp)
   2d904:	e13ffc17 	ldw	r4,-16(fp)
   2d908:	e17ffd17 	ldw	r5,-12(fp)
   2d90c:	e1bffe17 	ldw	r6,-8(fp)
   2d910:	e1ffff17 	ldw	r7,-4(fp)
   2d914:	002dab00 	call	2dab0 <alt_iic_isr_register>
}  
   2d918:	e037883a 	mov	sp,fp
   2d91c:	dfc00117 	ldw	ra,4(sp)
   2d920:	df000017 	ldw	fp,0(sp)
   2d924:	dec00204 	addi	sp,sp,8
   2d928:	f800283a 	ret

0002d92c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2d92c:	defff904 	addi	sp,sp,-28
   2d930:	df000615 	stw	fp,24(sp)
   2d934:	df000604 	addi	fp,sp,24
   2d938:	e13ffe15 	stw	r4,-8(fp)
   2d93c:	e17fff15 	stw	r5,-4(fp)
   2d940:	e0bfff17 	ldw	r2,-4(fp)
   2d944:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d948:	0005303a 	rdctl	r2,status
   2d94c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d950:	e0fffb17 	ldw	r3,-20(fp)
   2d954:	00bfff84 	movi	r2,-2
   2d958:	1884703a 	and	r2,r3,r2
   2d95c:	1001703a 	wrctl	status,r2
  
  return context;
   2d960:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d964:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   2d968:	e0fffc17 	ldw	r3,-16(fp)
   2d96c:	00800044 	movi	r2,1
   2d970:	10c4983a 	sll	r2,r2,r3
   2d974:	1007883a 	mov	r3,r2
   2d978:	008000f4 	movhi	r2,3
   2d97c:	10889504 	addi	r2,r2,8788
   2d980:	10800017 	ldw	r2,0(r2)
   2d984:	1886b03a 	or	r3,r3,r2
   2d988:	008000f4 	movhi	r2,3
   2d98c:	10889504 	addi	r2,r2,8788
   2d990:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d994:	008000f4 	movhi	r2,3
   2d998:	10889504 	addi	r2,r2,8788
   2d99c:	10800017 	ldw	r2,0(r2)
   2d9a0:	100170fa 	wrctl	ienable,r2
   2d9a4:	e0bffd17 	ldw	r2,-12(fp)
   2d9a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d9ac:	e0bffa17 	ldw	r2,-24(fp)
   2d9b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d9b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2d9b8:	e037883a 	mov	sp,fp
   2d9bc:	df000017 	ldw	fp,0(sp)
   2d9c0:	dec00104 	addi	sp,sp,4
   2d9c4:	f800283a 	ret

0002d9c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2d9c8:	defff904 	addi	sp,sp,-28
   2d9cc:	df000615 	stw	fp,24(sp)
   2d9d0:	df000604 	addi	fp,sp,24
   2d9d4:	e13ffe15 	stw	r4,-8(fp)
   2d9d8:	e17fff15 	stw	r5,-4(fp)
   2d9dc:	e0bfff17 	ldw	r2,-4(fp)
   2d9e0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d9e4:	0005303a 	rdctl	r2,status
   2d9e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d9ec:	e0fffb17 	ldw	r3,-20(fp)
   2d9f0:	00bfff84 	movi	r2,-2
   2d9f4:	1884703a 	and	r2,r3,r2
   2d9f8:	1001703a 	wrctl	status,r2
  
  return context;
   2d9fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2da00:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   2da04:	e0fffc17 	ldw	r3,-16(fp)
   2da08:	00800044 	movi	r2,1
   2da0c:	10c4983a 	sll	r2,r2,r3
   2da10:	0084303a 	nor	r2,zero,r2
   2da14:	1007883a 	mov	r3,r2
   2da18:	008000f4 	movhi	r2,3
   2da1c:	10889504 	addi	r2,r2,8788
   2da20:	10800017 	ldw	r2,0(r2)
   2da24:	1886703a 	and	r3,r3,r2
   2da28:	008000f4 	movhi	r2,3
   2da2c:	10889504 	addi	r2,r2,8788
   2da30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2da34:	008000f4 	movhi	r2,3
   2da38:	10889504 	addi	r2,r2,8788
   2da3c:	10800017 	ldw	r2,0(r2)
   2da40:	100170fa 	wrctl	ienable,r2
   2da44:	e0bffd17 	ldw	r2,-12(fp)
   2da48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2da4c:	e0bffa17 	ldw	r2,-24(fp)
   2da50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2da54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2da58:	e037883a 	mov	sp,fp
   2da5c:	df000017 	ldw	fp,0(sp)
   2da60:	dec00104 	addi	sp,sp,4
   2da64:	f800283a 	ret

0002da68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2da68:	defffc04 	addi	sp,sp,-16
   2da6c:	df000315 	stw	fp,12(sp)
   2da70:	df000304 	addi	fp,sp,12
   2da74:	e13ffe15 	stw	r4,-8(fp)
   2da78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2da7c:	000530fa 	rdctl	r2,ienable
   2da80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2da84:	e0ffff17 	ldw	r3,-4(fp)
   2da88:	00800044 	movi	r2,1
   2da8c:	10c4983a 	sll	r2,r2,r3
   2da90:	1007883a 	mov	r3,r2
   2da94:	e0bffd17 	ldw	r2,-12(fp)
   2da98:	1884703a 	and	r2,r3,r2
   2da9c:	1004c03a 	cmpne	r2,r2,zero
}
   2daa0:	e037883a 	mov	sp,fp
   2daa4:	df000017 	ldw	fp,0(sp)
   2daa8:	dec00104 	addi	sp,sp,4
   2daac:	f800283a 	ret

0002dab0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2dab0:	defff404 	addi	sp,sp,-48
   2dab4:	dfc00b15 	stw	ra,44(sp)
   2dab8:	df000a15 	stw	fp,40(sp)
   2dabc:	df000a04 	addi	fp,sp,40
   2dac0:	e13ffb15 	stw	r4,-20(fp)
   2dac4:	e17ffc15 	stw	r5,-16(fp)
   2dac8:	e1bffd15 	stw	r6,-12(fp)
   2dacc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   2dad0:	00bffa84 	movi	r2,-22
   2dad4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2dad8:	e0bffc17 	ldw	r2,-16(fp)
   2dadc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2dae0:	e0bff917 	ldw	r2,-28(fp)
   2dae4:	10800808 	cmpgei	r2,r2,32
   2dae8:	1000291e 	bne	r2,zero,2db90 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2daec:	0005303a 	rdctl	r2,status
   2daf0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2daf4:	e0fff717 	ldw	r3,-36(fp)
   2daf8:	00bfff84 	movi	r2,-2
   2dafc:	1884703a 	and	r2,r3,r2
   2db00:	1001703a 	wrctl	status,r2
  
  return context;
   2db04:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2db08:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   2db0c:	e0bff917 	ldw	r2,-28(fp)
   2db10:	00c000f4 	movhi	r3,3
   2db14:	18c8a004 	addi	r3,r3,8832
   2db18:	100490fa 	slli	r2,r2,3
   2db1c:	10c7883a 	add	r3,r2,r3
   2db20:	e0bffd17 	ldw	r2,-12(fp)
   2db24:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   2db28:	e0bff917 	ldw	r2,-28(fp)
   2db2c:	00c000f4 	movhi	r3,3
   2db30:	18c8a004 	addi	r3,r3,8832
   2db34:	100490fa 	slli	r2,r2,3
   2db38:	10c5883a 	add	r2,r2,r3
   2db3c:	10c00104 	addi	r3,r2,4
   2db40:	e0bffe17 	ldw	r2,-8(fp)
   2db44:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2db48:	e0bffd17 	ldw	r2,-12(fp)
   2db4c:	1005003a 	cmpeq	r2,r2,zero
   2db50:	1000051e 	bne	r2,zero,2db68 <alt_iic_isr_register+0xb8>
   2db54:	e17ff917 	ldw	r5,-28(fp)
   2db58:	e13ffb17 	ldw	r4,-20(fp)
   2db5c:	002d92c0 	call	2d92c <alt_ic_irq_enable>
   2db60:	e0bfff15 	stw	r2,-4(fp)
   2db64:	00000406 	br	2db78 <alt_iic_isr_register+0xc8>
   2db68:	e17ff917 	ldw	r5,-28(fp)
   2db6c:	e13ffb17 	ldw	r4,-20(fp)
   2db70:	002d9c80 	call	2d9c8 <alt_ic_irq_disable>
   2db74:	e0bfff15 	stw	r2,-4(fp)
   2db78:	e0bfff17 	ldw	r2,-4(fp)
   2db7c:	e0bffa15 	stw	r2,-24(fp)
   2db80:	e0bff817 	ldw	r2,-32(fp)
   2db84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2db88:	e0bff617 	ldw	r2,-40(fp)
   2db8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2db90:	e0bffa17 	ldw	r2,-24(fp)
}
   2db94:	e037883a 	mov	sp,fp
   2db98:	dfc00117 	ldw	ra,4(sp)
   2db9c:	df000017 	ldw	fp,0(sp)
   2dba0:	dec00204 	addi	sp,sp,8
   2dba4:	f800283a 	ret

0002dba8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2dba8:	defff904 	addi	sp,sp,-28
   2dbac:	dfc00615 	stw	ra,24(sp)
   2dbb0:	df000515 	stw	fp,20(sp)
   2dbb4:	df000504 	addi	fp,sp,20
   2dbb8:	e13ffc15 	stw	r4,-16(fp)
   2dbbc:	e17ffd15 	stw	r5,-12(fp)
   2dbc0:	e1bffe15 	stw	r6,-8(fp)
   2dbc4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2dbc8:	e13ffd17 	ldw	r4,-12(fp)
   2dbcc:	e17ffe17 	ldw	r5,-8(fp)
   2dbd0:	e1bfff17 	ldw	r6,-4(fp)
   2dbd4:	002ddc00 	call	2ddc0 <open>
   2dbd8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2dbdc:	e0bffb17 	ldw	r2,-20(fp)
   2dbe0:	1004803a 	cmplt	r2,r2,zero
   2dbe4:	10001c1e 	bne	r2,zero,2dc58 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   2dbe8:	e0bffb17 	ldw	r2,-20(fp)
   2dbec:	00c000f4 	movhi	r3,3
   2dbf0:	18fd6504 	addi	r3,r3,-2668
   2dbf4:	10800324 	muli	r2,r2,12
   2dbf8:	10c5883a 	add	r2,r2,r3
   2dbfc:	10c00017 	ldw	r3,0(r2)
   2dc00:	e0bffc17 	ldw	r2,-16(fp)
   2dc04:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2dc08:	e0bffb17 	ldw	r2,-20(fp)
   2dc0c:	00c000f4 	movhi	r3,3
   2dc10:	18fd6504 	addi	r3,r3,-2668
   2dc14:	10800324 	muli	r2,r2,12
   2dc18:	10c5883a 	add	r2,r2,r3
   2dc1c:	10800104 	addi	r2,r2,4
   2dc20:	10c00017 	ldw	r3,0(r2)
   2dc24:	e0bffc17 	ldw	r2,-16(fp)
   2dc28:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2dc2c:	e0bffb17 	ldw	r2,-20(fp)
   2dc30:	00c000f4 	movhi	r3,3
   2dc34:	18fd6504 	addi	r3,r3,-2668
   2dc38:	10800324 	muli	r2,r2,12
   2dc3c:	10c5883a 	add	r2,r2,r3
   2dc40:	10800204 	addi	r2,r2,8
   2dc44:	10c00017 	ldw	r3,0(r2)
   2dc48:	e0bffc17 	ldw	r2,-16(fp)
   2dc4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2dc50:	e13ffb17 	ldw	r4,-20(fp)
   2dc54:	002c5c40 	call	2c5c4 <alt_release_fd>
  }
} 
   2dc58:	e037883a 	mov	sp,fp
   2dc5c:	dfc00117 	ldw	ra,4(sp)
   2dc60:	df000017 	ldw	fp,0(sp)
   2dc64:	dec00204 	addi	sp,sp,8
   2dc68:	f800283a 	ret

0002dc6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2dc6c:	defffb04 	addi	sp,sp,-20
   2dc70:	dfc00415 	stw	ra,16(sp)
   2dc74:	df000315 	stw	fp,12(sp)
   2dc78:	df000304 	addi	fp,sp,12
   2dc7c:	e13ffd15 	stw	r4,-12(fp)
   2dc80:	e17ffe15 	stw	r5,-8(fp)
   2dc84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2dc88:	010000f4 	movhi	r4,3
   2dc8c:	213d6804 	addi	r4,r4,-2656
   2dc90:	e17ffd17 	ldw	r5,-12(fp)
   2dc94:	01800044 	movi	r6,1
   2dc98:	01c07fc4 	movi	r7,511
   2dc9c:	002dba80 	call	2dba8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2dca0:	010000f4 	movhi	r4,3
   2dca4:	213d6504 	addi	r4,r4,-2668
   2dca8:	e17ffe17 	ldw	r5,-8(fp)
   2dcac:	000d883a 	mov	r6,zero
   2dcb0:	01c07fc4 	movi	r7,511
   2dcb4:	002dba80 	call	2dba8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2dcb8:	010000f4 	movhi	r4,3
   2dcbc:	213d6b04 	addi	r4,r4,-2644
   2dcc0:	e17fff17 	ldw	r5,-4(fp)
   2dcc4:	01800044 	movi	r6,1
   2dcc8:	01c07fc4 	movi	r7,511
   2dccc:	002dba80 	call	2dba8 <alt_open_fd>
}  
   2dcd0:	e037883a 	mov	sp,fp
   2dcd4:	dfc00117 	ldw	ra,4(sp)
   2dcd8:	df000017 	ldw	fp,0(sp)
   2dcdc:	dec00204 	addi	sp,sp,8
   2dce0:	f800283a 	ret

0002dce4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2dce4:	defffc04 	addi	sp,sp,-16
   2dce8:	df000315 	stw	fp,12(sp)
   2dcec:	df000304 	addi	fp,sp,12
   2dcf0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2dcf4:	e0bffe17 	ldw	r2,-8(fp)
   2dcf8:	10800217 	ldw	r2,8(r2)
   2dcfc:	10d00034 	orhi	r3,r2,16384
   2dd00:	e0bffe17 	ldw	r2,-8(fp)
   2dd04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2dd08:	e03ffd15 	stw	zero,-12(fp)
   2dd0c:	00002006 	br	2dd90 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2dd10:	e0bffd17 	ldw	r2,-12(fp)
   2dd14:	00c000f4 	movhi	r3,3
   2dd18:	18fd6504 	addi	r3,r3,-2668
   2dd1c:	10800324 	muli	r2,r2,12
   2dd20:	10c5883a 	add	r2,r2,r3
   2dd24:	10c00017 	ldw	r3,0(r2)
   2dd28:	e0bffe17 	ldw	r2,-8(fp)
   2dd2c:	10800017 	ldw	r2,0(r2)
   2dd30:	1880141e 	bne	r3,r2,2dd84 <alt_file_locked+0xa0>
   2dd34:	e0bffd17 	ldw	r2,-12(fp)
   2dd38:	00c000f4 	movhi	r3,3
   2dd3c:	18fd6504 	addi	r3,r3,-2668
   2dd40:	10800324 	muli	r2,r2,12
   2dd44:	10c5883a 	add	r2,r2,r3
   2dd48:	10800204 	addi	r2,r2,8
   2dd4c:	10800017 	ldw	r2,0(r2)
   2dd50:	1004403a 	cmpge	r2,r2,zero
   2dd54:	10000b1e 	bne	r2,zero,2dd84 <alt_file_locked+0xa0>
   2dd58:	e0bffd17 	ldw	r2,-12(fp)
   2dd5c:	10800324 	muli	r2,r2,12
   2dd60:	1007883a 	mov	r3,r2
   2dd64:	008000f4 	movhi	r2,3
   2dd68:	10bd6504 	addi	r2,r2,-2668
   2dd6c:	1887883a 	add	r3,r3,r2
   2dd70:	e0bffe17 	ldw	r2,-8(fp)
   2dd74:	18800326 	beq	r3,r2,2dd84 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2dd78:	00bffcc4 	movi	r2,-13
   2dd7c:	e0bfff15 	stw	r2,-4(fp)
   2dd80:	00000a06 	br	2ddac <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2dd84:	e0bffd17 	ldw	r2,-12(fp)
   2dd88:	10800044 	addi	r2,r2,1
   2dd8c:	e0bffd15 	stw	r2,-12(fp)
   2dd90:	008000f4 	movhi	r2,3
   2dd94:	1081e704 	addi	r2,r2,1948
   2dd98:	10800017 	ldw	r2,0(r2)
   2dd9c:	1007883a 	mov	r3,r2
   2dda0:	e0bffd17 	ldw	r2,-12(fp)
   2dda4:	18bfda2e 	bgeu	r3,r2,2dd10 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2dda8:	e03fff15 	stw	zero,-4(fp)
   2ddac:	e0bfff17 	ldw	r2,-4(fp)
}
   2ddb0:	e037883a 	mov	sp,fp
   2ddb4:	df000017 	ldw	fp,0(sp)
   2ddb8:	dec00104 	addi	sp,sp,4
   2ddbc:	f800283a 	ret

0002ddc0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2ddc0:	defff404 	addi	sp,sp,-48
   2ddc4:	dfc00b15 	stw	ra,44(sp)
   2ddc8:	df000a15 	stw	fp,40(sp)
   2ddcc:	df000a04 	addi	fp,sp,40
   2ddd0:	e13ffb15 	stw	r4,-20(fp)
   2ddd4:	e17ffc15 	stw	r5,-16(fp)
   2ddd8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2dddc:	00bfffc4 	movi	r2,-1
   2dde0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   2dde4:	00bffb44 	movi	r2,-19
   2dde8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   2ddec:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2ddf0:	e13ffb17 	ldw	r4,-20(fp)
   2ddf4:	014000f4 	movhi	r5,3
   2ddf8:	2941e504 	addi	r5,r5,1940
   2ddfc:	002dfc80 	call	2dfc8 <alt_find_dev>
   2de00:	e0bffa15 	stw	r2,-24(fp)
   2de04:	e0bffa17 	ldw	r2,-24(fp)
   2de08:	1004c03a 	cmpne	r2,r2,zero
   2de0c:	1000051e 	bne	r2,zero,2de24 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2de10:	e13ffb17 	ldw	r4,-20(fp)
   2de14:	002e05c0 	call	2e05c <alt_find_file>
   2de18:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   2de1c:	00800044 	movi	r2,1
   2de20:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2de24:	e0bffa17 	ldw	r2,-24(fp)
   2de28:	1005003a 	cmpeq	r2,r2,zero
   2de2c:	1000301e 	bne	r2,zero,2def0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2de30:	e13ffa17 	ldw	r4,-24(fp)
   2de34:	002e17c0 	call	2e17c <alt_get_fd>
   2de38:	e0bff815 	stw	r2,-32(fp)
   2de3c:	e0bff817 	ldw	r2,-32(fp)
   2de40:	1004403a 	cmpge	r2,r2,zero
   2de44:	1000031e 	bne	r2,zero,2de54 <open+0x94>
    {
      status = index;
   2de48:	e0bff817 	ldw	r2,-32(fp)
   2de4c:	e0bff715 	stw	r2,-36(fp)
   2de50:	00002906 	br	2def8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   2de54:	e0bff817 	ldw	r2,-32(fp)
   2de58:	10800324 	muli	r2,r2,12
   2de5c:	1007883a 	mov	r3,r2
   2de60:	008000f4 	movhi	r2,3
   2de64:	10bd6504 	addi	r2,r2,-2668
   2de68:	1885883a 	add	r2,r3,r2
   2de6c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2de70:	e0fffc17 	ldw	r3,-16(fp)
   2de74:	00900034 	movhi	r2,16384
   2de78:	10bfffc4 	addi	r2,r2,-1
   2de7c:	1886703a 	and	r3,r3,r2
   2de80:	e0bff917 	ldw	r2,-28(fp)
   2de84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2de88:	e0bff617 	ldw	r2,-40(fp)
   2de8c:	1004c03a 	cmpne	r2,r2,zero
   2de90:	1000061e 	bne	r2,zero,2deac <open+0xec>
   2de94:	e13ff917 	ldw	r4,-28(fp)
   2de98:	002dce40 	call	2dce4 <alt_file_locked>
   2de9c:	e0bff715 	stw	r2,-36(fp)
   2dea0:	e0bff717 	ldw	r2,-36(fp)
   2dea4:	1004803a 	cmplt	r2,r2,zero
   2dea8:	1000131e 	bne	r2,zero,2def8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2deac:	e0bffa17 	ldw	r2,-24(fp)
   2deb0:	10800317 	ldw	r2,12(r2)
   2deb4:	1005003a 	cmpeq	r2,r2,zero
   2deb8:	1000091e 	bne	r2,zero,2dee0 <open+0x120>
   2debc:	e0bffa17 	ldw	r2,-24(fp)
   2dec0:	10800317 	ldw	r2,12(r2)
   2dec4:	e13ff917 	ldw	r4,-28(fp)
   2dec8:	e17ffb17 	ldw	r5,-20(fp)
   2decc:	e1bffc17 	ldw	r6,-16(fp)
   2ded0:	e1fffd17 	ldw	r7,-12(fp)
   2ded4:	103ee83a 	callr	r2
   2ded8:	e0bfff15 	stw	r2,-4(fp)
   2dedc:	00000106 	br	2dee4 <open+0x124>
   2dee0:	e03fff15 	stw	zero,-4(fp)
   2dee4:	e0bfff17 	ldw	r2,-4(fp)
   2dee8:	e0bff715 	stw	r2,-36(fp)
   2deec:	00000206 	br	2def8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2def0:	00bffb44 	movi	r2,-19
   2def4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2def8:	e0bff717 	ldw	r2,-36(fp)
   2defc:	1004403a 	cmpge	r2,r2,zero
   2df00:	1000091e 	bne	r2,zero,2df28 <open+0x168>
  {
    alt_release_fd (index);  
   2df04:	e13ff817 	ldw	r4,-32(fp)
   2df08:	002c5c40 	call	2c5c4 <alt_release_fd>
    ALT_ERRNO = -status;
   2df0c:	002df480 	call	2df48 <alt_get_errno>
   2df10:	e0fff717 	ldw	r3,-36(fp)
   2df14:	00c7c83a 	sub	r3,zero,r3
   2df18:	10c00015 	stw	r3,0(r2)
    return -1;
   2df1c:	00bfffc4 	movi	r2,-1
   2df20:	e0bffe15 	stw	r2,-8(fp)
   2df24:	00000206 	br	2df30 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   2df28:	e0bff817 	ldw	r2,-32(fp)
   2df2c:	e0bffe15 	stw	r2,-8(fp)
   2df30:	e0bffe17 	ldw	r2,-8(fp)
}
   2df34:	e037883a 	mov	sp,fp
   2df38:	dfc00117 	ldw	ra,4(sp)
   2df3c:	df000017 	ldw	fp,0(sp)
   2df40:	dec00204 	addi	sp,sp,8
   2df44:	f800283a 	ret

0002df48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2df48:	defffd04 	addi	sp,sp,-12
   2df4c:	dfc00215 	stw	ra,8(sp)
   2df50:	df000115 	stw	fp,4(sp)
   2df54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2df58:	008000f4 	movhi	r2,3
   2df5c:	1081e804 	addi	r2,r2,1952
   2df60:	10800017 	ldw	r2,0(r2)
   2df64:	1005003a 	cmpeq	r2,r2,zero
   2df68:	1000061e 	bne	r2,zero,2df84 <alt_get_errno+0x3c>
   2df6c:	008000f4 	movhi	r2,3
   2df70:	1081e804 	addi	r2,r2,1952
   2df74:	10800017 	ldw	r2,0(r2)
   2df78:	103ee83a 	callr	r2
   2df7c:	e0bfff15 	stw	r2,-4(fp)
   2df80:	00000306 	br	2df90 <alt_get_errno+0x48>
   2df84:	008000f4 	movhi	r2,3
   2df88:	10888804 	addi	r2,r2,8736
   2df8c:	e0bfff15 	stw	r2,-4(fp)
   2df90:	e0bfff17 	ldw	r2,-4(fp)
}
   2df94:	e037883a 	mov	sp,fp
   2df98:	dfc00117 	ldw	ra,4(sp)
   2df9c:	df000017 	ldw	fp,0(sp)
   2dfa0:	dec00204 	addi	sp,sp,8
   2dfa4:	f800283a 	ret

0002dfa8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2dfa8:	deffff04 	addi	sp,sp,-4
   2dfac:	df000015 	stw	fp,0(sp)
   2dfb0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2dfb4:	000170fa 	wrctl	ienable,zero
}
   2dfb8:	e037883a 	mov	sp,fp
   2dfbc:	df000017 	ldw	fp,0(sp)
   2dfc0:	dec00104 	addi	sp,sp,4
   2dfc4:	f800283a 	ret

0002dfc8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2dfc8:	defff904 	addi	sp,sp,-28
   2dfcc:	dfc00615 	stw	ra,24(sp)
   2dfd0:	df000515 	stw	fp,20(sp)
   2dfd4:	df000504 	addi	fp,sp,20
   2dfd8:	e13ffd15 	stw	r4,-12(fp)
   2dfdc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2dfe0:	e0bffe17 	ldw	r2,-8(fp)
   2dfe4:	10800017 	ldw	r2,0(r2)
   2dfe8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2dfec:	e13ffd17 	ldw	r4,-12(fp)
   2dff0:	002a66c0 	call	2a66c <strlen>
   2dff4:	10800044 	addi	r2,r2,1
   2dff8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2dffc:	00000d06 	br	2e034 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2e000:	e0bffc17 	ldw	r2,-16(fp)
   2e004:	11000217 	ldw	r4,8(r2)
   2e008:	e1bffb17 	ldw	r6,-20(fp)
   2e00c:	e17ffd17 	ldw	r5,-12(fp)
   2e010:	002e3100 	call	2e310 <memcmp>
   2e014:	1004c03a 	cmpne	r2,r2,zero
   2e018:	1000031e 	bne	r2,zero,2e028 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2e01c:	e0bffc17 	ldw	r2,-16(fp)
   2e020:	e0bfff15 	stw	r2,-4(fp)
   2e024:	00000706 	br	2e044 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2e028:	e0bffc17 	ldw	r2,-16(fp)
   2e02c:	10800017 	ldw	r2,0(r2)
   2e030:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2e034:	e0fffe17 	ldw	r3,-8(fp)
   2e038:	e0bffc17 	ldw	r2,-16(fp)
   2e03c:	10fff01e 	bne	r2,r3,2e000 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2e040:	e03fff15 	stw	zero,-4(fp)
   2e044:	e0bfff17 	ldw	r2,-4(fp)
}
   2e048:	e037883a 	mov	sp,fp
   2e04c:	dfc00117 	ldw	ra,4(sp)
   2e050:	df000017 	ldw	fp,0(sp)
   2e054:	dec00204 	addi	sp,sp,8
   2e058:	f800283a 	ret

0002e05c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2e05c:	defffa04 	addi	sp,sp,-24
   2e060:	dfc00515 	stw	ra,20(sp)
   2e064:	df000415 	stw	fp,16(sp)
   2e068:	df000404 	addi	fp,sp,16
   2e06c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2e070:	008000f4 	movhi	r2,3
   2e074:	1081e304 	addi	r2,r2,1932
   2e078:	10800017 	ldw	r2,0(r2)
   2e07c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2e080:	00003306 	br	2e150 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   2e084:	e0bffd17 	ldw	r2,-12(fp)
   2e088:	11000217 	ldw	r4,8(r2)
   2e08c:	002a66c0 	call	2a66c <strlen>
   2e090:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   2e094:	e0bffd17 	ldw	r2,-12(fp)
   2e098:	10c00217 	ldw	r3,8(r2)
   2e09c:	e0bffc17 	ldw	r2,-16(fp)
   2e0a0:	1885883a 	add	r2,r3,r2
   2e0a4:	10bfffc4 	addi	r2,r2,-1
   2e0a8:	10800003 	ldbu	r2,0(r2)
   2e0ac:	10803fcc 	andi	r2,r2,255
   2e0b0:	1080201c 	xori	r2,r2,128
   2e0b4:	10bfe004 	addi	r2,r2,-128
   2e0b8:	10800bd8 	cmpnei	r2,r2,47
   2e0bc:	1000031e 	bne	r2,zero,2e0cc <alt_find_file+0x70>
    {
      len -= 1;
   2e0c0:	e0bffc17 	ldw	r2,-16(fp)
   2e0c4:	10bfffc4 	addi	r2,r2,-1
   2e0c8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2e0cc:	e0bffc17 	ldw	r2,-16(fp)
   2e0d0:	1007883a 	mov	r3,r2
   2e0d4:	e0bffe17 	ldw	r2,-8(fp)
   2e0d8:	1885883a 	add	r2,r3,r2
   2e0dc:	10800003 	ldbu	r2,0(r2)
   2e0e0:	10803fcc 	andi	r2,r2,255
   2e0e4:	1080201c 	xori	r2,r2,128
   2e0e8:	10bfe004 	addi	r2,r2,-128
   2e0ec:	10800be0 	cmpeqi	r2,r2,47
   2e0f0:	10000a1e 	bne	r2,zero,2e11c <alt_find_file+0xc0>
   2e0f4:	e0bffc17 	ldw	r2,-16(fp)
   2e0f8:	1007883a 	mov	r3,r2
   2e0fc:	e0bffe17 	ldw	r2,-8(fp)
   2e100:	1885883a 	add	r2,r3,r2
   2e104:	10800003 	ldbu	r2,0(r2)
   2e108:	10803fcc 	andi	r2,r2,255
   2e10c:	1080201c 	xori	r2,r2,128
   2e110:	10bfe004 	addi	r2,r2,-128
   2e114:	1004c03a 	cmpne	r2,r2,zero
   2e118:	10000a1e 	bne	r2,zero,2e144 <alt_find_file+0xe8>
   2e11c:	e0bffd17 	ldw	r2,-12(fp)
   2e120:	11000217 	ldw	r4,8(r2)
   2e124:	e1bffc17 	ldw	r6,-16(fp)
   2e128:	e17ffe17 	ldw	r5,-8(fp)
   2e12c:	002e3100 	call	2e310 <memcmp>
   2e130:	1004c03a 	cmpne	r2,r2,zero
   2e134:	1000031e 	bne	r2,zero,2e144 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2e138:	e0bffd17 	ldw	r2,-12(fp)
   2e13c:	e0bfff15 	stw	r2,-4(fp)
   2e140:	00000806 	br	2e164 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   2e144:	e0bffd17 	ldw	r2,-12(fp)
   2e148:	10800017 	ldw	r2,0(r2)
   2e14c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2e150:	00c000f4 	movhi	r3,3
   2e154:	18c1e304 	addi	r3,r3,1932
   2e158:	e0bffd17 	ldw	r2,-12(fp)
   2e15c:	10ffc91e 	bne	r2,r3,2e084 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2e160:	e03fff15 	stw	zero,-4(fp)
   2e164:	e0bfff17 	ldw	r2,-4(fp)
}
   2e168:	e037883a 	mov	sp,fp
   2e16c:	dfc00117 	ldw	ra,4(sp)
   2e170:	df000017 	ldw	fp,0(sp)
   2e174:	dec00204 	addi	sp,sp,8
   2e178:	f800283a 	ret

0002e17c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2e17c:	defffc04 	addi	sp,sp,-16
   2e180:	df000315 	stw	fp,12(sp)
   2e184:	df000304 	addi	fp,sp,12
   2e188:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2e18c:	00bffa04 	movi	r2,-24
   2e190:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2e194:	e03ffe15 	stw	zero,-8(fp)
   2e198:	00001e06 	br	2e214 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   2e19c:	e0bffe17 	ldw	r2,-8(fp)
   2e1a0:	00c000f4 	movhi	r3,3
   2e1a4:	18fd6504 	addi	r3,r3,-2668
   2e1a8:	10800324 	muli	r2,r2,12
   2e1ac:	10c5883a 	add	r2,r2,r3
   2e1b0:	10800017 	ldw	r2,0(r2)
   2e1b4:	1004c03a 	cmpne	r2,r2,zero
   2e1b8:	1000131e 	bne	r2,zero,2e208 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   2e1bc:	e0bffe17 	ldw	r2,-8(fp)
   2e1c0:	00c000f4 	movhi	r3,3
   2e1c4:	18fd6504 	addi	r3,r3,-2668
   2e1c8:	10800324 	muli	r2,r2,12
   2e1cc:	10c7883a 	add	r3,r2,r3
   2e1d0:	e0bfff17 	ldw	r2,-4(fp)
   2e1d4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   2e1d8:	008000f4 	movhi	r2,3
   2e1dc:	1081e704 	addi	r2,r2,1948
   2e1e0:	10c00017 	ldw	r3,0(r2)
   2e1e4:	e0bffe17 	ldw	r2,-8(fp)
   2e1e8:	1880040e 	bge	r3,r2,2e1fc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   2e1ec:	00c000f4 	movhi	r3,3
   2e1f0:	18c1e704 	addi	r3,r3,1948
   2e1f4:	e0bffe17 	ldw	r2,-8(fp)
   2e1f8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   2e1fc:	e0bffe17 	ldw	r2,-8(fp)
   2e200:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2e204:	00000606 	br	2e220 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2e208:	e0bffe17 	ldw	r2,-8(fp)
   2e20c:	10800044 	addi	r2,r2,1
   2e210:	e0bffe15 	stw	r2,-8(fp)
   2e214:	e0bffe17 	ldw	r2,-8(fp)
   2e218:	10800810 	cmplti	r2,r2,32
   2e21c:	103fdf1e 	bne	r2,zero,2e19c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2e220:	e0bffd17 	ldw	r2,-12(fp)
}
   2e224:	e037883a 	mov	sp,fp
   2e228:	df000017 	ldw	fp,0(sp)
   2e22c:	dec00104 	addi	sp,sp,4
   2e230:	f800283a 	ret

0002e234 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2e234:	defffb04 	addi	sp,sp,-20
   2e238:	df000415 	stw	fp,16(sp)
   2e23c:	df000404 	addi	fp,sp,16
   2e240:	e13ffe15 	stw	r4,-8(fp)
   2e244:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2e248:	e0bfff17 	ldw	r2,-4(fp)
   2e24c:	10840070 	cmpltui	r2,r2,4097
   2e250:	1000021e 	bne	r2,zero,2e25c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2e254:	00840004 	movi	r2,4096
   2e258:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2e25c:	e0fffe17 	ldw	r3,-8(fp)
   2e260:	e0bfff17 	ldw	r2,-4(fp)
   2e264:	1885883a 	add	r2,r3,r2
   2e268:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2e26c:	e0bffe17 	ldw	r2,-8(fp)
   2e270:	e0bffd15 	stw	r2,-12(fp)
   2e274:	00000506 	br	2e28c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2e278:	e0bffd17 	ldw	r2,-12(fp)
   2e27c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2e280:	e0bffd17 	ldw	r2,-12(fp)
   2e284:	10800804 	addi	r2,r2,32
   2e288:	e0bffd15 	stw	r2,-12(fp)
   2e28c:	e0fffd17 	ldw	r3,-12(fp)
   2e290:	e0bffc17 	ldw	r2,-16(fp)
   2e294:	18bff836 	bltu	r3,r2,2e278 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2e298:	e0bffe17 	ldw	r2,-8(fp)
   2e29c:	108007cc 	andi	r2,r2,31
   2e2a0:	1005003a 	cmpeq	r2,r2,zero
   2e2a4:	1000021e 	bne	r2,zero,2e2b0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2e2a8:	e0bffd17 	ldw	r2,-12(fp)
   2e2ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2e2b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2e2b4:	e037883a 	mov	sp,fp
   2e2b8:	df000017 	ldw	fp,0(sp)
   2e2bc:	dec00104 	addi	sp,sp,4
   2e2c0:	f800283a 	ret

0002e2c4 <atexit>:
   2e2c4:	200b883a 	mov	r5,r4
   2e2c8:	000d883a 	mov	r6,zero
   2e2cc:	0009883a 	mov	r4,zero
   2e2d0:	000f883a 	mov	r7,zero
   2e2d4:	002e3841 	jmpi	2e384 <__register_exitproc>

0002e2d8 <exit>:
   2e2d8:	defffe04 	addi	sp,sp,-8
   2e2dc:	000b883a 	mov	r5,zero
   2e2e0:	dc000015 	stw	r16,0(sp)
   2e2e4:	dfc00115 	stw	ra,4(sp)
   2e2e8:	2021883a 	mov	r16,r4
   2e2ec:	002e4bc0 	call	2e4bc <__call_exitprocs>
   2e2f0:	008000f4 	movhi	r2,3
   2e2f4:	1081e004 	addi	r2,r2,1920
   2e2f8:	11000017 	ldw	r4,0(r2)
   2e2fc:	20800f17 	ldw	r2,60(r4)
   2e300:	10000126 	beq	r2,zero,2e308 <exit+0x30>
   2e304:	103ee83a 	callr	r2
   2e308:	8009883a 	mov	r4,r16
   2e30c:	002e6ac0 	call	2e6ac <_exit>

0002e310 <memcmp>:
   2e310:	00c000c4 	movi	r3,3
   2e314:	1980032e 	bgeu	r3,r6,2e324 <memcmp+0x14>
   2e318:	2144b03a 	or	r2,r4,r5
   2e31c:	10c4703a 	and	r2,r2,r3
   2e320:	10000f26 	beq	r2,zero,2e360 <memcmp+0x50>
   2e324:	31ffffc4 	addi	r7,r6,-1
   2e328:	3000061e 	bne	r6,zero,2e344 <memcmp+0x34>
   2e32c:	00000a06 	br	2e358 <memcmp+0x48>
   2e330:	39ffffc4 	addi	r7,r7,-1
   2e334:	00bfffc4 	movi	r2,-1
   2e338:	21000044 	addi	r4,r4,1
   2e33c:	29400044 	addi	r5,r5,1
   2e340:	38800526 	beq	r7,r2,2e358 <memcmp+0x48>
   2e344:	20c00003 	ldbu	r3,0(r4)
   2e348:	28800003 	ldbu	r2,0(r5)
   2e34c:	18bff826 	beq	r3,r2,2e330 <memcmp+0x20>
   2e350:	1885c83a 	sub	r2,r3,r2
   2e354:	f800283a 	ret
   2e358:	0005883a 	mov	r2,zero
   2e35c:	f800283a 	ret
   2e360:	180f883a 	mov	r7,r3
   2e364:	20c00017 	ldw	r3,0(r4)
   2e368:	28800017 	ldw	r2,0(r5)
   2e36c:	18bfed1e 	bne	r3,r2,2e324 <memcmp+0x14>
   2e370:	31bfff04 	addi	r6,r6,-4
   2e374:	21000104 	addi	r4,r4,4
   2e378:	29400104 	addi	r5,r5,4
   2e37c:	39bff936 	bltu	r7,r6,2e364 <memcmp+0x54>
   2e380:	003fe806 	br	2e324 <memcmp+0x14>

0002e384 <__register_exitproc>:
   2e384:	defffa04 	addi	sp,sp,-24
   2e388:	008000f4 	movhi	r2,3
   2e38c:	1081e004 	addi	r2,r2,1920
   2e390:	dc000015 	stw	r16,0(sp)
   2e394:	14000017 	ldw	r16,0(r2)
   2e398:	dd000415 	stw	r20,16(sp)
   2e39c:	2829883a 	mov	r20,r5
   2e3a0:	81405217 	ldw	r5,328(r16)
   2e3a4:	dcc00315 	stw	r19,12(sp)
   2e3a8:	dc800215 	stw	r18,8(sp)
   2e3ac:	dc400115 	stw	r17,4(sp)
   2e3b0:	dfc00515 	stw	ra,20(sp)
   2e3b4:	2023883a 	mov	r17,r4
   2e3b8:	3027883a 	mov	r19,r6
   2e3bc:	3825883a 	mov	r18,r7
   2e3c0:	28002526 	beq	r5,zero,2e458 <__register_exitproc+0xd4>
   2e3c4:	29000117 	ldw	r4,4(r5)
   2e3c8:	008007c4 	movi	r2,31
   2e3cc:	11002716 	blt	r2,r4,2e46c <__register_exitproc+0xe8>
   2e3d0:	8800101e 	bne	r17,zero,2e414 <__register_exitproc+0x90>
   2e3d4:	2105883a 	add	r2,r4,r4
   2e3d8:	1085883a 	add	r2,r2,r2
   2e3dc:	20c00044 	addi	r3,r4,1
   2e3e0:	1145883a 	add	r2,r2,r5
   2e3e4:	0009883a 	mov	r4,zero
   2e3e8:	15000215 	stw	r20,8(r2)
   2e3ec:	28c00115 	stw	r3,4(r5)
   2e3f0:	2005883a 	mov	r2,r4
   2e3f4:	dfc00517 	ldw	ra,20(sp)
   2e3f8:	dd000417 	ldw	r20,16(sp)
   2e3fc:	dcc00317 	ldw	r19,12(sp)
   2e400:	dc800217 	ldw	r18,8(sp)
   2e404:	dc400117 	ldw	r17,4(sp)
   2e408:	dc000017 	ldw	r16,0(sp)
   2e40c:	dec00604 	addi	sp,sp,24
   2e410:	f800283a 	ret
   2e414:	29802204 	addi	r6,r5,136
   2e418:	00800044 	movi	r2,1
   2e41c:	110e983a 	sll	r7,r2,r4
   2e420:	30c04017 	ldw	r3,256(r6)
   2e424:	2105883a 	add	r2,r4,r4
   2e428:	1085883a 	add	r2,r2,r2
   2e42c:	1185883a 	add	r2,r2,r6
   2e430:	19c6b03a 	or	r3,r3,r7
   2e434:	14802015 	stw	r18,128(r2)
   2e438:	14c00015 	stw	r19,0(r2)
   2e43c:	00800084 	movi	r2,2
   2e440:	30c04015 	stw	r3,256(r6)
   2e444:	88bfe31e 	bne	r17,r2,2e3d4 <__register_exitproc+0x50>
   2e448:	30804117 	ldw	r2,260(r6)
   2e44c:	11c4b03a 	or	r2,r2,r7
   2e450:	30804115 	stw	r2,260(r6)
   2e454:	003fdf06 	br	2e3d4 <__register_exitproc+0x50>
   2e458:	008000f4 	movhi	r2,3
   2e45c:	1088e004 	addi	r2,r2,9088
   2e460:	100b883a 	mov	r5,r2
   2e464:	80805215 	stw	r2,328(r16)
   2e468:	003fd606 	br	2e3c4 <__register_exitproc+0x40>
   2e46c:	008000b4 	movhi	r2,2
   2e470:	108de704 	addi	r2,r2,14236
   2e474:	1000021e 	bne	r2,zero,2e480 <__register_exitproc+0xfc>
   2e478:	013fffc4 	movi	r4,-1
   2e47c:	003fdc06 	br	2e3f0 <__register_exitproc+0x6c>
   2e480:	01006404 	movi	r4,400
   2e484:	103ee83a 	callr	r2
   2e488:	1007883a 	mov	r3,r2
   2e48c:	103ffa26 	beq	r2,zero,2e478 <__register_exitproc+0xf4>
   2e490:	80805217 	ldw	r2,328(r16)
   2e494:	180b883a 	mov	r5,r3
   2e498:	18000115 	stw	zero,4(r3)
   2e49c:	18800015 	stw	r2,0(r3)
   2e4a0:	80c05215 	stw	r3,328(r16)
   2e4a4:	18006215 	stw	zero,392(r3)
   2e4a8:	18006315 	stw	zero,396(r3)
   2e4ac:	0009883a 	mov	r4,zero
   2e4b0:	883fc826 	beq	r17,zero,2e3d4 <__register_exitproc+0x50>
   2e4b4:	003fd706 	br	2e414 <__register_exitproc+0x90>

0002e4b8 <register_fini>:
   2e4b8:	f800283a 	ret

0002e4bc <__call_exitprocs>:
   2e4bc:	008000f4 	movhi	r2,3
   2e4c0:	1081e004 	addi	r2,r2,1920
   2e4c4:	10800017 	ldw	r2,0(r2)
   2e4c8:	defff304 	addi	sp,sp,-52
   2e4cc:	df000b15 	stw	fp,44(sp)
   2e4d0:	d8800115 	stw	r2,4(sp)
   2e4d4:	008000b4 	movhi	r2,2
   2e4d8:	108de204 	addi	r2,r2,14216
   2e4dc:	1005003a 	cmpeq	r2,r2,zero
   2e4e0:	d8800215 	stw	r2,8(sp)
   2e4e4:	d8800117 	ldw	r2,4(sp)
   2e4e8:	dd400815 	stw	r21,32(sp)
   2e4ec:	dd000715 	stw	r20,28(sp)
   2e4f0:	10805204 	addi	r2,r2,328
   2e4f4:	dfc00c15 	stw	ra,48(sp)
   2e4f8:	ddc00a15 	stw	r23,40(sp)
   2e4fc:	dd800915 	stw	r22,36(sp)
   2e500:	dcc00615 	stw	r19,24(sp)
   2e504:	dc800515 	stw	r18,20(sp)
   2e508:	dc400415 	stw	r17,16(sp)
   2e50c:	dc000315 	stw	r16,12(sp)
   2e510:	282b883a 	mov	r21,r5
   2e514:	2039883a 	mov	fp,r4
   2e518:	d8800015 	stw	r2,0(sp)
   2e51c:	2829003a 	cmpeq	r20,r5,zero
   2e520:	d8800117 	ldw	r2,4(sp)
   2e524:	14405217 	ldw	r17,328(r2)
   2e528:	88001026 	beq	r17,zero,2e56c <__call_exitprocs+0xb0>
   2e52c:	ddc00017 	ldw	r23,0(sp)
   2e530:	88800117 	ldw	r2,4(r17)
   2e534:	8c802204 	addi	r18,r17,136
   2e538:	143fffc4 	addi	r16,r2,-1
   2e53c:	80000916 	blt	r16,zero,2e564 <__call_exitprocs+0xa8>
   2e540:	05bfffc4 	movi	r22,-1
   2e544:	a000151e 	bne	r20,zero,2e59c <__call_exitprocs+0xe0>
   2e548:	8409883a 	add	r4,r16,r16
   2e54c:	2105883a 	add	r2,r4,r4
   2e550:	1485883a 	add	r2,r2,r18
   2e554:	10c02017 	ldw	r3,128(r2)
   2e558:	a8c01126 	beq	r21,r3,2e5a0 <__call_exitprocs+0xe4>
   2e55c:	843fffc4 	addi	r16,r16,-1
   2e560:	85bff81e 	bne	r16,r22,2e544 <__call_exitprocs+0x88>
   2e564:	d8800217 	ldw	r2,8(sp)
   2e568:	10003126 	beq	r2,zero,2e630 <__call_exitprocs+0x174>
   2e56c:	dfc00c17 	ldw	ra,48(sp)
   2e570:	df000b17 	ldw	fp,44(sp)
   2e574:	ddc00a17 	ldw	r23,40(sp)
   2e578:	dd800917 	ldw	r22,36(sp)
   2e57c:	dd400817 	ldw	r21,32(sp)
   2e580:	dd000717 	ldw	r20,28(sp)
   2e584:	dcc00617 	ldw	r19,24(sp)
   2e588:	dc800517 	ldw	r18,20(sp)
   2e58c:	dc400417 	ldw	r17,16(sp)
   2e590:	dc000317 	ldw	r16,12(sp)
   2e594:	dec00d04 	addi	sp,sp,52
   2e598:	f800283a 	ret
   2e59c:	8409883a 	add	r4,r16,r16
   2e5a0:	88c00117 	ldw	r3,4(r17)
   2e5a4:	2105883a 	add	r2,r4,r4
   2e5a8:	1445883a 	add	r2,r2,r17
   2e5ac:	18ffffc4 	addi	r3,r3,-1
   2e5b0:	11800217 	ldw	r6,8(r2)
   2e5b4:	1c001526 	beq	r3,r16,2e60c <__call_exitprocs+0x150>
   2e5b8:	10000215 	stw	zero,8(r2)
   2e5bc:	303fe726 	beq	r6,zero,2e55c <__call_exitprocs+0xa0>
   2e5c0:	00c00044 	movi	r3,1
   2e5c4:	1c06983a 	sll	r3,r3,r16
   2e5c8:	90804017 	ldw	r2,256(r18)
   2e5cc:	8cc00117 	ldw	r19,4(r17)
   2e5d0:	1884703a 	and	r2,r3,r2
   2e5d4:	10001426 	beq	r2,zero,2e628 <__call_exitprocs+0x16c>
   2e5d8:	90804117 	ldw	r2,260(r18)
   2e5dc:	1884703a 	and	r2,r3,r2
   2e5e0:	10000c1e 	bne	r2,zero,2e614 <__call_exitprocs+0x158>
   2e5e4:	2105883a 	add	r2,r4,r4
   2e5e8:	1485883a 	add	r2,r2,r18
   2e5ec:	11400017 	ldw	r5,0(r2)
   2e5f0:	e009883a 	mov	r4,fp
   2e5f4:	303ee83a 	callr	r6
   2e5f8:	88800117 	ldw	r2,4(r17)
   2e5fc:	98bfc81e 	bne	r19,r2,2e520 <__call_exitprocs+0x64>
   2e600:	b8800017 	ldw	r2,0(r23)
   2e604:	147fd526 	beq	r2,r17,2e55c <__call_exitprocs+0xa0>
   2e608:	003fc506 	br	2e520 <__call_exitprocs+0x64>
   2e60c:	8c000115 	stw	r16,4(r17)
   2e610:	003fea06 	br	2e5bc <__call_exitprocs+0x100>
   2e614:	2105883a 	add	r2,r4,r4
   2e618:	1485883a 	add	r2,r2,r18
   2e61c:	11000017 	ldw	r4,0(r2)
   2e620:	303ee83a 	callr	r6
   2e624:	003ff406 	br	2e5f8 <__call_exitprocs+0x13c>
   2e628:	303ee83a 	callr	r6
   2e62c:	003ff206 	br	2e5f8 <__call_exitprocs+0x13c>
   2e630:	88800117 	ldw	r2,4(r17)
   2e634:	1000081e 	bne	r2,zero,2e658 <__call_exitprocs+0x19c>
   2e638:	89000017 	ldw	r4,0(r17)
   2e63c:	20000726 	beq	r4,zero,2e65c <__call_exitprocs+0x1a0>
   2e640:	b9000015 	stw	r4,0(r23)
   2e644:	8809883a 	mov	r4,r17
   2e648:	00237880 	call	23788 <free>
   2e64c:	bc400017 	ldw	r17,0(r23)
   2e650:	883fb71e 	bne	r17,zero,2e530 <__call_exitprocs+0x74>
   2e654:	003fc506 	br	2e56c <__call_exitprocs+0xb0>
   2e658:	89000017 	ldw	r4,0(r17)
   2e65c:	882f883a 	mov	r23,r17
   2e660:	2023883a 	mov	r17,r4
   2e664:	883fb21e 	bne	r17,zero,2e530 <__call_exitprocs+0x74>
   2e668:	003fc006 	br	2e56c <__call_exitprocs+0xb0>

0002e66c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   2e66c:	defffd04 	addi	sp,sp,-12
   2e670:	df000215 	stw	fp,8(sp)
   2e674:	df000204 	addi	fp,sp,8
   2e678:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   2e67c:	e0bfff17 	ldw	r2,-4(fp)
   2e680:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2e684:	e0bffe17 	ldw	r2,-8(fp)
   2e688:	1005003a 	cmpeq	r2,r2,zero
   2e68c:	1000021e 	bne	r2,zero,2e698 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   2e690:	002af070 	cmpltui	zero,zero,43969
   2e694:	00000106 	br	2e69c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   2e698:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   2e69c:	e037883a 	mov	sp,fp
   2e6a0:	df000017 	ldw	fp,0(sp)
   2e6a4:	dec00104 	addi	sp,sp,4
   2e6a8:	f800283a 	ret

0002e6ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2e6ac:	defffd04 	addi	sp,sp,-12
   2e6b0:	dfc00215 	stw	ra,8(sp)
   2e6b4:	df000115 	stw	fp,4(sp)
   2e6b8:	df000104 	addi	fp,sp,4
   2e6bc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   2e6c0:	e13fff17 	ldw	r4,-4(fp)
   2e6c4:	002e66c0 	call	2e66c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2e6c8:	003fff06 	br	2e6c8 <_exit+0x1c>
   2e6cc:	0002e4b8 	rdprs	zero,zero,2962
