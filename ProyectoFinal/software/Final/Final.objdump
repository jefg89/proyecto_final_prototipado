
Final.elf:     file format elf32-littlenios2
Final.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000041b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002970 memsz 0x00002970 flags r-x
    LOAD off    0x00003990 vaddr 0x00006990 paddr 0x00006c74 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00003f58 vaddr 0x00006f58 paddr 0x00006f58 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002790  000041b4  000041b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00006944  00006944  00003944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00006990  00006c74  00003990  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00006f58  00006f58  00003f58  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003c74  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000598  00000000  00000000  00003ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007e6  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009f16  00000000  00000000  00004a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027f5  00000000  00000000  0000e934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006707  00000000  00000000  00011129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000092c  00000000  00000000  00017830  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e59  00000000  00000000  0001815c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000018f8  00000000  00000000  00018fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001a8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f8  00000000  00000000  0001a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001c4be  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0001c4c1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001c4c8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001c4c9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001c4ca  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001c4ce  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001c4d2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001c4d6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001c4e1  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001c4ec  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0001c4f7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  0001c4fa  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000353a2  00000000  00000000  0001c53d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
000041b4 l    d  .text	00000000 .text
00006944 l    d  .rodata	00000000 .rodata
00006990 l    d  .rwdata	00000000 .rwdata
00006f58 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000041ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004740 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006990 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004fd4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000051d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000053c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006a70 l     O .rwdata	0000002c jtag_uart_0
0000549c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000572c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0000592c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000059a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005a88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005dd0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005f20 l     F .text	000000f8 alt_file_locked
000061a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00006720 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000068e0 l     F .text	00000040 alt_sim_halt
00005244 g     F .text	0000005c alt_main
00006f74 g     O .bss	00000100 alt_irq
00006c74 g       *ABS*	00000000 __flash_rwdata_start
000046a8 g     F .text	00000054 printf
00006c44 g     O .rwdata	00000004 x
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006f58 g     O .bss	00000004 errno
00004294 g     F .text	00000038 __make_dp
00006f60 g     O .bss	00000004 alt_argv
0000ec44 g       *ABS*	00000000 _gp
00006ac4 g     O .rwdata	00000180 alt_fd_list
00006440 g     F .text	00000094 alt_find_dev
00005ea8 g     F .text	00000078 alt_io_redirect
00005584 g     F .text	00000104 altera_avalon_jtag_uart_read
000046fc g     F .text	00000044 _printf_r
00005110 g     F .text	00000008 __udivsi3
00006c60 g     O .rwdata	00000004 alt_max_fd
00004240 g     F .text	00000054 __extendsfdf2
00006c4c g     O .rwdata	00000004 _global_impure_ptr
00007074 g       *ABS*	00000000 __bss_end
00005cd8 g     F .text	000000f8 alt_iic_isr_register
00006314 g     F .text	0000010c alt_tick
00005c90 g     F .text	00000048 alt_ic_irq_enabled
0000627c g     F .text	00000098 alt_alarm_stop
00006f68 g     O .bss	00000004 alt_irq_active
000040ec g     F .exceptions	000000c8 alt_irq_handler
00006a9c g     O .rwdata	00000028 alt_dev_null
000042cc g     F .text	000000c8 __unpack_f
0000598c g     F .text	0000001c alt_dcache_flush_all
00006c74 g       *ABS*	00000000 __ram_rwdata_end
00006c58 g     O .rwdata	00000008 alt_dev_list
000052a0 g     F .text	00000124 write
00006990 g       *ABS*	00000000 __ram_rodata_end
00005118 g     F .text	00000008 __umodsi3
00007074 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000579c g     F .text	00000090 alt_avalon_timer_sc_init
00005688 g     F .text	000000a4 altera_avalon_jtag_uart_write
000047c0 g     F .text	0000069c ___vfprintf_internal_r
00006724 g     F .text	000001bc __call_exitprocs
000041b4 g     F .text	0000003c _start
00006f6c g     O .bss	00000004 _alt_tick_rate
00006f70 g     O .bss	00000004 _alt_nticks
00005458 g     F .text	00000044 alt_sys_init
00005120 g     F .text	00000038 __mulsi3
00006990 g       *ABS*	00000000 __ram_rwdata_start
00006944 g       *ABS*	00000000 __ram_rodata_start
000054d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000065f4 g     F .text	000000d0 alt_get_fd
000066e4 g     F .text	0000003c memcmp
00007074 g       *ABS*	00000000 __alt_stack_base
000064d4 g     F .text	00000120 alt_find_file
000059d4 g     F .text	000000b4 alt_dev_llist_insert
00004e80 g     F .text	000000bc __sfvwrite_small_dev
00006f58 g       *ABS*	00000000 __bss_start
000041f0 g     F .text	00000050 main
00004000 g       *ABS*	00000000 __alt_mem_RAM
00006f64 g     O .bss	00000004 alt_envp
0000552c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00006c64 g     O .rwdata	00000004 alt_errno
00005050 g     F .text	00000060 __divsi3
00006944 g       *ABS*	00000000 __flash_rodata_start
00005424 g     F .text	00000034 alt_irq_init
00006204 g     F .text	00000078 alt_release_fd
00004f5c g     F .text	00000078 _write_r
00006c48 g     O .rwdata	00000004 _impure_ptr
00006f5c g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00006c50 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005b04 g     F .text	00000050 alt_ic_isr_register
00006c74 g       *ABS*	00000000 _edata
00007074 g       *ABS*	00000000 _end
000041b4 g       *ABS*	00000000 __ram_exceptions_end
00005bf0 g     F .text	000000a0 alt_ic_irq_disable
00006420 g     F .text	00000020 altera_nios2_qsys_irq_init
000066c4 g     F .text	00000020 exit
000050b0 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00006920 g     F .text	00000020 _exit
00004f3c g     F .text	00000020 strlen
00006018 g     F .text	0000018c open
00005ae8 g     F .text	0000001c alt_icache_flush_all
00006c68 g     O .rwdata	00000004 alt_priority_mask
00005b54 g     F .text	0000009c alt_ic_irq_enable
00004e5c g     F .text	00000024 __vfprintf_internal
00006c6c g     O .rwdata	00000008 alt_alarm_list
0000582c g     F .text	00000100 close
00005158 g     F .text	00000080 alt_load
00004394 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506d14 	ori	at,at,16820
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    4044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040ec0 	call	40ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000306 	br	4098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    4094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    4098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    40c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    40e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40e8:	ef80083a 	eret

000040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40ec:	defff904 	addi	sp,sp,-28
    40f0:	dfc00615 	stw	ra,24(sp)
    40f4:	df000515 	stw	fp,20(sp)
    40f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    40fc:	0005313a 	rdctl	r2,ipending
    4100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    4104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    4108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4110:	00800044 	movi	r2,1
    4114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    4118:	e0ffff17 	ldw	r3,-4(fp)
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	1884703a 	and	r2,r3,r2
    4124:	1005003a 	cmpeq	r2,r2,zero
    4128:	1000161e 	bne	r2,zero,4184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    412c:	e0bffd17 	ldw	r2,-12(fp)
    4130:	00c00034 	movhi	r3,0
    4134:	18dbdd04 	addi	r3,r3,28532
    4138:	100490fa 	slli	r2,r2,3
    413c:	10c5883a 	add	r2,r2,r3
    4140:	11400017 	ldw	r5,0(r2)
    4144:	e0bffd17 	ldw	r2,-12(fp)
    4148:	00c00034 	movhi	r3,0
    414c:	18dbdd04 	addi	r3,r3,28532
    4150:	100490fa 	slli	r2,r2,3
    4154:	10c5883a 	add	r2,r2,r3
    4158:	10800104 	addi	r2,r2,4
    415c:	11000017 	ldw	r4,0(r2)
    4160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4164:	0005313a 	rdctl	r2,ipending
    4168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    4170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    4174:	e0bfff17 	ldw	r2,-4(fp)
    4178:	1004c03a 	cmpne	r2,r2,zero
    417c:	103fe31e 	bne	r2,zero,410c <alt_irq_handler+0x20>
    4180:	00000706 	br	41a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4184:	e0bffe17 	ldw	r2,-8(fp)
    4188:	1085883a 	add	r2,r2,r2
    418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    4190:	e0bffd17 	ldw	r2,-12(fp)
    4194:	10800044 	addi	r2,r2,1
    4198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    419c:	003fde06 	br	4118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    41a0:	e037883a 	mov	sp,fp
    41a4:	dfc00117 	ldw	ra,4(sp)
    41a8:	df000017 	ldw	fp,0(sp)
    41ac:	dec00204 	addi	sp,sp,8
    41b0:	f800283a 	ret

Disassembly of section .text:

000041b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    41b4:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    41b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    41bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    41c0:	d6bb1114 	ori	gp,gp,60484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    41c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    41c8:	109bd614 	ori	r2,r2,28504

    movhi r3, %hi(__bss_end)
    41cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    41d0:	18dc1d14 	ori	r3,r3,28788

    beq r2, r3, 1f
    41d4:	10c00326 	beq	r2,r3,41e4 <_start+0x30>

0:
    stw zero, (r2)
    41d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41e0:	10fffd36 	bltu	r2,r3,41d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41e4:	00051580 	call	5158 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41e8:	00052440 	call	5244 <alt_main>

000041ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41ec:	003fff06 	br	41ec <alt_after_alt_main>

000041f0 <main>:
*/
#include <stdio.h>

float x=1.1;
int main()
{
    41f0:	defffe04 	addi	sp,sp,-8
    41f4:	dfc00115 	stw	ra,4(sp)
    41f8:	df000015 	stw	fp,0(sp)
    41fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n %d", x);
    4200:	d0a00017 	ldw	r2,-32768(gp)
    4204:	1009883a 	mov	r4,r2
    4208:	00042400 	call	4240 <__extendsfdf2>
    420c:	100d883a 	mov	r6,r2
    4210:	180f883a 	mov	r7,r3
    4214:	01000034 	movhi	r4,0
    4218:	211a5104 	addi	r4,r4,26948
    421c:	300b883a 	mov	r5,r6
    4220:	380d883a 	mov	r6,r7
    4224:	00046a80 	call	46a8 <printf>

  return 0;
    4228:	0005883a 	mov	r2,zero
}
    422c:	e037883a 	mov	sp,fp
    4230:	dfc00117 	ldw	ra,4(sp)
    4234:	df000017 	ldw	fp,0(sp)
    4238:	dec00204 	addi	sp,sp,8
    423c:	f800283a 	ret

00004240 <__extendsfdf2>:
    4240:	defff904 	addi	sp,sp,-28
    4244:	d9000115 	stw	r4,4(sp)
    4248:	d9400204 	addi	r5,sp,8
    424c:	d9000104 	addi	r4,sp,4
    4250:	dfc00615 	stw	ra,24(sp)
    4254:	00042cc0 	call	42cc <__unpack_f>
    4258:	d9c00517 	ldw	r7,20(sp)
    425c:	0011883a 	mov	r8,zero
    4260:	400697ba 	slli	r3,r8,30
    4264:	3812d0ba 	srli	r9,r7,2
    4268:	380497ba 	slli	r2,r7,30
    426c:	d9000217 	ldw	r4,8(sp)
    4270:	d9400317 	ldw	r5,12(sp)
    4274:	d9800417 	ldw	r6,16(sp)
    4278:	48c6b03a 	or	r3,r9,r3
    427c:	100f883a 	mov	r7,r2
    4280:	d8c00015 	stw	r3,0(sp)
    4284:	00042940 	call	4294 <__make_dp>
    4288:	dfc00617 	ldw	ra,24(sp)
    428c:	dec00704 	addi	sp,sp,28
    4290:	f800283a 	ret

00004294 <__make_dp>:
    4294:	defff904 	addi	sp,sp,-28
    4298:	d8c00717 	ldw	r3,28(sp)
    429c:	d9000015 	stw	r4,0(sp)
    42a0:	d809883a 	mov	r4,sp
    42a4:	dfc00515 	stw	ra,20(sp)
    42a8:	d9c00615 	stw	r7,24(sp)
    42ac:	d9400115 	stw	r5,4(sp)
    42b0:	d9800215 	stw	r6,8(sp)
    42b4:	d8c00415 	stw	r3,16(sp)
    42b8:	d9c00315 	stw	r7,12(sp)
    42bc:	00043940 	call	4394 <__pack_d>
    42c0:	dfc00517 	ldw	ra,20(sp)
    42c4:	dec00704 	addi	sp,sp,28
    42c8:	f800283a 	ret

000042cc <__unpack_f>:
    42cc:	21800017 	ldw	r6,0(r4)
    42d0:	00c02034 	movhi	r3,128
    42d4:	18ffffc4 	addi	r3,r3,-1
    42d8:	3004d5fa 	srli	r2,r6,23
    42dc:	3008d7fa 	srli	r4,r6,31
    42e0:	30ce703a 	and	r7,r6,r3
    42e4:	10c03fcc 	andi	r3,r2,255
    42e8:	29000115 	stw	r4,4(r5)
    42ec:	1800131e 	bne	r3,zero,433c <__unpack_f+0x70>
    42f0:	38000f26 	beq	r7,zero,4330 <__unpack_f+0x64>
    42f4:	380691fa 	slli	r3,r7,7
    42f8:	01bfe084 	movi	r6,-126
    42fc:	008000c4 	movi	r2,3
    4300:	01100034 	movhi	r4,16384
    4304:	213fffc4 	addi	r4,r4,-1
    4308:	28800015 	stw	r2,0(r5)
    430c:	29800215 	stw	r6,8(r5)
    4310:	20c00536 	bltu	r4,r3,4328 <__unpack_f+0x5c>
    4314:	3005883a 	mov	r2,r6
    4318:	18c7883a 	add	r3,r3,r3
    431c:	10bfffc4 	addi	r2,r2,-1
    4320:	20fffd2e 	bgeu	r4,r3,4318 <__unpack_f+0x4c>
    4324:	28800215 	stw	r2,8(r5)
    4328:	28c00315 	stw	r3,12(r5)
    432c:	f800283a 	ret
    4330:	00800084 	movi	r2,2
    4334:	28800015 	stw	r2,0(r5)
    4338:	f800283a 	ret
    433c:	00803fc4 	movi	r2,255
    4340:	18800826 	beq	r3,r2,4364 <__unpack_f+0x98>
    4344:	380491fa 	slli	r2,r7,7
    4348:	18ffe044 	addi	r3,r3,-127
    434c:	28c00215 	stw	r3,8(r5)
    4350:	10900034 	orhi	r2,r2,16384
    4354:	28800315 	stw	r2,12(r5)
    4358:	008000c4 	movi	r2,3
    435c:	28800015 	stw	r2,0(r5)
    4360:	f800283a 	ret
    4364:	3800031e 	bne	r7,zero,4374 <__unpack_f+0xa8>
    4368:	00800104 	movi	r2,4
    436c:	28800015 	stw	r2,0(r5)
    4370:	f800283a 	ret
    4374:	3080042c 	andhi	r2,r6,16
    4378:	10000426 	beq	r2,zero,438c <__unpack_f+0xc0>
    437c:	00800044 	movi	r2,1
    4380:	28800015 	stw	r2,0(r5)
    4384:	29c00315 	stw	r7,12(r5)
    4388:	f800283a 	ret
    438c:	28000015 	stw	zero,0(r5)
    4390:	003ffc06 	br	4384 <__unpack_f+0xb8>

00004394 <__pack_d>:
    4394:	20c00017 	ldw	r3,0(r4)
    4398:	defffd04 	addi	sp,sp,-12
    439c:	dc000015 	stw	r16,0(sp)
    43a0:	dc800215 	stw	r18,8(sp)
    43a4:	dc400115 	stw	r17,4(sp)
    43a8:	00800044 	movi	r2,1
    43ac:	22000317 	ldw	r8,12(r4)
    43b0:	001f883a 	mov	r15,zero
    43b4:	22400417 	ldw	r9,16(r4)
    43b8:	24000117 	ldw	r16,4(r4)
    43bc:	10c0552e 	bgeu	r2,r3,4514 <__pack_d+0x180>
    43c0:	00800104 	movi	r2,4
    43c4:	18804f26 	beq	r3,r2,4504 <__pack_d+0x170>
    43c8:	00800084 	movi	r2,2
    43cc:	18800226 	beq	r3,r2,43d8 <__pack_d+0x44>
    43d0:	4244b03a 	or	r2,r8,r9
    43d4:	10001a1e 	bne	r2,zero,4440 <__pack_d+0xac>
    43d8:	000d883a 	mov	r6,zero
    43dc:	000f883a 	mov	r7,zero
    43e0:	0011883a 	mov	r8,zero
    43e4:	00800434 	movhi	r2,16
    43e8:	10bfffc4 	addi	r2,r2,-1
    43ec:	301d883a 	mov	r14,r6
    43f0:	3884703a 	and	r2,r7,r2
    43f4:	400a953a 	slli	r5,r8,20
    43f8:	79bffc2c 	andhi	r6,r15,65520
    43fc:	308cb03a 	or	r6,r6,r2
    4400:	00e00434 	movhi	r3,32784
    4404:	18ffffc4 	addi	r3,r3,-1
    4408:	800497fa 	slli	r2,r16,31
    440c:	30c6703a 	and	r3,r6,r3
    4410:	1946b03a 	or	r3,r3,r5
    4414:	01600034 	movhi	r5,32768
    4418:	297fffc4 	addi	r5,r5,-1
    441c:	194a703a 	and	r5,r3,r5
    4420:	288ab03a 	or	r5,r5,r2
    4424:	2807883a 	mov	r3,r5
    4428:	7005883a 	mov	r2,r14
    442c:	dc800217 	ldw	r18,8(sp)
    4430:	dc400117 	ldw	r17,4(sp)
    4434:	dc000017 	ldw	r16,0(sp)
    4438:	dec00304 	addi	sp,sp,12
    443c:	f800283a 	ret
    4440:	21000217 	ldw	r4,8(r4)
    4444:	00bf0084 	movi	r2,-1022
    4448:	20803f16 	blt	r4,r2,4548 <__pack_d+0x1b4>
    444c:	0080ffc4 	movi	r2,1023
    4450:	11002c16 	blt	r2,r4,4504 <__pack_d+0x170>
    4454:	00803fc4 	movi	r2,255
    4458:	408c703a 	and	r6,r8,r2
    445c:	00802004 	movi	r2,128
    4460:	0007883a 	mov	r3,zero
    4464:	000f883a 	mov	r7,zero
    4468:	2280ffc4 	addi	r10,r4,1023
    446c:	30801e26 	beq	r6,r2,44e8 <__pack_d+0x154>
    4470:	00801fc4 	movi	r2,127
    4474:	4089883a 	add	r4,r8,r2
    4478:	220d803a 	cmpltu	r6,r4,r8
    447c:	324d883a 	add	r6,r6,r9
    4480:	2011883a 	mov	r8,r4
    4484:	3013883a 	mov	r9,r6
    4488:	00880034 	movhi	r2,8192
    448c:	10bfffc4 	addi	r2,r2,-1
    4490:	12400d36 	bltu	r2,r9,44c8 <__pack_d+0x134>
    4494:	4804963a 	slli	r2,r9,24
    4498:	400cd23a 	srli	r6,r8,8
    449c:	480ed23a 	srli	r7,r9,8
    44a0:	013fffc4 	movi	r4,-1
    44a4:	118cb03a 	or	r6,r2,r6
    44a8:	01400434 	movhi	r5,16
    44ac:	297fffc4 	addi	r5,r5,-1
    44b0:	3104703a 	and	r2,r6,r4
    44b4:	3946703a 	and	r3,r7,r5
    44b8:	5201ffcc 	andi	r8,r10,2047
    44bc:	100d883a 	mov	r6,r2
    44c0:	180f883a 	mov	r7,r3
    44c4:	003fc706 	br	43e4 <__pack_d+0x50>
    44c8:	480897fa 	slli	r4,r9,31
    44cc:	4004d07a 	srli	r2,r8,1
    44d0:	4806d07a 	srli	r3,r9,1
    44d4:	52800044 	addi	r10,r10,1
    44d8:	2084b03a 	or	r2,r4,r2
    44dc:	1011883a 	mov	r8,r2
    44e0:	1813883a 	mov	r9,r3
    44e4:	003feb06 	br	4494 <__pack_d+0x100>
    44e8:	383fe11e 	bne	r7,zero,4470 <__pack_d+0xdc>
    44ec:	01004004 	movi	r4,256
    44f0:	4104703a 	and	r2,r8,r4
    44f4:	10c4b03a 	or	r2,r2,r3
    44f8:	103fe326 	beq	r2,zero,4488 <__pack_d+0xf4>
    44fc:	3005883a 	mov	r2,r6
    4500:	003fdc06 	br	4474 <__pack_d+0xe0>
    4504:	000d883a 	mov	r6,zero
    4508:	000f883a 	mov	r7,zero
    450c:	0201ffc4 	movi	r8,2047
    4510:	003fb406 	br	43e4 <__pack_d+0x50>
    4514:	0005883a 	mov	r2,zero
    4518:	00c00234 	movhi	r3,8
    451c:	408cb03a 	or	r6,r8,r2
    4520:	48ceb03a 	or	r7,r9,r3
    4524:	013fffc4 	movi	r4,-1
    4528:	01400434 	movhi	r5,16
    452c:	297fffc4 	addi	r5,r5,-1
    4530:	3104703a 	and	r2,r6,r4
    4534:	3946703a 	and	r3,r7,r5
    4538:	100d883a 	mov	r6,r2
    453c:	180f883a 	mov	r7,r3
    4540:	0201ffc4 	movi	r8,2047
    4544:	003fa706 	br	43e4 <__pack_d+0x50>
    4548:	1109c83a 	sub	r4,r2,r4
    454c:	00800e04 	movi	r2,56
    4550:	11004316 	blt	r2,r4,4660 <__pack_d+0x2cc>
    4554:	21fff804 	addi	r7,r4,-32
    4558:	38004516 	blt	r7,zero,4670 <__pack_d+0x2dc>
    455c:	49d8d83a 	srl	r12,r9,r7
    4560:	001b883a 	mov	r13,zero
    4564:	0023883a 	mov	r17,zero
    4568:	01400044 	movi	r5,1
    456c:	0025883a 	mov	r18,zero
    4570:	38004716 	blt	r7,zero,4690 <__pack_d+0x2fc>
    4574:	29d6983a 	sll	r11,r5,r7
    4578:	0015883a 	mov	r10,zero
    457c:	00bfffc4 	movi	r2,-1
    4580:	5089883a 	add	r4,r10,r2
    4584:	588b883a 	add	r5,r11,r2
    4588:	228d803a 	cmpltu	r6,r4,r10
    458c:	314b883a 	add	r5,r6,r5
    4590:	4104703a 	and	r2,r8,r4
    4594:	4946703a 	and	r3,r9,r5
    4598:	10c4b03a 	or	r2,r2,r3
    459c:	10000226 	beq	r2,zero,45a8 <__pack_d+0x214>
    45a0:	04400044 	movi	r17,1
    45a4:	0025883a 	mov	r18,zero
    45a8:	00803fc4 	movi	r2,255
    45ac:	644eb03a 	or	r7,r12,r17
    45b0:	3892703a 	and	r9,r7,r2
    45b4:	00802004 	movi	r2,128
    45b8:	6c90b03a 	or	r8,r13,r18
    45bc:	0015883a 	mov	r10,zero
    45c0:	48801626 	beq	r9,r2,461c <__pack_d+0x288>
    45c4:	01001fc4 	movi	r4,127
    45c8:	3905883a 	add	r2,r7,r4
    45cc:	11cd803a 	cmpltu	r6,r2,r7
    45d0:	320d883a 	add	r6,r6,r8
    45d4:	100f883a 	mov	r7,r2
    45d8:	00840034 	movhi	r2,4096
    45dc:	10bfffc4 	addi	r2,r2,-1
    45e0:	3011883a 	mov	r8,r6
    45e4:	0007883a 	mov	r3,zero
    45e8:	11801b36 	bltu	r2,r6,4658 <__pack_d+0x2c4>
    45ec:	4004963a 	slli	r2,r8,24
    45f0:	3808d23a 	srli	r4,r7,8
    45f4:	400ad23a 	srli	r5,r8,8
    45f8:	1813883a 	mov	r9,r3
    45fc:	1108b03a 	or	r4,r2,r4
    4600:	00bfffc4 	movi	r2,-1
    4604:	00c00434 	movhi	r3,16
    4608:	18ffffc4 	addi	r3,r3,-1
    460c:	208c703a 	and	r6,r4,r2
    4610:	28ce703a 	and	r7,r5,r3
    4614:	4a01ffcc 	andi	r8,r9,2047
    4618:	003f7206 	br	43e4 <__pack_d+0x50>
    461c:	503fe91e 	bne	r10,zero,45c4 <__pack_d+0x230>
    4620:	01004004 	movi	r4,256
    4624:	3904703a 	and	r2,r7,r4
    4628:	0007883a 	mov	r3,zero
    462c:	10c4b03a 	or	r2,r2,r3
    4630:	10000626 	beq	r2,zero,464c <__pack_d+0x2b8>
    4634:	3a45883a 	add	r2,r7,r9
    4638:	11cd803a 	cmpltu	r6,r2,r7
    463c:	320d883a 	add	r6,r6,r8
    4640:	100f883a 	mov	r7,r2
    4644:	3011883a 	mov	r8,r6
    4648:	0007883a 	mov	r3,zero
    464c:	00840034 	movhi	r2,4096
    4650:	10bfffc4 	addi	r2,r2,-1
    4654:	123fe52e 	bgeu	r2,r8,45ec <__pack_d+0x258>
    4658:	00c00044 	movi	r3,1
    465c:	003fe306 	br	45ec <__pack_d+0x258>
    4660:	0009883a 	mov	r4,zero
    4664:	0013883a 	mov	r9,zero
    4668:	000b883a 	mov	r5,zero
    466c:	003fe406 	br	4600 <__pack_d+0x26c>
    4670:	4a47883a 	add	r3,r9,r9
    4674:	008007c4 	movi	r2,31
    4678:	1105c83a 	sub	r2,r2,r4
    467c:	1886983a 	sll	r3,r3,r2
    4680:	4118d83a 	srl	r12,r8,r4
    4684:	491ad83a 	srl	r13,r9,r4
    4688:	1b18b03a 	or	r12,r3,r12
    468c:	003fb506 	br	4564 <__pack_d+0x1d0>
    4690:	2806d07a 	srli	r3,r5,1
    4694:	008007c4 	movi	r2,31
    4698:	1105c83a 	sub	r2,r2,r4
    469c:	1896d83a 	srl	r11,r3,r2
    46a0:	2914983a 	sll	r10,r5,r4
    46a4:	003fb506 	br	457c <__pack_d+0x1e8>

000046a8 <printf>:
    46a8:	defffb04 	addi	sp,sp,-20
    46ac:	dfc00115 	stw	ra,4(sp)
    46b0:	d9400215 	stw	r5,8(sp)
    46b4:	d9800315 	stw	r6,12(sp)
    46b8:	d9c00415 	stw	r7,16(sp)
    46bc:	00800034 	movhi	r2,0
    46c0:	109b1204 	addi	r2,r2,27720
    46c4:	11400017 	ldw	r5,0(r2)
    46c8:	d8800204 	addi	r2,sp,8
    46cc:	d8800015 	stw	r2,0(sp)
    46d0:	29c00217 	ldw	r7,8(r5)
    46d4:	100d883a 	mov	r6,r2
    46d8:	00800034 	movhi	r2,0
    46dc:	1093a004 	addi	r2,r2,20096
    46e0:	200b883a 	mov	r5,r4
    46e4:	38800115 	stw	r2,4(r7)
    46e8:	3809883a 	mov	r4,r7
    46ec:	0004e5c0 	call	4e5c <__vfprintf_internal>
    46f0:	dfc00117 	ldw	ra,4(sp)
    46f4:	dec00504 	addi	sp,sp,20
    46f8:	f800283a 	ret

000046fc <_printf_r>:
    46fc:	defffc04 	addi	sp,sp,-16
    4700:	dfc00115 	stw	ra,4(sp)
    4704:	d9800215 	stw	r6,8(sp)
    4708:	d9c00315 	stw	r7,12(sp)
    470c:	22000217 	ldw	r8,8(r4)
    4710:	d8800204 	addi	r2,sp,8
    4714:	d8800015 	stw	r2,0(sp)
    4718:	100f883a 	mov	r7,r2
    471c:	00800034 	movhi	r2,0
    4720:	1093a004 	addi	r2,r2,20096
    4724:	280d883a 	mov	r6,r5
    4728:	40800115 	stw	r2,4(r8)
    472c:	400b883a 	mov	r5,r8
    4730:	00047c00 	call	47c0 <___vfprintf_internal_r>
    4734:	dfc00117 	ldw	ra,4(sp)
    4738:	dec00404 	addi	sp,sp,16
    473c:	f800283a 	ret

00004740 <print_repeat>:
    4740:	defffb04 	addi	sp,sp,-20
    4744:	dc800315 	stw	r18,12(sp)
    4748:	dc400215 	stw	r17,8(sp)
    474c:	dc000115 	stw	r16,4(sp)
    4750:	dfc00415 	stw	ra,16(sp)
    4754:	2025883a 	mov	r18,r4
    4758:	2823883a 	mov	r17,r5
    475c:	3821883a 	mov	r16,r7
    4760:	d9800005 	stb	r6,0(sp)
    4764:	9009883a 	mov	r4,r18
    4768:	880b883a 	mov	r5,r17
    476c:	d80d883a 	mov	r6,sp
    4770:	01c00044 	movi	r7,1
    4774:	04000b0e 	bge	zero,r16,47a4 <print_repeat+0x64>
    4778:	88c00117 	ldw	r3,4(r17)
    477c:	843fffc4 	addi	r16,r16,-1
    4780:	183ee83a 	callr	r3
    4784:	103ff726 	beq	r2,zero,4764 <print_repeat+0x24>
    4788:	00bfffc4 	movi	r2,-1
    478c:	dfc00417 	ldw	ra,16(sp)
    4790:	dc800317 	ldw	r18,12(sp)
    4794:	dc400217 	ldw	r17,8(sp)
    4798:	dc000117 	ldw	r16,4(sp)
    479c:	dec00504 	addi	sp,sp,20
    47a0:	f800283a 	ret
    47a4:	0005883a 	mov	r2,zero
    47a8:	dfc00417 	ldw	ra,16(sp)
    47ac:	dc800317 	ldw	r18,12(sp)
    47b0:	dc400217 	ldw	r17,8(sp)
    47b4:	dc000117 	ldw	r16,4(sp)
    47b8:	dec00504 	addi	sp,sp,20
    47bc:	f800283a 	ret

000047c0 <___vfprintf_internal_r>:
    47c0:	deffe304 	addi	sp,sp,-116
    47c4:	df001b15 	stw	fp,108(sp)
    47c8:	ddc01a15 	stw	r23,104(sp)
    47cc:	dd001715 	stw	r20,92(sp)
    47d0:	dc801515 	stw	r18,84(sp)
    47d4:	dc001315 	stw	r16,76(sp)
    47d8:	dfc01c15 	stw	ra,112(sp)
    47dc:	dd801915 	stw	r22,100(sp)
    47e0:	dd401815 	stw	r21,96(sp)
    47e4:	dcc01615 	stw	r19,88(sp)
    47e8:	dc401415 	stw	r17,80(sp)
    47ec:	d9001015 	stw	r4,64(sp)
    47f0:	2829883a 	mov	r20,r5
    47f4:	d9c01115 	stw	r7,68(sp)
    47f8:	3025883a 	mov	r18,r6
    47fc:	0021883a 	mov	r16,zero
    4800:	d8000f15 	stw	zero,60(sp)
    4804:	d8000e15 	stw	zero,56(sp)
    4808:	0039883a 	mov	fp,zero
    480c:	d8000915 	stw	zero,36(sp)
    4810:	d8000d15 	stw	zero,52(sp)
    4814:	d8000c15 	stw	zero,48(sp)
    4818:	d8000b15 	stw	zero,44(sp)
    481c:	002f883a 	mov	r23,zero
    4820:	91400003 	ldbu	r5,0(r18)
    4824:	01c00044 	movi	r7,1
    4828:	94800044 	addi	r18,r18,1
    482c:	29003fcc 	andi	r4,r5,255
    4830:	2100201c 	xori	r4,r4,128
    4834:	213fe004 	addi	r4,r4,-128
    4838:	20001526 	beq	r4,zero,4890 <___vfprintf_internal_r+0xd0>
    483c:	81c03526 	beq	r16,r7,4914 <___vfprintf_internal_r+0x154>
    4840:	3c002016 	blt	r7,r16,48c4 <___vfprintf_internal_r+0x104>
    4844:	803ff61e 	bne	r16,zero,4820 <___vfprintf_internal_r+0x60>
    4848:	00800944 	movi	r2,37
    484c:	2081501e 	bne	r4,r2,4d90 <___vfprintf_internal_r+0x5d0>
    4850:	073fffc4 	movi	fp,-1
    4854:	00800284 	movi	r2,10
    4858:	d9c00c15 	stw	r7,48(sp)
    485c:	d8000f15 	stw	zero,60(sp)
    4860:	d8000e15 	stw	zero,56(sp)
    4864:	df000915 	stw	fp,36(sp)
    4868:	d8800d15 	stw	r2,52(sp)
    486c:	d8000b15 	stw	zero,44(sp)
    4870:	91400003 	ldbu	r5,0(r18)
    4874:	3821883a 	mov	r16,r7
    4878:	94800044 	addi	r18,r18,1
    487c:	29003fcc 	andi	r4,r5,255
    4880:	2100201c 	xori	r4,r4,128
    4884:	213fe004 	addi	r4,r4,-128
    4888:	01c00044 	movi	r7,1
    488c:	203feb1e 	bne	r4,zero,483c <___vfprintf_internal_r+0x7c>
    4890:	b805883a 	mov	r2,r23
    4894:	dfc01c17 	ldw	ra,112(sp)
    4898:	df001b17 	ldw	fp,108(sp)
    489c:	ddc01a17 	ldw	r23,104(sp)
    48a0:	dd801917 	ldw	r22,100(sp)
    48a4:	dd401817 	ldw	r21,96(sp)
    48a8:	dd001717 	ldw	r20,92(sp)
    48ac:	dcc01617 	ldw	r19,88(sp)
    48b0:	dc801517 	ldw	r18,84(sp)
    48b4:	dc401417 	ldw	r17,80(sp)
    48b8:	dc001317 	ldw	r16,76(sp)
    48bc:	dec01d04 	addi	sp,sp,116
    48c0:	f800283a 	ret
    48c4:	00800084 	movi	r2,2
    48c8:	80801726 	beq	r16,r2,4928 <___vfprintf_internal_r+0x168>
    48cc:	008000c4 	movi	r2,3
    48d0:	80bfd31e 	bne	r16,r2,4820 <___vfprintf_internal_r+0x60>
    48d4:	2c7ff404 	addi	r17,r5,-48
    48d8:	88c03fcc 	andi	r3,r17,255
    48dc:	00800244 	movi	r2,9
    48e0:	10c02136 	bltu	r2,r3,4968 <___vfprintf_internal_r+0x1a8>
    48e4:	d8c00917 	ldw	r3,36(sp)
    48e8:	18012716 	blt	r3,zero,4d88 <___vfprintf_internal_r+0x5c8>
    48ec:	d9000917 	ldw	r4,36(sp)
    48f0:	01400284 	movi	r5,10
    48f4:	00051200 	call	5120 <__mulsi3>
    48f8:	1007883a 	mov	r3,r2
    48fc:	88803fcc 	andi	r2,r17,255
    4900:	1080201c 	xori	r2,r2,128
    4904:	10bfe004 	addi	r2,r2,-128
    4908:	1887883a 	add	r3,r3,r2
    490c:	d8c00915 	stw	r3,36(sp)
    4910:	003fc306 	br	4820 <___vfprintf_internal_r+0x60>
    4914:	00800c04 	movi	r2,48
    4918:	2080b326 	beq	r4,r2,4be8 <___vfprintf_internal_r+0x428>
    491c:	00800944 	movi	r2,37
    4920:	20812726 	beq	r4,r2,4dc0 <___vfprintf_internal_r+0x600>
    4924:	04000084 	movi	r16,2
    4928:	2c7ff404 	addi	r17,r5,-48
    492c:	88c03fcc 	andi	r3,r17,255
    4930:	00800244 	movi	r2,9
    4934:	10c00a36 	bltu	r2,r3,4960 <___vfprintf_internal_r+0x1a0>
    4938:	e000b416 	blt	fp,zero,4c0c <___vfprintf_internal_r+0x44c>
    493c:	e009883a 	mov	r4,fp
    4940:	01400284 	movi	r5,10
    4944:	00051200 	call	5120 <__mulsi3>
    4948:	1007883a 	mov	r3,r2
    494c:	88803fcc 	andi	r2,r17,255
    4950:	1080201c 	xori	r2,r2,128
    4954:	10bfe004 	addi	r2,r2,-128
    4958:	18b9883a 	add	fp,r3,r2
    495c:	003fb006 	br	4820 <___vfprintf_internal_r+0x60>
    4960:	00800b84 	movi	r2,46
    4964:	2080a326 	beq	r4,r2,4bf4 <___vfprintf_internal_r+0x434>
    4968:	00801b04 	movi	r2,108
    496c:	2080a326 	beq	r4,r2,4bfc <___vfprintf_internal_r+0x43c>
    4970:	d8c00917 	ldw	r3,36(sp)
    4974:	1800a716 	blt	r3,zero,4c14 <___vfprintf_internal_r+0x454>
    4978:	d8000f15 	stw	zero,60(sp)
    497c:	28bfea04 	addi	r2,r5,-88
    4980:	10803fcc 	andi	r2,r2,255
    4984:	00c00804 	movi	r3,32
    4988:	18802836 	bltu	r3,r2,4a2c <___vfprintf_internal_r+0x26c>
    498c:	1085883a 	add	r2,r2,r2
    4990:	1085883a 	add	r2,r2,r2
    4994:	00c00034 	movhi	r3,0
    4998:	18d26a04 	addi	r3,r3,18856
    499c:	10c5883a 	add	r2,r2,r3
    49a0:	11000017 	ldw	r4,0(r2)
    49a4:	2000683a 	jmp	r4
    49a8:	00004a34 	movhi	zero,296
    49ac:	00004a2c 	andhi	zero,zero,296
    49b0:	00004a2c 	andhi	zero,zero,296
    49b4:	00004a2c 	andhi	zero,zero,296
    49b8:	00004a2c 	andhi	zero,zero,296
    49bc:	00004a2c 	andhi	zero,zero,296
    49c0:	00004a2c 	andhi	zero,zero,296
    49c4:	00004a2c 	andhi	zero,zero,296
    49c8:	00004a2c 	andhi	zero,zero,296
    49cc:	00004a2c 	andhi	zero,zero,296
    49d0:	00004a2c 	andhi	zero,zero,296
    49d4:	00004c60 	cmpeqi	zero,zero,305
    49d8:	00004a48 	cmpgei	zero,zero,297
    49dc:	00004a2c 	andhi	zero,zero,296
    49e0:	00004a2c 	andhi	zero,zero,296
    49e4:	00004a2c 	andhi	zero,zero,296
    49e8:	00004a2c 	andhi	zero,zero,296
    49ec:	00004a48 	cmpgei	zero,zero,297
    49f0:	00004a2c 	andhi	zero,zero,296
    49f4:	00004a2c 	andhi	zero,zero,296
    49f8:	00004a2c 	andhi	zero,zero,296
    49fc:	00004a2c 	andhi	zero,zero,296
    4a00:	00004a2c 	andhi	zero,zero,296
    4a04:	00004cc8 	cmpgei	zero,zero,307
    4a08:	00004a2c 	andhi	zero,zero,296
    4a0c:	00004a2c 	andhi	zero,zero,296
    4a10:	00004a2c 	andhi	zero,zero,296
    4a14:	00004cd8 	cmpnei	zero,zero,307
    4a18:	00004a2c 	andhi	zero,zero,296
    4a1c:	00004bac 	andhi	zero,zero,302
    4a20:	00004a2c 	andhi	zero,zero,296
    4a24:	00004a2c 	andhi	zero,zero,296
    4a28:	00004ba4 	muli	zero,zero,302
    4a2c:	0021883a 	mov	r16,zero
    4a30:	003f7b06 	br	4820 <___vfprintf_internal_r+0x60>
    4a34:	00c00404 	movi	r3,16
    4a38:	00800044 	movi	r2,1
    4a3c:	d8c00d15 	stw	r3,52(sp)
    4a40:	d8000c15 	stw	zero,48(sp)
    4a44:	d8800b15 	stw	r2,44(sp)
    4a48:	d8c00e17 	ldw	r3,56(sp)
    4a4c:	1805003a 	cmpeq	r2,r3,zero
    4a50:	10005a1e 	bne	r2,zero,4bbc <___vfprintf_internal_r+0x3fc>
    4a54:	d8800c17 	ldw	r2,48(sp)
    4a58:	1000781e 	bne	r2,zero,4c3c <___vfprintf_internal_r+0x47c>
    4a5c:	d8801117 	ldw	r2,68(sp)
    4a60:	d8000a15 	stw	zero,40(sp)
    4a64:	14400017 	ldw	r17,0(r2)
    4a68:	11c00104 	addi	r7,r2,4
    4a6c:	d9c01115 	stw	r7,68(sp)
    4a70:	88005a26 	beq	r17,zero,4bdc <___vfprintf_internal_r+0x41c>
    4a74:	d8c00b17 	ldw	r3,44(sp)
    4a78:	dcc00044 	addi	r19,sp,1
    4a7c:	05800244 	movi	r22,9
    4a80:	182b003a 	cmpeq	r21,r3,zero
    4a84:	dcc01215 	stw	r19,72(sp)
    4a88:	00000506 	br	4aa0 <___vfprintf_internal_r+0x2e0>
    4a8c:	21000c04 	addi	r4,r4,48
    4a90:	99000005 	stb	r4,0(r19)
    4a94:	9cc00044 	addi	r19,r19,1
    4a98:	80000f26 	beq	r16,zero,4ad8 <___vfprintf_internal_r+0x318>
    4a9c:	8023883a 	mov	r17,r16
    4aa0:	d9400d17 	ldw	r5,52(sp)
    4aa4:	8809883a 	mov	r4,r17
    4aa8:	00051100 	call	5110 <__udivsi3>
    4aac:	d9000d17 	ldw	r4,52(sp)
    4ab0:	100b883a 	mov	r5,r2
    4ab4:	1021883a 	mov	r16,r2
    4ab8:	00051200 	call	5120 <__mulsi3>
    4abc:	8889c83a 	sub	r4,r17,r2
    4ac0:	b13ff20e 	bge	r22,r4,4a8c <___vfprintf_internal_r+0x2cc>
    4ac4:	a8009f1e 	bne	r21,zero,4d44 <___vfprintf_internal_r+0x584>
    4ac8:	21000dc4 	addi	r4,r4,55
    4acc:	99000005 	stb	r4,0(r19)
    4ad0:	9cc00044 	addi	r19,r19,1
    4ad4:	803ff11e 	bne	r16,zero,4a9c <___vfprintf_internal_r+0x2dc>
    4ad8:	d8801217 	ldw	r2,72(sp)
    4adc:	98a3c83a 	sub	r17,r19,r2
    4ae0:	d8c00917 	ldw	r3,36(sp)
    4ae4:	1c4bc83a 	sub	r5,r3,r17
    4ae8:	0140130e 	bge	zero,r5,4b38 <___vfprintf_internal_r+0x378>
    4aec:	d8c00044 	addi	r3,sp,1
    4af0:	18800804 	addi	r2,r3,32
    4af4:	9880102e 	bgeu	r19,r2,4b38 <___vfprintf_internal_r+0x378>
    4af8:	00800c04 	movi	r2,48
    4afc:	28ffffc4 	addi	r3,r5,-1
    4b00:	98800005 	stb	r2,0(r19)
    4b04:	99000044 	addi	r4,r19,1
    4b08:	00c0080e 	bge	zero,r3,4b2c <___vfprintf_internal_r+0x36c>
    4b0c:	d8c00044 	addi	r3,sp,1
    4b10:	18800804 	addi	r2,r3,32
    4b14:	2080052e 	bgeu	r4,r2,4b2c <___vfprintf_internal_r+0x36c>
    4b18:	00800c04 	movi	r2,48
    4b1c:	20800005 	stb	r2,0(r4)
    4b20:	21000044 	addi	r4,r4,1
    4b24:	9945883a 	add	r2,r19,r5
    4b28:	20bff81e 	bne	r4,r2,4b0c <___vfprintf_internal_r+0x34c>
    4b2c:	d8801217 	ldw	r2,72(sp)
    4b30:	2027883a 	mov	r19,r4
    4b34:	20a3c83a 	sub	r17,r4,r2
    4b38:	d8c00a17 	ldw	r3,40(sp)
    4b3c:	1c45883a 	add	r2,r3,r17
    4b40:	e0a1c83a 	sub	r16,fp,r2
    4b44:	d8800f17 	ldw	r2,60(sp)
    4b48:	10008026 	beq	r2,zero,4d4c <___vfprintf_internal_r+0x58c>
    4b4c:	1805003a 	cmpeq	r2,r3,zero
    4b50:	1000ae26 	beq	r2,zero,4e0c <___vfprintf_internal_r+0x64c>
    4b54:	0400a516 	blt	zero,r16,4dec <___vfprintf_internal_r+0x62c>
    4b58:	b805883a 	mov	r2,r23
    4b5c:	0440950e 	bge	zero,r17,4db4 <___vfprintf_internal_r+0x5f4>
    4b60:	102f883a 	mov	r23,r2
    4b64:	1461883a 	add	r16,r2,r17
    4b68:	00000206 	br	4b74 <___vfprintf_internal_r+0x3b4>
    4b6c:	bdc00044 	addi	r23,r23,1
    4b70:	85ffae26 	beq	r16,r23,4a2c <___vfprintf_internal_r+0x26c>
    4b74:	9cffffc4 	addi	r19,r19,-1
    4b78:	98800003 	ldbu	r2,0(r19)
    4b7c:	a0c00117 	ldw	r3,4(r20)
    4b80:	d9001017 	ldw	r4,64(sp)
    4b84:	d8800005 	stb	r2,0(sp)
    4b88:	a00b883a 	mov	r5,r20
    4b8c:	d80d883a 	mov	r6,sp
    4b90:	01c00044 	movi	r7,1
    4b94:	183ee83a 	callr	r3
    4b98:	103ff426 	beq	r2,zero,4b6c <___vfprintf_internal_r+0x3ac>
    4b9c:	05ffffc4 	movi	r23,-1
    4ba0:	003f3b06 	br	4890 <___vfprintf_internal_r+0xd0>
    4ba4:	00c00404 	movi	r3,16
    4ba8:	d8c00d15 	stw	r3,52(sp)
    4bac:	d8000c15 	stw	zero,48(sp)
    4bb0:	d8c00e17 	ldw	r3,56(sp)
    4bb4:	1805003a 	cmpeq	r2,r3,zero
    4bb8:	103fa626 	beq	r2,zero,4a54 <___vfprintf_internal_r+0x294>
    4bbc:	d8c00c17 	ldw	r3,48(sp)
    4bc0:	1800171e 	bne	r3,zero,4c20 <___vfprintf_internal_r+0x460>
    4bc4:	d8c01117 	ldw	r3,68(sp)
    4bc8:	d8000a15 	stw	zero,40(sp)
    4bcc:	1c400017 	ldw	r17,0(r3)
    4bd0:	19c00104 	addi	r7,r3,4
    4bd4:	d9c01115 	stw	r7,68(sp)
    4bd8:	883fa61e 	bne	r17,zero,4a74 <___vfprintf_internal_r+0x2b4>
    4bdc:	dcc00044 	addi	r19,sp,1
    4be0:	dcc01215 	stw	r19,72(sp)
    4be4:	003fbe06 	br	4ae0 <___vfprintf_internal_r+0x320>
    4be8:	04000084 	movi	r16,2
    4bec:	d9c00f15 	stw	r7,60(sp)
    4bf0:	003f0b06 	br	4820 <___vfprintf_internal_r+0x60>
    4bf4:	040000c4 	movi	r16,3
    4bf8:	003f0906 	br	4820 <___vfprintf_internal_r+0x60>
    4bfc:	00800044 	movi	r2,1
    4c00:	040000c4 	movi	r16,3
    4c04:	d8800e15 	stw	r2,56(sp)
    4c08:	003f0506 	br	4820 <___vfprintf_internal_r+0x60>
    4c0c:	0007883a 	mov	r3,zero
    4c10:	003f4e06 	br	494c <___vfprintf_internal_r+0x18c>
    4c14:	00800044 	movi	r2,1
    4c18:	d8800915 	stw	r2,36(sp)
    4c1c:	003f5706 	br	497c <___vfprintf_internal_r+0x1bc>
    4c20:	d8801117 	ldw	r2,68(sp)
    4c24:	14400017 	ldw	r17,0(r2)
    4c28:	10800104 	addi	r2,r2,4
    4c2c:	d8801115 	stw	r2,68(sp)
    4c30:	88000716 	blt	r17,zero,4c50 <___vfprintf_internal_r+0x490>
    4c34:	d8000a15 	stw	zero,40(sp)
    4c38:	003f8d06 	br	4a70 <___vfprintf_internal_r+0x2b0>
    4c3c:	d8c01117 	ldw	r3,68(sp)
    4c40:	1c400017 	ldw	r17,0(r3)
    4c44:	18c00104 	addi	r3,r3,4
    4c48:	d8c01115 	stw	r3,68(sp)
    4c4c:	883ff90e 	bge	r17,zero,4c34 <___vfprintf_internal_r+0x474>
    4c50:	00800044 	movi	r2,1
    4c54:	0463c83a 	sub	r17,zero,r17
    4c58:	d8800a15 	stw	r2,40(sp)
    4c5c:	003f8406 	br	4a70 <___vfprintf_internal_r+0x2b0>
    4c60:	04000044 	movi	r16,1
    4c64:	8700080e 	bge	r16,fp,4c88 <___vfprintf_internal_r+0x4c8>
    4c68:	d9001017 	ldw	r4,64(sp)
    4c6c:	a00b883a 	mov	r5,r20
    4c70:	01800804 	movi	r6,32
    4c74:	e1ffffc4 	addi	r7,fp,-1
    4c78:	00047400 	call	4740 <print_repeat>
    4c7c:	103fc71e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4c80:	e5c5883a 	add	r2,fp,r23
    4c84:	15ffffc4 	addi	r23,r2,-1
    4c88:	d8c01117 	ldw	r3,68(sp)
    4c8c:	d9001017 	ldw	r4,64(sp)
    4c90:	800f883a 	mov	r7,r16
    4c94:	18800017 	ldw	r2,0(r3)
    4c98:	a0c00117 	ldw	r3,4(r20)
    4c9c:	a00b883a 	mov	r5,r20
    4ca0:	d8800005 	stb	r2,0(sp)
    4ca4:	d80d883a 	mov	r6,sp
    4ca8:	183ee83a 	callr	r3
    4cac:	103fbb1e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4cb0:	d8801117 	ldw	r2,68(sp)
    4cb4:	bdc00044 	addi	r23,r23,1
    4cb8:	0021883a 	mov	r16,zero
    4cbc:	10800104 	addi	r2,r2,4
    4cc0:	d8801115 	stw	r2,68(sp)
    4cc4:	003ed606 	br	4820 <___vfprintf_internal_r+0x60>
    4cc8:	00800204 	movi	r2,8
    4ccc:	d8800d15 	stw	r2,52(sp)
    4cd0:	d8000c15 	stw	zero,48(sp)
    4cd4:	003fb606 	br	4bb0 <___vfprintf_internal_r+0x3f0>
    4cd8:	d8c01117 	ldw	r3,68(sp)
    4cdc:	1cc00017 	ldw	r19,0(r3)
    4ce0:	9809883a 	mov	r4,r19
    4ce4:	0004f3c0 	call	4f3c <strlen>
    4ce8:	e0a1c83a 	sub	r16,fp,r2
    4cec:	1023883a 	mov	r17,r2
    4cf0:	0400070e 	bge	zero,r16,4d10 <___vfprintf_internal_r+0x550>
    4cf4:	d9001017 	ldw	r4,64(sp)
    4cf8:	a00b883a 	mov	r5,r20
    4cfc:	01800804 	movi	r6,32
    4d00:	800f883a 	mov	r7,r16
    4d04:	00047400 	call	4740 <print_repeat>
    4d08:	103fa41e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4d0c:	bc2f883a 	add	r23,r23,r16
    4d10:	a0c00117 	ldw	r3,4(r20)
    4d14:	d9001017 	ldw	r4,64(sp)
    4d18:	980d883a 	mov	r6,r19
    4d1c:	a00b883a 	mov	r5,r20
    4d20:	880f883a 	mov	r7,r17
    4d24:	183ee83a 	callr	r3
    4d28:	103f9c1e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4d2c:	d8801117 	ldw	r2,68(sp)
    4d30:	bc6f883a 	add	r23,r23,r17
    4d34:	0021883a 	mov	r16,zero
    4d38:	10800104 	addi	r2,r2,4
    4d3c:	d8801115 	stw	r2,68(sp)
    4d40:	003eb706 	br	4820 <___vfprintf_internal_r+0x60>
    4d44:	210015c4 	addi	r4,r4,87
    4d48:	003f5106 	br	4a90 <___vfprintf_internal_r+0x2d0>
    4d4c:	04003b16 	blt	zero,r16,4e3c <___vfprintf_internal_r+0x67c>
    4d50:	d8c00a17 	ldw	r3,40(sp)
    4d54:	1805003a 	cmpeq	r2,r3,zero
    4d58:	103f7f1e 	bne	r2,zero,4b58 <___vfprintf_internal_r+0x398>
    4d5c:	a0c00117 	ldw	r3,4(r20)
    4d60:	d9001017 	ldw	r4,64(sp)
    4d64:	00800b44 	movi	r2,45
    4d68:	d8800005 	stb	r2,0(sp)
    4d6c:	a00b883a 	mov	r5,r20
    4d70:	d80d883a 	mov	r6,sp
    4d74:	01c00044 	movi	r7,1
    4d78:	183ee83a 	callr	r3
    4d7c:	103f871e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4d80:	b8800044 	addi	r2,r23,1
    4d84:	003f7506 	br	4b5c <___vfprintf_internal_r+0x39c>
    4d88:	0007883a 	mov	r3,zero
    4d8c:	003edb06 	br	48fc <___vfprintf_internal_r+0x13c>
    4d90:	a0c00117 	ldw	r3,4(r20)
    4d94:	d9001017 	ldw	r4,64(sp)
    4d98:	d9400005 	stb	r5,0(sp)
    4d9c:	d80d883a 	mov	r6,sp
    4da0:	a00b883a 	mov	r5,r20
    4da4:	183ee83a 	callr	r3
    4da8:	103f7c1e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4dac:	bdc00044 	addi	r23,r23,1
    4db0:	003e9b06 	br	4820 <___vfprintf_internal_r+0x60>
    4db4:	102f883a 	mov	r23,r2
    4db8:	0021883a 	mov	r16,zero
    4dbc:	003e9806 	br	4820 <___vfprintf_internal_r+0x60>
    4dc0:	a0c00117 	ldw	r3,4(r20)
    4dc4:	d9000005 	stb	r4,0(sp)
    4dc8:	d9001017 	ldw	r4,64(sp)
    4dcc:	a00b883a 	mov	r5,r20
    4dd0:	d80d883a 	mov	r6,sp
    4dd4:	800f883a 	mov	r7,r16
    4dd8:	183ee83a 	callr	r3
    4ddc:	103f6f1e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4de0:	bc2f883a 	add	r23,r23,r16
    4de4:	0021883a 	mov	r16,zero
    4de8:	003e8d06 	br	4820 <___vfprintf_internal_r+0x60>
    4dec:	d9001017 	ldw	r4,64(sp)
    4df0:	a00b883a 	mov	r5,r20
    4df4:	01800c04 	movi	r6,48
    4df8:	800f883a 	mov	r7,r16
    4dfc:	00047400 	call	4740 <print_repeat>
    4e00:	103f661e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4e04:	bc05883a 	add	r2,r23,r16
    4e08:	003f5406 	br	4b5c <___vfprintf_internal_r+0x39c>
    4e0c:	a0c00117 	ldw	r3,4(r20)
    4e10:	d9001017 	ldw	r4,64(sp)
    4e14:	00800b44 	movi	r2,45
    4e18:	d8800005 	stb	r2,0(sp)
    4e1c:	a00b883a 	mov	r5,r20
    4e20:	d80d883a 	mov	r6,sp
    4e24:	01c00044 	movi	r7,1
    4e28:	183ee83a 	callr	r3
    4e2c:	103f5b1e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4e30:	bdc00044 	addi	r23,r23,1
    4e34:	043f480e 	bge	zero,r16,4b58 <___vfprintf_internal_r+0x398>
    4e38:	003fec06 	br	4dec <___vfprintf_internal_r+0x62c>
    4e3c:	d9001017 	ldw	r4,64(sp)
    4e40:	a00b883a 	mov	r5,r20
    4e44:	01800804 	movi	r6,32
    4e48:	800f883a 	mov	r7,r16
    4e4c:	00047400 	call	4740 <print_repeat>
    4e50:	103f521e 	bne	r2,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4e54:	bc2f883a 	add	r23,r23,r16
    4e58:	003fbd06 	br	4d50 <___vfprintf_internal_r+0x590>

00004e5c <__vfprintf_internal>:
    4e5c:	00800034 	movhi	r2,0
    4e60:	109b1204 	addi	r2,r2,27720
    4e64:	2013883a 	mov	r9,r4
    4e68:	11000017 	ldw	r4,0(r2)
    4e6c:	2805883a 	mov	r2,r5
    4e70:	300f883a 	mov	r7,r6
    4e74:	480b883a 	mov	r5,r9
    4e78:	100d883a 	mov	r6,r2
    4e7c:	00047c01 	jmpi	47c0 <___vfprintf_internal_r>

00004e80 <__sfvwrite_small_dev>:
    4e80:	2880000b 	ldhu	r2,0(r5)
    4e84:	defffa04 	addi	sp,sp,-24
    4e88:	dcc00315 	stw	r19,12(sp)
    4e8c:	1080020c 	andi	r2,r2,8
    4e90:	dc800215 	stw	r18,8(sp)
    4e94:	dc400115 	stw	r17,4(sp)
    4e98:	dfc00515 	stw	ra,20(sp)
    4e9c:	dd000415 	stw	r20,16(sp)
    4ea0:	dc000015 	stw	r16,0(sp)
    4ea4:	2825883a 	mov	r18,r5
    4ea8:	2027883a 	mov	r19,r4
    4eac:	3023883a 	mov	r17,r6
    4eb0:	10002026 	beq	r2,zero,4f34 <__sfvwrite_small_dev+0xb4>
    4eb4:	2940008f 	ldh	r5,2(r5)
    4eb8:	28000f16 	blt	r5,zero,4ef8 <__sfvwrite_small_dev+0x78>
    4ebc:	01c01b0e 	bge	zero,r7,4f2c <__sfvwrite_small_dev+0xac>
    4ec0:	3821883a 	mov	r16,r7
    4ec4:	05010004 	movi	r20,1024
    4ec8:	00000206 	br	4ed4 <__sfvwrite_small_dev+0x54>
    4ecc:	0400170e 	bge	zero,r16,4f2c <__sfvwrite_small_dev+0xac>
    4ed0:	9140008f 	ldh	r5,2(r18)
    4ed4:	880d883a 	mov	r6,r17
    4ed8:	9809883a 	mov	r4,r19
    4edc:	800f883a 	mov	r7,r16
    4ee0:	a400010e 	bge	r20,r16,4ee8 <__sfvwrite_small_dev+0x68>
    4ee4:	01c10004 	movi	r7,1024
    4ee8:	0004f5c0 	call	4f5c <_write_r>
    4eec:	88a3883a 	add	r17,r17,r2
    4ef0:	80a1c83a 	sub	r16,r16,r2
    4ef4:	00bff516 	blt	zero,r2,4ecc <__sfvwrite_small_dev+0x4c>
    4ef8:	9080000b 	ldhu	r2,0(r18)
    4efc:	00ffffc4 	movi	r3,-1
    4f00:	10801014 	ori	r2,r2,64
    4f04:	9080000d 	sth	r2,0(r18)
    4f08:	1805883a 	mov	r2,r3
    4f0c:	dfc00517 	ldw	ra,20(sp)
    4f10:	dd000417 	ldw	r20,16(sp)
    4f14:	dcc00317 	ldw	r19,12(sp)
    4f18:	dc800217 	ldw	r18,8(sp)
    4f1c:	dc400117 	ldw	r17,4(sp)
    4f20:	dc000017 	ldw	r16,0(sp)
    4f24:	dec00604 	addi	sp,sp,24
    4f28:	f800283a 	ret
    4f2c:	0007883a 	mov	r3,zero
    4f30:	003ff506 	br	4f08 <__sfvwrite_small_dev+0x88>
    4f34:	00ffffc4 	movi	r3,-1
    4f38:	003ff306 	br	4f08 <__sfvwrite_small_dev+0x88>

00004f3c <strlen>:
    4f3c:	20800007 	ldb	r2,0(r4)
    4f40:	10000526 	beq	r2,zero,4f58 <strlen+0x1c>
    4f44:	2007883a 	mov	r3,r4
    4f48:	18c00044 	addi	r3,r3,1
    4f4c:	18800007 	ldb	r2,0(r3)
    4f50:	103ffd1e 	bne	r2,zero,4f48 <strlen+0xc>
    4f54:	1905c83a 	sub	r2,r3,r4
    4f58:	f800283a 	ret

00004f5c <_write_r>:
    4f5c:	defffd04 	addi	sp,sp,-12
    4f60:	dc000015 	stw	r16,0(sp)
    4f64:	04000034 	movhi	r16,0
    4f68:	841bd604 	addi	r16,r16,28504
    4f6c:	dc400115 	stw	r17,4(sp)
    4f70:	80000015 	stw	zero,0(r16)
    4f74:	2023883a 	mov	r17,r4
    4f78:	2809883a 	mov	r4,r5
    4f7c:	300b883a 	mov	r5,r6
    4f80:	380d883a 	mov	r6,r7
    4f84:	dfc00215 	stw	ra,8(sp)
    4f88:	00052a00 	call	52a0 <write>
    4f8c:	1007883a 	mov	r3,r2
    4f90:	00bfffc4 	movi	r2,-1
    4f94:	18800626 	beq	r3,r2,4fb0 <_write_r+0x54>
    4f98:	1805883a 	mov	r2,r3
    4f9c:	dfc00217 	ldw	ra,8(sp)
    4fa0:	dc400117 	ldw	r17,4(sp)
    4fa4:	dc000017 	ldw	r16,0(sp)
    4fa8:	dec00304 	addi	sp,sp,12
    4fac:	f800283a 	ret
    4fb0:	80800017 	ldw	r2,0(r16)
    4fb4:	103ff826 	beq	r2,zero,4f98 <_write_r+0x3c>
    4fb8:	88800015 	stw	r2,0(r17)
    4fbc:	1805883a 	mov	r2,r3
    4fc0:	dfc00217 	ldw	ra,8(sp)
    4fc4:	dc400117 	ldw	r17,4(sp)
    4fc8:	dc000017 	ldw	r16,0(sp)
    4fcc:	dec00304 	addi	sp,sp,12
    4fd0:	f800283a 	ret

00004fd4 <udivmodsi4>:
    4fd4:	29001b2e 	bgeu	r5,r4,5044 <udivmodsi4+0x70>
    4fd8:	28001a16 	blt	r5,zero,5044 <udivmodsi4+0x70>
    4fdc:	00800044 	movi	r2,1
    4fe0:	0007883a 	mov	r3,zero
    4fe4:	01c007c4 	movi	r7,31
    4fe8:	00000306 	br	4ff8 <udivmodsi4+0x24>
    4fec:	19c01326 	beq	r3,r7,503c <udivmodsi4+0x68>
    4ff0:	18c00044 	addi	r3,r3,1
    4ff4:	28000416 	blt	r5,zero,5008 <udivmodsi4+0x34>
    4ff8:	294b883a 	add	r5,r5,r5
    4ffc:	1085883a 	add	r2,r2,r2
    5000:	293ffa36 	bltu	r5,r4,4fec <udivmodsi4+0x18>
    5004:	10000d26 	beq	r2,zero,503c <udivmodsi4+0x68>
    5008:	0007883a 	mov	r3,zero
    500c:	21400236 	bltu	r4,r5,5018 <udivmodsi4+0x44>
    5010:	2149c83a 	sub	r4,r4,r5
    5014:	1886b03a 	or	r3,r3,r2
    5018:	1004d07a 	srli	r2,r2,1
    501c:	280ad07a 	srli	r5,r5,1
    5020:	103ffa1e 	bne	r2,zero,500c <udivmodsi4+0x38>
    5024:	30000226 	beq	r6,zero,5030 <udivmodsi4+0x5c>
    5028:	2005883a 	mov	r2,r4
    502c:	f800283a 	ret
    5030:	1809883a 	mov	r4,r3
    5034:	2005883a 	mov	r2,r4
    5038:	f800283a 	ret
    503c:	0007883a 	mov	r3,zero
    5040:	003ff806 	br	5024 <udivmodsi4+0x50>
    5044:	00800044 	movi	r2,1
    5048:	0007883a 	mov	r3,zero
    504c:	003fef06 	br	500c <udivmodsi4+0x38>

00005050 <__divsi3>:
    5050:	defffe04 	addi	sp,sp,-8
    5054:	dc000015 	stw	r16,0(sp)
    5058:	dfc00115 	stw	ra,4(sp)
    505c:	0021883a 	mov	r16,zero
    5060:	20000c16 	blt	r4,zero,5094 <__divsi3+0x44>
    5064:	000d883a 	mov	r6,zero
    5068:	28000e16 	blt	r5,zero,50a4 <__divsi3+0x54>
    506c:	0004fd40 	call	4fd4 <udivmodsi4>
    5070:	1007883a 	mov	r3,r2
    5074:	8005003a 	cmpeq	r2,r16,zero
    5078:	1000011e 	bne	r2,zero,5080 <__divsi3+0x30>
    507c:	00c7c83a 	sub	r3,zero,r3
    5080:	1805883a 	mov	r2,r3
    5084:	dfc00117 	ldw	ra,4(sp)
    5088:	dc000017 	ldw	r16,0(sp)
    508c:	dec00204 	addi	sp,sp,8
    5090:	f800283a 	ret
    5094:	0109c83a 	sub	r4,zero,r4
    5098:	04000044 	movi	r16,1
    509c:	000d883a 	mov	r6,zero
    50a0:	283ff20e 	bge	r5,zero,506c <__divsi3+0x1c>
    50a4:	014bc83a 	sub	r5,zero,r5
    50a8:	8021003a 	cmpeq	r16,r16,zero
    50ac:	003fef06 	br	506c <__divsi3+0x1c>

000050b0 <__modsi3>:
    50b0:	deffff04 	addi	sp,sp,-4
    50b4:	dfc00015 	stw	ra,0(sp)
    50b8:	01800044 	movi	r6,1
    50bc:	2807883a 	mov	r3,r5
    50c0:	20000416 	blt	r4,zero,50d4 <__modsi3+0x24>
    50c4:	28000c16 	blt	r5,zero,50f8 <__modsi3+0x48>
    50c8:	dfc00017 	ldw	ra,0(sp)
    50cc:	dec00104 	addi	sp,sp,4
    50d0:	0004fd41 	jmpi	4fd4 <udivmodsi4>
    50d4:	0109c83a 	sub	r4,zero,r4
    50d8:	28000b16 	blt	r5,zero,5108 <__modsi3+0x58>
    50dc:	180b883a 	mov	r5,r3
    50e0:	01800044 	movi	r6,1
    50e4:	0004fd40 	call	4fd4 <udivmodsi4>
    50e8:	0085c83a 	sub	r2,zero,r2
    50ec:	dfc00017 	ldw	ra,0(sp)
    50f0:	dec00104 	addi	sp,sp,4
    50f4:	f800283a 	ret
    50f8:	014bc83a 	sub	r5,zero,r5
    50fc:	dfc00017 	ldw	ra,0(sp)
    5100:	dec00104 	addi	sp,sp,4
    5104:	0004fd41 	jmpi	4fd4 <udivmodsi4>
    5108:	0147c83a 	sub	r3,zero,r5
    510c:	003ff306 	br	50dc <__modsi3+0x2c>

00005110 <__udivsi3>:
    5110:	000d883a 	mov	r6,zero
    5114:	0004fd41 	jmpi	4fd4 <udivmodsi4>

00005118 <__umodsi3>:
    5118:	01800044 	movi	r6,1
    511c:	0004fd41 	jmpi	4fd4 <udivmodsi4>

00005120 <__mulsi3>:
    5120:	20000a26 	beq	r4,zero,514c <__mulsi3+0x2c>
    5124:	0007883a 	mov	r3,zero
    5128:	2080004c 	andi	r2,r4,1
    512c:	1005003a 	cmpeq	r2,r2,zero
    5130:	2008d07a 	srli	r4,r4,1
    5134:	1000011e 	bne	r2,zero,513c <__mulsi3+0x1c>
    5138:	1947883a 	add	r3,r3,r5
    513c:	294b883a 	add	r5,r5,r5
    5140:	203ff91e 	bne	r4,zero,5128 <__mulsi3+0x8>
    5144:	1805883a 	mov	r2,r3
    5148:	f800283a 	ret
    514c:	0007883a 	mov	r3,zero
    5150:	1805883a 	mov	r2,r3
    5154:	f800283a 	ret

00005158 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5158:	defffe04 	addi	sp,sp,-8
    515c:	dfc00115 	stw	ra,4(sp)
    5160:	df000015 	stw	fp,0(sp)
    5164:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    5168:	01000034 	movhi	r4,0
    516c:	211b1d04 	addi	r4,r4,27764
    5170:	01400034 	movhi	r5,0
    5174:	295a6404 	addi	r5,r5,27024
    5178:	01800034 	movhi	r6,0
    517c:	319b1d04 	addi	r6,r6,27764
    5180:	00051d80 	call	51d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    5184:	01000034 	movhi	r4,0
    5188:	21100804 	addi	r4,r4,16416
    518c:	01400034 	movhi	r5,0
    5190:	29500804 	addi	r5,r5,16416
    5194:	01800034 	movhi	r6,0
    5198:	31906d04 	addi	r6,r6,16820
    519c:	00051d80 	call	51d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    51a0:	01000034 	movhi	r4,0
    51a4:	211a5104 	addi	r4,r4,26948
    51a8:	01400034 	movhi	r5,0
    51ac:	295a5104 	addi	r5,r5,26948
    51b0:	01800034 	movhi	r6,0
    51b4:	319a6404 	addi	r6,r6,27024
    51b8:	00051d80 	call	51d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    51bc:	000598c0 	call	598c <alt_dcache_flush_all>
  alt_icache_flush_all();
    51c0:	0005ae80 	call	5ae8 <alt_icache_flush_all>
}
    51c4:	e037883a 	mov	sp,fp
    51c8:	dfc00117 	ldw	ra,4(sp)
    51cc:	df000017 	ldw	fp,0(sp)
    51d0:	dec00204 	addi	sp,sp,8
    51d4:	f800283a 	ret

000051d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    51d8:	defffc04 	addi	sp,sp,-16
    51dc:	df000315 	stw	fp,12(sp)
    51e0:	df000304 	addi	fp,sp,12
    51e4:	e13ffd15 	stw	r4,-12(fp)
    51e8:	e17ffe15 	stw	r5,-8(fp)
    51ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    51f0:	e0fffe17 	ldw	r3,-8(fp)
    51f4:	e0bffd17 	ldw	r2,-12(fp)
    51f8:	18800e26 	beq	r3,r2,5234 <alt_load_section+0x5c>
  {
    while( to != end )
    51fc:	00000a06 	br	5228 <alt_load_section+0x50>
    {
      *to++ = *from++;
    5200:	e0bffd17 	ldw	r2,-12(fp)
    5204:	10c00017 	ldw	r3,0(r2)
    5208:	e0bffe17 	ldw	r2,-8(fp)
    520c:	10c00015 	stw	r3,0(r2)
    5210:	e0bffe17 	ldw	r2,-8(fp)
    5214:	10800104 	addi	r2,r2,4
    5218:	e0bffe15 	stw	r2,-8(fp)
    521c:	e0bffd17 	ldw	r2,-12(fp)
    5220:	10800104 	addi	r2,r2,4
    5224:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5228:	e0fffe17 	ldw	r3,-8(fp)
    522c:	e0bfff17 	ldw	r2,-4(fp)
    5230:	18bff31e 	bne	r3,r2,5200 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    5234:	e037883a 	mov	sp,fp
    5238:	df000017 	ldw	fp,0(sp)
    523c:	dec00104 	addi	sp,sp,4
    5240:	f800283a 	ret

00005244 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5244:	defffd04 	addi	sp,sp,-12
    5248:	dfc00215 	stw	ra,8(sp)
    524c:	df000115 	stw	fp,4(sp)
    5250:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5254:	0009883a 	mov	r4,zero
    5258:	00054240 	call	5424 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    525c:	00054580 	call	5458 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    5260:	01000034 	movhi	r4,0
    5264:	211a5704 	addi	r4,r4,26972
    5268:	01400034 	movhi	r5,0
    526c:	295a5704 	addi	r5,r5,26972
    5270:	01800034 	movhi	r6,0
    5274:	319a5704 	addi	r6,r6,26972
    5278:	0005ea80 	call	5ea8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    527c:	d120c617 	ldw	r4,-31976(gp)
    5280:	d160c717 	ldw	r5,-31972(gp)
    5284:	d1a0c817 	ldw	r6,-31968(gp)
    5288:	00041f00 	call	41f0 <main>
    528c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    5290:	01000044 	movi	r4,1
    5294:	000582c0 	call	582c <close>
  exit (result);
    5298:	e13fff17 	ldw	r4,-4(fp)
    529c:	00066c40 	call	66c4 <exit>

000052a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    52a0:	defff704 	addi	sp,sp,-36
    52a4:	dfc00815 	stw	ra,32(sp)
    52a8:	df000715 	stw	fp,28(sp)
    52ac:	df000704 	addi	fp,sp,28
    52b0:	e13ffb15 	stw	r4,-20(fp)
    52b4:	e17ffc15 	stw	r5,-16(fp)
    52b8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    52bc:	e0bffb17 	ldw	r2,-20(fp)
    52c0:	1004803a 	cmplt	r2,r2,zero
    52c4:	1000091e 	bne	r2,zero,52ec <write+0x4c>
    52c8:	e13ffb17 	ldw	r4,-20(fp)
    52cc:	01400304 	movi	r5,12
    52d0:	00051200 	call	5120 <__mulsi3>
    52d4:	1007883a 	mov	r3,r2
    52d8:	00800034 	movhi	r2,0
    52dc:	109ab104 	addi	r2,r2,27332
    52e0:	1887883a 	add	r3,r3,r2
    52e4:	e0ffff15 	stw	r3,-4(fp)
    52e8:	00000106 	br	52f0 <write+0x50>
    52ec:	e03fff15 	stw	zero,-4(fp)
    52f0:	e0bfff17 	ldw	r2,-4(fp)
    52f4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    52f8:	e0bffa17 	ldw	r2,-24(fp)
    52fc:	1005003a 	cmpeq	r2,r2,zero
    5300:	1000241e 	bne	r2,zero,5394 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5304:	e0bffa17 	ldw	r2,-24(fp)
    5308:	10800217 	ldw	r2,8(r2)
    530c:	108000cc 	andi	r2,r2,3
    5310:	1005003a 	cmpeq	r2,r2,zero
    5314:	10001a1e 	bne	r2,zero,5380 <write+0xe0>
    5318:	e0bffa17 	ldw	r2,-24(fp)
    531c:	10800017 	ldw	r2,0(r2)
    5320:	10800617 	ldw	r2,24(r2)
    5324:	1005003a 	cmpeq	r2,r2,zero
    5328:	1000151e 	bne	r2,zero,5380 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    532c:	e0bffa17 	ldw	r2,-24(fp)
    5330:	10800017 	ldw	r2,0(r2)
    5334:	10800617 	ldw	r2,24(r2)
    5338:	e17ffc17 	ldw	r5,-16(fp)
    533c:	e1bffd17 	ldw	r6,-12(fp)
    5340:	e13ffa17 	ldw	r4,-24(fp)
    5344:	103ee83a 	callr	r2
    5348:	e0bff915 	stw	r2,-28(fp)
    534c:	e0bff917 	ldw	r2,-28(fp)
    5350:	1004403a 	cmpge	r2,r2,zero
    5354:	1000071e 	bne	r2,zero,5374 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    5358:	00053c40 	call	53c4 <alt_get_errno>
    535c:	e0fff917 	ldw	r3,-28(fp)
    5360:	00c7c83a 	sub	r3,zero,r3
    5364:	10c00015 	stw	r3,0(r2)
        return -1;
    5368:	00bfffc4 	movi	r2,-1
    536c:	e0bffe15 	stw	r2,-8(fp)
    5370:	00000e06 	br	53ac <write+0x10c>
      }
      return rval;
    5374:	e0bff917 	ldw	r2,-28(fp)
    5378:	e0bffe15 	stw	r2,-8(fp)
    537c:	00000b06 	br	53ac <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5380:	00053c40 	call	53c4 <alt_get_errno>
    5384:	1007883a 	mov	r3,r2
    5388:	00800344 	movi	r2,13
    538c:	18800015 	stw	r2,0(r3)
    5390:	00000406 	br	53a4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5394:	00053c40 	call	53c4 <alt_get_errno>
    5398:	1007883a 	mov	r3,r2
    539c:	00801444 	movi	r2,81
    53a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    53a4:	00bfffc4 	movi	r2,-1
    53a8:	e0bffe15 	stw	r2,-8(fp)
    53ac:	e0bffe17 	ldw	r2,-8(fp)
}
    53b0:	e037883a 	mov	sp,fp
    53b4:	dfc00117 	ldw	ra,4(sp)
    53b8:	df000017 	ldw	fp,0(sp)
    53bc:	dec00204 	addi	sp,sp,8
    53c0:	f800283a 	ret

000053c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    53c4:	defffd04 	addi	sp,sp,-12
    53c8:	dfc00215 	stw	ra,8(sp)
    53cc:	df000115 	stw	fp,4(sp)
    53d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    53d4:	00800034 	movhi	r2,0
    53d8:	109b1904 	addi	r2,r2,27748
    53dc:	10800017 	ldw	r2,0(r2)
    53e0:	1005003a 	cmpeq	r2,r2,zero
    53e4:	1000061e 	bne	r2,zero,5400 <alt_get_errno+0x3c>
    53e8:	00800034 	movhi	r2,0
    53ec:	109b1904 	addi	r2,r2,27748
    53f0:	10800017 	ldw	r2,0(r2)
    53f4:	103ee83a 	callr	r2
    53f8:	e0bfff15 	stw	r2,-4(fp)
    53fc:	00000306 	br	540c <alt_get_errno+0x48>
    5400:	00800034 	movhi	r2,0
    5404:	109bd604 	addi	r2,r2,28504
    5408:	e0bfff15 	stw	r2,-4(fp)
    540c:	e0bfff17 	ldw	r2,-4(fp)
}
    5410:	e037883a 	mov	sp,fp
    5414:	dfc00117 	ldw	ra,4(sp)
    5418:	df000017 	ldw	fp,0(sp)
    541c:	dec00204 	addi	sp,sp,8
    5420:	f800283a 	ret

00005424 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5424:	defffd04 	addi	sp,sp,-12
    5428:	dfc00215 	stw	ra,8(sp)
    542c:	df000115 	stw	fp,4(sp)
    5430:	df000104 	addi	fp,sp,4
    5434:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS_II, NIOS_II);
    5438:	00064200 	call	6420 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    543c:	00800044 	movi	r2,1
    5440:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5444:	e037883a 	mov	sp,fp
    5448:	dfc00117 	ldw	ra,4(sp)
    544c:	df000017 	ldw	fp,0(sp)
    5450:	dec00204 	addi	sp,sp,8
    5454:	f800283a 	ret

00005458 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5458:	defffe04 	addi	sp,sp,-8
    545c:	dfc00115 	stw	ra,4(sp)
    5460:	df000015 	stw	fp,0(sp)
    5464:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    5468:	01240014 	movui	r4,36864
    546c:	000b883a 	mov	r5,zero
    5470:	000d883a 	mov	r6,zero
    5474:	01c0fa04 	movi	r7,1000
    5478:	000579c0 	call	579c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    547c:	01000034 	movhi	r4,0
    5480:	211a9c04 	addi	r4,r4,27248
    5484:	000549c0 	call	549c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    5488:	e037883a 	mov	sp,fp
    548c:	dfc00117 	ldw	ra,4(sp)
    5490:	df000017 	ldw	fp,0(sp)
    5494:	dec00204 	addi	sp,sp,8
    5498:	f800283a 	ret

0000549c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    549c:	defffd04 	addi	sp,sp,-12
    54a0:	dfc00215 	stw	ra,8(sp)
    54a4:	df000115 	stw	fp,4(sp)
    54a8:	df000104 	addi	fp,sp,4
    54ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    54b0:	e13fff17 	ldw	r4,-4(fp)
    54b4:	01400034 	movhi	r5,0
    54b8:	295b1604 	addi	r5,r5,27736
    54bc:	00059d40 	call	59d4 <alt_dev_llist_insert>
}
    54c0:	e037883a 	mov	sp,fp
    54c4:	dfc00117 	ldw	ra,4(sp)
    54c8:	df000017 	ldw	fp,0(sp)
    54cc:	dec00204 	addi	sp,sp,8
    54d0:	f800283a 	ret

000054d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    54d4:	defffa04 	addi	sp,sp,-24
    54d8:	dfc00515 	stw	ra,20(sp)
    54dc:	df000415 	stw	fp,16(sp)
    54e0:	df000404 	addi	fp,sp,16
    54e4:	e13ffd15 	stw	r4,-12(fp)
    54e8:	e17ffe15 	stw	r5,-8(fp)
    54ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    54f0:	e0bffd17 	ldw	r2,-12(fp)
    54f4:	10800017 	ldw	r2,0(r2)
    54f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    54fc:	e0bffc17 	ldw	r2,-16(fp)
    5500:	11000a04 	addi	r4,r2,40
    5504:	e0bffd17 	ldw	r2,-12(fp)
    5508:	11c00217 	ldw	r7,8(r2)
    550c:	e17ffe17 	ldw	r5,-8(fp)
    5510:	e1bfff17 	ldw	r6,-4(fp)
    5514:	00055840 	call	5584 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5518:	e037883a 	mov	sp,fp
    551c:	dfc00117 	ldw	ra,4(sp)
    5520:	df000017 	ldw	fp,0(sp)
    5524:	dec00204 	addi	sp,sp,8
    5528:	f800283a 	ret

0000552c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    552c:	defffa04 	addi	sp,sp,-24
    5530:	dfc00515 	stw	ra,20(sp)
    5534:	df000415 	stw	fp,16(sp)
    5538:	df000404 	addi	fp,sp,16
    553c:	e13ffd15 	stw	r4,-12(fp)
    5540:	e17ffe15 	stw	r5,-8(fp)
    5544:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5548:	e0bffd17 	ldw	r2,-12(fp)
    554c:	10800017 	ldw	r2,0(r2)
    5550:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    5554:	e0bffc17 	ldw	r2,-16(fp)
    5558:	11000a04 	addi	r4,r2,40
    555c:	e0bffd17 	ldw	r2,-12(fp)
    5560:	11c00217 	ldw	r7,8(r2)
    5564:	e17ffe17 	ldw	r5,-8(fp)
    5568:	e1bfff17 	ldw	r6,-4(fp)
    556c:	00056880 	call	5688 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5570:	e037883a 	mov	sp,fp
    5574:	dfc00117 	ldw	ra,4(sp)
    5578:	df000017 	ldw	fp,0(sp)
    557c:	dec00204 	addi	sp,sp,8
    5580:	f800283a 	ret

00005584 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    5584:	defff604 	addi	sp,sp,-40
    5588:	df000915 	stw	fp,36(sp)
    558c:	df000904 	addi	fp,sp,36
    5590:	e13ffb15 	stw	r4,-20(fp)
    5594:	e17ffc15 	stw	r5,-16(fp)
    5598:	e1bffd15 	stw	r6,-12(fp)
    559c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    55a0:	e0bffb17 	ldw	r2,-20(fp)
    55a4:	10800017 	ldw	r2,0(r2)
    55a8:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    55ac:	e0bffc17 	ldw	r2,-16(fp)
    55b0:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    55b4:	e0bffd17 	ldw	r2,-12(fp)
    55b8:	1007883a 	mov	r3,r2
    55bc:	e0bffc17 	ldw	r2,-16(fp)
    55c0:	10c5883a 	add	r2,r2,r3
    55c4:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    55c8:	00001606 	br	5624 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    55cc:	e0bffa17 	ldw	r2,-24(fp)
    55d0:	10800037 	ldwio	r2,0(r2)
    55d4:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    55d8:	e0bff717 	ldw	r2,-36(fp)
    55dc:	10a0000c 	andi	r2,r2,32768
    55e0:	1005003a 	cmpeq	r2,r2,zero
    55e4:	1000081e 	bne	r2,zero,5608 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    55e8:	e0bff717 	ldw	r2,-36(fp)
    55ec:	1007883a 	mov	r3,r2
    55f0:	e0bff917 	ldw	r2,-28(fp)
    55f4:	10c00005 	stb	r3,0(r2)
    55f8:	e0bff917 	ldw	r2,-28(fp)
    55fc:	10800044 	addi	r2,r2,1
    5600:	e0bff915 	stw	r2,-28(fp)
    5604:	00000706 	br	5624 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    5608:	e0fff917 	ldw	r3,-28(fp)
    560c:	e0bffc17 	ldw	r2,-16(fp)
    5610:	1880071e 	bne	r3,r2,5630 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    5614:	e0bffe17 	ldw	r2,-8(fp)
    5618:	1090000c 	andi	r2,r2,16384
    561c:	1004c03a 	cmpne	r2,r2,zero
    5620:	1000031e 	bne	r2,zero,5630 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5624:	e0fff917 	ldw	r3,-28(fp)
    5628:	e0bff817 	ldw	r2,-32(fp)
    562c:	18bfe736 	bltu	r3,r2,55cc <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    5630:	e0fff917 	ldw	r3,-28(fp)
    5634:	e0bffc17 	ldw	r2,-16(fp)
    5638:	18800526 	beq	r3,r2,5650 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    563c:	e0fff917 	ldw	r3,-28(fp)
    5640:	e0bffc17 	ldw	r2,-16(fp)
    5644:	1887c83a 	sub	r3,r3,r2
    5648:	e0ffff15 	stw	r3,-4(fp)
    564c:	00000906 	br	5674 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    5650:	e0bffe17 	ldw	r2,-8(fp)
    5654:	1090000c 	andi	r2,r2,16384
    5658:	1005003a 	cmpeq	r2,r2,zero
    565c:	1000031e 	bne	r2,zero,566c <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    5660:	00bffd44 	movi	r2,-11
    5664:	e0bfff15 	stw	r2,-4(fp)
    5668:	00000206 	br	5674 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    566c:	00bffec4 	movi	r2,-5
    5670:	e0bfff15 	stw	r2,-4(fp)
    5674:	e0bfff17 	ldw	r2,-4(fp)
}
    5678:	e037883a 	mov	sp,fp
    567c:	df000017 	ldw	fp,0(sp)
    5680:	dec00104 	addi	sp,sp,4
    5684:	f800283a 	ret

00005688 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5688:	defff904 	addi	sp,sp,-28
    568c:	df000615 	stw	fp,24(sp)
    5690:	df000604 	addi	fp,sp,24
    5694:	e13ffc15 	stw	r4,-16(fp)
    5698:	e17ffd15 	stw	r5,-12(fp)
    569c:	e1bffe15 	stw	r6,-8(fp)
    56a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    56a4:	e0bffc17 	ldw	r2,-16(fp)
    56a8:	10800017 	ldw	r2,0(r2)
    56ac:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    56b0:	e0bffe17 	ldw	r2,-8(fp)
    56b4:	1007883a 	mov	r3,r2
    56b8:	e0bffd17 	ldw	r2,-12(fp)
    56bc:	10c5883a 	add	r2,r2,r3
    56c0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    56c4:	00001106 	br	570c <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    56c8:	e0bffb17 	ldw	r2,-20(fp)
    56cc:	10800104 	addi	r2,r2,4
    56d0:	10800037 	ldwio	r2,0(r2)
    56d4:	10bfffec 	andhi	r2,r2,65535
    56d8:	1005003a 	cmpeq	r2,r2,zero
    56dc:	10000b1e 	bne	r2,zero,570c <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    56e0:	e13ffb17 	ldw	r4,-20(fp)
    56e4:	e0bffd17 	ldw	r2,-12(fp)
    56e8:	10800003 	ldbu	r2,0(r2)
    56ec:	10c03fcc 	andi	r3,r2,255
    56f0:	18c0201c 	xori	r3,r3,128
    56f4:	18ffe004 	addi	r3,r3,-128
    56f8:	e0bffd17 	ldw	r2,-12(fp)
    56fc:	10800044 	addi	r2,r2,1
    5700:	e0bffd15 	stw	r2,-12(fp)
    5704:	2005883a 	mov	r2,r4
    5708:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    570c:	e0fffd17 	ldw	r3,-12(fp)
    5710:	e0bffa17 	ldw	r2,-24(fp)
    5714:	18bfec36 	bltu	r3,r2,56c8 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5718:	e0bffe17 	ldw	r2,-8(fp)
}
    571c:	e037883a 	mov	sp,fp
    5720:	df000017 	ldw	fp,0(sp)
    5724:	dec00104 	addi	sp,sp,4
    5728:	f800283a 	ret

0000572c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    572c:	defffa04 	addi	sp,sp,-24
    5730:	dfc00515 	stw	ra,20(sp)
    5734:	df000415 	stw	fp,16(sp)
    5738:	df000404 	addi	fp,sp,16
    573c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    5740:	e0bfff17 	ldw	r2,-4(fp)
    5744:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    5748:	e0bfff17 	ldw	r2,-4(fp)
    574c:	10800104 	addi	r2,r2,4
    5750:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5754:	0005303a 	rdctl	r2,status
    5758:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    575c:	e0fffd17 	ldw	r3,-12(fp)
    5760:	00bfff84 	movi	r2,-2
    5764:	1884703a 	and	r2,r3,r2
    5768:	1001703a 	wrctl	status,r2
  
  return context;
    576c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    5770:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    5774:	00063140 	call	6314 <alt_tick>
    5778:	e0bffe17 	ldw	r2,-8(fp)
    577c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5780:	e0bffc17 	ldw	r2,-16(fp)
    5784:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    5788:	e037883a 	mov	sp,fp
    578c:	dfc00117 	ldw	ra,4(sp)
    5790:	df000017 	ldw	fp,0(sp)
    5794:	dec00204 	addi	sp,sp,8
    5798:	f800283a 	ret

0000579c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    579c:	defff804 	addi	sp,sp,-32
    57a0:	dfc00715 	stw	ra,28(sp)
    57a4:	df000615 	stw	fp,24(sp)
    57a8:	df000604 	addi	fp,sp,24
    57ac:	e13ffc15 	stw	r4,-16(fp)
    57b0:	e17ffd15 	stw	r5,-12(fp)
    57b4:	e1bffe15 	stw	r6,-8(fp)
    57b8:	e1ffff15 	stw	r7,-4(fp)
    57bc:	e0bfff17 	ldw	r2,-4(fp)
    57c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    57c4:	00800034 	movhi	r2,0
    57c8:	109bdb04 	addi	r2,r2,28524
    57cc:	10800017 	ldw	r2,0(r2)
    57d0:	1004c03a 	cmpne	r2,r2,zero
    57d4:	1000041e 	bne	r2,zero,57e8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    57d8:	00c00034 	movhi	r3,0
    57dc:	18dbdb04 	addi	r3,r3,28524
    57e0:	e0bffb17 	ldw	r2,-20(fp)
    57e4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    57e8:	e0bffc17 	ldw	r2,-16(fp)
    57ec:	10800104 	addi	r2,r2,4
    57f0:	1007883a 	mov	r3,r2
    57f4:	008001c4 	movi	r2,7
    57f8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    57fc:	d8000015 	stw	zero,0(sp)
    5800:	e13ffd17 	ldw	r4,-12(fp)
    5804:	e17ffe17 	ldw	r5,-8(fp)
    5808:	01800034 	movhi	r6,0
    580c:	3195cb04 	addi	r6,r6,22316
    5810:	e1fffc17 	ldw	r7,-16(fp)
    5814:	0005b040 	call	5b04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    5818:	e037883a 	mov	sp,fp
    581c:	dfc00117 	ldw	ra,4(sp)
    5820:	df000017 	ldw	fp,0(sp)
    5824:	dec00204 	addi	sp,sp,8
    5828:	f800283a 	ret

0000582c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    582c:	defff804 	addi	sp,sp,-32
    5830:	dfc00715 	stw	ra,28(sp)
    5834:	df000615 	stw	fp,24(sp)
    5838:	df000604 	addi	fp,sp,24
    583c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5840:	e0bffc17 	ldw	r2,-16(fp)
    5844:	1004803a 	cmplt	r2,r2,zero
    5848:	1000091e 	bne	r2,zero,5870 <close+0x44>
    584c:	e13ffc17 	ldw	r4,-16(fp)
    5850:	01400304 	movi	r5,12
    5854:	00051200 	call	5120 <__mulsi3>
    5858:	1007883a 	mov	r3,r2
    585c:	00800034 	movhi	r2,0
    5860:	109ab104 	addi	r2,r2,27332
    5864:	1887883a 	add	r3,r3,r2
    5868:	e0ffff15 	stw	r3,-4(fp)
    586c:	00000106 	br	5874 <close+0x48>
    5870:	e03fff15 	stw	zero,-4(fp)
    5874:	e0bfff17 	ldw	r2,-4(fp)
    5878:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    587c:	e0bffb17 	ldw	r2,-20(fp)
    5880:	1005003a 	cmpeq	r2,r2,zero
    5884:	10001d1e 	bne	r2,zero,58fc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5888:	e0bffb17 	ldw	r2,-20(fp)
    588c:	10800017 	ldw	r2,0(r2)
    5890:	10800417 	ldw	r2,16(r2)
    5894:	1005003a 	cmpeq	r2,r2,zero
    5898:	1000071e 	bne	r2,zero,58b8 <close+0x8c>
    589c:	e0bffb17 	ldw	r2,-20(fp)
    58a0:	10800017 	ldw	r2,0(r2)
    58a4:	10800417 	ldw	r2,16(r2)
    58a8:	e13ffb17 	ldw	r4,-20(fp)
    58ac:	103ee83a 	callr	r2
    58b0:	e0bffe15 	stw	r2,-8(fp)
    58b4:	00000106 	br	58bc <close+0x90>
    58b8:	e03ffe15 	stw	zero,-8(fp)
    58bc:	e0bffe17 	ldw	r2,-8(fp)
    58c0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    58c4:	e13ffc17 	ldw	r4,-16(fp)
    58c8:	00062040 	call	6204 <alt_release_fd>
    if (rval < 0)
    58cc:	e0bffa17 	ldw	r2,-24(fp)
    58d0:	1004403a 	cmpge	r2,r2,zero
    58d4:	1000071e 	bne	r2,zero,58f4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    58d8:	000592c0 	call	592c <alt_get_errno>
    58dc:	e0fffa17 	ldw	r3,-24(fp)
    58e0:	00c7c83a 	sub	r3,zero,r3
    58e4:	10c00015 	stw	r3,0(r2)
      return -1;
    58e8:	00bfffc4 	movi	r2,-1
    58ec:	e0bffd15 	stw	r2,-12(fp)
    58f0:	00000806 	br	5914 <close+0xe8>
    }
    return 0;
    58f4:	e03ffd15 	stw	zero,-12(fp)
    58f8:	00000606 	br	5914 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    58fc:	000592c0 	call	592c <alt_get_errno>
    5900:	1007883a 	mov	r3,r2
    5904:	00801444 	movi	r2,81
    5908:	18800015 	stw	r2,0(r3)
    return -1;
    590c:	00bfffc4 	movi	r2,-1
    5910:	e0bffd15 	stw	r2,-12(fp)
    5914:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    5918:	e037883a 	mov	sp,fp
    591c:	dfc00117 	ldw	ra,4(sp)
    5920:	df000017 	ldw	fp,0(sp)
    5924:	dec00204 	addi	sp,sp,8
    5928:	f800283a 	ret

0000592c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    592c:	defffd04 	addi	sp,sp,-12
    5930:	dfc00215 	stw	ra,8(sp)
    5934:	df000115 	stw	fp,4(sp)
    5938:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    593c:	00800034 	movhi	r2,0
    5940:	109b1904 	addi	r2,r2,27748
    5944:	10800017 	ldw	r2,0(r2)
    5948:	1005003a 	cmpeq	r2,r2,zero
    594c:	1000061e 	bne	r2,zero,5968 <alt_get_errno+0x3c>
    5950:	00800034 	movhi	r2,0
    5954:	109b1904 	addi	r2,r2,27748
    5958:	10800017 	ldw	r2,0(r2)
    595c:	103ee83a 	callr	r2
    5960:	e0bfff15 	stw	r2,-4(fp)
    5964:	00000306 	br	5974 <alt_get_errno+0x48>
    5968:	00800034 	movhi	r2,0
    596c:	109bd604 	addi	r2,r2,28504
    5970:	e0bfff15 	stw	r2,-4(fp)
    5974:	e0bfff17 	ldw	r2,-4(fp)
}
    5978:	e037883a 	mov	sp,fp
    597c:	dfc00117 	ldw	ra,4(sp)
    5980:	df000017 	ldw	fp,0(sp)
    5984:	dec00204 	addi	sp,sp,8
    5988:	f800283a 	ret

0000598c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    598c:	deffff04 	addi	sp,sp,-4
    5990:	df000015 	stw	fp,0(sp)
    5994:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5998:	e037883a 	mov	sp,fp
    599c:	df000017 	ldw	fp,0(sp)
    59a0:	dec00104 	addi	sp,sp,4
    59a4:	f800283a 	ret

000059a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    59a8:	defffc04 	addi	sp,sp,-16
    59ac:	df000315 	stw	fp,12(sp)
    59b0:	df000304 	addi	fp,sp,12
    59b4:	e13ffd15 	stw	r4,-12(fp)
    59b8:	e17ffe15 	stw	r5,-8(fp)
    59bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    59c0:	e0bfff17 	ldw	r2,-4(fp)
}
    59c4:	e037883a 	mov	sp,fp
    59c8:	df000017 	ldw	fp,0(sp)
    59cc:	dec00104 	addi	sp,sp,4
    59d0:	f800283a 	ret

000059d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    59d4:	defff904 	addi	sp,sp,-28
    59d8:	dfc00615 	stw	ra,24(sp)
    59dc:	df000515 	stw	fp,20(sp)
    59e0:	df000504 	addi	fp,sp,20
    59e4:	e13ffd15 	stw	r4,-12(fp)
    59e8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    59ec:	e0bffd17 	ldw	r2,-12(fp)
    59f0:	1005003a 	cmpeq	r2,r2,zero
    59f4:	1000041e 	bne	r2,zero,5a08 <alt_dev_llist_insert+0x34>
    59f8:	e0bffd17 	ldw	r2,-12(fp)
    59fc:	10800217 	ldw	r2,8(r2)
    5a00:	1004c03a 	cmpne	r2,r2,zero
    5a04:	1000071e 	bne	r2,zero,5a24 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    5a08:	0005a880 	call	5a88 <alt_get_errno>
    5a0c:	1007883a 	mov	r3,r2
    5a10:	00800584 	movi	r2,22
    5a14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5a18:	00bffa84 	movi	r2,-22
    5a1c:	e0bfff15 	stw	r2,-4(fp)
    5a20:	00001306 	br	5a70 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5a24:	e0fffd17 	ldw	r3,-12(fp)
    5a28:	e0bffe17 	ldw	r2,-8(fp)
    5a2c:	e0bffb15 	stw	r2,-20(fp)
    5a30:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5a34:	e0fffc17 	ldw	r3,-16(fp)
    5a38:	e0bffb17 	ldw	r2,-20(fp)
    5a3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5a40:	e0bffb17 	ldw	r2,-20(fp)
    5a44:	10c00017 	ldw	r3,0(r2)
    5a48:	e0bffc17 	ldw	r2,-16(fp)
    5a4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5a50:	e0bffb17 	ldw	r2,-20(fp)
    5a54:	10c00017 	ldw	r3,0(r2)
    5a58:	e0bffc17 	ldw	r2,-16(fp)
    5a5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    5a60:	e0fffb17 	ldw	r3,-20(fp)
    5a64:	e0bffc17 	ldw	r2,-16(fp)
    5a68:	18800015 	stw	r2,0(r3)

  return 0;  
    5a6c:	e03fff15 	stw	zero,-4(fp)
    5a70:	e0bfff17 	ldw	r2,-4(fp)
}
    5a74:	e037883a 	mov	sp,fp
    5a78:	dfc00117 	ldw	ra,4(sp)
    5a7c:	df000017 	ldw	fp,0(sp)
    5a80:	dec00204 	addi	sp,sp,8
    5a84:	f800283a 	ret

00005a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5a88:	defffd04 	addi	sp,sp,-12
    5a8c:	dfc00215 	stw	ra,8(sp)
    5a90:	df000115 	stw	fp,4(sp)
    5a94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5a98:	00800034 	movhi	r2,0
    5a9c:	109b1904 	addi	r2,r2,27748
    5aa0:	10800017 	ldw	r2,0(r2)
    5aa4:	1005003a 	cmpeq	r2,r2,zero
    5aa8:	1000061e 	bne	r2,zero,5ac4 <alt_get_errno+0x3c>
    5aac:	00800034 	movhi	r2,0
    5ab0:	109b1904 	addi	r2,r2,27748
    5ab4:	10800017 	ldw	r2,0(r2)
    5ab8:	103ee83a 	callr	r2
    5abc:	e0bfff15 	stw	r2,-4(fp)
    5ac0:	00000306 	br	5ad0 <alt_get_errno+0x48>
    5ac4:	00800034 	movhi	r2,0
    5ac8:	109bd604 	addi	r2,r2,28504
    5acc:	e0bfff15 	stw	r2,-4(fp)
    5ad0:	e0bfff17 	ldw	r2,-4(fp)
}
    5ad4:	e037883a 	mov	sp,fp
    5ad8:	dfc00117 	ldw	ra,4(sp)
    5adc:	df000017 	ldw	fp,0(sp)
    5ae0:	dec00204 	addi	sp,sp,8
    5ae4:	f800283a 	ret

00005ae8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5ae8:	deffff04 	addi	sp,sp,-4
    5aec:	df000015 	stw	fp,0(sp)
    5af0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5af4:	e037883a 	mov	sp,fp
    5af8:	df000017 	ldw	fp,0(sp)
    5afc:	dec00104 	addi	sp,sp,4
    5b00:	f800283a 	ret

00005b04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5b04:	defff904 	addi	sp,sp,-28
    5b08:	dfc00615 	stw	ra,24(sp)
    5b0c:	df000515 	stw	fp,20(sp)
    5b10:	df000504 	addi	fp,sp,20
    5b14:	e13ffc15 	stw	r4,-16(fp)
    5b18:	e17ffd15 	stw	r5,-12(fp)
    5b1c:	e1bffe15 	stw	r6,-8(fp)
    5b20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5b24:	e0800217 	ldw	r2,8(fp)
    5b28:	d8800015 	stw	r2,0(sp)
    5b2c:	e13ffc17 	ldw	r4,-16(fp)
    5b30:	e17ffd17 	ldw	r5,-12(fp)
    5b34:	e1bffe17 	ldw	r6,-8(fp)
    5b38:	e1ffff17 	ldw	r7,-4(fp)
    5b3c:	0005cd80 	call	5cd8 <alt_iic_isr_register>
}  
    5b40:	e037883a 	mov	sp,fp
    5b44:	dfc00117 	ldw	ra,4(sp)
    5b48:	df000017 	ldw	fp,0(sp)
    5b4c:	dec00204 	addi	sp,sp,8
    5b50:	f800283a 	ret

00005b54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5b54:	defff904 	addi	sp,sp,-28
    5b58:	df000615 	stw	fp,24(sp)
    5b5c:	df000604 	addi	fp,sp,24
    5b60:	e13ffe15 	stw	r4,-8(fp)
    5b64:	e17fff15 	stw	r5,-4(fp)
    5b68:	e0bfff17 	ldw	r2,-4(fp)
    5b6c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b70:	0005303a 	rdctl	r2,status
    5b74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b78:	e0fffb17 	ldw	r3,-20(fp)
    5b7c:	00bfff84 	movi	r2,-2
    5b80:	1884703a 	and	r2,r3,r2
    5b84:	1001703a 	wrctl	status,r2
  
  return context;
    5b88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5b8c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    5b90:	e0fffc17 	ldw	r3,-16(fp)
    5b94:	00800044 	movi	r2,1
    5b98:	10c4983a 	sll	r2,r2,r3
    5b9c:	1007883a 	mov	r3,r2
    5ba0:	00800034 	movhi	r2,0
    5ba4:	109bda04 	addi	r2,r2,28520
    5ba8:	10800017 	ldw	r2,0(r2)
    5bac:	1886b03a 	or	r3,r3,r2
    5bb0:	00800034 	movhi	r2,0
    5bb4:	109bda04 	addi	r2,r2,28520
    5bb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5bbc:	00800034 	movhi	r2,0
    5bc0:	109bda04 	addi	r2,r2,28520
    5bc4:	10800017 	ldw	r2,0(r2)
    5bc8:	100170fa 	wrctl	ienable,r2
    5bcc:	e0bffd17 	ldw	r2,-12(fp)
    5bd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5bd4:	e0bffa17 	ldw	r2,-24(fp)
    5bd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5bdc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    5be0:	e037883a 	mov	sp,fp
    5be4:	df000017 	ldw	fp,0(sp)
    5be8:	dec00104 	addi	sp,sp,4
    5bec:	f800283a 	ret

00005bf0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5bf0:	defff904 	addi	sp,sp,-28
    5bf4:	df000615 	stw	fp,24(sp)
    5bf8:	df000604 	addi	fp,sp,24
    5bfc:	e13ffe15 	stw	r4,-8(fp)
    5c00:	e17fff15 	stw	r5,-4(fp)
    5c04:	e0bfff17 	ldw	r2,-4(fp)
    5c08:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c0c:	0005303a 	rdctl	r2,status
    5c10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c14:	e0fffb17 	ldw	r3,-20(fp)
    5c18:	00bfff84 	movi	r2,-2
    5c1c:	1884703a 	and	r2,r3,r2
    5c20:	1001703a 	wrctl	status,r2
  
  return context;
    5c24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5c28:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    5c2c:	e0fffc17 	ldw	r3,-16(fp)
    5c30:	00800044 	movi	r2,1
    5c34:	10c4983a 	sll	r2,r2,r3
    5c38:	0084303a 	nor	r2,zero,r2
    5c3c:	1007883a 	mov	r3,r2
    5c40:	00800034 	movhi	r2,0
    5c44:	109bda04 	addi	r2,r2,28520
    5c48:	10800017 	ldw	r2,0(r2)
    5c4c:	1886703a 	and	r3,r3,r2
    5c50:	00800034 	movhi	r2,0
    5c54:	109bda04 	addi	r2,r2,28520
    5c58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5c5c:	00800034 	movhi	r2,0
    5c60:	109bda04 	addi	r2,r2,28520
    5c64:	10800017 	ldw	r2,0(r2)
    5c68:	100170fa 	wrctl	ienable,r2
    5c6c:	e0bffd17 	ldw	r2,-12(fp)
    5c70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5c74:	e0bffa17 	ldw	r2,-24(fp)
    5c78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5c7c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    5c80:	e037883a 	mov	sp,fp
    5c84:	df000017 	ldw	fp,0(sp)
    5c88:	dec00104 	addi	sp,sp,4
    5c8c:	f800283a 	ret

00005c90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5c90:	defffc04 	addi	sp,sp,-16
    5c94:	df000315 	stw	fp,12(sp)
    5c98:	df000304 	addi	fp,sp,12
    5c9c:	e13ffe15 	stw	r4,-8(fp)
    5ca0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5ca4:	000530fa 	rdctl	r2,ienable
    5ca8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5cac:	e0ffff17 	ldw	r3,-4(fp)
    5cb0:	00800044 	movi	r2,1
    5cb4:	10c4983a 	sll	r2,r2,r3
    5cb8:	1007883a 	mov	r3,r2
    5cbc:	e0bffd17 	ldw	r2,-12(fp)
    5cc0:	1884703a 	and	r2,r3,r2
    5cc4:	1004c03a 	cmpne	r2,r2,zero
}
    5cc8:	e037883a 	mov	sp,fp
    5ccc:	df000017 	ldw	fp,0(sp)
    5cd0:	dec00104 	addi	sp,sp,4
    5cd4:	f800283a 	ret

00005cd8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5cd8:	defff404 	addi	sp,sp,-48
    5cdc:	dfc00b15 	stw	ra,44(sp)
    5ce0:	df000a15 	stw	fp,40(sp)
    5ce4:	df000a04 	addi	fp,sp,40
    5ce8:	e13ffb15 	stw	r4,-20(fp)
    5cec:	e17ffc15 	stw	r5,-16(fp)
    5cf0:	e1bffd15 	stw	r6,-12(fp)
    5cf4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    5cf8:	00bffa84 	movi	r2,-22
    5cfc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5d00:	e0bffc17 	ldw	r2,-16(fp)
    5d04:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5d08:	e0bff917 	ldw	r2,-28(fp)
    5d0c:	10800808 	cmpgei	r2,r2,32
    5d10:	1000291e 	bne	r2,zero,5db8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d14:	0005303a 	rdctl	r2,status
    5d18:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d1c:	e0fff717 	ldw	r3,-36(fp)
    5d20:	00bfff84 	movi	r2,-2
    5d24:	1884703a 	and	r2,r3,r2
    5d28:	1001703a 	wrctl	status,r2
  
  return context;
    5d2c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5d30:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    5d34:	e0bff917 	ldw	r2,-28(fp)
    5d38:	00c00034 	movhi	r3,0
    5d3c:	18dbdd04 	addi	r3,r3,28532
    5d40:	100490fa 	slli	r2,r2,3
    5d44:	10c7883a 	add	r3,r2,r3
    5d48:	e0bffd17 	ldw	r2,-12(fp)
    5d4c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    5d50:	e0bff917 	ldw	r2,-28(fp)
    5d54:	00c00034 	movhi	r3,0
    5d58:	18dbdd04 	addi	r3,r3,28532
    5d5c:	100490fa 	slli	r2,r2,3
    5d60:	10c5883a 	add	r2,r2,r3
    5d64:	10c00104 	addi	r3,r2,4
    5d68:	e0bffe17 	ldw	r2,-8(fp)
    5d6c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5d70:	e0bffd17 	ldw	r2,-12(fp)
    5d74:	1005003a 	cmpeq	r2,r2,zero
    5d78:	1000051e 	bne	r2,zero,5d90 <alt_iic_isr_register+0xb8>
    5d7c:	e17ff917 	ldw	r5,-28(fp)
    5d80:	e13ffb17 	ldw	r4,-20(fp)
    5d84:	0005b540 	call	5b54 <alt_ic_irq_enable>
    5d88:	e0bfff15 	stw	r2,-4(fp)
    5d8c:	00000406 	br	5da0 <alt_iic_isr_register+0xc8>
    5d90:	e17ff917 	ldw	r5,-28(fp)
    5d94:	e13ffb17 	ldw	r4,-20(fp)
    5d98:	0005bf00 	call	5bf0 <alt_ic_irq_disable>
    5d9c:	e0bfff15 	stw	r2,-4(fp)
    5da0:	e0bfff17 	ldw	r2,-4(fp)
    5da4:	e0bffa15 	stw	r2,-24(fp)
    5da8:	e0bff817 	ldw	r2,-32(fp)
    5dac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5db0:	e0bff617 	ldw	r2,-40(fp)
    5db4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5db8:	e0bffa17 	ldw	r2,-24(fp)
}
    5dbc:	e037883a 	mov	sp,fp
    5dc0:	dfc00117 	ldw	ra,4(sp)
    5dc4:	df000017 	ldw	fp,0(sp)
    5dc8:	dec00204 	addi	sp,sp,8
    5dcc:	f800283a 	ret

00005dd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5dd0:	defff804 	addi	sp,sp,-32
    5dd4:	dfc00715 	stw	ra,28(sp)
    5dd8:	df000615 	stw	fp,24(sp)
    5ddc:	dc000515 	stw	r16,20(sp)
    5de0:	df000504 	addi	fp,sp,20
    5de4:	e13ffc15 	stw	r4,-16(fp)
    5de8:	e17ffd15 	stw	r5,-12(fp)
    5dec:	e1bffe15 	stw	r6,-8(fp)
    5df0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    5df4:	e13ffd17 	ldw	r4,-12(fp)
    5df8:	e17ffe17 	ldw	r5,-8(fp)
    5dfc:	e1bfff17 	ldw	r6,-4(fp)
    5e00:	00060180 	call	6018 <open>
    5e04:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    5e08:	e0bffb17 	ldw	r2,-20(fp)
    5e0c:	1004803a 	cmplt	r2,r2,zero
    5e10:	10001f1e 	bne	r2,zero,5e90 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    5e14:	e13ffb17 	ldw	r4,-20(fp)
    5e18:	04000034 	movhi	r16,0
    5e1c:	841ab104 	addi	r16,r16,27332
    5e20:	01400304 	movi	r5,12
    5e24:	00051200 	call	5120 <__mulsi3>
    5e28:	1405883a 	add	r2,r2,r16
    5e2c:	10c00017 	ldw	r3,0(r2)
    5e30:	e0bffc17 	ldw	r2,-16(fp)
    5e34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5e38:	e13ffb17 	ldw	r4,-20(fp)
    5e3c:	04000034 	movhi	r16,0
    5e40:	841ab104 	addi	r16,r16,27332
    5e44:	01400304 	movi	r5,12
    5e48:	00051200 	call	5120 <__mulsi3>
    5e4c:	1405883a 	add	r2,r2,r16
    5e50:	10800104 	addi	r2,r2,4
    5e54:	10c00017 	ldw	r3,0(r2)
    5e58:	e0bffc17 	ldw	r2,-16(fp)
    5e5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5e60:	e13ffb17 	ldw	r4,-20(fp)
    5e64:	04000034 	movhi	r16,0
    5e68:	841ab104 	addi	r16,r16,27332
    5e6c:	01400304 	movi	r5,12
    5e70:	00051200 	call	5120 <__mulsi3>
    5e74:	1405883a 	add	r2,r2,r16
    5e78:	10800204 	addi	r2,r2,8
    5e7c:	10c00017 	ldw	r3,0(r2)
    5e80:	e0bffc17 	ldw	r2,-16(fp)
    5e84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5e88:	e13ffb17 	ldw	r4,-20(fp)
    5e8c:	00062040 	call	6204 <alt_release_fd>
  }
} 
    5e90:	e037883a 	mov	sp,fp
    5e94:	dfc00217 	ldw	ra,8(sp)
    5e98:	df000117 	ldw	fp,4(sp)
    5e9c:	dc000017 	ldw	r16,0(sp)
    5ea0:	dec00304 	addi	sp,sp,12
    5ea4:	f800283a 	ret

00005ea8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5ea8:	defffb04 	addi	sp,sp,-20
    5eac:	dfc00415 	stw	ra,16(sp)
    5eb0:	df000315 	stw	fp,12(sp)
    5eb4:	df000304 	addi	fp,sp,12
    5eb8:	e13ffd15 	stw	r4,-12(fp)
    5ebc:	e17ffe15 	stw	r5,-8(fp)
    5ec0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5ec4:	01000034 	movhi	r4,0
    5ec8:	211ab404 	addi	r4,r4,27344
    5ecc:	e17ffd17 	ldw	r5,-12(fp)
    5ed0:	01800044 	movi	r6,1
    5ed4:	01c07fc4 	movi	r7,511
    5ed8:	0005dd00 	call	5dd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5edc:	01000034 	movhi	r4,0
    5ee0:	211ab104 	addi	r4,r4,27332
    5ee4:	e17ffe17 	ldw	r5,-8(fp)
    5ee8:	000d883a 	mov	r6,zero
    5eec:	01c07fc4 	movi	r7,511
    5ef0:	0005dd00 	call	5dd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5ef4:	01000034 	movhi	r4,0
    5ef8:	211ab704 	addi	r4,r4,27356
    5efc:	e17fff17 	ldw	r5,-4(fp)
    5f00:	01800044 	movi	r6,1
    5f04:	01c07fc4 	movi	r7,511
    5f08:	0005dd00 	call	5dd0 <alt_open_fd>
}  
    5f0c:	e037883a 	mov	sp,fp
    5f10:	dfc00117 	ldw	ra,4(sp)
    5f14:	df000017 	ldw	fp,0(sp)
    5f18:	dec00204 	addi	sp,sp,8
    5f1c:	f800283a 	ret

00005f20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5f20:	defffa04 	addi	sp,sp,-24
    5f24:	dfc00515 	stw	ra,20(sp)
    5f28:	df000415 	stw	fp,16(sp)
    5f2c:	dc000315 	stw	r16,12(sp)
    5f30:	df000304 	addi	fp,sp,12
    5f34:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5f38:	e0bffe17 	ldw	r2,-8(fp)
    5f3c:	10800217 	ldw	r2,8(r2)
    5f40:	10d00034 	orhi	r3,r2,16384
    5f44:	e0bffe17 	ldw	r2,-8(fp)
    5f48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5f4c:	e03ffd15 	stw	zero,-12(fp)
    5f50:	00002306 	br	5fe0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5f54:	e13ffd17 	ldw	r4,-12(fp)
    5f58:	04000034 	movhi	r16,0
    5f5c:	841ab104 	addi	r16,r16,27332
    5f60:	01400304 	movi	r5,12
    5f64:	00051200 	call	5120 <__mulsi3>
    5f68:	1405883a 	add	r2,r2,r16
    5f6c:	10c00017 	ldw	r3,0(r2)
    5f70:	e0bffe17 	ldw	r2,-8(fp)
    5f74:	10800017 	ldw	r2,0(r2)
    5f78:	1880161e 	bne	r3,r2,5fd4 <alt_file_locked+0xb4>
    5f7c:	e13ffd17 	ldw	r4,-12(fp)
    5f80:	04000034 	movhi	r16,0
    5f84:	841ab104 	addi	r16,r16,27332
    5f88:	01400304 	movi	r5,12
    5f8c:	00051200 	call	5120 <__mulsi3>
    5f90:	1405883a 	add	r2,r2,r16
    5f94:	10800204 	addi	r2,r2,8
    5f98:	10800017 	ldw	r2,0(r2)
    5f9c:	1004403a 	cmpge	r2,r2,zero
    5fa0:	10000c1e 	bne	r2,zero,5fd4 <alt_file_locked+0xb4>
    5fa4:	e13ffd17 	ldw	r4,-12(fp)
    5fa8:	01400304 	movi	r5,12
    5fac:	00051200 	call	5120 <__mulsi3>
    5fb0:	1007883a 	mov	r3,r2
    5fb4:	00800034 	movhi	r2,0
    5fb8:	109ab104 	addi	r2,r2,27332
    5fbc:	1887883a 	add	r3,r3,r2
    5fc0:	e0bffe17 	ldw	r2,-8(fp)
    5fc4:	18800326 	beq	r3,r2,5fd4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5fc8:	00bffcc4 	movi	r2,-13
    5fcc:	e0bfff15 	stw	r2,-4(fp)
    5fd0:	00000a06 	br	5ffc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5fd4:	e0bffd17 	ldw	r2,-12(fp)
    5fd8:	10800044 	addi	r2,r2,1
    5fdc:	e0bffd15 	stw	r2,-12(fp)
    5fe0:	00800034 	movhi	r2,0
    5fe4:	109b1804 	addi	r2,r2,27744
    5fe8:	10800017 	ldw	r2,0(r2)
    5fec:	1007883a 	mov	r3,r2
    5ff0:	e0bffd17 	ldw	r2,-12(fp)
    5ff4:	18bfd72e 	bgeu	r3,r2,5f54 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5ff8:	e03fff15 	stw	zero,-4(fp)
    5ffc:	e0bfff17 	ldw	r2,-4(fp)
}
    6000:	e037883a 	mov	sp,fp
    6004:	dfc00217 	ldw	ra,8(sp)
    6008:	df000117 	ldw	fp,4(sp)
    600c:	dc000017 	ldw	r16,0(sp)
    6010:	dec00304 	addi	sp,sp,12
    6014:	f800283a 	ret

00006018 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6018:	defff404 	addi	sp,sp,-48
    601c:	dfc00b15 	stw	ra,44(sp)
    6020:	df000a15 	stw	fp,40(sp)
    6024:	df000a04 	addi	fp,sp,40
    6028:	e13ffb15 	stw	r4,-20(fp)
    602c:	e17ffc15 	stw	r5,-16(fp)
    6030:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6034:	00bfffc4 	movi	r2,-1
    6038:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    603c:	00bffb44 	movi	r2,-19
    6040:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    6044:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6048:	e13ffb17 	ldw	r4,-20(fp)
    604c:	01400034 	movhi	r5,0
    6050:	295b1604 	addi	r5,r5,27736
    6054:	00064400 	call	6440 <alt_find_dev>
    6058:	e0bffa15 	stw	r2,-24(fp)
    605c:	e0bffa17 	ldw	r2,-24(fp)
    6060:	1004c03a 	cmpne	r2,r2,zero
    6064:	1000051e 	bne	r2,zero,607c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6068:	e13ffb17 	ldw	r4,-20(fp)
    606c:	00064d40 	call	64d4 <alt_find_file>
    6070:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    6074:	00800044 	movi	r2,1
    6078:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    607c:	e0bffa17 	ldw	r2,-24(fp)
    6080:	1005003a 	cmpeq	r2,r2,zero
    6084:	1000311e 	bne	r2,zero,614c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6088:	e13ffa17 	ldw	r4,-24(fp)
    608c:	00065f40 	call	65f4 <alt_get_fd>
    6090:	e0bff815 	stw	r2,-32(fp)
    6094:	e0bff817 	ldw	r2,-32(fp)
    6098:	1004403a 	cmpge	r2,r2,zero
    609c:	1000031e 	bne	r2,zero,60ac <open+0x94>
    {
      status = index;
    60a0:	e0bff817 	ldw	r2,-32(fp)
    60a4:	e0bff715 	stw	r2,-36(fp)
    60a8:	00002a06 	br	6154 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    60ac:	e13ff817 	ldw	r4,-32(fp)
    60b0:	01400304 	movi	r5,12
    60b4:	00051200 	call	5120 <__mulsi3>
    60b8:	1007883a 	mov	r3,r2
    60bc:	00800034 	movhi	r2,0
    60c0:	109ab104 	addi	r2,r2,27332
    60c4:	1885883a 	add	r2,r3,r2
    60c8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    60cc:	e0fffc17 	ldw	r3,-16(fp)
    60d0:	00900034 	movhi	r2,16384
    60d4:	10bfffc4 	addi	r2,r2,-1
    60d8:	1886703a 	and	r3,r3,r2
    60dc:	e0bff917 	ldw	r2,-28(fp)
    60e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    60e4:	e0bff617 	ldw	r2,-40(fp)
    60e8:	1004c03a 	cmpne	r2,r2,zero
    60ec:	1000061e 	bne	r2,zero,6108 <open+0xf0>
    60f0:	e13ff917 	ldw	r4,-28(fp)
    60f4:	0005f200 	call	5f20 <alt_file_locked>
    60f8:	e0bff715 	stw	r2,-36(fp)
    60fc:	e0bff717 	ldw	r2,-36(fp)
    6100:	1004803a 	cmplt	r2,r2,zero
    6104:	1000131e 	bne	r2,zero,6154 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6108:	e0bffa17 	ldw	r2,-24(fp)
    610c:	10800317 	ldw	r2,12(r2)
    6110:	1005003a 	cmpeq	r2,r2,zero
    6114:	1000091e 	bne	r2,zero,613c <open+0x124>
    6118:	e0bffa17 	ldw	r2,-24(fp)
    611c:	10800317 	ldw	r2,12(r2)
    6120:	e13ff917 	ldw	r4,-28(fp)
    6124:	e17ffb17 	ldw	r5,-20(fp)
    6128:	e1bffc17 	ldw	r6,-16(fp)
    612c:	e1fffd17 	ldw	r7,-12(fp)
    6130:	103ee83a 	callr	r2
    6134:	e0bfff15 	stw	r2,-4(fp)
    6138:	00000106 	br	6140 <open+0x128>
    613c:	e03fff15 	stw	zero,-4(fp)
    6140:	e0bfff17 	ldw	r2,-4(fp)
    6144:	e0bff715 	stw	r2,-36(fp)
    6148:	00000206 	br	6154 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    614c:	00bffb44 	movi	r2,-19
    6150:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6154:	e0bff717 	ldw	r2,-36(fp)
    6158:	1004403a 	cmpge	r2,r2,zero
    615c:	1000091e 	bne	r2,zero,6184 <open+0x16c>
  {
    alt_release_fd (index);  
    6160:	e13ff817 	ldw	r4,-32(fp)
    6164:	00062040 	call	6204 <alt_release_fd>
    ALT_ERRNO = -status;
    6168:	00061a40 	call	61a4 <alt_get_errno>
    616c:	e0fff717 	ldw	r3,-36(fp)
    6170:	00c7c83a 	sub	r3,zero,r3
    6174:	10c00015 	stw	r3,0(r2)
    return -1;
    6178:	00bfffc4 	movi	r2,-1
    617c:	e0bffe15 	stw	r2,-8(fp)
    6180:	00000206 	br	618c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    6184:	e0bff817 	ldw	r2,-32(fp)
    6188:	e0bffe15 	stw	r2,-8(fp)
    618c:	e0bffe17 	ldw	r2,-8(fp)
}
    6190:	e037883a 	mov	sp,fp
    6194:	dfc00117 	ldw	ra,4(sp)
    6198:	df000017 	ldw	fp,0(sp)
    619c:	dec00204 	addi	sp,sp,8
    61a0:	f800283a 	ret

000061a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    61a4:	defffd04 	addi	sp,sp,-12
    61a8:	dfc00215 	stw	ra,8(sp)
    61ac:	df000115 	stw	fp,4(sp)
    61b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    61b4:	00800034 	movhi	r2,0
    61b8:	109b1904 	addi	r2,r2,27748
    61bc:	10800017 	ldw	r2,0(r2)
    61c0:	1005003a 	cmpeq	r2,r2,zero
    61c4:	1000061e 	bne	r2,zero,61e0 <alt_get_errno+0x3c>
    61c8:	00800034 	movhi	r2,0
    61cc:	109b1904 	addi	r2,r2,27748
    61d0:	10800017 	ldw	r2,0(r2)
    61d4:	103ee83a 	callr	r2
    61d8:	e0bfff15 	stw	r2,-4(fp)
    61dc:	00000306 	br	61ec <alt_get_errno+0x48>
    61e0:	00800034 	movhi	r2,0
    61e4:	109bd604 	addi	r2,r2,28504
    61e8:	e0bfff15 	stw	r2,-4(fp)
    61ec:	e0bfff17 	ldw	r2,-4(fp)
}
    61f0:	e037883a 	mov	sp,fp
    61f4:	dfc00117 	ldw	ra,4(sp)
    61f8:	df000017 	ldw	fp,0(sp)
    61fc:	dec00204 	addi	sp,sp,8
    6200:	f800283a 	ret

00006204 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    6204:	defffc04 	addi	sp,sp,-16
    6208:	dfc00315 	stw	ra,12(sp)
    620c:	df000215 	stw	fp,8(sp)
    6210:	dc000115 	stw	r16,4(sp)
    6214:	df000104 	addi	fp,sp,4
    6218:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    621c:	e0bfff17 	ldw	r2,-4(fp)
    6220:	108000d0 	cmplti	r2,r2,3
    6224:	10000f1e 	bne	r2,zero,6264 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    6228:	e13fff17 	ldw	r4,-4(fp)
    622c:	04000034 	movhi	r16,0
    6230:	841ab104 	addi	r16,r16,27332
    6234:	01400304 	movi	r5,12
    6238:	00051200 	call	5120 <__mulsi3>
    623c:	1405883a 	add	r2,r2,r16
    6240:	10800204 	addi	r2,r2,8
    6244:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    6248:	e13fff17 	ldw	r4,-4(fp)
    624c:	04000034 	movhi	r16,0
    6250:	841ab104 	addi	r16,r16,27332
    6254:	01400304 	movi	r5,12
    6258:	00051200 	call	5120 <__mulsi3>
    625c:	1405883a 	add	r2,r2,r16
    6260:	10000015 	stw	zero,0(r2)
  }
}
    6264:	e037883a 	mov	sp,fp
    6268:	dfc00217 	ldw	ra,8(sp)
    626c:	df000117 	ldw	fp,4(sp)
    6270:	dc000017 	ldw	r16,0(sp)
    6274:	dec00304 	addi	sp,sp,12
    6278:	f800283a 	ret

0000627c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    627c:	defffa04 	addi	sp,sp,-24
    6280:	df000515 	stw	fp,20(sp)
    6284:	df000504 	addi	fp,sp,20
    6288:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    628c:	0005303a 	rdctl	r2,status
    6290:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6294:	e0fffd17 	ldw	r3,-12(fp)
    6298:	00bfff84 	movi	r2,-2
    629c:	1884703a 	and	r2,r3,r2
    62a0:	1001703a 	wrctl	status,r2
  
  return context;
    62a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    62a8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    62ac:	e0bfff17 	ldw	r2,-4(fp)
    62b0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    62b4:	e0bffc17 	ldw	r2,-16(fp)
    62b8:	10c00017 	ldw	r3,0(r2)
    62bc:	e0bffc17 	ldw	r2,-16(fp)
    62c0:	10800117 	ldw	r2,4(r2)
    62c4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    62c8:	e0bffc17 	ldw	r2,-16(fp)
    62cc:	10c00117 	ldw	r3,4(r2)
    62d0:	e0bffc17 	ldw	r2,-16(fp)
    62d4:	10800017 	ldw	r2,0(r2)
    62d8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    62dc:	e0fffc17 	ldw	r3,-16(fp)
    62e0:	e0bffc17 	ldw	r2,-16(fp)
    62e4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    62e8:	e0fffc17 	ldw	r3,-16(fp)
    62ec:	e0bffc17 	ldw	r2,-16(fp)
    62f0:	18800015 	stw	r2,0(r3)
    62f4:	e0bffe17 	ldw	r2,-8(fp)
    62f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    62fc:	e0bffb17 	ldw	r2,-20(fp)
    6300:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    6304:	e037883a 	mov	sp,fp
    6308:	df000017 	ldw	fp,0(sp)
    630c:	dec00104 	addi	sp,sp,4
    6310:	f800283a 	ret

00006314 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    6314:	defffb04 	addi	sp,sp,-20
    6318:	dfc00415 	stw	ra,16(sp)
    631c:	df000315 	stw	fp,12(sp)
    6320:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6324:	d0a00a17 	ldw	r2,-32728(gp)
    6328:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    632c:	d0a0cb17 	ldw	r2,-31956(gp)
    6330:	10800044 	addi	r2,r2,1
    6334:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6338:	00003106 	br	6400 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    633c:	e0bffe17 	ldw	r2,-8(fp)
    6340:	10800017 	ldw	r2,0(r2)
    6344:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6348:	e0bffe17 	ldw	r2,-8(fp)
    634c:	10800403 	ldbu	r2,16(r2)
    6350:	10803fcc 	andi	r2,r2,255
    6354:	1005003a 	cmpeq	r2,r2,zero
    6358:	1000051e 	bne	r2,zero,6370 <alt_tick+0x5c>
    635c:	d0a0cb17 	ldw	r2,-31956(gp)
    6360:	1004c03a 	cmpne	r2,r2,zero
    6364:	1000021e 	bne	r2,zero,6370 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    6368:	e0bffe17 	ldw	r2,-8(fp)
    636c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    6370:	e0bffe17 	ldw	r2,-8(fp)
    6374:	10c00217 	ldw	r3,8(r2)
    6378:	d0a0cb17 	ldw	r2,-31956(gp)
    637c:	10c01e36 	bltu	r2,r3,63f8 <alt_tick+0xe4>
    6380:	e0bffe17 	ldw	r2,-8(fp)
    6384:	10800403 	ldbu	r2,16(r2)
    6388:	10803fcc 	andi	r2,r2,255
    638c:	1004c03a 	cmpne	r2,r2,zero
    6390:	1000191e 	bne	r2,zero,63f8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    6394:	e0bffe17 	ldw	r2,-8(fp)
    6398:	10c00317 	ldw	r3,12(r2)
    639c:	e0bffe17 	ldw	r2,-8(fp)
    63a0:	11000517 	ldw	r4,20(r2)
    63a4:	183ee83a 	callr	r3
    63a8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    63ac:	e0bffd17 	ldw	r2,-12(fp)
    63b0:	1004c03a 	cmpne	r2,r2,zero
    63b4:	1000031e 	bne	r2,zero,63c4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    63b8:	e13ffe17 	ldw	r4,-8(fp)
    63bc:	000627c0 	call	627c <alt_alarm_stop>
    63c0:	00000d06 	br	63f8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    63c4:	e0bffe17 	ldw	r2,-8(fp)
    63c8:	10c00217 	ldw	r3,8(r2)
    63cc:	e0bffd17 	ldw	r2,-12(fp)
    63d0:	1887883a 	add	r3,r3,r2
    63d4:	e0bffe17 	ldw	r2,-8(fp)
    63d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    63dc:	e0bffe17 	ldw	r2,-8(fp)
    63e0:	10c00217 	ldw	r3,8(r2)
    63e4:	d0a0cb17 	ldw	r2,-31956(gp)
    63e8:	1880032e 	bgeu	r3,r2,63f8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    63ec:	e0fffe17 	ldw	r3,-8(fp)
    63f0:	00800044 	movi	r2,1
    63f4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    63f8:	e0bfff17 	ldw	r2,-4(fp)
    63fc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6400:	d0e00a04 	addi	r3,gp,-32728
    6404:	e0bffe17 	ldw	r2,-8(fp)
    6408:	10ffcc1e 	bne	r2,r3,633c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    640c:	e037883a 	mov	sp,fp
    6410:	dfc00117 	ldw	ra,4(sp)
    6414:	df000017 	ldw	fp,0(sp)
    6418:	dec00204 	addi	sp,sp,8
    641c:	f800283a 	ret

00006420 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    6420:	deffff04 	addi	sp,sp,-4
    6424:	df000015 	stw	fp,0(sp)
    6428:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    642c:	000170fa 	wrctl	ienable,zero
}
    6430:	e037883a 	mov	sp,fp
    6434:	df000017 	ldw	fp,0(sp)
    6438:	dec00104 	addi	sp,sp,4
    643c:	f800283a 	ret

00006440 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6440:	defff904 	addi	sp,sp,-28
    6444:	dfc00615 	stw	ra,24(sp)
    6448:	df000515 	stw	fp,20(sp)
    644c:	df000504 	addi	fp,sp,20
    6450:	e13ffd15 	stw	r4,-12(fp)
    6454:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    6458:	e0bffe17 	ldw	r2,-8(fp)
    645c:	10800017 	ldw	r2,0(r2)
    6460:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    6464:	e13ffd17 	ldw	r4,-12(fp)
    6468:	0004f3c0 	call	4f3c <strlen>
    646c:	10800044 	addi	r2,r2,1
    6470:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6474:	00000d06 	br	64ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    6478:	e0bffc17 	ldw	r2,-16(fp)
    647c:	11000217 	ldw	r4,8(r2)
    6480:	e1bffb17 	ldw	r6,-20(fp)
    6484:	e17ffd17 	ldw	r5,-12(fp)
    6488:	00066e40 	call	66e4 <memcmp>
    648c:	1004c03a 	cmpne	r2,r2,zero
    6490:	1000031e 	bne	r2,zero,64a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    6494:	e0bffc17 	ldw	r2,-16(fp)
    6498:	e0bfff15 	stw	r2,-4(fp)
    649c:	00000706 	br	64bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    64a0:	e0bffc17 	ldw	r2,-16(fp)
    64a4:	10800017 	ldw	r2,0(r2)
    64a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    64ac:	e0fffe17 	ldw	r3,-8(fp)
    64b0:	e0bffc17 	ldw	r2,-16(fp)
    64b4:	10fff01e 	bne	r2,r3,6478 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    64b8:	e03fff15 	stw	zero,-4(fp)
    64bc:	e0bfff17 	ldw	r2,-4(fp)
}
    64c0:	e037883a 	mov	sp,fp
    64c4:	dfc00117 	ldw	ra,4(sp)
    64c8:	df000017 	ldw	fp,0(sp)
    64cc:	dec00204 	addi	sp,sp,8
    64d0:	f800283a 	ret

000064d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    64d4:	defffa04 	addi	sp,sp,-24
    64d8:	dfc00515 	stw	ra,20(sp)
    64dc:	df000415 	stw	fp,16(sp)
    64e0:	df000404 	addi	fp,sp,16
    64e4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    64e8:	00800034 	movhi	r2,0
    64ec:	109b1404 	addi	r2,r2,27728
    64f0:	10800017 	ldw	r2,0(r2)
    64f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    64f8:	00003306 	br	65c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    64fc:	e0bffd17 	ldw	r2,-12(fp)
    6500:	11000217 	ldw	r4,8(r2)
    6504:	0004f3c0 	call	4f3c <strlen>
    6508:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    650c:	e0bffd17 	ldw	r2,-12(fp)
    6510:	10c00217 	ldw	r3,8(r2)
    6514:	e0bffc17 	ldw	r2,-16(fp)
    6518:	1885883a 	add	r2,r3,r2
    651c:	10bfffc4 	addi	r2,r2,-1
    6520:	10800003 	ldbu	r2,0(r2)
    6524:	10803fcc 	andi	r2,r2,255
    6528:	1080201c 	xori	r2,r2,128
    652c:	10bfe004 	addi	r2,r2,-128
    6530:	10800bd8 	cmpnei	r2,r2,47
    6534:	1000031e 	bne	r2,zero,6544 <alt_find_file+0x70>
    {
      len -= 1;
    6538:	e0bffc17 	ldw	r2,-16(fp)
    653c:	10bfffc4 	addi	r2,r2,-1
    6540:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6544:	e0bffc17 	ldw	r2,-16(fp)
    6548:	1007883a 	mov	r3,r2
    654c:	e0bffe17 	ldw	r2,-8(fp)
    6550:	1885883a 	add	r2,r3,r2
    6554:	10800003 	ldbu	r2,0(r2)
    6558:	10803fcc 	andi	r2,r2,255
    655c:	1080201c 	xori	r2,r2,128
    6560:	10bfe004 	addi	r2,r2,-128
    6564:	10800be0 	cmpeqi	r2,r2,47
    6568:	10000a1e 	bne	r2,zero,6594 <alt_find_file+0xc0>
    656c:	e0bffc17 	ldw	r2,-16(fp)
    6570:	1007883a 	mov	r3,r2
    6574:	e0bffe17 	ldw	r2,-8(fp)
    6578:	1885883a 	add	r2,r3,r2
    657c:	10800003 	ldbu	r2,0(r2)
    6580:	10803fcc 	andi	r2,r2,255
    6584:	1080201c 	xori	r2,r2,128
    6588:	10bfe004 	addi	r2,r2,-128
    658c:	1004c03a 	cmpne	r2,r2,zero
    6590:	10000a1e 	bne	r2,zero,65bc <alt_find_file+0xe8>
    6594:	e0bffd17 	ldw	r2,-12(fp)
    6598:	11000217 	ldw	r4,8(r2)
    659c:	e1bffc17 	ldw	r6,-16(fp)
    65a0:	e17ffe17 	ldw	r5,-8(fp)
    65a4:	00066e40 	call	66e4 <memcmp>
    65a8:	1004c03a 	cmpne	r2,r2,zero
    65ac:	1000031e 	bne	r2,zero,65bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    65b0:	e0bffd17 	ldw	r2,-12(fp)
    65b4:	e0bfff15 	stw	r2,-4(fp)
    65b8:	00000806 	br	65dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    65bc:	e0bffd17 	ldw	r2,-12(fp)
    65c0:	10800017 	ldw	r2,0(r2)
    65c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    65c8:	00c00034 	movhi	r3,0
    65cc:	18db1404 	addi	r3,r3,27728
    65d0:	e0bffd17 	ldw	r2,-12(fp)
    65d4:	10ffc91e 	bne	r2,r3,64fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    65d8:	e03fff15 	stw	zero,-4(fp)
    65dc:	e0bfff17 	ldw	r2,-4(fp)
}
    65e0:	e037883a 	mov	sp,fp
    65e4:	dfc00117 	ldw	ra,4(sp)
    65e8:	df000017 	ldw	fp,0(sp)
    65ec:	dec00204 	addi	sp,sp,8
    65f0:	f800283a 	ret

000065f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    65f4:	defffa04 	addi	sp,sp,-24
    65f8:	dfc00515 	stw	ra,20(sp)
    65fc:	df000415 	stw	fp,16(sp)
    6600:	dc000315 	stw	r16,12(sp)
    6604:	df000304 	addi	fp,sp,12
    6608:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    660c:	00bffa04 	movi	r2,-24
    6610:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6614:	e03ffe15 	stw	zero,-8(fp)
    6618:	00002006 	br	669c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    661c:	e13ffe17 	ldw	r4,-8(fp)
    6620:	04000034 	movhi	r16,0
    6624:	841ab104 	addi	r16,r16,27332
    6628:	01400304 	movi	r5,12
    662c:	00051200 	call	5120 <__mulsi3>
    6630:	1405883a 	add	r2,r2,r16
    6634:	10800017 	ldw	r2,0(r2)
    6638:	1004c03a 	cmpne	r2,r2,zero
    663c:	1000141e 	bne	r2,zero,6690 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    6640:	e13ffe17 	ldw	r4,-8(fp)
    6644:	04000034 	movhi	r16,0
    6648:	841ab104 	addi	r16,r16,27332
    664c:	01400304 	movi	r5,12
    6650:	00051200 	call	5120 <__mulsi3>
    6654:	1407883a 	add	r3,r2,r16
    6658:	e0bfff17 	ldw	r2,-4(fp)
    665c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    6660:	00800034 	movhi	r2,0
    6664:	109b1804 	addi	r2,r2,27744
    6668:	10c00017 	ldw	r3,0(r2)
    666c:	e0bffe17 	ldw	r2,-8(fp)
    6670:	1880040e 	bge	r3,r2,6684 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    6674:	00c00034 	movhi	r3,0
    6678:	18db1804 	addi	r3,r3,27744
    667c:	e0bffe17 	ldw	r2,-8(fp)
    6680:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    6684:	e0bffe17 	ldw	r2,-8(fp)
    6688:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    668c:	00000606 	br	66a8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6690:	e0bffe17 	ldw	r2,-8(fp)
    6694:	10800044 	addi	r2,r2,1
    6698:	e0bffe15 	stw	r2,-8(fp)
    669c:	e0bffe17 	ldw	r2,-8(fp)
    66a0:	10800810 	cmplti	r2,r2,32
    66a4:	103fdd1e 	bne	r2,zero,661c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    66a8:	e0bffd17 	ldw	r2,-12(fp)
}
    66ac:	e037883a 	mov	sp,fp
    66b0:	dfc00217 	ldw	ra,8(sp)
    66b4:	df000117 	ldw	fp,4(sp)
    66b8:	dc000017 	ldw	r16,0(sp)
    66bc:	dec00304 	addi	sp,sp,12
    66c0:	f800283a 	ret

000066c4 <exit>:
    66c4:	defffe04 	addi	sp,sp,-8
    66c8:	dc400015 	stw	r17,0(sp)
    66cc:	000b883a 	mov	r5,zero
    66d0:	2023883a 	mov	r17,r4
    66d4:	dfc00115 	stw	ra,4(sp)
    66d8:	00067240 	call	6724 <__call_exitprocs>
    66dc:	8809883a 	mov	r4,r17
    66e0:	00069200 	call	6920 <_exit>

000066e4 <memcmp>:
    66e4:	31ffffc4 	addi	r7,r6,-1
    66e8:	3000061e 	bne	r6,zero,6704 <memcmp+0x20>
    66ec:	00000a06 	br	6718 <memcmp+0x34>
    66f0:	39ffffc4 	addi	r7,r7,-1
    66f4:	00bfffc4 	movi	r2,-1
    66f8:	21000044 	addi	r4,r4,1
    66fc:	29400044 	addi	r5,r5,1
    6700:	38800526 	beq	r7,r2,6718 <memcmp+0x34>
    6704:	20c00003 	ldbu	r3,0(r4)
    6708:	28800003 	ldbu	r2,0(r5)
    670c:	18bff826 	beq	r3,r2,66f0 <memcmp+0xc>
    6710:	1885c83a 	sub	r2,r3,r2
    6714:	f800283a 	ret
    6718:	0005883a 	mov	r2,zero
    671c:	f800283a 	ret

00006720 <register_fini>:
    6720:	f800283a 	ret

00006724 <__call_exitprocs>:
    6724:	defff304 	addi	sp,sp,-52
    6728:	00800034 	movhi	r2,0
    672c:	109b1304 	addi	r2,r2,27724
    6730:	df000b15 	stw	fp,44(sp)
    6734:	17000017 	ldw	fp,0(r2)
    6738:	00800034 	movhi	r2,0
    673c:	10800004 	addi	r2,r2,0
    6740:	1005003a 	cmpeq	r2,r2,zero
    6744:	d8800215 	stw	r2,8(sp)
    6748:	e0800c04 	addi	r2,fp,48
    674c:	dd800915 	stw	r22,36(sp)
    6750:	dd400815 	stw	r21,32(sp)
    6754:	dfc00c15 	stw	ra,48(sp)
    6758:	ddc00a15 	stw	r23,40(sp)
    675c:	dd000715 	stw	r20,28(sp)
    6760:	dcc00615 	stw	r19,24(sp)
    6764:	dc800515 	stw	r18,20(sp)
    6768:	dc400415 	stw	r17,16(sp)
    676c:	dc000315 	stw	r16,12(sp)
    6770:	282d883a 	mov	r22,r5
    6774:	d9000115 	stw	r4,4(sp)
    6778:	d8800015 	stw	r2,0(sp)
    677c:	282b003a 	cmpeq	r21,r5,zero
    6780:	e4400c17 	ldw	r17,48(fp)
    6784:	88001226 	beq	r17,zero,67d0 <__call_exitprocs+0xac>
    6788:	ddc00017 	ldw	r23,0(sp)
    678c:	88800117 	ldw	r2,4(r17)
    6790:	8c802217 	ldw	r18,136(r17)
    6794:	143fffc4 	addi	r16,r2,-1
    6798:	80000b16 	blt	r16,zero,67c8 <__call_exitprocs+0xa4>
    679c:	9027003a 	cmpeq	r19,r18,zero
    67a0:	a800171e 	bne	r21,zero,6800 <__call_exitprocs+0xdc>
    67a4:	9800051e 	bne	r19,zero,67bc <__call_exitprocs+0x98>
    67a8:	8409883a 	add	r4,r16,r16
    67ac:	2105883a 	add	r2,r4,r4
    67b0:	1485883a 	add	r2,r2,r18
    67b4:	10c02017 	ldw	r3,128(r2)
    67b8:	b0c01226 	beq	r22,r3,6804 <__call_exitprocs+0xe0>
    67bc:	843fffc4 	addi	r16,r16,-1
    67c0:	00bfffc4 	movi	r2,-1
    67c4:	80bff61e 	bne	r16,r2,67a0 <__call_exitprocs+0x7c>
    67c8:	d8800217 	ldw	r2,8(sp)
    67cc:	10003226 	beq	r2,zero,6898 <__call_exitprocs+0x174>
    67d0:	dfc00c17 	ldw	ra,48(sp)
    67d4:	df000b17 	ldw	fp,44(sp)
    67d8:	ddc00a17 	ldw	r23,40(sp)
    67dc:	dd800917 	ldw	r22,36(sp)
    67e0:	dd400817 	ldw	r21,32(sp)
    67e4:	dd000717 	ldw	r20,28(sp)
    67e8:	dcc00617 	ldw	r19,24(sp)
    67ec:	dc800517 	ldw	r18,20(sp)
    67f0:	dc400417 	ldw	r17,16(sp)
    67f4:	dc000317 	ldw	r16,12(sp)
    67f8:	dec00d04 	addi	sp,sp,52
    67fc:	f800283a 	ret
    6800:	8409883a 	add	r4,r16,r16
    6804:	88c00117 	ldw	r3,4(r17)
    6808:	2105883a 	add	r2,r4,r4
    680c:	1445883a 	add	r2,r2,r17
    6810:	18ffffc4 	addi	r3,r3,-1
    6814:	11800217 	ldw	r6,8(r2)
    6818:	1c001826 	beq	r3,r16,687c <__call_exitprocs+0x158>
    681c:	10000215 	stw	zero,8(r2)
    6820:	303fe626 	beq	r6,zero,67bc <__call_exitprocs+0x98>
    6824:	8d000117 	ldw	r20,4(r17)
    6828:	9800121e 	bne	r19,zero,6874 <__call_exitprocs+0x150>
    682c:	00c00044 	movi	r3,1
    6830:	1c06983a 	sll	r3,r3,r16
    6834:	90804017 	ldw	r2,256(r18)
    6838:	1884703a 	and	r2,r3,r2
    683c:	10000d26 	beq	r2,zero,6874 <__call_exitprocs+0x150>
    6840:	90804117 	ldw	r2,260(r18)
    6844:	1884703a 	and	r2,r3,r2
    6848:	10000e1e 	bne	r2,zero,6884 <__call_exitprocs+0x160>
    684c:	2105883a 	add	r2,r4,r4
    6850:	1485883a 	add	r2,r2,r18
    6854:	11400017 	ldw	r5,0(r2)
    6858:	d9000117 	ldw	r4,4(sp)
    685c:	303ee83a 	callr	r6
    6860:	88800117 	ldw	r2,4(r17)
    6864:	a0bfc61e 	bne	r20,r2,6780 <__call_exitprocs+0x5c>
    6868:	b8800017 	ldw	r2,0(r23)
    686c:	147fd326 	beq	r2,r17,67bc <__call_exitprocs+0x98>
    6870:	003fc306 	br	6780 <__call_exitprocs+0x5c>
    6874:	303ee83a 	callr	r6
    6878:	003ff906 	br	6860 <__call_exitprocs+0x13c>
    687c:	8c000115 	stw	r16,4(r17)
    6880:	003fe706 	br	6820 <__call_exitprocs+0xfc>
    6884:	2105883a 	add	r2,r4,r4
    6888:	1485883a 	add	r2,r2,r18
    688c:	11000017 	ldw	r4,0(r2)
    6890:	303ee83a 	callr	r6
    6894:	003ff206 	br	6860 <__call_exitprocs+0x13c>
    6898:	88800117 	ldw	r2,4(r17)
    689c:	10000b1e 	bne	r2,zero,68cc <__call_exitprocs+0x1a8>
    68a0:	89000017 	ldw	r4,0(r17)
    68a4:	20000a26 	beq	r4,zero,68d0 <__call_exitprocs+0x1ac>
    68a8:	b9000015 	stw	r4,0(r23)
    68ac:	90000226 	beq	r18,zero,68b8 <__call_exitprocs+0x194>
    68b0:	9009883a 	mov	r4,r18
    68b4:	00000000 	call	0 <__alt_mem_RAM-0x4000>
    68b8:	8809883a 	mov	r4,r17
    68bc:	00000000 	call	0 <__alt_mem_RAM-0x4000>
    68c0:	bc400017 	ldw	r17,0(r23)
    68c4:	883fb11e 	bne	r17,zero,678c <__call_exitprocs+0x68>
    68c8:	003fc106 	br	67d0 <__call_exitprocs+0xac>
    68cc:	89000017 	ldw	r4,0(r17)
    68d0:	882f883a 	mov	r23,r17
    68d4:	2023883a 	mov	r17,r4
    68d8:	883fac1e 	bne	r17,zero,678c <__call_exitprocs+0x68>
    68dc:	003fbc06 	br	67d0 <__call_exitprocs+0xac>

000068e0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    68e0:	defffd04 	addi	sp,sp,-12
    68e4:	df000215 	stw	fp,8(sp)
    68e8:	df000204 	addi	fp,sp,8
    68ec:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    68f0:	e0bfff17 	ldw	r2,-4(fp)
    68f4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    68f8:	e0bffe17 	ldw	r2,-8(fp)
    68fc:	1005003a 	cmpeq	r2,r2,zero
    6900:	1000021e 	bne	r2,zero,690c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    6904:	002af070 	cmpltui	zero,zero,43969
    6908:	00000106 	br	6910 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    690c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    6910:	e037883a 	mov	sp,fp
    6914:	df000017 	ldw	fp,0(sp)
    6918:	dec00104 	addi	sp,sp,4
    691c:	f800283a 	ret

00006920 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6920:	defffd04 	addi	sp,sp,-12
    6924:	dfc00215 	stw	ra,8(sp)
    6928:	df000115 	stw	fp,4(sp)
    692c:	df000104 	addi	fp,sp,4
    6930:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    6934:	e13fff17 	ldw	r4,-4(fp)
    6938:	00068e00 	call	68e0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    693c:	003fff06 	br	693c <_exit+0x1c>
    6940:	00006720 	cmpeqi	zero,zero,412
