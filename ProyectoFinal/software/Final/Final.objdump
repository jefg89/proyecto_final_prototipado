
Final.elf:     file format elf32-littlenios2
Final.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000041b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002904 memsz 0x00002904 flags r-x
    LOAD off    0x00003924 vaddr 0x00006924 paddr 0x00006c08 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00003eec vaddr 0x00006eec paddr 0x00006eec align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002724  000041b4  000041b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000068d8  000068d8  000038d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00006924  00006c08  00003924  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00006eec  00006eec  00003eec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003c08  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000598  00000000  00000000  00003c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007ee  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009fd3  00000000  00000000  000049b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027f4  00000000  00000000  0000e989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000679f  00000000  00000000  0001117d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000928  00000000  00000000  0001791c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000dea  00000000  00000000  00018244  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017cf  00000000  00000000  0001902e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001a800  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f8  00000000  00000000  0001a820  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001c42e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0001c431  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001c438  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001c439  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001c43a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001c43e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001c442  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001c446  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001c451  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001c45c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0001c467  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  0001c46a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00033848  00000000  00000000  0001c4ad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
000041b4 l    d  .text	00000000 .text
000068d8 l    d  .rodata	00000000 .rodata
00006924 l    d  .rwdata	00000000 .rwdata
00006eec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000041ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004740 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006924 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004f68 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00005134 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000531c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006a04 l     O .rwdata	0000002c jtag_uart_0
000053f4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00005684 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00005880 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000058fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000059dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005d38 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005e74 l     F .text	000000dc alt_file_locked
000060d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000066b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00006874 l     F .text	00000040 alt_sim_halt
000051a0 g     F .text	0000005c alt_main
00006f08 g     O .bss	00000100 alt_irq
00006c08 g       *ABS*	00000000 __flash_rwdata_start
000046a8 g     F .text	00000054 printf
00006bd8 g     O .rwdata	00000004 x
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006eec g     O .bss	00000004 errno
00004294 g     F .text	00000038 __make_dp
00006ef4 g     O .bss	00000004 alt_argv
0000ebd8 g       *ABS*	00000000 _gp
00006a58 g     O .rwdata	00000180 alt_fd_list
0000635c g     F .text	00000094 alt_find_dev
00005dfc g     F .text	00000078 alt_io_redirect
000054dc g     F .text	00000104 altera_avalon_jtag_uart_read
000046fc g     F .text	00000044 _printf_r
000050a4 g     F .text	00000008 __udivsi3
000065c8 g     F .text	00000090 alt_icache_flush
00006bf4 g     O .rwdata	00000004 alt_max_fd
00004240 g     F .text	00000054 __extendsfdf2
00006be0 g     O .rwdata	00000004 _global_impure_ptr
00007008 g       *ABS*	00000000 __bss_end
00005c40 g     F .text	000000f8 alt_iic_isr_register
00006230 g     F .text	0000010c alt_tick
00005bf8 g     F .text	00000048 alt_ic_irq_enabled
00006198 g     F .text	00000098 alt_alarm_stop
00006efc g     O .bss	00000004 alt_irq_active
000040ec g     F .exceptions	000000c8 alt_irq_handler
00006a30 g     O .rwdata	00000028 alt_dev_null
000042cc g     F .text	000000c8 __unpack_f
000058e0 g     F .text	0000001c alt_dcache_flush_all
00006c08 g       *ABS*	00000000 __ram_rwdata_end
00006bec g     O .rwdata	00000008 alt_dev_list
000051fc g     F .text	00000120 write
00006924 g       *ABS*	00000000 __ram_rodata_end
000050ac g     F .text	00000008 __umodsi3
00007008 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000056f4 g     F .text	00000090 alt_avalon_timer_sc_init
000055e0 g     F .text	000000a4 altera_avalon_jtag_uart_write
000047c0 g     F .text	00000630 ___vfprintf_internal_r
000066b8 g     F .text	000001bc __call_exitprocs
000041b4 g     F .text	0000003c _start
00006f00 g     O .bss	00000004 _alt_tick_rate
00006f04 g     O .bss	00000004 _alt_nticks
000053b0 g     F .text	00000044 alt_sys_init
00006924 g       *ABS*	00000000 __ram_rwdata_start
000068d8 g       *ABS*	00000000 __ram_rodata_start
0000542c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00006510 g     F .text	000000b8 alt_get_fd
00006678 g     F .text	0000003c memcmp
00007008 g       *ABS*	00000000 __alt_stack_base
000063f0 g     F .text	00000120 alt_find_file
00005928 g     F .text	000000b4 alt_dev_llist_insert
00004e14 g     F .text	000000bc __sfvwrite_small_dev
00006eec g       *ABS*	00000000 __bss_start
000041f0 g     F .text	00000050 main
00004000 g       *ABS*	00000000 __alt_mem_RAM
00006ef8 g     O .bss	00000004 alt_envp
00005484 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00006bf8 g     O .rwdata	00000004 alt_errno
00004fe4 g     F .text	00000060 __divsi3
000068d8 g       *ABS*	00000000 __flash_rodata_start
0000537c g     F .text	00000034 alt_irq_init
00006138 g     F .text	00000060 alt_release_fd
00004ef0 g     F .text	00000078 _write_r
00006bdc g     O .rwdata	00000004 _impure_ptr
00006ef0 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00006be4 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005a6c g     F .text	00000050 alt_ic_isr_register
00006c08 g       *ABS*	00000000 _edata
00007008 g       *ABS*	00000000 _end
000041b4 g       *ABS*	00000000 __ram_exceptions_end
00005b58 g     F .text	000000a0 alt_ic_irq_disable
0000633c g     F .text	00000020 altera_nios2_qsys_irq_init
00006658 g     F .text	00000020 exit
00005044 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
000068b4 g     F .text	00000020 _exit
00004ed0 g     F .text	00000020 strlen
00005f50 g     F .text	00000188 open
00005a3c g     F .text	00000030 alt_icache_flush_all
00006bfc g     O .rwdata	00000004 alt_priority_mask
00005abc g     F .text	0000009c alt_ic_irq_enable
00004df0 g     F .text	00000024 __vfprintf_internal
00006c00 g     O .rwdata	00000008 alt_alarm_list
00005784 g     F .text	000000fc close
000050b4 g     F .text	00000080 alt_load
00004394 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08506d14 	ori	at,at,16820
    jmp r1
    4018:	0800683a 	jmp	at
    401c:	00000000 	call	0 <__reset-0x4000>

Disassembly of section .exceptions:

00004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    4044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040ec0 	call	40ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000306 	br	4098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    4094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    4098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    40c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    40e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40e8:	ef80083a 	eret

000040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40ec:	defff904 	addi	sp,sp,-28
    40f0:	dfc00615 	stw	ra,24(sp)
    40f4:	df000515 	stw	fp,20(sp)
    40f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    40fc:	0005313a 	rdctl	r2,ipending
    4100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    4104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    4108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4110:	00800044 	movi	r2,1
    4114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    4118:	e0ffff17 	ldw	r3,-4(fp)
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	1884703a 	and	r2,r3,r2
    4124:	1005003a 	cmpeq	r2,r2,zero
    4128:	1000161e 	bne	r2,zero,4184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    412c:	e0bffd17 	ldw	r2,-12(fp)
    4130:	00c00034 	movhi	r3,0
    4134:	18dbc204 	addi	r3,r3,28424
    4138:	100490fa 	slli	r2,r2,3
    413c:	10c5883a 	add	r2,r2,r3
    4140:	11400017 	ldw	r5,0(r2)
    4144:	e0bffd17 	ldw	r2,-12(fp)
    4148:	00c00034 	movhi	r3,0
    414c:	18dbc204 	addi	r3,r3,28424
    4150:	100490fa 	slli	r2,r2,3
    4154:	10c5883a 	add	r2,r2,r3
    4158:	10800104 	addi	r2,r2,4
    415c:	11000017 	ldw	r4,0(r2)
    4160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4164:	0005313a 	rdctl	r2,ipending
    4168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    4170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    4174:	e0bfff17 	ldw	r2,-4(fp)
    4178:	1004c03a 	cmpne	r2,r2,zero
    417c:	103fe31e 	bne	r2,zero,410c <alt_irq_handler+0x20>
    4180:	00000706 	br	41a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4184:	e0bffe17 	ldw	r2,-8(fp)
    4188:	1085883a 	add	r2,r2,r2
    418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    4190:	e0bffd17 	ldw	r2,-12(fp)
    4194:	10800044 	addi	r2,r2,1
    4198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    419c:	003fde06 	br	4118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    41a0:	e037883a 	mov	sp,fp
    41a4:	dfc00117 	ldw	ra,4(sp)
    41a8:	df000017 	ldw	fp,0(sp)
    41ac:	dec00204 	addi	sp,sp,8
    41b0:	f800283a 	ret

Disassembly of section .text:

000041b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    41b4:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    41b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    41bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    41c0:	d6baf614 	ori	gp,gp,60376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    41c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    41c8:	109bbb14 	ori	r2,r2,28396

    movhi r3, %hi(__bss_end)
    41cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    41d0:	18dc0214 	ori	r3,r3,28680

    beq r2, r3, 1f
    41d4:	10c00326 	beq	r2,r3,41e4 <_start+0x30>

0:
    stw zero, (r2)
    41d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41e0:	10fffd36 	bltu	r2,r3,41d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41e4:	00050b40 	call	50b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41e8:	00051a00 	call	51a0 <alt_main>

000041ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41ec:	003fff06 	br	41ec <alt_after_alt_main>

000041f0 <main>:
*/
#include <stdio.h>

float x=1.1;
int main()
{
    41f0:	defffe04 	addi	sp,sp,-8
    41f4:	dfc00115 	stw	ra,4(sp)
    41f8:	df000015 	stw	fp,0(sp)
    41fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n %f", x);
    4200:	d0a00017 	ldw	r2,-32768(gp)
    4204:	1009883a 	mov	r4,r2
    4208:	00042400 	call	4240 <__extendsfdf2>
    420c:	100d883a 	mov	r6,r2
    4210:	180f883a 	mov	r7,r3
    4214:	01000034 	movhi	r4,0
    4218:	211a3604 	addi	r4,r4,26840
    421c:	300b883a 	mov	r5,r6
    4220:	380d883a 	mov	r6,r7
    4224:	00046a80 	call	46a8 <printf>

  return 0;
    4228:	0005883a 	mov	r2,zero
}
    422c:	e037883a 	mov	sp,fp
    4230:	dfc00117 	ldw	ra,4(sp)
    4234:	df000017 	ldw	fp,0(sp)
    4238:	dec00204 	addi	sp,sp,8
    423c:	f800283a 	ret

00004240 <__extendsfdf2>:
    4240:	defff904 	addi	sp,sp,-28
    4244:	d9000115 	stw	r4,4(sp)
    4248:	d9400204 	addi	r5,sp,8
    424c:	d9000104 	addi	r4,sp,4
    4250:	dfc00615 	stw	ra,24(sp)
    4254:	00042cc0 	call	42cc <__unpack_f>
    4258:	d9c00517 	ldw	r7,20(sp)
    425c:	0011883a 	mov	r8,zero
    4260:	400697ba 	slli	r3,r8,30
    4264:	3812d0ba 	srli	r9,r7,2
    4268:	380497ba 	slli	r2,r7,30
    426c:	d9000217 	ldw	r4,8(sp)
    4270:	d9400317 	ldw	r5,12(sp)
    4274:	d9800417 	ldw	r6,16(sp)
    4278:	48c6b03a 	or	r3,r9,r3
    427c:	100f883a 	mov	r7,r2
    4280:	d8c00015 	stw	r3,0(sp)
    4284:	00042940 	call	4294 <__make_dp>
    4288:	dfc00617 	ldw	ra,24(sp)
    428c:	dec00704 	addi	sp,sp,28
    4290:	f800283a 	ret

00004294 <__make_dp>:
    4294:	defff904 	addi	sp,sp,-28
    4298:	d8c00717 	ldw	r3,28(sp)
    429c:	d9000015 	stw	r4,0(sp)
    42a0:	d809883a 	mov	r4,sp
    42a4:	dfc00515 	stw	ra,20(sp)
    42a8:	d9c00615 	stw	r7,24(sp)
    42ac:	d9400115 	stw	r5,4(sp)
    42b0:	d9800215 	stw	r6,8(sp)
    42b4:	d8c00415 	stw	r3,16(sp)
    42b8:	d9c00315 	stw	r7,12(sp)
    42bc:	00043940 	call	4394 <__pack_d>
    42c0:	dfc00517 	ldw	ra,20(sp)
    42c4:	dec00704 	addi	sp,sp,28
    42c8:	f800283a 	ret

000042cc <__unpack_f>:
    42cc:	21800017 	ldw	r6,0(r4)
    42d0:	00c02034 	movhi	r3,128
    42d4:	18ffffc4 	addi	r3,r3,-1
    42d8:	3004d5fa 	srli	r2,r6,23
    42dc:	3008d7fa 	srli	r4,r6,31
    42e0:	30ce703a 	and	r7,r6,r3
    42e4:	10c03fcc 	andi	r3,r2,255
    42e8:	29000115 	stw	r4,4(r5)
    42ec:	1800131e 	bne	r3,zero,433c <__unpack_f+0x70>
    42f0:	38000f26 	beq	r7,zero,4330 <__unpack_f+0x64>
    42f4:	380691fa 	slli	r3,r7,7
    42f8:	01bfe084 	movi	r6,-126
    42fc:	008000c4 	movi	r2,3
    4300:	01100034 	movhi	r4,16384
    4304:	213fffc4 	addi	r4,r4,-1
    4308:	28800015 	stw	r2,0(r5)
    430c:	29800215 	stw	r6,8(r5)
    4310:	20c00536 	bltu	r4,r3,4328 <__unpack_f+0x5c>
    4314:	3005883a 	mov	r2,r6
    4318:	18c7883a 	add	r3,r3,r3
    431c:	10bfffc4 	addi	r2,r2,-1
    4320:	20fffd2e 	bgeu	r4,r3,4318 <__unpack_f+0x4c>
    4324:	28800215 	stw	r2,8(r5)
    4328:	28c00315 	stw	r3,12(r5)
    432c:	f800283a 	ret
    4330:	00800084 	movi	r2,2
    4334:	28800015 	stw	r2,0(r5)
    4338:	f800283a 	ret
    433c:	00803fc4 	movi	r2,255
    4340:	18800826 	beq	r3,r2,4364 <__unpack_f+0x98>
    4344:	380491fa 	slli	r2,r7,7
    4348:	18ffe044 	addi	r3,r3,-127
    434c:	28c00215 	stw	r3,8(r5)
    4350:	10900034 	orhi	r2,r2,16384
    4354:	28800315 	stw	r2,12(r5)
    4358:	008000c4 	movi	r2,3
    435c:	28800015 	stw	r2,0(r5)
    4360:	f800283a 	ret
    4364:	3800031e 	bne	r7,zero,4374 <__unpack_f+0xa8>
    4368:	00800104 	movi	r2,4
    436c:	28800015 	stw	r2,0(r5)
    4370:	f800283a 	ret
    4374:	3080042c 	andhi	r2,r6,16
    4378:	10000426 	beq	r2,zero,438c <__unpack_f+0xc0>
    437c:	00800044 	movi	r2,1
    4380:	28800015 	stw	r2,0(r5)
    4384:	29c00315 	stw	r7,12(r5)
    4388:	f800283a 	ret
    438c:	28000015 	stw	zero,0(r5)
    4390:	003ffc06 	br	4384 <__unpack_f+0xb8>

00004394 <__pack_d>:
    4394:	20c00017 	ldw	r3,0(r4)
    4398:	defffd04 	addi	sp,sp,-12
    439c:	dc000015 	stw	r16,0(sp)
    43a0:	dc800215 	stw	r18,8(sp)
    43a4:	dc400115 	stw	r17,4(sp)
    43a8:	00800044 	movi	r2,1
    43ac:	22000317 	ldw	r8,12(r4)
    43b0:	001f883a 	mov	r15,zero
    43b4:	22400417 	ldw	r9,16(r4)
    43b8:	24000117 	ldw	r16,4(r4)
    43bc:	10c0552e 	bgeu	r2,r3,4514 <__pack_d+0x180>
    43c0:	00800104 	movi	r2,4
    43c4:	18804f26 	beq	r3,r2,4504 <__pack_d+0x170>
    43c8:	00800084 	movi	r2,2
    43cc:	18800226 	beq	r3,r2,43d8 <__pack_d+0x44>
    43d0:	4244b03a 	or	r2,r8,r9
    43d4:	10001a1e 	bne	r2,zero,4440 <__pack_d+0xac>
    43d8:	000d883a 	mov	r6,zero
    43dc:	000f883a 	mov	r7,zero
    43e0:	0011883a 	mov	r8,zero
    43e4:	00800434 	movhi	r2,16
    43e8:	10bfffc4 	addi	r2,r2,-1
    43ec:	301d883a 	mov	r14,r6
    43f0:	3884703a 	and	r2,r7,r2
    43f4:	400a953a 	slli	r5,r8,20
    43f8:	79bffc2c 	andhi	r6,r15,65520
    43fc:	308cb03a 	or	r6,r6,r2
    4400:	00e00434 	movhi	r3,32784
    4404:	18ffffc4 	addi	r3,r3,-1
    4408:	800497fa 	slli	r2,r16,31
    440c:	30c6703a 	and	r3,r6,r3
    4410:	1946b03a 	or	r3,r3,r5
    4414:	01600034 	movhi	r5,32768
    4418:	297fffc4 	addi	r5,r5,-1
    441c:	194a703a 	and	r5,r3,r5
    4420:	288ab03a 	or	r5,r5,r2
    4424:	2807883a 	mov	r3,r5
    4428:	7005883a 	mov	r2,r14
    442c:	dc800217 	ldw	r18,8(sp)
    4430:	dc400117 	ldw	r17,4(sp)
    4434:	dc000017 	ldw	r16,0(sp)
    4438:	dec00304 	addi	sp,sp,12
    443c:	f800283a 	ret
    4440:	21000217 	ldw	r4,8(r4)
    4444:	00bf0084 	movi	r2,-1022
    4448:	20803f16 	blt	r4,r2,4548 <__pack_d+0x1b4>
    444c:	0080ffc4 	movi	r2,1023
    4450:	11002c16 	blt	r2,r4,4504 <__pack_d+0x170>
    4454:	00803fc4 	movi	r2,255
    4458:	408c703a 	and	r6,r8,r2
    445c:	00802004 	movi	r2,128
    4460:	0007883a 	mov	r3,zero
    4464:	000f883a 	mov	r7,zero
    4468:	2280ffc4 	addi	r10,r4,1023
    446c:	30801e26 	beq	r6,r2,44e8 <__pack_d+0x154>
    4470:	00801fc4 	movi	r2,127
    4474:	4089883a 	add	r4,r8,r2
    4478:	220d803a 	cmpltu	r6,r4,r8
    447c:	324d883a 	add	r6,r6,r9
    4480:	2011883a 	mov	r8,r4
    4484:	3013883a 	mov	r9,r6
    4488:	00880034 	movhi	r2,8192
    448c:	10bfffc4 	addi	r2,r2,-1
    4490:	12400d36 	bltu	r2,r9,44c8 <__pack_d+0x134>
    4494:	4804963a 	slli	r2,r9,24
    4498:	400cd23a 	srli	r6,r8,8
    449c:	480ed23a 	srli	r7,r9,8
    44a0:	013fffc4 	movi	r4,-1
    44a4:	118cb03a 	or	r6,r2,r6
    44a8:	01400434 	movhi	r5,16
    44ac:	297fffc4 	addi	r5,r5,-1
    44b0:	3104703a 	and	r2,r6,r4
    44b4:	3946703a 	and	r3,r7,r5
    44b8:	5201ffcc 	andi	r8,r10,2047
    44bc:	100d883a 	mov	r6,r2
    44c0:	180f883a 	mov	r7,r3
    44c4:	003fc706 	br	43e4 <__pack_d+0x50>
    44c8:	480897fa 	slli	r4,r9,31
    44cc:	4004d07a 	srli	r2,r8,1
    44d0:	4806d07a 	srli	r3,r9,1
    44d4:	52800044 	addi	r10,r10,1
    44d8:	2084b03a 	or	r2,r4,r2
    44dc:	1011883a 	mov	r8,r2
    44e0:	1813883a 	mov	r9,r3
    44e4:	003feb06 	br	4494 <__pack_d+0x100>
    44e8:	383fe11e 	bne	r7,zero,4470 <__pack_d+0xdc>
    44ec:	01004004 	movi	r4,256
    44f0:	4104703a 	and	r2,r8,r4
    44f4:	10c4b03a 	or	r2,r2,r3
    44f8:	103fe326 	beq	r2,zero,4488 <__pack_d+0xf4>
    44fc:	3005883a 	mov	r2,r6
    4500:	003fdc06 	br	4474 <__pack_d+0xe0>
    4504:	000d883a 	mov	r6,zero
    4508:	000f883a 	mov	r7,zero
    450c:	0201ffc4 	movi	r8,2047
    4510:	003fb406 	br	43e4 <__pack_d+0x50>
    4514:	0005883a 	mov	r2,zero
    4518:	00c00234 	movhi	r3,8
    451c:	408cb03a 	or	r6,r8,r2
    4520:	48ceb03a 	or	r7,r9,r3
    4524:	013fffc4 	movi	r4,-1
    4528:	01400434 	movhi	r5,16
    452c:	297fffc4 	addi	r5,r5,-1
    4530:	3104703a 	and	r2,r6,r4
    4534:	3946703a 	and	r3,r7,r5
    4538:	100d883a 	mov	r6,r2
    453c:	180f883a 	mov	r7,r3
    4540:	0201ffc4 	movi	r8,2047
    4544:	003fa706 	br	43e4 <__pack_d+0x50>
    4548:	1109c83a 	sub	r4,r2,r4
    454c:	00800e04 	movi	r2,56
    4550:	11004316 	blt	r2,r4,4660 <__pack_d+0x2cc>
    4554:	21fff804 	addi	r7,r4,-32
    4558:	38004516 	blt	r7,zero,4670 <__pack_d+0x2dc>
    455c:	49d8d83a 	srl	r12,r9,r7
    4560:	001b883a 	mov	r13,zero
    4564:	0023883a 	mov	r17,zero
    4568:	01400044 	movi	r5,1
    456c:	0025883a 	mov	r18,zero
    4570:	38004716 	blt	r7,zero,4690 <__pack_d+0x2fc>
    4574:	29d6983a 	sll	r11,r5,r7
    4578:	0015883a 	mov	r10,zero
    457c:	00bfffc4 	movi	r2,-1
    4580:	5089883a 	add	r4,r10,r2
    4584:	588b883a 	add	r5,r11,r2
    4588:	228d803a 	cmpltu	r6,r4,r10
    458c:	314b883a 	add	r5,r6,r5
    4590:	4104703a 	and	r2,r8,r4
    4594:	4946703a 	and	r3,r9,r5
    4598:	10c4b03a 	or	r2,r2,r3
    459c:	10000226 	beq	r2,zero,45a8 <__pack_d+0x214>
    45a0:	04400044 	movi	r17,1
    45a4:	0025883a 	mov	r18,zero
    45a8:	00803fc4 	movi	r2,255
    45ac:	644eb03a 	or	r7,r12,r17
    45b0:	3892703a 	and	r9,r7,r2
    45b4:	00802004 	movi	r2,128
    45b8:	6c90b03a 	or	r8,r13,r18
    45bc:	0015883a 	mov	r10,zero
    45c0:	48801626 	beq	r9,r2,461c <__pack_d+0x288>
    45c4:	01001fc4 	movi	r4,127
    45c8:	3905883a 	add	r2,r7,r4
    45cc:	11cd803a 	cmpltu	r6,r2,r7
    45d0:	320d883a 	add	r6,r6,r8
    45d4:	100f883a 	mov	r7,r2
    45d8:	00840034 	movhi	r2,4096
    45dc:	10bfffc4 	addi	r2,r2,-1
    45e0:	3011883a 	mov	r8,r6
    45e4:	0007883a 	mov	r3,zero
    45e8:	11801b36 	bltu	r2,r6,4658 <__pack_d+0x2c4>
    45ec:	4004963a 	slli	r2,r8,24
    45f0:	3808d23a 	srli	r4,r7,8
    45f4:	400ad23a 	srli	r5,r8,8
    45f8:	1813883a 	mov	r9,r3
    45fc:	1108b03a 	or	r4,r2,r4
    4600:	00bfffc4 	movi	r2,-1
    4604:	00c00434 	movhi	r3,16
    4608:	18ffffc4 	addi	r3,r3,-1
    460c:	208c703a 	and	r6,r4,r2
    4610:	28ce703a 	and	r7,r5,r3
    4614:	4a01ffcc 	andi	r8,r9,2047
    4618:	003f7206 	br	43e4 <__pack_d+0x50>
    461c:	503fe91e 	bne	r10,zero,45c4 <__pack_d+0x230>
    4620:	01004004 	movi	r4,256
    4624:	3904703a 	and	r2,r7,r4
    4628:	0007883a 	mov	r3,zero
    462c:	10c4b03a 	or	r2,r2,r3
    4630:	10000626 	beq	r2,zero,464c <__pack_d+0x2b8>
    4634:	3a45883a 	add	r2,r7,r9
    4638:	11cd803a 	cmpltu	r6,r2,r7
    463c:	320d883a 	add	r6,r6,r8
    4640:	100f883a 	mov	r7,r2
    4644:	3011883a 	mov	r8,r6
    4648:	0007883a 	mov	r3,zero
    464c:	00840034 	movhi	r2,4096
    4650:	10bfffc4 	addi	r2,r2,-1
    4654:	123fe52e 	bgeu	r2,r8,45ec <__pack_d+0x258>
    4658:	00c00044 	movi	r3,1
    465c:	003fe306 	br	45ec <__pack_d+0x258>
    4660:	0009883a 	mov	r4,zero
    4664:	0013883a 	mov	r9,zero
    4668:	000b883a 	mov	r5,zero
    466c:	003fe406 	br	4600 <__pack_d+0x26c>
    4670:	4a47883a 	add	r3,r9,r9
    4674:	008007c4 	movi	r2,31
    4678:	1105c83a 	sub	r2,r2,r4
    467c:	1886983a 	sll	r3,r3,r2
    4680:	4118d83a 	srl	r12,r8,r4
    4684:	491ad83a 	srl	r13,r9,r4
    4688:	1b18b03a 	or	r12,r3,r12
    468c:	003fb506 	br	4564 <__pack_d+0x1d0>
    4690:	2806d07a 	srli	r3,r5,1
    4694:	008007c4 	movi	r2,31
    4698:	1105c83a 	sub	r2,r2,r4
    469c:	1896d83a 	srl	r11,r3,r2
    46a0:	2914983a 	sll	r10,r5,r4
    46a4:	003fb506 	br	457c <__pack_d+0x1e8>

000046a8 <printf>:
    46a8:	defffb04 	addi	sp,sp,-20
    46ac:	dfc00115 	stw	ra,4(sp)
    46b0:	d9400215 	stw	r5,8(sp)
    46b4:	d9800315 	stw	r6,12(sp)
    46b8:	d9c00415 	stw	r7,16(sp)
    46bc:	00800034 	movhi	r2,0
    46c0:	109af704 	addi	r2,r2,27612
    46c4:	11400017 	ldw	r5,0(r2)
    46c8:	d8800204 	addi	r2,sp,8
    46cc:	d8800015 	stw	r2,0(sp)
    46d0:	29c00217 	ldw	r7,8(r5)
    46d4:	100d883a 	mov	r6,r2
    46d8:	00800034 	movhi	r2,0
    46dc:	10938504 	addi	r2,r2,19988
    46e0:	200b883a 	mov	r5,r4
    46e4:	38800115 	stw	r2,4(r7)
    46e8:	3809883a 	mov	r4,r7
    46ec:	0004df00 	call	4df0 <__vfprintf_internal>
    46f0:	dfc00117 	ldw	ra,4(sp)
    46f4:	dec00504 	addi	sp,sp,20
    46f8:	f800283a 	ret

000046fc <_printf_r>:
    46fc:	defffc04 	addi	sp,sp,-16
    4700:	dfc00115 	stw	ra,4(sp)
    4704:	d9800215 	stw	r6,8(sp)
    4708:	d9c00315 	stw	r7,12(sp)
    470c:	22000217 	ldw	r8,8(r4)
    4710:	d8800204 	addi	r2,sp,8
    4714:	d8800015 	stw	r2,0(sp)
    4718:	100f883a 	mov	r7,r2
    471c:	00800034 	movhi	r2,0
    4720:	10938504 	addi	r2,r2,19988
    4724:	280d883a 	mov	r6,r5
    4728:	40800115 	stw	r2,4(r8)
    472c:	400b883a 	mov	r5,r8
    4730:	00047c00 	call	47c0 <___vfprintf_internal_r>
    4734:	dfc00117 	ldw	ra,4(sp)
    4738:	dec00404 	addi	sp,sp,16
    473c:	f800283a 	ret

00004740 <print_repeat>:
    4740:	defffb04 	addi	sp,sp,-20
    4744:	dc800315 	stw	r18,12(sp)
    4748:	dc400215 	stw	r17,8(sp)
    474c:	dc000115 	stw	r16,4(sp)
    4750:	dfc00415 	stw	ra,16(sp)
    4754:	2025883a 	mov	r18,r4
    4758:	2823883a 	mov	r17,r5
    475c:	3821883a 	mov	r16,r7
    4760:	d9800005 	stb	r6,0(sp)
    4764:	9009883a 	mov	r4,r18
    4768:	880b883a 	mov	r5,r17
    476c:	d80d883a 	mov	r6,sp
    4770:	01c00044 	movi	r7,1
    4774:	04000b0e 	bge	zero,r16,47a4 <print_repeat+0x64>
    4778:	88c00117 	ldw	r3,4(r17)
    477c:	843fffc4 	addi	r16,r16,-1
    4780:	183ee83a 	callr	r3
    4784:	103ff726 	beq	r2,zero,4764 <print_repeat+0x24>
    4788:	00bfffc4 	movi	r2,-1
    478c:	dfc00417 	ldw	ra,16(sp)
    4790:	dc800317 	ldw	r18,12(sp)
    4794:	dc400217 	ldw	r17,8(sp)
    4798:	dc000117 	ldw	r16,4(sp)
    479c:	dec00504 	addi	sp,sp,20
    47a0:	f800283a 	ret
    47a4:	0005883a 	mov	r2,zero
    47a8:	dfc00417 	ldw	ra,16(sp)
    47ac:	dc800317 	ldw	r18,12(sp)
    47b0:	dc400217 	ldw	r17,8(sp)
    47b4:	dc000117 	ldw	r16,4(sp)
    47b8:	dec00504 	addi	sp,sp,20
    47bc:	f800283a 	ret

000047c0 <___vfprintf_internal_r>:
    47c0:	deffe404 	addi	sp,sp,-112
    47c4:	ddc01915 	stw	r23,100(sp)
    47c8:	dd801815 	stw	r22,96(sp)
    47cc:	dcc01515 	stw	r19,84(sp)
    47d0:	dc401315 	stw	r17,76(sp)
    47d4:	dc001215 	stw	r16,72(sp)
    47d8:	dfc01b15 	stw	ra,108(sp)
    47dc:	df001a15 	stw	fp,104(sp)
    47e0:	dd401715 	stw	r21,92(sp)
    47e4:	dd001615 	stw	r20,88(sp)
    47e8:	dc801415 	stw	r18,80(sp)
    47ec:	d9001015 	stw	r4,64(sp)
    47f0:	2827883a 	mov	r19,r5
    47f4:	d9c01115 	stw	r7,68(sp)
    47f8:	3023883a 	mov	r17,r6
    47fc:	0021883a 	mov	r16,zero
    4800:	d8000f15 	stw	zero,60(sp)
    4804:	d8000e15 	stw	zero,56(sp)
    4808:	002f883a 	mov	r23,zero
    480c:	d8000915 	stw	zero,36(sp)
    4810:	d8000d15 	stw	zero,52(sp)
    4814:	d8000c15 	stw	zero,48(sp)
    4818:	d8000b15 	stw	zero,44(sp)
    481c:	002d883a 	mov	r22,zero
    4820:	89400003 	ldbu	r5,0(r17)
    4824:	01c00044 	movi	r7,1
    4828:	8c400044 	addi	r17,r17,1
    482c:	29003fcc 	andi	r4,r5,255
    4830:	2100201c 	xori	r4,r4,128
    4834:	213fe004 	addi	r4,r4,-128
    4838:	20001526 	beq	r4,zero,4890 <___vfprintf_internal_r+0xd0>
    483c:	81c03326 	beq	r16,r7,490c <___vfprintf_internal_r+0x14c>
    4840:	3c002016 	blt	r7,r16,48c4 <___vfprintf_internal_r+0x104>
    4844:	803ff61e 	bne	r16,zero,4820 <___vfprintf_internal_r+0x60>
    4848:	00800944 	movi	r2,37
    484c:	2081311e 	bne	r4,r2,4d14 <___vfprintf_internal_r+0x554>
    4850:	05ffffc4 	movi	r23,-1
    4854:	00800284 	movi	r2,10
    4858:	d9c00c15 	stw	r7,48(sp)
    485c:	d8000f15 	stw	zero,60(sp)
    4860:	d8000e15 	stw	zero,56(sp)
    4864:	ddc00915 	stw	r23,36(sp)
    4868:	d8800d15 	stw	r2,52(sp)
    486c:	d8000b15 	stw	zero,44(sp)
    4870:	89400003 	ldbu	r5,0(r17)
    4874:	3821883a 	mov	r16,r7
    4878:	8c400044 	addi	r17,r17,1
    487c:	29003fcc 	andi	r4,r5,255
    4880:	2100201c 	xori	r4,r4,128
    4884:	213fe004 	addi	r4,r4,-128
    4888:	01c00044 	movi	r7,1
    488c:	203feb1e 	bne	r4,zero,483c <___vfprintf_internal_r+0x7c>
    4890:	b005883a 	mov	r2,r22
    4894:	dfc01b17 	ldw	ra,108(sp)
    4898:	df001a17 	ldw	fp,104(sp)
    489c:	ddc01917 	ldw	r23,100(sp)
    48a0:	dd801817 	ldw	r22,96(sp)
    48a4:	dd401717 	ldw	r21,92(sp)
    48a8:	dd001617 	ldw	r20,88(sp)
    48ac:	dcc01517 	ldw	r19,84(sp)
    48b0:	dc801417 	ldw	r18,80(sp)
    48b4:	dc401317 	ldw	r17,76(sp)
    48b8:	dc001217 	ldw	r16,72(sp)
    48bc:	dec01c04 	addi	sp,sp,112
    48c0:	f800283a 	ret
    48c4:	00800084 	movi	r2,2
    48c8:	80801526 	beq	r16,r2,4920 <___vfprintf_internal_r+0x160>
    48cc:	008000c4 	movi	r2,3
    48d0:	80bfd31e 	bne	r16,r2,4820 <___vfprintf_internal_r+0x60>
    48d4:	29bff404 	addi	r6,r5,-48
    48d8:	30c03fcc 	andi	r3,r6,255
    48dc:	00800244 	movi	r2,9
    48e0:	10c01c36 	bltu	r2,r3,4954 <___vfprintf_internal_r+0x194>
    48e4:	d8c00917 	ldw	r3,36(sp)
    48e8:	18010816 	blt	r3,zero,4d0c <___vfprintf_internal_r+0x54c>
    48ec:	d9000917 	ldw	r4,36(sp)
    48f0:	20c002a4 	muli	r3,r4,10
    48f4:	30803fcc 	andi	r2,r6,255
    48f8:	1080201c 	xori	r2,r2,128
    48fc:	10bfe004 	addi	r2,r2,-128
    4900:	1887883a 	add	r3,r3,r2
    4904:	d8c00915 	stw	r3,36(sp)
    4908:	003fc506 	br	4820 <___vfprintf_internal_r+0x60>
    490c:	00800c04 	movi	r2,48
    4910:	20809526 	beq	r4,r2,4b68 <___vfprintf_internal_r+0x3a8>
    4914:	00800944 	movi	r2,37
    4918:	20810e26 	beq	r4,r2,4d54 <___vfprintf_internal_r+0x594>
    491c:	04000084 	movi	r16,2
    4920:	29bff404 	addi	r6,r5,-48
    4924:	30c03fcc 	andi	r3,r6,255
    4928:	00800244 	movi	r2,9
    492c:	10c00736 	bltu	r2,r3,494c <___vfprintf_internal_r+0x18c>
    4930:	b8009816 	blt	r23,zero,4b94 <___vfprintf_internal_r+0x3d4>
    4934:	b9c002a4 	muli	r7,r23,10
    4938:	30803fcc 	andi	r2,r6,255
    493c:	1080201c 	xori	r2,r2,128
    4940:	10bfe004 	addi	r2,r2,-128
    4944:	38af883a 	add	r23,r7,r2
    4948:	003fb506 	br	4820 <___vfprintf_internal_r+0x60>
    494c:	00800b84 	movi	r2,46
    4950:	20808a26 	beq	r4,r2,4b7c <___vfprintf_internal_r+0x3bc>
    4954:	00801b04 	movi	r2,108
    4958:	20808a26 	beq	r4,r2,4b84 <___vfprintf_internal_r+0x3c4>
    495c:	d8c00917 	ldw	r3,36(sp)
    4960:	18008e16 	blt	r3,zero,4b9c <___vfprintf_internal_r+0x3dc>
    4964:	d8000f15 	stw	zero,60(sp)
    4968:	28bfea04 	addi	r2,r5,-88
    496c:	10803fcc 	andi	r2,r2,255
    4970:	00c00804 	movi	r3,32
    4974:	18802836 	bltu	r3,r2,4a18 <___vfprintf_internal_r+0x258>
    4978:	1085883a 	add	r2,r2,r2
    497c:	1085883a 	add	r2,r2,r2
    4980:	00c00034 	movhi	r3,0
    4984:	18d26504 	addi	r3,r3,18836
    4988:	10c5883a 	add	r2,r2,r3
    498c:	11000017 	ldw	r4,0(r2)
    4990:	2000683a 	jmp	r4
    4994:	00004c10 	cmplti	zero,zero,304
    4998:	00004a18 	cmpnei	zero,zero,296
    499c:	00004a18 	cmpnei	zero,zero,296
    49a0:	00004a18 	cmpnei	zero,zero,296
    49a4:	00004a18 	cmpnei	zero,zero,296
    49a8:	00004a18 	cmpnei	zero,zero,296
    49ac:	00004a18 	cmpnei	zero,zero,296
    49b0:	00004a18 	cmpnei	zero,zero,296
    49b4:	00004a18 	cmpnei	zero,zero,296
    49b8:	00004a18 	cmpnei	zero,zero,296
    49bc:	00004a18 	cmpnei	zero,zero,296
    49c0:	00004c28 	cmpgeui	zero,zero,304
    49c4:	00004a2c 	andhi	zero,zero,296
    49c8:	00004a18 	cmpnei	zero,zero,296
    49cc:	00004a18 	cmpnei	zero,zero,296
    49d0:	00004a18 	cmpnei	zero,zero,296
    49d4:	00004a18 	cmpnei	zero,zero,296
    49d8:	00004a2c 	andhi	zero,zero,296
    49dc:	00004a18 	cmpnei	zero,zero,296
    49e0:	00004a18 	cmpnei	zero,zero,296
    49e4:	00004a18 	cmpnei	zero,zero,296
    49e8:	00004a18 	cmpnei	zero,zero,296
    49ec:	00004a18 	cmpnei	zero,zero,296
    49f0:	00004c90 	cmplti	zero,zero,306
    49f4:	00004a18 	cmpnei	zero,zero,296
    49f8:	00004a18 	cmpnei	zero,zero,296
    49fc:	00004a18 	cmpnei	zero,zero,296
    4a00:	00004ca0 	cmpeqi	zero,zero,306
    4a04:	00004a18 	cmpnei	zero,zero,296
    4a08:	00004a28 	cmpgeui	zero,zero,296
    4a0c:	00004a18 	cmpnei	zero,zero,296
    4a10:	00004a18 	cmpnei	zero,zero,296
    4a14:	00004a20 	cmpeqi	zero,zero,296
    4a18:	0021883a 	mov	r16,zero
    4a1c:	003f8006 	br	4820 <___vfprintf_internal_r+0x60>
    4a20:	00800404 	movi	r2,16
    4a24:	d8800d15 	stw	r2,52(sp)
    4a28:	d8000c15 	stw	zero,48(sp)
    4a2c:	d8800c17 	ldw	r2,48(sp)
    4a30:	10006c1e 	bne	r2,zero,4be4 <___vfprintf_internal_r+0x424>
    4a34:	d9001117 	ldw	r4,68(sp)
    4a38:	21c00104 	addi	r7,r4,4
    4a3c:	24000017 	ldw	r16,0(r4)
    4a40:	d9c01115 	stw	r7,68(sp)
    4a44:	d8000a15 	stw	zero,40(sp)
    4a48:	80006d26 	beq	r16,zero,4c00 <___vfprintf_internal_r+0x440>
    4a4c:	d8c00b17 	ldw	r3,44(sp)
    4a50:	dc800044 	addi	r18,sp,1
    4a54:	9039883a 	mov	fp,r18
    4a58:	05400244 	movi	r21,9
    4a5c:	1829003a 	cmpeq	r20,r3,zero
    4a60:	00000506 	br	4a78 <___vfprintf_internal_r+0x2b8>
    4a64:	21000c04 	addi	r4,r4,48
    4a68:	91000005 	stb	r4,0(r18)
    4a6c:	94800044 	addi	r18,r18,1
    4a70:	18000e26 	beq	r3,zero,4aac <___vfprintf_internal_r+0x2ec>
    4a74:	1821883a 	mov	r16,r3
    4a78:	d9400d17 	ldw	r5,52(sp)
    4a7c:	8009883a 	mov	r4,r16
    4a80:	00050a40 	call	50a4 <__udivsi3>
    4a84:	d9000d17 	ldw	r4,52(sp)
    4a88:	1007883a 	mov	r3,r2
    4a8c:	2085383a 	mul	r2,r4,r2
    4a90:	8089c83a 	sub	r4,r16,r2
    4a94:	a93ff30e 	bge	r21,r4,4a64 <___vfprintf_internal_r+0x2a4>
    4a98:	a000361e 	bne	r20,zero,4b74 <___vfprintf_internal_r+0x3b4>
    4a9c:	21000dc4 	addi	r4,r4,55
    4aa0:	91000005 	stb	r4,0(r18)
    4aa4:	94800044 	addi	r18,r18,1
    4aa8:	183ff21e 	bne	r3,zero,4a74 <___vfprintf_internal_r+0x2b4>
    4aac:	9729c83a 	sub	r20,r18,fp
    4ab0:	d8800917 	ldw	r2,36(sp)
    4ab4:	150bc83a 	sub	r5,r2,r20
    4ab8:	0140100e 	bge	zero,r5,4afc <___vfprintf_internal_r+0x33c>
    4abc:	e0800804 	addi	r2,fp,32
    4ac0:	90800e2e 	bgeu	r18,r2,4afc <___vfprintf_internal_r+0x33c>
    4ac4:	00800c04 	movi	r2,48
    4ac8:	28ffffc4 	addi	r3,r5,-1
    4acc:	90800005 	stb	r2,0(r18)
    4ad0:	91000044 	addi	r4,r18,1
    4ad4:	00c0070e 	bge	zero,r3,4af4 <___vfprintf_internal_r+0x334>
    4ad8:	e0800804 	addi	r2,fp,32
    4adc:	2080052e 	bgeu	r4,r2,4af4 <___vfprintf_internal_r+0x334>
    4ae0:	00800c04 	movi	r2,48
    4ae4:	20800005 	stb	r2,0(r4)
    4ae8:	21000044 	addi	r4,r4,1
    4aec:	9145883a 	add	r2,r18,r5
    4af0:	20bff91e 	bne	r4,r2,4ad8 <___vfprintf_internal_r+0x318>
    4af4:	2729c83a 	sub	r20,r4,fp
    4af8:	2025883a 	mov	r18,r4
    4afc:	d8c00a17 	ldw	r3,40(sp)
    4b00:	d9000f17 	ldw	r4,60(sp)
    4b04:	1d05883a 	add	r2,r3,r20
    4b08:	b8a1c83a 	sub	r16,r23,r2
    4b0c:	20002626 	beq	r4,zero,4ba8 <___vfprintf_internal_r+0x3e8>
    4b10:	1805003a 	cmpeq	r2,r3,zero
    4b14:	1000a226 	beq	r2,zero,4da0 <___vfprintf_internal_r+0x5e0>
    4b18:	04009916 	blt	zero,r16,4d80 <___vfprintf_internal_r+0x5c0>
    4b1c:	b005883a 	mov	r2,r22
    4b20:	0500890e 	bge	zero,r20,4d48 <___vfprintf_internal_r+0x588>
    4b24:	102d883a 	mov	r22,r2
    4b28:	1521883a 	add	r16,r2,r20
    4b2c:	00000206 	br	4b38 <___vfprintf_internal_r+0x378>
    4b30:	b5800044 	addi	r22,r22,1
    4b34:	85bfb826 	beq	r16,r22,4a18 <___vfprintf_internal_r+0x258>
    4b38:	94bfffc4 	addi	r18,r18,-1
    4b3c:	90800003 	ldbu	r2,0(r18)
    4b40:	98c00117 	ldw	r3,4(r19)
    4b44:	d9001017 	ldw	r4,64(sp)
    4b48:	d8800005 	stb	r2,0(sp)
    4b4c:	980b883a 	mov	r5,r19
    4b50:	d80d883a 	mov	r6,sp
    4b54:	01c00044 	movi	r7,1
    4b58:	183ee83a 	callr	r3
    4b5c:	103ff426 	beq	r2,zero,4b30 <___vfprintf_internal_r+0x370>
    4b60:	05bfffc4 	movi	r22,-1
    4b64:	003f4a06 	br	4890 <___vfprintf_internal_r+0xd0>
    4b68:	04000084 	movi	r16,2
    4b6c:	d9c00f15 	stw	r7,60(sp)
    4b70:	003f2b06 	br	4820 <___vfprintf_internal_r+0x60>
    4b74:	210015c4 	addi	r4,r4,87
    4b78:	003fbb06 	br	4a68 <___vfprintf_internal_r+0x2a8>
    4b7c:	040000c4 	movi	r16,3
    4b80:	003f2706 	br	4820 <___vfprintf_internal_r+0x60>
    4b84:	00800044 	movi	r2,1
    4b88:	040000c4 	movi	r16,3
    4b8c:	d8800e15 	stw	r2,56(sp)
    4b90:	003f2306 	br	4820 <___vfprintf_internal_r+0x60>
    4b94:	000f883a 	mov	r7,zero
    4b98:	003f6706 	br	4938 <___vfprintf_internal_r+0x178>
    4b9c:	01000044 	movi	r4,1
    4ba0:	d9000915 	stw	r4,36(sp)
    4ba4:	003f7006 	br	4968 <___vfprintf_internal_r+0x1a8>
    4ba8:	04008916 	blt	zero,r16,4dd0 <___vfprintf_internal_r+0x610>
    4bac:	d8c00a17 	ldw	r3,40(sp)
    4bb0:	1805003a 	cmpeq	r2,r3,zero
    4bb4:	103fd91e 	bne	r2,zero,4b1c <___vfprintf_internal_r+0x35c>
    4bb8:	98c00117 	ldw	r3,4(r19)
    4bbc:	d9001017 	ldw	r4,64(sp)
    4bc0:	00800b44 	movi	r2,45
    4bc4:	d8800005 	stb	r2,0(sp)
    4bc8:	980b883a 	mov	r5,r19
    4bcc:	d80d883a 	mov	r6,sp
    4bd0:	01c00044 	movi	r7,1
    4bd4:	183ee83a 	callr	r3
    4bd8:	103fe11e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4bdc:	b0800044 	addi	r2,r22,1
    4be0:	003fcf06 	br	4b20 <___vfprintf_internal_r+0x360>
    4be4:	d8c01117 	ldw	r3,68(sp)
    4be8:	1c000017 	ldw	r16,0(r3)
    4bec:	18c00104 	addi	r3,r3,4
    4bf0:	d8c01115 	stw	r3,68(sp)
    4bf4:	80005016 	blt	r16,zero,4d38 <___vfprintf_internal_r+0x578>
    4bf8:	d8000a15 	stw	zero,40(sp)
    4bfc:	803f931e 	bne	r16,zero,4a4c <___vfprintf_internal_r+0x28c>
    4c00:	dc800044 	addi	r18,sp,1
    4c04:	9039883a 	mov	fp,r18
    4c08:	0029883a 	mov	r20,zero
    4c0c:	003fa806 	br	4ab0 <___vfprintf_internal_r+0x2f0>
    4c10:	00800404 	movi	r2,16
    4c14:	00c00044 	movi	r3,1
    4c18:	d8800d15 	stw	r2,52(sp)
    4c1c:	d8000c15 	stw	zero,48(sp)
    4c20:	d8c00b15 	stw	r3,44(sp)
    4c24:	003f8106 	br	4a2c <___vfprintf_internal_r+0x26c>
    4c28:	04000044 	movi	r16,1
    4c2c:	85c0080e 	bge	r16,r23,4c50 <___vfprintf_internal_r+0x490>
    4c30:	d9001017 	ldw	r4,64(sp)
    4c34:	980b883a 	mov	r5,r19
    4c38:	01800804 	movi	r6,32
    4c3c:	b9ffffc4 	addi	r7,r23,-1
    4c40:	00047400 	call	4740 <print_repeat>
    4c44:	103fc61e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4c48:	bd85883a 	add	r2,r23,r22
    4c4c:	15bfffc4 	addi	r22,r2,-1
    4c50:	d8c01117 	ldw	r3,68(sp)
    4c54:	d9001017 	ldw	r4,64(sp)
    4c58:	800f883a 	mov	r7,r16
    4c5c:	18800017 	ldw	r2,0(r3)
    4c60:	98c00117 	ldw	r3,4(r19)
    4c64:	980b883a 	mov	r5,r19
    4c68:	d8800005 	stb	r2,0(sp)
    4c6c:	d80d883a 	mov	r6,sp
    4c70:	183ee83a 	callr	r3
    4c74:	103fba1e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4c78:	d9001117 	ldw	r4,68(sp)
    4c7c:	b5800044 	addi	r22,r22,1
    4c80:	0021883a 	mov	r16,zero
    4c84:	21000104 	addi	r4,r4,4
    4c88:	d9001115 	stw	r4,68(sp)
    4c8c:	003ee406 	br	4820 <___vfprintf_internal_r+0x60>
    4c90:	01000204 	movi	r4,8
    4c94:	d9000d15 	stw	r4,52(sp)
    4c98:	d8000c15 	stw	zero,48(sp)
    4c9c:	003f6306 	br	4a2c <___vfprintf_internal_r+0x26c>
    4ca0:	d8801117 	ldw	r2,68(sp)
    4ca4:	15000017 	ldw	r20,0(r2)
    4ca8:	a009883a 	mov	r4,r20
    4cac:	0004ed00 	call	4ed0 <strlen>
    4cb0:	b8a1c83a 	sub	r16,r23,r2
    4cb4:	1025883a 	mov	r18,r2
    4cb8:	0400070e 	bge	zero,r16,4cd8 <___vfprintf_internal_r+0x518>
    4cbc:	d9001017 	ldw	r4,64(sp)
    4cc0:	980b883a 	mov	r5,r19
    4cc4:	01800804 	movi	r6,32
    4cc8:	800f883a 	mov	r7,r16
    4ccc:	00047400 	call	4740 <print_repeat>
    4cd0:	103fa31e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4cd4:	b42d883a 	add	r22,r22,r16
    4cd8:	98c00117 	ldw	r3,4(r19)
    4cdc:	d9001017 	ldw	r4,64(sp)
    4ce0:	a00d883a 	mov	r6,r20
    4ce4:	980b883a 	mov	r5,r19
    4ce8:	900f883a 	mov	r7,r18
    4cec:	183ee83a 	callr	r3
    4cf0:	103f9b1e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4cf4:	d8c01117 	ldw	r3,68(sp)
    4cf8:	b4ad883a 	add	r22,r22,r18
    4cfc:	0021883a 	mov	r16,zero
    4d00:	18c00104 	addi	r3,r3,4
    4d04:	d8c01115 	stw	r3,68(sp)
    4d08:	003ec506 	br	4820 <___vfprintf_internal_r+0x60>
    4d0c:	0007883a 	mov	r3,zero
    4d10:	003ef806 	br	48f4 <___vfprintf_internal_r+0x134>
    4d14:	98c00117 	ldw	r3,4(r19)
    4d18:	d9001017 	ldw	r4,64(sp)
    4d1c:	d9400005 	stb	r5,0(sp)
    4d20:	d80d883a 	mov	r6,sp
    4d24:	980b883a 	mov	r5,r19
    4d28:	183ee83a 	callr	r3
    4d2c:	103f8c1e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4d30:	b5800044 	addi	r22,r22,1
    4d34:	003eba06 	br	4820 <___vfprintf_internal_r+0x60>
    4d38:	00800044 	movi	r2,1
    4d3c:	0421c83a 	sub	r16,zero,r16
    4d40:	d8800a15 	stw	r2,40(sp)
    4d44:	003f4006 	br	4a48 <___vfprintf_internal_r+0x288>
    4d48:	102d883a 	mov	r22,r2
    4d4c:	0021883a 	mov	r16,zero
    4d50:	003eb306 	br	4820 <___vfprintf_internal_r+0x60>
    4d54:	98c00117 	ldw	r3,4(r19)
    4d58:	d9000005 	stb	r4,0(sp)
    4d5c:	d9001017 	ldw	r4,64(sp)
    4d60:	980b883a 	mov	r5,r19
    4d64:	d80d883a 	mov	r6,sp
    4d68:	800f883a 	mov	r7,r16
    4d6c:	183ee83a 	callr	r3
    4d70:	103f7b1e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4d74:	b42d883a 	add	r22,r22,r16
    4d78:	0021883a 	mov	r16,zero
    4d7c:	003ea806 	br	4820 <___vfprintf_internal_r+0x60>
    4d80:	d9001017 	ldw	r4,64(sp)
    4d84:	980b883a 	mov	r5,r19
    4d88:	01800c04 	movi	r6,48
    4d8c:	800f883a 	mov	r7,r16
    4d90:	00047400 	call	4740 <print_repeat>
    4d94:	103f721e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4d98:	b405883a 	add	r2,r22,r16
    4d9c:	003f6006 	br	4b20 <___vfprintf_internal_r+0x360>
    4da0:	98c00117 	ldw	r3,4(r19)
    4da4:	d9001017 	ldw	r4,64(sp)
    4da8:	00800b44 	movi	r2,45
    4dac:	d8800005 	stb	r2,0(sp)
    4db0:	980b883a 	mov	r5,r19
    4db4:	d80d883a 	mov	r6,sp
    4db8:	01c00044 	movi	r7,1
    4dbc:	183ee83a 	callr	r3
    4dc0:	103f671e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4dc4:	b5800044 	addi	r22,r22,1
    4dc8:	043f540e 	bge	zero,r16,4b1c <___vfprintf_internal_r+0x35c>
    4dcc:	003fec06 	br	4d80 <___vfprintf_internal_r+0x5c0>
    4dd0:	d9001017 	ldw	r4,64(sp)
    4dd4:	980b883a 	mov	r5,r19
    4dd8:	01800804 	movi	r6,32
    4ddc:	800f883a 	mov	r7,r16
    4de0:	00047400 	call	4740 <print_repeat>
    4de4:	103f5e1e 	bne	r2,zero,4b60 <___vfprintf_internal_r+0x3a0>
    4de8:	b42d883a 	add	r22,r22,r16
    4dec:	003f6f06 	br	4bac <___vfprintf_internal_r+0x3ec>

00004df0 <__vfprintf_internal>:
    4df0:	00800034 	movhi	r2,0
    4df4:	109af704 	addi	r2,r2,27612
    4df8:	2013883a 	mov	r9,r4
    4dfc:	11000017 	ldw	r4,0(r2)
    4e00:	2805883a 	mov	r2,r5
    4e04:	300f883a 	mov	r7,r6
    4e08:	480b883a 	mov	r5,r9
    4e0c:	100d883a 	mov	r6,r2
    4e10:	00047c01 	jmpi	47c0 <___vfprintf_internal_r>

00004e14 <__sfvwrite_small_dev>:
    4e14:	2880000b 	ldhu	r2,0(r5)
    4e18:	defffa04 	addi	sp,sp,-24
    4e1c:	dcc00315 	stw	r19,12(sp)
    4e20:	1080020c 	andi	r2,r2,8
    4e24:	dc800215 	stw	r18,8(sp)
    4e28:	dc400115 	stw	r17,4(sp)
    4e2c:	dfc00515 	stw	ra,20(sp)
    4e30:	dd000415 	stw	r20,16(sp)
    4e34:	dc000015 	stw	r16,0(sp)
    4e38:	2825883a 	mov	r18,r5
    4e3c:	2027883a 	mov	r19,r4
    4e40:	3023883a 	mov	r17,r6
    4e44:	10002026 	beq	r2,zero,4ec8 <__sfvwrite_small_dev+0xb4>
    4e48:	2940008f 	ldh	r5,2(r5)
    4e4c:	28000f16 	blt	r5,zero,4e8c <__sfvwrite_small_dev+0x78>
    4e50:	01c01b0e 	bge	zero,r7,4ec0 <__sfvwrite_small_dev+0xac>
    4e54:	3821883a 	mov	r16,r7
    4e58:	05010004 	movi	r20,1024
    4e5c:	00000206 	br	4e68 <__sfvwrite_small_dev+0x54>
    4e60:	0400170e 	bge	zero,r16,4ec0 <__sfvwrite_small_dev+0xac>
    4e64:	9140008f 	ldh	r5,2(r18)
    4e68:	880d883a 	mov	r6,r17
    4e6c:	9809883a 	mov	r4,r19
    4e70:	800f883a 	mov	r7,r16
    4e74:	a400010e 	bge	r20,r16,4e7c <__sfvwrite_small_dev+0x68>
    4e78:	01c10004 	movi	r7,1024
    4e7c:	0004ef00 	call	4ef0 <_write_r>
    4e80:	88a3883a 	add	r17,r17,r2
    4e84:	80a1c83a 	sub	r16,r16,r2
    4e88:	00bff516 	blt	zero,r2,4e60 <__sfvwrite_small_dev+0x4c>
    4e8c:	9080000b 	ldhu	r2,0(r18)
    4e90:	00ffffc4 	movi	r3,-1
    4e94:	10801014 	ori	r2,r2,64
    4e98:	9080000d 	sth	r2,0(r18)
    4e9c:	1805883a 	mov	r2,r3
    4ea0:	dfc00517 	ldw	ra,20(sp)
    4ea4:	dd000417 	ldw	r20,16(sp)
    4ea8:	dcc00317 	ldw	r19,12(sp)
    4eac:	dc800217 	ldw	r18,8(sp)
    4eb0:	dc400117 	ldw	r17,4(sp)
    4eb4:	dc000017 	ldw	r16,0(sp)
    4eb8:	dec00604 	addi	sp,sp,24
    4ebc:	f800283a 	ret
    4ec0:	0007883a 	mov	r3,zero
    4ec4:	003ff506 	br	4e9c <__sfvwrite_small_dev+0x88>
    4ec8:	00ffffc4 	movi	r3,-1
    4ecc:	003ff306 	br	4e9c <__sfvwrite_small_dev+0x88>

00004ed0 <strlen>:
    4ed0:	20800007 	ldb	r2,0(r4)
    4ed4:	10000526 	beq	r2,zero,4eec <strlen+0x1c>
    4ed8:	2007883a 	mov	r3,r4
    4edc:	18c00044 	addi	r3,r3,1
    4ee0:	18800007 	ldb	r2,0(r3)
    4ee4:	103ffd1e 	bne	r2,zero,4edc <strlen+0xc>
    4ee8:	1905c83a 	sub	r2,r3,r4
    4eec:	f800283a 	ret

00004ef0 <_write_r>:
    4ef0:	defffd04 	addi	sp,sp,-12
    4ef4:	dc000015 	stw	r16,0(sp)
    4ef8:	04000034 	movhi	r16,0
    4efc:	841bbb04 	addi	r16,r16,28396
    4f00:	dc400115 	stw	r17,4(sp)
    4f04:	80000015 	stw	zero,0(r16)
    4f08:	2023883a 	mov	r17,r4
    4f0c:	2809883a 	mov	r4,r5
    4f10:	300b883a 	mov	r5,r6
    4f14:	380d883a 	mov	r6,r7
    4f18:	dfc00215 	stw	ra,8(sp)
    4f1c:	00051fc0 	call	51fc <write>
    4f20:	1007883a 	mov	r3,r2
    4f24:	00bfffc4 	movi	r2,-1
    4f28:	18800626 	beq	r3,r2,4f44 <_write_r+0x54>
    4f2c:	1805883a 	mov	r2,r3
    4f30:	dfc00217 	ldw	ra,8(sp)
    4f34:	dc400117 	ldw	r17,4(sp)
    4f38:	dc000017 	ldw	r16,0(sp)
    4f3c:	dec00304 	addi	sp,sp,12
    4f40:	f800283a 	ret
    4f44:	80800017 	ldw	r2,0(r16)
    4f48:	103ff826 	beq	r2,zero,4f2c <_write_r+0x3c>
    4f4c:	88800015 	stw	r2,0(r17)
    4f50:	1805883a 	mov	r2,r3
    4f54:	dfc00217 	ldw	ra,8(sp)
    4f58:	dc400117 	ldw	r17,4(sp)
    4f5c:	dc000017 	ldw	r16,0(sp)
    4f60:	dec00304 	addi	sp,sp,12
    4f64:	f800283a 	ret

00004f68 <udivmodsi4>:
    4f68:	29001b2e 	bgeu	r5,r4,4fd8 <udivmodsi4+0x70>
    4f6c:	28001a16 	blt	r5,zero,4fd8 <udivmodsi4+0x70>
    4f70:	00800044 	movi	r2,1
    4f74:	0007883a 	mov	r3,zero
    4f78:	01c007c4 	movi	r7,31
    4f7c:	00000306 	br	4f8c <udivmodsi4+0x24>
    4f80:	19c01326 	beq	r3,r7,4fd0 <udivmodsi4+0x68>
    4f84:	18c00044 	addi	r3,r3,1
    4f88:	28000416 	blt	r5,zero,4f9c <udivmodsi4+0x34>
    4f8c:	294b883a 	add	r5,r5,r5
    4f90:	1085883a 	add	r2,r2,r2
    4f94:	293ffa36 	bltu	r5,r4,4f80 <udivmodsi4+0x18>
    4f98:	10000d26 	beq	r2,zero,4fd0 <udivmodsi4+0x68>
    4f9c:	0007883a 	mov	r3,zero
    4fa0:	21400236 	bltu	r4,r5,4fac <udivmodsi4+0x44>
    4fa4:	2149c83a 	sub	r4,r4,r5
    4fa8:	1886b03a 	or	r3,r3,r2
    4fac:	1004d07a 	srli	r2,r2,1
    4fb0:	280ad07a 	srli	r5,r5,1
    4fb4:	103ffa1e 	bne	r2,zero,4fa0 <udivmodsi4+0x38>
    4fb8:	30000226 	beq	r6,zero,4fc4 <udivmodsi4+0x5c>
    4fbc:	2005883a 	mov	r2,r4
    4fc0:	f800283a 	ret
    4fc4:	1809883a 	mov	r4,r3
    4fc8:	2005883a 	mov	r2,r4
    4fcc:	f800283a 	ret
    4fd0:	0007883a 	mov	r3,zero
    4fd4:	003ff806 	br	4fb8 <udivmodsi4+0x50>
    4fd8:	00800044 	movi	r2,1
    4fdc:	0007883a 	mov	r3,zero
    4fe0:	003fef06 	br	4fa0 <udivmodsi4+0x38>

00004fe4 <__divsi3>:
    4fe4:	defffe04 	addi	sp,sp,-8
    4fe8:	dc000015 	stw	r16,0(sp)
    4fec:	dfc00115 	stw	ra,4(sp)
    4ff0:	0021883a 	mov	r16,zero
    4ff4:	20000c16 	blt	r4,zero,5028 <__divsi3+0x44>
    4ff8:	000d883a 	mov	r6,zero
    4ffc:	28000e16 	blt	r5,zero,5038 <__divsi3+0x54>
    5000:	0004f680 	call	4f68 <udivmodsi4>
    5004:	1007883a 	mov	r3,r2
    5008:	8005003a 	cmpeq	r2,r16,zero
    500c:	1000011e 	bne	r2,zero,5014 <__divsi3+0x30>
    5010:	00c7c83a 	sub	r3,zero,r3
    5014:	1805883a 	mov	r2,r3
    5018:	dfc00117 	ldw	ra,4(sp)
    501c:	dc000017 	ldw	r16,0(sp)
    5020:	dec00204 	addi	sp,sp,8
    5024:	f800283a 	ret
    5028:	0109c83a 	sub	r4,zero,r4
    502c:	04000044 	movi	r16,1
    5030:	000d883a 	mov	r6,zero
    5034:	283ff20e 	bge	r5,zero,5000 <__divsi3+0x1c>
    5038:	014bc83a 	sub	r5,zero,r5
    503c:	8021003a 	cmpeq	r16,r16,zero
    5040:	003fef06 	br	5000 <__divsi3+0x1c>

00005044 <__modsi3>:
    5044:	deffff04 	addi	sp,sp,-4
    5048:	dfc00015 	stw	ra,0(sp)
    504c:	01800044 	movi	r6,1
    5050:	2807883a 	mov	r3,r5
    5054:	20000416 	blt	r4,zero,5068 <__modsi3+0x24>
    5058:	28000c16 	blt	r5,zero,508c <__modsi3+0x48>
    505c:	dfc00017 	ldw	ra,0(sp)
    5060:	dec00104 	addi	sp,sp,4
    5064:	0004f681 	jmpi	4f68 <udivmodsi4>
    5068:	0109c83a 	sub	r4,zero,r4
    506c:	28000b16 	blt	r5,zero,509c <__modsi3+0x58>
    5070:	180b883a 	mov	r5,r3
    5074:	01800044 	movi	r6,1
    5078:	0004f680 	call	4f68 <udivmodsi4>
    507c:	0085c83a 	sub	r2,zero,r2
    5080:	dfc00017 	ldw	ra,0(sp)
    5084:	dec00104 	addi	sp,sp,4
    5088:	f800283a 	ret
    508c:	014bc83a 	sub	r5,zero,r5
    5090:	dfc00017 	ldw	ra,0(sp)
    5094:	dec00104 	addi	sp,sp,4
    5098:	0004f681 	jmpi	4f68 <udivmodsi4>
    509c:	0147c83a 	sub	r3,zero,r5
    50a0:	003ff306 	br	5070 <__modsi3+0x2c>

000050a4 <__udivsi3>:
    50a4:	000d883a 	mov	r6,zero
    50a8:	0004f681 	jmpi	4f68 <udivmodsi4>

000050ac <__umodsi3>:
    50ac:	01800044 	movi	r6,1
    50b0:	0004f681 	jmpi	4f68 <udivmodsi4>

000050b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    50b4:	defffe04 	addi	sp,sp,-8
    50b8:	dfc00115 	stw	ra,4(sp)
    50bc:	df000015 	stw	fp,0(sp)
    50c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    50c4:	01000034 	movhi	r4,0
    50c8:	211b0204 	addi	r4,r4,27656
    50cc:	01400034 	movhi	r5,0
    50d0:	295a4904 	addi	r5,r5,26916
    50d4:	01800034 	movhi	r6,0
    50d8:	319b0204 	addi	r6,r6,27656
    50dc:	00051340 	call	5134 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    50e0:	01000034 	movhi	r4,0
    50e4:	21100804 	addi	r4,r4,16416
    50e8:	01400034 	movhi	r5,0
    50ec:	29500804 	addi	r5,r5,16416
    50f0:	01800034 	movhi	r6,0
    50f4:	31906d04 	addi	r6,r6,16820
    50f8:	00051340 	call	5134 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    50fc:	01000034 	movhi	r4,0
    5100:	211a3604 	addi	r4,r4,26840
    5104:	01400034 	movhi	r5,0
    5108:	295a3604 	addi	r5,r5,26840
    510c:	01800034 	movhi	r6,0
    5110:	319a4904 	addi	r6,r6,26916
    5114:	00051340 	call	5134 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5118:	00058e00 	call	58e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    511c:	0005a3c0 	call	5a3c <alt_icache_flush_all>
}
    5120:	e037883a 	mov	sp,fp
    5124:	dfc00117 	ldw	ra,4(sp)
    5128:	df000017 	ldw	fp,0(sp)
    512c:	dec00204 	addi	sp,sp,8
    5130:	f800283a 	ret

00005134 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    5134:	defffc04 	addi	sp,sp,-16
    5138:	df000315 	stw	fp,12(sp)
    513c:	df000304 	addi	fp,sp,12
    5140:	e13ffd15 	stw	r4,-12(fp)
    5144:	e17ffe15 	stw	r5,-8(fp)
    5148:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    514c:	e0fffe17 	ldw	r3,-8(fp)
    5150:	e0bffd17 	ldw	r2,-12(fp)
    5154:	18800e26 	beq	r3,r2,5190 <alt_load_section+0x5c>
  {
    while( to != end )
    5158:	00000a06 	br	5184 <alt_load_section+0x50>
    {
      *to++ = *from++;
    515c:	e0bffd17 	ldw	r2,-12(fp)
    5160:	10c00017 	ldw	r3,0(r2)
    5164:	e0bffe17 	ldw	r2,-8(fp)
    5168:	10c00015 	stw	r3,0(r2)
    516c:	e0bffe17 	ldw	r2,-8(fp)
    5170:	10800104 	addi	r2,r2,4
    5174:	e0bffe15 	stw	r2,-8(fp)
    5178:	e0bffd17 	ldw	r2,-12(fp)
    517c:	10800104 	addi	r2,r2,4
    5180:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5184:	e0fffe17 	ldw	r3,-8(fp)
    5188:	e0bfff17 	ldw	r2,-4(fp)
    518c:	18bff31e 	bne	r3,r2,515c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    5190:	e037883a 	mov	sp,fp
    5194:	df000017 	ldw	fp,0(sp)
    5198:	dec00104 	addi	sp,sp,4
    519c:	f800283a 	ret

000051a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    51a0:	defffd04 	addi	sp,sp,-12
    51a4:	dfc00215 	stw	ra,8(sp)
    51a8:	df000115 	stw	fp,4(sp)
    51ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    51b0:	0009883a 	mov	r4,zero
    51b4:	000537c0 	call	537c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    51b8:	00053b00 	call	53b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    51bc:	01000034 	movhi	r4,0
    51c0:	211a3c04 	addi	r4,r4,26864
    51c4:	01400034 	movhi	r5,0
    51c8:	295a3c04 	addi	r5,r5,26864
    51cc:	01800034 	movhi	r6,0
    51d0:	319a3c04 	addi	r6,r6,26864
    51d4:	0005dfc0 	call	5dfc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    51d8:	d120c617 	ldw	r4,-31976(gp)
    51dc:	d160c717 	ldw	r5,-31972(gp)
    51e0:	d1a0c817 	ldw	r6,-31968(gp)
    51e4:	00041f00 	call	41f0 <main>
    51e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    51ec:	01000044 	movi	r4,1
    51f0:	00057840 	call	5784 <close>
  exit (result);
    51f4:	e13fff17 	ldw	r4,-4(fp)
    51f8:	00066580 	call	6658 <exit>

000051fc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    51fc:	defff704 	addi	sp,sp,-36
    5200:	dfc00815 	stw	ra,32(sp)
    5204:	df000715 	stw	fp,28(sp)
    5208:	df000704 	addi	fp,sp,28
    520c:	e13ffb15 	stw	r4,-20(fp)
    5210:	e17ffc15 	stw	r5,-16(fp)
    5214:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5218:	e0bffb17 	ldw	r2,-20(fp)
    521c:	1004803a 	cmplt	r2,r2,zero
    5220:	1000081e 	bne	r2,zero,5244 <write+0x48>
    5224:	e0bffb17 	ldw	r2,-20(fp)
    5228:	10800324 	muli	r2,r2,12
    522c:	1007883a 	mov	r3,r2
    5230:	00800034 	movhi	r2,0
    5234:	109a9604 	addi	r2,r2,27224
    5238:	1887883a 	add	r3,r3,r2
    523c:	e0ffff15 	stw	r3,-4(fp)
    5240:	00000106 	br	5248 <write+0x4c>
    5244:	e03fff15 	stw	zero,-4(fp)
    5248:	e0bfff17 	ldw	r2,-4(fp)
    524c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    5250:	e0bffa17 	ldw	r2,-24(fp)
    5254:	1005003a 	cmpeq	r2,r2,zero
    5258:	1000241e 	bne	r2,zero,52ec <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    525c:	e0bffa17 	ldw	r2,-24(fp)
    5260:	10800217 	ldw	r2,8(r2)
    5264:	108000cc 	andi	r2,r2,3
    5268:	1005003a 	cmpeq	r2,r2,zero
    526c:	10001a1e 	bne	r2,zero,52d8 <write+0xdc>
    5270:	e0bffa17 	ldw	r2,-24(fp)
    5274:	10800017 	ldw	r2,0(r2)
    5278:	10800617 	ldw	r2,24(r2)
    527c:	1005003a 	cmpeq	r2,r2,zero
    5280:	1000151e 	bne	r2,zero,52d8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5284:	e0bffa17 	ldw	r2,-24(fp)
    5288:	10800017 	ldw	r2,0(r2)
    528c:	10800617 	ldw	r2,24(r2)
    5290:	e17ffc17 	ldw	r5,-16(fp)
    5294:	e1bffd17 	ldw	r6,-12(fp)
    5298:	e13ffa17 	ldw	r4,-24(fp)
    529c:	103ee83a 	callr	r2
    52a0:	e0bff915 	stw	r2,-28(fp)
    52a4:	e0bff917 	ldw	r2,-28(fp)
    52a8:	1004403a 	cmpge	r2,r2,zero
    52ac:	1000071e 	bne	r2,zero,52cc <write+0xd0>
      {
        ALT_ERRNO = -rval;
    52b0:	000531c0 	call	531c <alt_get_errno>
    52b4:	e0fff917 	ldw	r3,-28(fp)
    52b8:	00c7c83a 	sub	r3,zero,r3
    52bc:	10c00015 	stw	r3,0(r2)
        return -1;
    52c0:	00bfffc4 	movi	r2,-1
    52c4:	e0bffe15 	stw	r2,-8(fp)
    52c8:	00000e06 	br	5304 <write+0x108>
      }
      return rval;
    52cc:	e0bff917 	ldw	r2,-28(fp)
    52d0:	e0bffe15 	stw	r2,-8(fp)
    52d4:	00000b06 	br	5304 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    52d8:	000531c0 	call	531c <alt_get_errno>
    52dc:	1007883a 	mov	r3,r2
    52e0:	00800344 	movi	r2,13
    52e4:	18800015 	stw	r2,0(r3)
    52e8:	00000406 	br	52fc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    52ec:	000531c0 	call	531c <alt_get_errno>
    52f0:	1007883a 	mov	r3,r2
    52f4:	00801444 	movi	r2,81
    52f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    52fc:	00bfffc4 	movi	r2,-1
    5300:	e0bffe15 	stw	r2,-8(fp)
    5304:	e0bffe17 	ldw	r2,-8(fp)
}
    5308:	e037883a 	mov	sp,fp
    530c:	dfc00117 	ldw	ra,4(sp)
    5310:	df000017 	ldw	fp,0(sp)
    5314:	dec00204 	addi	sp,sp,8
    5318:	f800283a 	ret

0000531c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    531c:	defffd04 	addi	sp,sp,-12
    5320:	dfc00215 	stw	ra,8(sp)
    5324:	df000115 	stw	fp,4(sp)
    5328:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    532c:	00800034 	movhi	r2,0
    5330:	109afe04 	addi	r2,r2,27640
    5334:	10800017 	ldw	r2,0(r2)
    5338:	1005003a 	cmpeq	r2,r2,zero
    533c:	1000061e 	bne	r2,zero,5358 <alt_get_errno+0x3c>
    5340:	00800034 	movhi	r2,0
    5344:	109afe04 	addi	r2,r2,27640
    5348:	10800017 	ldw	r2,0(r2)
    534c:	103ee83a 	callr	r2
    5350:	e0bfff15 	stw	r2,-4(fp)
    5354:	00000306 	br	5364 <alt_get_errno+0x48>
    5358:	00800034 	movhi	r2,0
    535c:	109bbb04 	addi	r2,r2,28396
    5360:	e0bfff15 	stw	r2,-4(fp)
    5364:	e0bfff17 	ldw	r2,-4(fp)
}
    5368:	e037883a 	mov	sp,fp
    536c:	dfc00117 	ldw	ra,4(sp)
    5370:	df000017 	ldw	fp,0(sp)
    5374:	dec00204 	addi	sp,sp,8
    5378:	f800283a 	ret

0000537c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    537c:	defffd04 	addi	sp,sp,-12
    5380:	dfc00215 	stw	ra,8(sp)
    5384:	df000115 	stw	fp,4(sp)
    5388:	df000104 	addi	fp,sp,4
    538c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS_II, NIOS_II);
    5390:	000633c0 	call	633c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5394:	00800044 	movi	r2,1
    5398:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    539c:	e037883a 	mov	sp,fp
    53a0:	dfc00117 	ldw	ra,4(sp)
    53a4:	df000017 	ldw	fp,0(sp)
    53a8:	dec00204 	addi	sp,sp,8
    53ac:	f800283a 	ret

000053b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    53b0:	defffe04 	addi	sp,sp,-8
    53b4:	dfc00115 	stw	ra,4(sp)
    53b8:	df000015 	stw	fp,0(sp)
    53bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    53c0:	01240014 	movui	r4,36864
    53c4:	000b883a 	mov	r5,zero
    53c8:	000d883a 	mov	r6,zero
    53cc:	01c0fa04 	movi	r7,1000
    53d0:	00056f40 	call	56f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    53d4:	01000034 	movhi	r4,0
    53d8:	211a8104 	addi	r4,r4,27140
    53dc:	00053f40 	call	53f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    53e0:	e037883a 	mov	sp,fp
    53e4:	dfc00117 	ldw	ra,4(sp)
    53e8:	df000017 	ldw	fp,0(sp)
    53ec:	dec00204 	addi	sp,sp,8
    53f0:	f800283a 	ret

000053f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    53f4:	defffd04 	addi	sp,sp,-12
    53f8:	dfc00215 	stw	ra,8(sp)
    53fc:	df000115 	stw	fp,4(sp)
    5400:	df000104 	addi	fp,sp,4
    5404:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    5408:	e13fff17 	ldw	r4,-4(fp)
    540c:	01400034 	movhi	r5,0
    5410:	295afb04 	addi	r5,r5,27628
    5414:	00059280 	call	5928 <alt_dev_llist_insert>
}
    5418:	e037883a 	mov	sp,fp
    541c:	dfc00117 	ldw	ra,4(sp)
    5420:	df000017 	ldw	fp,0(sp)
    5424:	dec00204 	addi	sp,sp,8
    5428:	f800283a 	ret

0000542c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    542c:	defffa04 	addi	sp,sp,-24
    5430:	dfc00515 	stw	ra,20(sp)
    5434:	df000415 	stw	fp,16(sp)
    5438:	df000404 	addi	fp,sp,16
    543c:	e13ffd15 	stw	r4,-12(fp)
    5440:	e17ffe15 	stw	r5,-8(fp)
    5444:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5448:	e0bffd17 	ldw	r2,-12(fp)
    544c:	10800017 	ldw	r2,0(r2)
    5450:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    5454:	e0bffc17 	ldw	r2,-16(fp)
    5458:	11000a04 	addi	r4,r2,40
    545c:	e0bffd17 	ldw	r2,-12(fp)
    5460:	11c00217 	ldw	r7,8(r2)
    5464:	e17ffe17 	ldw	r5,-8(fp)
    5468:	e1bfff17 	ldw	r6,-4(fp)
    546c:	00054dc0 	call	54dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5470:	e037883a 	mov	sp,fp
    5474:	dfc00117 	ldw	ra,4(sp)
    5478:	df000017 	ldw	fp,0(sp)
    547c:	dec00204 	addi	sp,sp,8
    5480:	f800283a 	ret

00005484 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5484:	defffa04 	addi	sp,sp,-24
    5488:	dfc00515 	stw	ra,20(sp)
    548c:	df000415 	stw	fp,16(sp)
    5490:	df000404 	addi	fp,sp,16
    5494:	e13ffd15 	stw	r4,-12(fp)
    5498:	e17ffe15 	stw	r5,-8(fp)
    549c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    54a0:	e0bffd17 	ldw	r2,-12(fp)
    54a4:	10800017 	ldw	r2,0(r2)
    54a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    54ac:	e0bffc17 	ldw	r2,-16(fp)
    54b0:	11000a04 	addi	r4,r2,40
    54b4:	e0bffd17 	ldw	r2,-12(fp)
    54b8:	11c00217 	ldw	r7,8(r2)
    54bc:	e17ffe17 	ldw	r5,-8(fp)
    54c0:	e1bfff17 	ldw	r6,-4(fp)
    54c4:	00055e00 	call	55e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    54c8:	e037883a 	mov	sp,fp
    54cc:	dfc00117 	ldw	ra,4(sp)
    54d0:	df000017 	ldw	fp,0(sp)
    54d4:	dec00204 	addi	sp,sp,8
    54d8:	f800283a 	ret

000054dc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    54dc:	defff604 	addi	sp,sp,-40
    54e0:	df000915 	stw	fp,36(sp)
    54e4:	df000904 	addi	fp,sp,36
    54e8:	e13ffb15 	stw	r4,-20(fp)
    54ec:	e17ffc15 	stw	r5,-16(fp)
    54f0:	e1bffd15 	stw	r6,-12(fp)
    54f4:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    54f8:	e0bffb17 	ldw	r2,-20(fp)
    54fc:	10800017 	ldw	r2,0(r2)
    5500:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    5504:	e0bffc17 	ldw	r2,-16(fp)
    5508:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    550c:	e0bffd17 	ldw	r2,-12(fp)
    5510:	1007883a 	mov	r3,r2
    5514:	e0bffc17 	ldw	r2,-16(fp)
    5518:	10c5883a 	add	r2,r2,r3
    551c:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    5520:	00001606 	br	557c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5524:	e0bffa17 	ldw	r2,-24(fp)
    5528:	10800037 	ldwio	r2,0(r2)
    552c:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    5530:	e0bff717 	ldw	r2,-36(fp)
    5534:	10a0000c 	andi	r2,r2,32768
    5538:	1005003a 	cmpeq	r2,r2,zero
    553c:	1000081e 	bne	r2,zero,5560 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5540:	e0bff717 	ldw	r2,-36(fp)
    5544:	1007883a 	mov	r3,r2
    5548:	e0bff917 	ldw	r2,-28(fp)
    554c:	10c00005 	stb	r3,0(r2)
    5550:	e0bff917 	ldw	r2,-28(fp)
    5554:	10800044 	addi	r2,r2,1
    5558:	e0bff915 	stw	r2,-28(fp)
    555c:	00000706 	br	557c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    5560:	e0fff917 	ldw	r3,-28(fp)
    5564:	e0bffc17 	ldw	r2,-16(fp)
    5568:	1880071e 	bne	r3,r2,5588 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    556c:	e0bffe17 	ldw	r2,-8(fp)
    5570:	1090000c 	andi	r2,r2,16384
    5574:	1004c03a 	cmpne	r2,r2,zero
    5578:	1000031e 	bne	r2,zero,5588 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    557c:	e0fff917 	ldw	r3,-28(fp)
    5580:	e0bff817 	ldw	r2,-32(fp)
    5584:	18bfe736 	bltu	r3,r2,5524 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    5588:	e0fff917 	ldw	r3,-28(fp)
    558c:	e0bffc17 	ldw	r2,-16(fp)
    5590:	18800526 	beq	r3,r2,55a8 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    5594:	e0fff917 	ldw	r3,-28(fp)
    5598:	e0bffc17 	ldw	r2,-16(fp)
    559c:	1887c83a 	sub	r3,r3,r2
    55a0:	e0ffff15 	stw	r3,-4(fp)
    55a4:	00000906 	br	55cc <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    55a8:	e0bffe17 	ldw	r2,-8(fp)
    55ac:	1090000c 	andi	r2,r2,16384
    55b0:	1005003a 	cmpeq	r2,r2,zero
    55b4:	1000031e 	bne	r2,zero,55c4 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    55b8:	00bffd44 	movi	r2,-11
    55bc:	e0bfff15 	stw	r2,-4(fp)
    55c0:	00000206 	br	55cc <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    55c4:	00bffec4 	movi	r2,-5
    55c8:	e0bfff15 	stw	r2,-4(fp)
    55cc:	e0bfff17 	ldw	r2,-4(fp)
}
    55d0:	e037883a 	mov	sp,fp
    55d4:	df000017 	ldw	fp,0(sp)
    55d8:	dec00104 	addi	sp,sp,4
    55dc:	f800283a 	ret

000055e0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    55e0:	defff904 	addi	sp,sp,-28
    55e4:	df000615 	stw	fp,24(sp)
    55e8:	df000604 	addi	fp,sp,24
    55ec:	e13ffc15 	stw	r4,-16(fp)
    55f0:	e17ffd15 	stw	r5,-12(fp)
    55f4:	e1bffe15 	stw	r6,-8(fp)
    55f8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    55fc:	e0bffc17 	ldw	r2,-16(fp)
    5600:	10800017 	ldw	r2,0(r2)
    5604:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    5608:	e0bffe17 	ldw	r2,-8(fp)
    560c:	1007883a 	mov	r3,r2
    5610:	e0bffd17 	ldw	r2,-12(fp)
    5614:	10c5883a 	add	r2,r2,r3
    5618:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    561c:	00001106 	br	5664 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5620:	e0bffb17 	ldw	r2,-20(fp)
    5624:	10800104 	addi	r2,r2,4
    5628:	10800037 	ldwio	r2,0(r2)
    562c:	10bfffec 	andhi	r2,r2,65535
    5630:	1005003a 	cmpeq	r2,r2,zero
    5634:	10000b1e 	bne	r2,zero,5664 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5638:	e13ffb17 	ldw	r4,-20(fp)
    563c:	e0bffd17 	ldw	r2,-12(fp)
    5640:	10800003 	ldbu	r2,0(r2)
    5644:	10c03fcc 	andi	r3,r2,255
    5648:	18c0201c 	xori	r3,r3,128
    564c:	18ffe004 	addi	r3,r3,-128
    5650:	e0bffd17 	ldw	r2,-12(fp)
    5654:	10800044 	addi	r2,r2,1
    5658:	e0bffd15 	stw	r2,-12(fp)
    565c:	2005883a 	mov	r2,r4
    5660:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5664:	e0fffd17 	ldw	r3,-12(fp)
    5668:	e0bffa17 	ldw	r2,-24(fp)
    566c:	18bfec36 	bltu	r3,r2,5620 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5670:	e0bffe17 	ldw	r2,-8(fp)
}
    5674:	e037883a 	mov	sp,fp
    5678:	df000017 	ldw	fp,0(sp)
    567c:	dec00104 	addi	sp,sp,4
    5680:	f800283a 	ret

00005684 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    5684:	defffa04 	addi	sp,sp,-24
    5688:	dfc00515 	stw	ra,20(sp)
    568c:	df000415 	stw	fp,16(sp)
    5690:	df000404 	addi	fp,sp,16
    5694:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    5698:	e0bfff17 	ldw	r2,-4(fp)
    569c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    56a0:	e0bfff17 	ldw	r2,-4(fp)
    56a4:	10800104 	addi	r2,r2,4
    56a8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    56ac:	0005303a 	rdctl	r2,status
    56b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56b4:	e0fffd17 	ldw	r3,-12(fp)
    56b8:	00bfff84 	movi	r2,-2
    56bc:	1884703a 	and	r2,r3,r2
    56c0:	1001703a 	wrctl	status,r2
  
  return context;
    56c4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    56c8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    56cc:	00062300 	call	6230 <alt_tick>
    56d0:	e0bffe17 	ldw	r2,-8(fp)
    56d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56d8:	e0bffc17 	ldw	r2,-16(fp)
    56dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    56e0:	e037883a 	mov	sp,fp
    56e4:	dfc00117 	ldw	ra,4(sp)
    56e8:	df000017 	ldw	fp,0(sp)
    56ec:	dec00204 	addi	sp,sp,8
    56f0:	f800283a 	ret

000056f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    56f4:	defff804 	addi	sp,sp,-32
    56f8:	dfc00715 	stw	ra,28(sp)
    56fc:	df000615 	stw	fp,24(sp)
    5700:	df000604 	addi	fp,sp,24
    5704:	e13ffc15 	stw	r4,-16(fp)
    5708:	e17ffd15 	stw	r5,-12(fp)
    570c:	e1bffe15 	stw	r6,-8(fp)
    5710:	e1ffff15 	stw	r7,-4(fp)
    5714:	e0bfff17 	ldw	r2,-4(fp)
    5718:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    571c:	00800034 	movhi	r2,0
    5720:	109bc004 	addi	r2,r2,28416
    5724:	10800017 	ldw	r2,0(r2)
    5728:	1004c03a 	cmpne	r2,r2,zero
    572c:	1000041e 	bne	r2,zero,5740 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    5730:	00c00034 	movhi	r3,0
    5734:	18dbc004 	addi	r3,r3,28416
    5738:	e0bffb17 	ldw	r2,-20(fp)
    573c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    5740:	e0bffc17 	ldw	r2,-16(fp)
    5744:	10800104 	addi	r2,r2,4
    5748:	1007883a 	mov	r3,r2
    574c:	008001c4 	movi	r2,7
    5750:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    5754:	d8000015 	stw	zero,0(sp)
    5758:	e13ffd17 	ldw	r4,-12(fp)
    575c:	e17ffe17 	ldw	r5,-8(fp)
    5760:	01800034 	movhi	r6,0
    5764:	3195a104 	addi	r6,r6,22148
    5768:	e1fffc17 	ldw	r7,-16(fp)
    576c:	0005a6c0 	call	5a6c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    5770:	e037883a 	mov	sp,fp
    5774:	dfc00117 	ldw	ra,4(sp)
    5778:	df000017 	ldw	fp,0(sp)
    577c:	dec00204 	addi	sp,sp,8
    5780:	f800283a 	ret

00005784 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5784:	defff804 	addi	sp,sp,-32
    5788:	dfc00715 	stw	ra,28(sp)
    578c:	df000615 	stw	fp,24(sp)
    5790:	df000604 	addi	fp,sp,24
    5794:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5798:	e0bffc17 	ldw	r2,-16(fp)
    579c:	1004803a 	cmplt	r2,r2,zero
    57a0:	1000081e 	bne	r2,zero,57c4 <close+0x40>
    57a4:	e0bffc17 	ldw	r2,-16(fp)
    57a8:	10800324 	muli	r2,r2,12
    57ac:	1007883a 	mov	r3,r2
    57b0:	00800034 	movhi	r2,0
    57b4:	109a9604 	addi	r2,r2,27224
    57b8:	1887883a 	add	r3,r3,r2
    57bc:	e0ffff15 	stw	r3,-4(fp)
    57c0:	00000106 	br	57c8 <close+0x44>
    57c4:	e03fff15 	stw	zero,-4(fp)
    57c8:	e0bfff17 	ldw	r2,-4(fp)
    57cc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    57d0:	e0bffb17 	ldw	r2,-20(fp)
    57d4:	1005003a 	cmpeq	r2,r2,zero
    57d8:	10001d1e 	bne	r2,zero,5850 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    57dc:	e0bffb17 	ldw	r2,-20(fp)
    57e0:	10800017 	ldw	r2,0(r2)
    57e4:	10800417 	ldw	r2,16(r2)
    57e8:	1005003a 	cmpeq	r2,r2,zero
    57ec:	1000071e 	bne	r2,zero,580c <close+0x88>
    57f0:	e0bffb17 	ldw	r2,-20(fp)
    57f4:	10800017 	ldw	r2,0(r2)
    57f8:	10800417 	ldw	r2,16(r2)
    57fc:	e13ffb17 	ldw	r4,-20(fp)
    5800:	103ee83a 	callr	r2
    5804:	e0bffe15 	stw	r2,-8(fp)
    5808:	00000106 	br	5810 <close+0x8c>
    580c:	e03ffe15 	stw	zero,-8(fp)
    5810:	e0bffe17 	ldw	r2,-8(fp)
    5814:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5818:	e13ffc17 	ldw	r4,-16(fp)
    581c:	00061380 	call	6138 <alt_release_fd>
    if (rval < 0)
    5820:	e0bffa17 	ldw	r2,-24(fp)
    5824:	1004403a 	cmpge	r2,r2,zero
    5828:	1000071e 	bne	r2,zero,5848 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    582c:	00058800 	call	5880 <alt_get_errno>
    5830:	e0fffa17 	ldw	r3,-24(fp)
    5834:	00c7c83a 	sub	r3,zero,r3
    5838:	10c00015 	stw	r3,0(r2)
      return -1;
    583c:	00bfffc4 	movi	r2,-1
    5840:	e0bffd15 	stw	r2,-12(fp)
    5844:	00000806 	br	5868 <close+0xe4>
    }
    return 0;
    5848:	e03ffd15 	stw	zero,-12(fp)
    584c:	00000606 	br	5868 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5850:	00058800 	call	5880 <alt_get_errno>
    5854:	1007883a 	mov	r3,r2
    5858:	00801444 	movi	r2,81
    585c:	18800015 	stw	r2,0(r3)
    return -1;
    5860:	00bfffc4 	movi	r2,-1
    5864:	e0bffd15 	stw	r2,-12(fp)
    5868:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    586c:	e037883a 	mov	sp,fp
    5870:	dfc00117 	ldw	ra,4(sp)
    5874:	df000017 	ldw	fp,0(sp)
    5878:	dec00204 	addi	sp,sp,8
    587c:	f800283a 	ret

00005880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5880:	defffd04 	addi	sp,sp,-12
    5884:	dfc00215 	stw	ra,8(sp)
    5888:	df000115 	stw	fp,4(sp)
    588c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5890:	00800034 	movhi	r2,0
    5894:	109afe04 	addi	r2,r2,27640
    5898:	10800017 	ldw	r2,0(r2)
    589c:	1005003a 	cmpeq	r2,r2,zero
    58a0:	1000061e 	bne	r2,zero,58bc <alt_get_errno+0x3c>
    58a4:	00800034 	movhi	r2,0
    58a8:	109afe04 	addi	r2,r2,27640
    58ac:	10800017 	ldw	r2,0(r2)
    58b0:	103ee83a 	callr	r2
    58b4:	e0bfff15 	stw	r2,-4(fp)
    58b8:	00000306 	br	58c8 <alt_get_errno+0x48>
    58bc:	00800034 	movhi	r2,0
    58c0:	109bbb04 	addi	r2,r2,28396
    58c4:	e0bfff15 	stw	r2,-4(fp)
    58c8:	e0bfff17 	ldw	r2,-4(fp)
}
    58cc:	e037883a 	mov	sp,fp
    58d0:	dfc00117 	ldw	ra,4(sp)
    58d4:	df000017 	ldw	fp,0(sp)
    58d8:	dec00204 	addi	sp,sp,8
    58dc:	f800283a 	ret

000058e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    58e0:	deffff04 	addi	sp,sp,-4
    58e4:	df000015 	stw	fp,0(sp)
    58e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    58ec:	e037883a 	mov	sp,fp
    58f0:	df000017 	ldw	fp,0(sp)
    58f4:	dec00104 	addi	sp,sp,4
    58f8:	f800283a 	ret

000058fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    58fc:	defffc04 	addi	sp,sp,-16
    5900:	df000315 	stw	fp,12(sp)
    5904:	df000304 	addi	fp,sp,12
    5908:	e13ffd15 	stw	r4,-12(fp)
    590c:	e17ffe15 	stw	r5,-8(fp)
    5910:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5914:	e0bfff17 	ldw	r2,-4(fp)
}
    5918:	e037883a 	mov	sp,fp
    591c:	df000017 	ldw	fp,0(sp)
    5920:	dec00104 	addi	sp,sp,4
    5924:	f800283a 	ret

00005928 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5928:	defff904 	addi	sp,sp,-28
    592c:	dfc00615 	stw	ra,24(sp)
    5930:	df000515 	stw	fp,20(sp)
    5934:	df000504 	addi	fp,sp,20
    5938:	e13ffd15 	stw	r4,-12(fp)
    593c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5940:	e0bffd17 	ldw	r2,-12(fp)
    5944:	1005003a 	cmpeq	r2,r2,zero
    5948:	1000041e 	bne	r2,zero,595c <alt_dev_llist_insert+0x34>
    594c:	e0bffd17 	ldw	r2,-12(fp)
    5950:	10800217 	ldw	r2,8(r2)
    5954:	1004c03a 	cmpne	r2,r2,zero
    5958:	1000071e 	bne	r2,zero,5978 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    595c:	00059dc0 	call	59dc <alt_get_errno>
    5960:	1007883a 	mov	r3,r2
    5964:	00800584 	movi	r2,22
    5968:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    596c:	00bffa84 	movi	r2,-22
    5970:	e0bfff15 	stw	r2,-4(fp)
    5974:	00001306 	br	59c4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5978:	e0fffd17 	ldw	r3,-12(fp)
    597c:	e0bffe17 	ldw	r2,-8(fp)
    5980:	e0bffb15 	stw	r2,-20(fp)
    5984:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5988:	e0fffc17 	ldw	r3,-16(fp)
    598c:	e0bffb17 	ldw	r2,-20(fp)
    5990:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5994:	e0bffb17 	ldw	r2,-20(fp)
    5998:	10c00017 	ldw	r3,0(r2)
    599c:	e0bffc17 	ldw	r2,-16(fp)
    59a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    59a4:	e0bffb17 	ldw	r2,-20(fp)
    59a8:	10c00017 	ldw	r3,0(r2)
    59ac:	e0bffc17 	ldw	r2,-16(fp)
    59b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    59b4:	e0fffb17 	ldw	r3,-20(fp)
    59b8:	e0bffc17 	ldw	r2,-16(fp)
    59bc:	18800015 	stw	r2,0(r3)

  return 0;  
    59c0:	e03fff15 	stw	zero,-4(fp)
    59c4:	e0bfff17 	ldw	r2,-4(fp)
}
    59c8:	e037883a 	mov	sp,fp
    59cc:	dfc00117 	ldw	ra,4(sp)
    59d0:	df000017 	ldw	fp,0(sp)
    59d4:	dec00204 	addi	sp,sp,8
    59d8:	f800283a 	ret

000059dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    59dc:	defffd04 	addi	sp,sp,-12
    59e0:	dfc00215 	stw	ra,8(sp)
    59e4:	df000115 	stw	fp,4(sp)
    59e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    59ec:	00800034 	movhi	r2,0
    59f0:	109afe04 	addi	r2,r2,27640
    59f4:	10800017 	ldw	r2,0(r2)
    59f8:	1005003a 	cmpeq	r2,r2,zero
    59fc:	1000061e 	bne	r2,zero,5a18 <alt_get_errno+0x3c>
    5a00:	00800034 	movhi	r2,0
    5a04:	109afe04 	addi	r2,r2,27640
    5a08:	10800017 	ldw	r2,0(r2)
    5a0c:	103ee83a 	callr	r2
    5a10:	e0bfff15 	stw	r2,-4(fp)
    5a14:	00000306 	br	5a24 <alt_get_errno+0x48>
    5a18:	00800034 	movhi	r2,0
    5a1c:	109bbb04 	addi	r2,r2,28396
    5a20:	e0bfff15 	stw	r2,-4(fp)
    5a24:	e0bfff17 	ldw	r2,-4(fp)
}
    5a28:	e037883a 	mov	sp,fp
    5a2c:	dfc00117 	ldw	ra,4(sp)
    5a30:	df000017 	ldw	fp,0(sp)
    5a34:	dec00204 	addi	sp,sp,8
    5a38:	f800283a 	ret

00005a3c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5a3c:	defffe04 	addi	sp,sp,-8
    5a40:	dfc00115 	stw	ra,4(sp)
    5a44:	df000015 	stw	fp,0(sp)
    5a48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    5a4c:	0009883a 	mov	r4,zero
    5a50:	01440004 	movi	r5,4096
    5a54:	00065c80 	call	65c8 <alt_icache_flush>
#endif
}
    5a58:	e037883a 	mov	sp,fp
    5a5c:	dfc00117 	ldw	ra,4(sp)
    5a60:	df000017 	ldw	fp,0(sp)
    5a64:	dec00204 	addi	sp,sp,8
    5a68:	f800283a 	ret

00005a6c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5a6c:	defff904 	addi	sp,sp,-28
    5a70:	dfc00615 	stw	ra,24(sp)
    5a74:	df000515 	stw	fp,20(sp)
    5a78:	df000504 	addi	fp,sp,20
    5a7c:	e13ffc15 	stw	r4,-16(fp)
    5a80:	e17ffd15 	stw	r5,-12(fp)
    5a84:	e1bffe15 	stw	r6,-8(fp)
    5a88:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5a8c:	e0800217 	ldw	r2,8(fp)
    5a90:	d8800015 	stw	r2,0(sp)
    5a94:	e13ffc17 	ldw	r4,-16(fp)
    5a98:	e17ffd17 	ldw	r5,-12(fp)
    5a9c:	e1bffe17 	ldw	r6,-8(fp)
    5aa0:	e1ffff17 	ldw	r7,-4(fp)
    5aa4:	0005c400 	call	5c40 <alt_iic_isr_register>
}  
    5aa8:	e037883a 	mov	sp,fp
    5aac:	dfc00117 	ldw	ra,4(sp)
    5ab0:	df000017 	ldw	fp,0(sp)
    5ab4:	dec00204 	addi	sp,sp,8
    5ab8:	f800283a 	ret

00005abc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5abc:	defff904 	addi	sp,sp,-28
    5ac0:	df000615 	stw	fp,24(sp)
    5ac4:	df000604 	addi	fp,sp,24
    5ac8:	e13ffe15 	stw	r4,-8(fp)
    5acc:	e17fff15 	stw	r5,-4(fp)
    5ad0:	e0bfff17 	ldw	r2,-4(fp)
    5ad4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ad8:	0005303a 	rdctl	r2,status
    5adc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ae0:	e0fffb17 	ldw	r3,-20(fp)
    5ae4:	00bfff84 	movi	r2,-2
    5ae8:	1884703a 	and	r2,r3,r2
    5aec:	1001703a 	wrctl	status,r2
  
  return context;
    5af0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5af4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    5af8:	e0fffc17 	ldw	r3,-16(fp)
    5afc:	00800044 	movi	r2,1
    5b00:	10c4983a 	sll	r2,r2,r3
    5b04:	1007883a 	mov	r3,r2
    5b08:	00800034 	movhi	r2,0
    5b0c:	109bbf04 	addi	r2,r2,28412
    5b10:	10800017 	ldw	r2,0(r2)
    5b14:	1886b03a 	or	r3,r3,r2
    5b18:	00800034 	movhi	r2,0
    5b1c:	109bbf04 	addi	r2,r2,28412
    5b20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5b24:	00800034 	movhi	r2,0
    5b28:	109bbf04 	addi	r2,r2,28412
    5b2c:	10800017 	ldw	r2,0(r2)
    5b30:	100170fa 	wrctl	ienable,r2
    5b34:	e0bffd17 	ldw	r2,-12(fp)
    5b38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b3c:	e0bffa17 	ldw	r2,-24(fp)
    5b40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5b44:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    5b48:	e037883a 	mov	sp,fp
    5b4c:	df000017 	ldw	fp,0(sp)
    5b50:	dec00104 	addi	sp,sp,4
    5b54:	f800283a 	ret

00005b58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5b58:	defff904 	addi	sp,sp,-28
    5b5c:	df000615 	stw	fp,24(sp)
    5b60:	df000604 	addi	fp,sp,24
    5b64:	e13ffe15 	stw	r4,-8(fp)
    5b68:	e17fff15 	stw	r5,-4(fp)
    5b6c:	e0bfff17 	ldw	r2,-4(fp)
    5b70:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b74:	0005303a 	rdctl	r2,status
    5b78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b7c:	e0fffb17 	ldw	r3,-20(fp)
    5b80:	00bfff84 	movi	r2,-2
    5b84:	1884703a 	and	r2,r3,r2
    5b88:	1001703a 	wrctl	status,r2
  
  return context;
    5b8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5b90:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    5b94:	e0fffc17 	ldw	r3,-16(fp)
    5b98:	00800044 	movi	r2,1
    5b9c:	10c4983a 	sll	r2,r2,r3
    5ba0:	0084303a 	nor	r2,zero,r2
    5ba4:	1007883a 	mov	r3,r2
    5ba8:	00800034 	movhi	r2,0
    5bac:	109bbf04 	addi	r2,r2,28412
    5bb0:	10800017 	ldw	r2,0(r2)
    5bb4:	1886703a 	and	r3,r3,r2
    5bb8:	00800034 	movhi	r2,0
    5bbc:	109bbf04 	addi	r2,r2,28412
    5bc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5bc4:	00800034 	movhi	r2,0
    5bc8:	109bbf04 	addi	r2,r2,28412
    5bcc:	10800017 	ldw	r2,0(r2)
    5bd0:	100170fa 	wrctl	ienable,r2
    5bd4:	e0bffd17 	ldw	r2,-12(fp)
    5bd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5bdc:	e0bffa17 	ldw	r2,-24(fp)
    5be0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5be4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    5be8:	e037883a 	mov	sp,fp
    5bec:	df000017 	ldw	fp,0(sp)
    5bf0:	dec00104 	addi	sp,sp,4
    5bf4:	f800283a 	ret

00005bf8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5bf8:	defffc04 	addi	sp,sp,-16
    5bfc:	df000315 	stw	fp,12(sp)
    5c00:	df000304 	addi	fp,sp,12
    5c04:	e13ffe15 	stw	r4,-8(fp)
    5c08:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5c0c:	000530fa 	rdctl	r2,ienable
    5c10:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5c14:	e0ffff17 	ldw	r3,-4(fp)
    5c18:	00800044 	movi	r2,1
    5c1c:	10c4983a 	sll	r2,r2,r3
    5c20:	1007883a 	mov	r3,r2
    5c24:	e0bffd17 	ldw	r2,-12(fp)
    5c28:	1884703a 	and	r2,r3,r2
    5c2c:	1004c03a 	cmpne	r2,r2,zero
}
    5c30:	e037883a 	mov	sp,fp
    5c34:	df000017 	ldw	fp,0(sp)
    5c38:	dec00104 	addi	sp,sp,4
    5c3c:	f800283a 	ret

00005c40 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5c40:	defff404 	addi	sp,sp,-48
    5c44:	dfc00b15 	stw	ra,44(sp)
    5c48:	df000a15 	stw	fp,40(sp)
    5c4c:	df000a04 	addi	fp,sp,40
    5c50:	e13ffb15 	stw	r4,-20(fp)
    5c54:	e17ffc15 	stw	r5,-16(fp)
    5c58:	e1bffd15 	stw	r6,-12(fp)
    5c5c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    5c60:	00bffa84 	movi	r2,-22
    5c64:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5c68:	e0bffc17 	ldw	r2,-16(fp)
    5c6c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5c70:	e0bff917 	ldw	r2,-28(fp)
    5c74:	10800808 	cmpgei	r2,r2,32
    5c78:	1000291e 	bne	r2,zero,5d20 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c7c:	0005303a 	rdctl	r2,status
    5c80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c84:	e0fff717 	ldw	r3,-36(fp)
    5c88:	00bfff84 	movi	r2,-2
    5c8c:	1884703a 	and	r2,r3,r2
    5c90:	1001703a 	wrctl	status,r2
  
  return context;
    5c94:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5c98:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    5c9c:	e0bff917 	ldw	r2,-28(fp)
    5ca0:	00c00034 	movhi	r3,0
    5ca4:	18dbc204 	addi	r3,r3,28424
    5ca8:	100490fa 	slli	r2,r2,3
    5cac:	10c7883a 	add	r3,r2,r3
    5cb0:	e0bffd17 	ldw	r2,-12(fp)
    5cb4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    5cb8:	e0bff917 	ldw	r2,-28(fp)
    5cbc:	00c00034 	movhi	r3,0
    5cc0:	18dbc204 	addi	r3,r3,28424
    5cc4:	100490fa 	slli	r2,r2,3
    5cc8:	10c5883a 	add	r2,r2,r3
    5ccc:	10c00104 	addi	r3,r2,4
    5cd0:	e0bffe17 	ldw	r2,-8(fp)
    5cd4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5cd8:	e0bffd17 	ldw	r2,-12(fp)
    5cdc:	1005003a 	cmpeq	r2,r2,zero
    5ce0:	1000051e 	bne	r2,zero,5cf8 <alt_iic_isr_register+0xb8>
    5ce4:	e17ff917 	ldw	r5,-28(fp)
    5ce8:	e13ffb17 	ldw	r4,-20(fp)
    5cec:	0005abc0 	call	5abc <alt_ic_irq_enable>
    5cf0:	e0bfff15 	stw	r2,-4(fp)
    5cf4:	00000406 	br	5d08 <alt_iic_isr_register+0xc8>
    5cf8:	e17ff917 	ldw	r5,-28(fp)
    5cfc:	e13ffb17 	ldw	r4,-20(fp)
    5d00:	0005b580 	call	5b58 <alt_ic_irq_disable>
    5d04:	e0bfff15 	stw	r2,-4(fp)
    5d08:	e0bfff17 	ldw	r2,-4(fp)
    5d0c:	e0bffa15 	stw	r2,-24(fp)
    5d10:	e0bff817 	ldw	r2,-32(fp)
    5d14:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d18:	e0bff617 	ldw	r2,-40(fp)
    5d1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5d20:	e0bffa17 	ldw	r2,-24(fp)
}
    5d24:	e037883a 	mov	sp,fp
    5d28:	dfc00117 	ldw	ra,4(sp)
    5d2c:	df000017 	ldw	fp,0(sp)
    5d30:	dec00204 	addi	sp,sp,8
    5d34:	f800283a 	ret

00005d38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5d38:	defff904 	addi	sp,sp,-28
    5d3c:	dfc00615 	stw	ra,24(sp)
    5d40:	df000515 	stw	fp,20(sp)
    5d44:	df000504 	addi	fp,sp,20
    5d48:	e13ffc15 	stw	r4,-16(fp)
    5d4c:	e17ffd15 	stw	r5,-12(fp)
    5d50:	e1bffe15 	stw	r6,-8(fp)
    5d54:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    5d58:	e13ffd17 	ldw	r4,-12(fp)
    5d5c:	e17ffe17 	ldw	r5,-8(fp)
    5d60:	e1bfff17 	ldw	r6,-4(fp)
    5d64:	0005f500 	call	5f50 <open>
    5d68:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    5d6c:	e0bffb17 	ldw	r2,-20(fp)
    5d70:	1004803a 	cmplt	r2,r2,zero
    5d74:	10001c1e 	bne	r2,zero,5de8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    5d78:	e0bffb17 	ldw	r2,-20(fp)
    5d7c:	00c00034 	movhi	r3,0
    5d80:	18da9604 	addi	r3,r3,27224
    5d84:	10800324 	muli	r2,r2,12
    5d88:	10c5883a 	add	r2,r2,r3
    5d8c:	10c00017 	ldw	r3,0(r2)
    5d90:	e0bffc17 	ldw	r2,-16(fp)
    5d94:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5d98:	e0bffb17 	ldw	r2,-20(fp)
    5d9c:	00c00034 	movhi	r3,0
    5da0:	18da9604 	addi	r3,r3,27224
    5da4:	10800324 	muli	r2,r2,12
    5da8:	10c5883a 	add	r2,r2,r3
    5dac:	10800104 	addi	r2,r2,4
    5db0:	10c00017 	ldw	r3,0(r2)
    5db4:	e0bffc17 	ldw	r2,-16(fp)
    5db8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5dbc:	e0bffb17 	ldw	r2,-20(fp)
    5dc0:	00c00034 	movhi	r3,0
    5dc4:	18da9604 	addi	r3,r3,27224
    5dc8:	10800324 	muli	r2,r2,12
    5dcc:	10c5883a 	add	r2,r2,r3
    5dd0:	10800204 	addi	r2,r2,8
    5dd4:	10c00017 	ldw	r3,0(r2)
    5dd8:	e0bffc17 	ldw	r2,-16(fp)
    5ddc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5de0:	e13ffb17 	ldw	r4,-20(fp)
    5de4:	00061380 	call	6138 <alt_release_fd>
  }
} 
    5de8:	e037883a 	mov	sp,fp
    5dec:	dfc00117 	ldw	ra,4(sp)
    5df0:	df000017 	ldw	fp,0(sp)
    5df4:	dec00204 	addi	sp,sp,8
    5df8:	f800283a 	ret

00005dfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5dfc:	defffb04 	addi	sp,sp,-20
    5e00:	dfc00415 	stw	ra,16(sp)
    5e04:	df000315 	stw	fp,12(sp)
    5e08:	df000304 	addi	fp,sp,12
    5e0c:	e13ffd15 	stw	r4,-12(fp)
    5e10:	e17ffe15 	stw	r5,-8(fp)
    5e14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5e18:	01000034 	movhi	r4,0
    5e1c:	211a9904 	addi	r4,r4,27236
    5e20:	e17ffd17 	ldw	r5,-12(fp)
    5e24:	01800044 	movi	r6,1
    5e28:	01c07fc4 	movi	r7,511
    5e2c:	0005d380 	call	5d38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5e30:	01000034 	movhi	r4,0
    5e34:	211a9604 	addi	r4,r4,27224
    5e38:	e17ffe17 	ldw	r5,-8(fp)
    5e3c:	000d883a 	mov	r6,zero
    5e40:	01c07fc4 	movi	r7,511
    5e44:	0005d380 	call	5d38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5e48:	01000034 	movhi	r4,0
    5e4c:	211a9c04 	addi	r4,r4,27248
    5e50:	e17fff17 	ldw	r5,-4(fp)
    5e54:	01800044 	movi	r6,1
    5e58:	01c07fc4 	movi	r7,511
    5e5c:	0005d380 	call	5d38 <alt_open_fd>
}  
    5e60:	e037883a 	mov	sp,fp
    5e64:	dfc00117 	ldw	ra,4(sp)
    5e68:	df000017 	ldw	fp,0(sp)
    5e6c:	dec00204 	addi	sp,sp,8
    5e70:	f800283a 	ret

00005e74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5e74:	defffc04 	addi	sp,sp,-16
    5e78:	df000315 	stw	fp,12(sp)
    5e7c:	df000304 	addi	fp,sp,12
    5e80:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5e84:	e0bffe17 	ldw	r2,-8(fp)
    5e88:	10800217 	ldw	r2,8(r2)
    5e8c:	10d00034 	orhi	r3,r2,16384
    5e90:	e0bffe17 	ldw	r2,-8(fp)
    5e94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5e98:	e03ffd15 	stw	zero,-12(fp)
    5e9c:	00002006 	br	5f20 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5ea0:	e0bffd17 	ldw	r2,-12(fp)
    5ea4:	00c00034 	movhi	r3,0
    5ea8:	18da9604 	addi	r3,r3,27224
    5eac:	10800324 	muli	r2,r2,12
    5eb0:	10c5883a 	add	r2,r2,r3
    5eb4:	10c00017 	ldw	r3,0(r2)
    5eb8:	e0bffe17 	ldw	r2,-8(fp)
    5ebc:	10800017 	ldw	r2,0(r2)
    5ec0:	1880141e 	bne	r3,r2,5f14 <alt_file_locked+0xa0>
    5ec4:	e0bffd17 	ldw	r2,-12(fp)
    5ec8:	00c00034 	movhi	r3,0
    5ecc:	18da9604 	addi	r3,r3,27224
    5ed0:	10800324 	muli	r2,r2,12
    5ed4:	10c5883a 	add	r2,r2,r3
    5ed8:	10800204 	addi	r2,r2,8
    5edc:	10800017 	ldw	r2,0(r2)
    5ee0:	1004403a 	cmpge	r2,r2,zero
    5ee4:	10000b1e 	bne	r2,zero,5f14 <alt_file_locked+0xa0>
    5ee8:	e0bffd17 	ldw	r2,-12(fp)
    5eec:	10800324 	muli	r2,r2,12
    5ef0:	1007883a 	mov	r3,r2
    5ef4:	00800034 	movhi	r2,0
    5ef8:	109a9604 	addi	r2,r2,27224
    5efc:	1887883a 	add	r3,r3,r2
    5f00:	e0bffe17 	ldw	r2,-8(fp)
    5f04:	18800326 	beq	r3,r2,5f14 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5f08:	00bffcc4 	movi	r2,-13
    5f0c:	e0bfff15 	stw	r2,-4(fp)
    5f10:	00000a06 	br	5f3c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5f14:	e0bffd17 	ldw	r2,-12(fp)
    5f18:	10800044 	addi	r2,r2,1
    5f1c:	e0bffd15 	stw	r2,-12(fp)
    5f20:	00800034 	movhi	r2,0
    5f24:	109afd04 	addi	r2,r2,27636
    5f28:	10800017 	ldw	r2,0(r2)
    5f2c:	1007883a 	mov	r3,r2
    5f30:	e0bffd17 	ldw	r2,-12(fp)
    5f34:	18bfda2e 	bgeu	r3,r2,5ea0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5f38:	e03fff15 	stw	zero,-4(fp)
    5f3c:	e0bfff17 	ldw	r2,-4(fp)
}
    5f40:	e037883a 	mov	sp,fp
    5f44:	df000017 	ldw	fp,0(sp)
    5f48:	dec00104 	addi	sp,sp,4
    5f4c:	f800283a 	ret

00005f50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5f50:	defff404 	addi	sp,sp,-48
    5f54:	dfc00b15 	stw	ra,44(sp)
    5f58:	df000a15 	stw	fp,40(sp)
    5f5c:	df000a04 	addi	fp,sp,40
    5f60:	e13ffb15 	stw	r4,-20(fp)
    5f64:	e17ffc15 	stw	r5,-16(fp)
    5f68:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5f6c:	00bfffc4 	movi	r2,-1
    5f70:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    5f74:	00bffb44 	movi	r2,-19
    5f78:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    5f7c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5f80:	e13ffb17 	ldw	r4,-20(fp)
    5f84:	01400034 	movhi	r5,0
    5f88:	295afb04 	addi	r5,r5,27628
    5f8c:	000635c0 	call	635c <alt_find_dev>
    5f90:	e0bffa15 	stw	r2,-24(fp)
    5f94:	e0bffa17 	ldw	r2,-24(fp)
    5f98:	1004c03a 	cmpne	r2,r2,zero
    5f9c:	1000051e 	bne	r2,zero,5fb4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5fa0:	e13ffb17 	ldw	r4,-20(fp)
    5fa4:	00063f00 	call	63f0 <alt_find_file>
    5fa8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    5fac:	00800044 	movi	r2,1
    5fb0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5fb4:	e0bffa17 	ldw	r2,-24(fp)
    5fb8:	1005003a 	cmpeq	r2,r2,zero
    5fbc:	1000301e 	bne	r2,zero,6080 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5fc0:	e13ffa17 	ldw	r4,-24(fp)
    5fc4:	00065100 	call	6510 <alt_get_fd>
    5fc8:	e0bff815 	stw	r2,-32(fp)
    5fcc:	e0bff817 	ldw	r2,-32(fp)
    5fd0:	1004403a 	cmpge	r2,r2,zero
    5fd4:	1000031e 	bne	r2,zero,5fe4 <open+0x94>
    {
      status = index;
    5fd8:	e0bff817 	ldw	r2,-32(fp)
    5fdc:	e0bff715 	stw	r2,-36(fp)
    5fe0:	00002906 	br	6088 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    5fe4:	e0bff817 	ldw	r2,-32(fp)
    5fe8:	10800324 	muli	r2,r2,12
    5fec:	1007883a 	mov	r3,r2
    5ff0:	00800034 	movhi	r2,0
    5ff4:	109a9604 	addi	r2,r2,27224
    5ff8:	1885883a 	add	r2,r3,r2
    5ffc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6000:	e0fffc17 	ldw	r3,-16(fp)
    6004:	00900034 	movhi	r2,16384
    6008:	10bfffc4 	addi	r2,r2,-1
    600c:	1886703a 	and	r3,r3,r2
    6010:	e0bff917 	ldw	r2,-28(fp)
    6014:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6018:	e0bff617 	ldw	r2,-40(fp)
    601c:	1004c03a 	cmpne	r2,r2,zero
    6020:	1000061e 	bne	r2,zero,603c <open+0xec>
    6024:	e13ff917 	ldw	r4,-28(fp)
    6028:	0005e740 	call	5e74 <alt_file_locked>
    602c:	e0bff715 	stw	r2,-36(fp)
    6030:	e0bff717 	ldw	r2,-36(fp)
    6034:	1004803a 	cmplt	r2,r2,zero
    6038:	1000131e 	bne	r2,zero,6088 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    603c:	e0bffa17 	ldw	r2,-24(fp)
    6040:	10800317 	ldw	r2,12(r2)
    6044:	1005003a 	cmpeq	r2,r2,zero
    6048:	1000091e 	bne	r2,zero,6070 <open+0x120>
    604c:	e0bffa17 	ldw	r2,-24(fp)
    6050:	10800317 	ldw	r2,12(r2)
    6054:	e13ff917 	ldw	r4,-28(fp)
    6058:	e17ffb17 	ldw	r5,-20(fp)
    605c:	e1bffc17 	ldw	r6,-16(fp)
    6060:	e1fffd17 	ldw	r7,-12(fp)
    6064:	103ee83a 	callr	r2
    6068:	e0bfff15 	stw	r2,-4(fp)
    606c:	00000106 	br	6074 <open+0x124>
    6070:	e03fff15 	stw	zero,-4(fp)
    6074:	e0bfff17 	ldw	r2,-4(fp)
    6078:	e0bff715 	stw	r2,-36(fp)
    607c:	00000206 	br	6088 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6080:	00bffb44 	movi	r2,-19
    6084:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6088:	e0bff717 	ldw	r2,-36(fp)
    608c:	1004403a 	cmpge	r2,r2,zero
    6090:	1000091e 	bne	r2,zero,60b8 <open+0x168>
  {
    alt_release_fd (index);  
    6094:	e13ff817 	ldw	r4,-32(fp)
    6098:	00061380 	call	6138 <alt_release_fd>
    ALT_ERRNO = -status;
    609c:	00060d80 	call	60d8 <alt_get_errno>
    60a0:	e0fff717 	ldw	r3,-36(fp)
    60a4:	00c7c83a 	sub	r3,zero,r3
    60a8:	10c00015 	stw	r3,0(r2)
    return -1;
    60ac:	00bfffc4 	movi	r2,-1
    60b0:	e0bffe15 	stw	r2,-8(fp)
    60b4:	00000206 	br	60c0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    60b8:	e0bff817 	ldw	r2,-32(fp)
    60bc:	e0bffe15 	stw	r2,-8(fp)
    60c0:	e0bffe17 	ldw	r2,-8(fp)
}
    60c4:	e037883a 	mov	sp,fp
    60c8:	dfc00117 	ldw	ra,4(sp)
    60cc:	df000017 	ldw	fp,0(sp)
    60d0:	dec00204 	addi	sp,sp,8
    60d4:	f800283a 	ret

000060d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    60d8:	defffd04 	addi	sp,sp,-12
    60dc:	dfc00215 	stw	ra,8(sp)
    60e0:	df000115 	stw	fp,4(sp)
    60e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    60e8:	00800034 	movhi	r2,0
    60ec:	109afe04 	addi	r2,r2,27640
    60f0:	10800017 	ldw	r2,0(r2)
    60f4:	1005003a 	cmpeq	r2,r2,zero
    60f8:	1000061e 	bne	r2,zero,6114 <alt_get_errno+0x3c>
    60fc:	00800034 	movhi	r2,0
    6100:	109afe04 	addi	r2,r2,27640
    6104:	10800017 	ldw	r2,0(r2)
    6108:	103ee83a 	callr	r2
    610c:	e0bfff15 	stw	r2,-4(fp)
    6110:	00000306 	br	6120 <alt_get_errno+0x48>
    6114:	00800034 	movhi	r2,0
    6118:	109bbb04 	addi	r2,r2,28396
    611c:	e0bfff15 	stw	r2,-4(fp)
    6120:	e0bfff17 	ldw	r2,-4(fp)
}
    6124:	e037883a 	mov	sp,fp
    6128:	dfc00117 	ldw	ra,4(sp)
    612c:	df000017 	ldw	fp,0(sp)
    6130:	dec00204 	addi	sp,sp,8
    6134:	f800283a 	ret

00006138 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    6138:	defffe04 	addi	sp,sp,-8
    613c:	df000115 	stw	fp,4(sp)
    6140:	df000104 	addi	fp,sp,4
    6144:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    6148:	e0bfff17 	ldw	r2,-4(fp)
    614c:	108000d0 	cmplti	r2,r2,3
    6150:	10000d1e 	bne	r2,zero,6188 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    6154:	e0bfff17 	ldw	r2,-4(fp)
    6158:	00c00034 	movhi	r3,0
    615c:	18da9604 	addi	r3,r3,27224
    6160:	10800324 	muli	r2,r2,12
    6164:	10c5883a 	add	r2,r2,r3
    6168:	10800204 	addi	r2,r2,8
    616c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    6170:	e0bfff17 	ldw	r2,-4(fp)
    6174:	00c00034 	movhi	r3,0
    6178:	18da9604 	addi	r3,r3,27224
    617c:	10800324 	muli	r2,r2,12
    6180:	10c5883a 	add	r2,r2,r3
    6184:	10000015 	stw	zero,0(r2)
  }
}
    6188:	e037883a 	mov	sp,fp
    618c:	df000017 	ldw	fp,0(sp)
    6190:	dec00104 	addi	sp,sp,4
    6194:	f800283a 	ret

00006198 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    6198:	defffa04 	addi	sp,sp,-24
    619c:	df000515 	stw	fp,20(sp)
    61a0:	df000504 	addi	fp,sp,20
    61a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    61a8:	0005303a 	rdctl	r2,status
    61ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    61b0:	e0fffd17 	ldw	r3,-12(fp)
    61b4:	00bfff84 	movi	r2,-2
    61b8:	1884703a 	and	r2,r3,r2
    61bc:	1001703a 	wrctl	status,r2
  
  return context;
    61c0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    61c4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    61c8:	e0bfff17 	ldw	r2,-4(fp)
    61cc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    61d0:	e0bffc17 	ldw	r2,-16(fp)
    61d4:	10c00017 	ldw	r3,0(r2)
    61d8:	e0bffc17 	ldw	r2,-16(fp)
    61dc:	10800117 	ldw	r2,4(r2)
    61e0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    61e4:	e0bffc17 	ldw	r2,-16(fp)
    61e8:	10c00117 	ldw	r3,4(r2)
    61ec:	e0bffc17 	ldw	r2,-16(fp)
    61f0:	10800017 	ldw	r2,0(r2)
    61f4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    61f8:	e0fffc17 	ldw	r3,-16(fp)
    61fc:	e0bffc17 	ldw	r2,-16(fp)
    6200:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    6204:	e0fffc17 	ldw	r3,-16(fp)
    6208:	e0bffc17 	ldw	r2,-16(fp)
    620c:	18800015 	stw	r2,0(r3)
    6210:	e0bffe17 	ldw	r2,-8(fp)
    6214:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6218:	e0bffb17 	ldw	r2,-20(fp)
    621c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    6220:	e037883a 	mov	sp,fp
    6224:	df000017 	ldw	fp,0(sp)
    6228:	dec00104 	addi	sp,sp,4
    622c:	f800283a 	ret

00006230 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    6230:	defffb04 	addi	sp,sp,-20
    6234:	dfc00415 	stw	ra,16(sp)
    6238:	df000315 	stw	fp,12(sp)
    623c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6240:	d0a00a17 	ldw	r2,-32728(gp)
    6244:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    6248:	d0a0cb17 	ldw	r2,-31956(gp)
    624c:	10800044 	addi	r2,r2,1
    6250:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6254:	00003106 	br	631c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    6258:	e0bffe17 	ldw	r2,-8(fp)
    625c:	10800017 	ldw	r2,0(r2)
    6260:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6264:	e0bffe17 	ldw	r2,-8(fp)
    6268:	10800403 	ldbu	r2,16(r2)
    626c:	10803fcc 	andi	r2,r2,255
    6270:	1005003a 	cmpeq	r2,r2,zero
    6274:	1000051e 	bne	r2,zero,628c <alt_tick+0x5c>
    6278:	d0a0cb17 	ldw	r2,-31956(gp)
    627c:	1004c03a 	cmpne	r2,r2,zero
    6280:	1000021e 	bne	r2,zero,628c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    6284:	e0bffe17 	ldw	r2,-8(fp)
    6288:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    628c:	e0bffe17 	ldw	r2,-8(fp)
    6290:	10c00217 	ldw	r3,8(r2)
    6294:	d0a0cb17 	ldw	r2,-31956(gp)
    6298:	10c01e36 	bltu	r2,r3,6314 <alt_tick+0xe4>
    629c:	e0bffe17 	ldw	r2,-8(fp)
    62a0:	10800403 	ldbu	r2,16(r2)
    62a4:	10803fcc 	andi	r2,r2,255
    62a8:	1004c03a 	cmpne	r2,r2,zero
    62ac:	1000191e 	bne	r2,zero,6314 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    62b0:	e0bffe17 	ldw	r2,-8(fp)
    62b4:	10c00317 	ldw	r3,12(r2)
    62b8:	e0bffe17 	ldw	r2,-8(fp)
    62bc:	11000517 	ldw	r4,20(r2)
    62c0:	183ee83a 	callr	r3
    62c4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    62c8:	e0bffd17 	ldw	r2,-12(fp)
    62cc:	1004c03a 	cmpne	r2,r2,zero
    62d0:	1000031e 	bne	r2,zero,62e0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    62d4:	e13ffe17 	ldw	r4,-8(fp)
    62d8:	00061980 	call	6198 <alt_alarm_stop>
    62dc:	00000d06 	br	6314 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    62e0:	e0bffe17 	ldw	r2,-8(fp)
    62e4:	10c00217 	ldw	r3,8(r2)
    62e8:	e0bffd17 	ldw	r2,-12(fp)
    62ec:	1887883a 	add	r3,r3,r2
    62f0:	e0bffe17 	ldw	r2,-8(fp)
    62f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    62f8:	e0bffe17 	ldw	r2,-8(fp)
    62fc:	10c00217 	ldw	r3,8(r2)
    6300:	d0a0cb17 	ldw	r2,-31956(gp)
    6304:	1880032e 	bgeu	r3,r2,6314 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    6308:	e0fffe17 	ldw	r3,-8(fp)
    630c:	00800044 	movi	r2,1
    6310:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    6314:	e0bfff17 	ldw	r2,-4(fp)
    6318:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    631c:	d0e00a04 	addi	r3,gp,-32728
    6320:	e0bffe17 	ldw	r2,-8(fp)
    6324:	10ffcc1e 	bne	r2,r3,6258 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    6328:	e037883a 	mov	sp,fp
    632c:	dfc00117 	ldw	ra,4(sp)
    6330:	df000017 	ldw	fp,0(sp)
    6334:	dec00204 	addi	sp,sp,8
    6338:	f800283a 	ret

0000633c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    633c:	deffff04 	addi	sp,sp,-4
    6340:	df000015 	stw	fp,0(sp)
    6344:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6348:	000170fa 	wrctl	ienable,zero
}
    634c:	e037883a 	mov	sp,fp
    6350:	df000017 	ldw	fp,0(sp)
    6354:	dec00104 	addi	sp,sp,4
    6358:	f800283a 	ret

0000635c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    635c:	defff904 	addi	sp,sp,-28
    6360:	dfc00615 	stw	ra,24(sp)
    6364:	df000515 	stw	fp,20(sp)
    6368:	df000504 	addi	fp,sp,20
    636c:	e13ffd15 	stw	r4,-12(fp)
    6370:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    6374:	e0bffe17 	ldw	r2,-8(fp)
    6378:	10800017 	ldw	r2,0(r2)
    637c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    6380:	e13ffd17 	ldw	r4,-12(fp)
    6384:	0004ed00 	call	4ed0 <strlen>
    6388:	10800044 	addi	r2,r2,1
    638c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6390:	00000d06 	br	63c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    6394:	e0bffc17 	ldw	r2,-16(fp)
    6398:	11000217 	ldw	r4,8(r2)
    639c:	e1bffb17 	ldw	r6,-20(fp)
    63a0:	e17ffd17 	ldw	r5,-12(fp)
    63a4:	00066780 	call	6678 <memcmp>
    63a8:	1004c03a 	cmpne	r2,r2,zero
    63ac:	1000031e 	bne	r2,zero,63bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    63b0:	e0bffc17 	ldw	r2,-16(fp)
    63b4:	e0bfff15 	stw	r2,-4(fp)
    63b8:	00000706 	br	63d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    63bc:	e0bffc17 	ldw	r2,-16(fp)
    63c0:	10800017 	ldw	r2,0(r2)
    63c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    63c8:	e0fffe17 	ldw	r3,-8(fp)
    63cc:	e0bffc17 	ldw	r2,-16(fp)
    63d0:	10fff01e 	bne	r2,r3,6394 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    63d4:	e03fff15 	stw	zero,-4(fp)
    63d8:	e0bfff17 	ldw	r2,-4(fp)
}
    63dc:	e037883a 	mov	sp,fp
    63e0:	dfc00117 	ldw	ra,4(sp)
    63e4:	df000017 	ldw	fp,0(sp)
    63e8:	dec00204 	addi	sp,sp,8
    63ec:	f800283a 	ret

000063f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    63f0:	defffa04 	addi	sp,sp,-24
    63f4:	dfc00515 	stw	ra,20(sp)
    63f8:	df000415 	stw	fp,16(sp)
    63fc:	df000404 	addi	fp,sp,16
    6400:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6404:	00800034 	movhi	r2,0
    6408:	109af904 	addi	r2,r2,27620
    640c:	10800017 	ldw	r2,0(r2)
    6410:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6414:	00003306 	br	64e4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    6418:	e0bffd17 	ldw	r2,-12(fp)
    641c:	11000217 	ldw	r4,8(r2)
    6420:	0004ed00 	call	4ed0 <strlen>
    6424:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    6428:	e0bffd17 	ldw	r2,-12(fp)
    642c:	10c00217 	ldw	r3,8(r2)
    6430:	e0bffc17 	ldw	r2,-16(fp)
    6434:	1885883a 	add	r2,r3,r2
    6438:	10bfffc4 	addi	r2,r2,-1
    643c:	10800003 	ldbu	r2,0(r2)
    6440:	10803fcc 	andi	r2,r2,255
    6444:	1080201c 	xori	r2,r2,128
    6448:	10bfe004 	addi	r2,r2,-128
    644c:	10800bd8 	cmpnei	r2,r2,47
    6450:	1000031e 	bne	r2,zero,6460 <alt_find_file+0x70>
    {
      len -= 1;
    6454:	e0bffc17 	ldw	r2,-16(fp)
    6458:	10bfffc4 	addi	r2,r2,-1
    645c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6460:	e0bffc17 	ldw	r2,-16(fp)
    6464:	1007883a 	mov	r3,r2
    6468:	e0bffe17 	ldw	r2,-8(fp)
    646c:	1885883a 	add	r2,r3,r2
    6470:	10800003 	ldbu	r2,0(r2)
    6474:	10803fcc 	andi	r2,r2,255
    6478:	1080201c 	xori	r2,r2,128
    647c:	10bfe004 	addi	r2,r2,-128
    6480:	10800be0 	cmpeqi	r2,r2,47
    6484:	10000a1e 	bne	r2,zero,64b0 <alt_find_file+0xc0>
    6488:	e0bffc17 	ldw	r2,-16(fp)
    648c:	1007883a 	mov	r3,r2
    6490:	e0bffe17 	ldw	r2,-8(fp)
    6494:	1885883a 	add	r2,r3,r2
    6498:	10800003 	ldbu	r2,0(r2)
    649c:	10803fcc 	andi	r2,r2,255
    64a0:	1080201c 	xori	r2,r2,128
    64a4:	10bfe004 	addi	r2,r2,-128
    64a8:	1004c03a 	cmpne	r2,r2,zero
    64ac:	10000a1e 	bne	r2,zero,64d8 <alt_find_file+0xe8>
    64b0:	e0bffd17 	ldw	r2,-12(fp)
    64b4:	11000217 	ldw	r4,8(r2)
    64b8:	e1bffc17 	ldw	r6,-16(fp)
    64bc:	e17ffe17 	ldw	r5,-8(fp)
    64c0:	00066780 	call	6678 <memcmp>
    64c4:	1004c03a 	cmpne	r2,r2,zero
    64c8:	1000031e 	bne	r2,zero,64d8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    64cc:	e0bffd17 	ldw	r2,-12(fp)
    64d0:	e0bfff15 	stw	r2,-4(fp)
    64d4:	00000806 	br	64f8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    64d8:	e0bffd17 	ldw	r2,-12(fp)
    64dc:	10800017 	ldw	r2,0(r2)
    64e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    64e4:	00c00034 	movhi	r3,0
    64e8:	18daf904 	addi	r3,r3,27620
    64ec:	e0bffd17 	ldw	r2,-12(fp)
    64f0:	10ffc91e 	bne	r2,r3,6418 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    64f4:	e03fff15 	stw	zero,-4(fp)
    64f8:	e0bfff17 	ldw	r2,-4(fp)
}
    64fc:	e037883a 	mov	sp,fp
    6500:	dfc00117 	ldw	ra,4(sp)
    6504:	df000017 	ldw	fp,0(sp)
    6508:	dec00204 	addi	sp,sp,8
    650c:	f800283a 	ret

00006510 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6510:	defffc04 	addi	sp,sp,-16
    6514:	df000315 	stw	fp,12(sp)
    6518:	df000304 	addi	fp,sp,12
    651c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6520:	00bffa04 	movi	r2,-24
    6524:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6528:	e03ffe15 	stw	zero,-8(fp)
    652c:	00001e06 	br	65a8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    6530:	e0bffe17 	ldw	r2,-8(fp)
    6534:	00c00034 	movhi	r3,0
    6538:	18da9604 	addi	r3,r3,27224
    653c:	10800324 	muli	r2,r2,12
    6540:	10c5883a 	add	r2,r2,r3
    6544:	10800017 	ldw	r2,0(r2)
    6548:	1004c03a 	cmpne	r2,r2,zero
    654c:	1000131e 	bne	r2,zero,659c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    6550:	e0bffe17 	ldw	r2,-8(fp)
    6554:	00c00034 	movhi	r3,0
    6558:	18da9604 	addi	r3,r3,27224
    655c:	10800324 	muli	r2,r2,12
    6560:	10c7883a 	add	r3,r2,r3
    6564:	e0bfff17 	ldw	r2,-4(fp)
    6568:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    656c:	00800034 	movhi	r2,0
    6570:	109afd04 	addi	r2,r2,27636
    6574:	10c00017 	ldw	r3,0(r2)
    6578:	e0bffe17 	ldw	r2,-8(fp)
    657c:	1880040e 	bge	r3,r2,6590 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    6580:	00c00034 	movhi	r3,0
    6584:	18dafd04 	addi	r3,r3,27636
    6588:	e0bffe17 	ldw	r2,-8(fp)
    658c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    6590:	e0bffe17 	ldw	r2,-8(fp)
    6594:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    6598:	00000606 	br	65b4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    659c:	e0bffe17 	ldw	r2,-8(fp)
    65a0:	10800044 	addi	r2,r2,1
    65a4:	e0bffe15 	stw	r2,-8(fp)
    65a8:	e0bffe17 	ldw	r2,-8(fp)
    65ac:	10800810 	cmplti	r2,r2,32
    65b0:	103fdf1e 	bne	r2,zero,6530 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    65b4:	e0bffd17 	ldw	r2,-12(fp)
}
    65b8:	e037883a 	mov	sp,fp
    65bc:	df000017 	ldw	fp,0(sp)
    65c0:	dec00104 	addi	sp,sp,4
    65c4:	f800283a 	ret

000065c8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    65c8:	defffb04 	addi	sp,sp,-20
    65cc:	df000415 	stw	fp,16(sp)
    65d0:	df000404 	addi	fp,sp,16
    65d4:	e13ffe15 	stw	r4,-8(fp)
    65d8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    65dc:	e0bfff17 	ldw	r2,-4(fp)
    65e0:	10840070 	cmpltui	r2,r2,4097
    65e4:	1000021e 	bne	r2,zero,65f0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    65e8:	00840004 	movi	r2,4096
    65ec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    65f0:	e0fffe17 	ldw	r3,-8(fp)
    65f4:	e0bfff17 	ldw	r2,-4(fp)
    65f8:	1885883a 	add	r2,r3,r2
    65fc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6600:	e0bffe17 	ldw	r2,-8(fp)
    6604:	e0bffd15 	stw	r2,-12(fp)
    6608:	00000506 	br	6620 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    660c:	e0bffd17 	ldw	r2,-12(fp)
    6610:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6614:	e0bffd17 	ldw	r2,-12(fp)
    6618:	10800804 	addi	r2,r2,32
    661c:	e0bffd15 	stw	r2,-12(fp)
    6620:	e0fffd17 	ldw	r3,-12(fp)
    6624:	e0bffc17 	ldw	r2,-16(fp)
    6628:	18bff836 	bltu	r3,r2,660c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    662c:	e0bffe17 	ldw	r2,-8(fp)
    6630:	108007cc 	andi	r2,r2,31
    6634:	1005003a 	cmpeq	r2,r2,zero
    6638:	1000021e 	bne	r2,zero,6644 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    663c:	e0bffd17 	ldw	r2,-12(fp)
    6640:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6644:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    6648:	e037883a 	mov	sp,fp
    664c:	df000017 	ldw	fp,0(sp)
    6650:	dec00104 	addi	sp,sp,4
    6654:	f800283a 	ret

00006658 <exit>:
    6658:	defffe04 	addi	sp,sp,-8
    665c:	dc400015 	stw	r17,0(sp)
    6660:	000b883a 	mov	r5,zero
    6664:	2023883a 	mov	r17,r4
    6668:	dfc00115 	stw	ra,4(sp)
    666c:	00066b80 	call	66b8 <__call_exitprocs>
    6670:	8809883a 	mov	r4,r17
    6674:	00068b40 	call	68b4 <_exit>

00006678 <memcmp>:
    6678:	31ffffc4 	addi	r7,r6,-1
    667c:	3000061e 	bne	r6,zero,6698 <memcmp+0x20>
    6680:	00000a06 	br	66ac <memcmp+0x34>
    6684:	39ffffc4 	addi	r7,r7,-1
    6688:	00bfffc4 	movi	r2,-1
    668c:	21000044 	addi	r4,r4,1
    6690:	29400044 	addi	r5,r5,1
    6694:	38800526 	beq	r7,r2,66ac <memcmp+0x34>
    6698:	20c00003 	ldbu	r3,0(r4)
    669c:	28800003 	ldbu	r2,0(r5)
    66a0:	18bff826 	beq	r3,r2,6684 <memcmp+0xc>
    66a4:	1885c83a 	sub	r2,r3,r2
    66a8:	f800283a 	ret
    66ac:	0005883a 	mov	r2,zero
    66b0:	f800283a 	ret

000066b4 <register_fini>:
    66b4:	f800283a 	ret

000066b8 <__call_exitprocs>:
    66b8:	defff304 	addi	sp,sp,-52
    66bc:	00800034 	movhi	r2,0
    66c0:	109af804 	addi	r2,r2,27616
    66c4:	df000b15 	stw	fp,44(sp)
    66c8:	17000017 	ldw	fp,0(r2)
    66cc:	00800034 	movhi	r2,0
    66d0:	10800004 	addi	r2,r2,0
    66d4:	1005003a 	cmpeq	r2,r2,zero
    66d8:	d8800215 	stw	r2,8(sp)
    66dc:	e0800c04 	addi	r2,fp,48
    66e0:	dd800915 	stw	r22,36(sp)
    66e4:	dd400815 	stw	r21,32(sp)
    66e8:	dfc00c15 	stw	ra,48(sp)
    66ec:	ddc00a15 	stw	r23,40(sp)
    66f0:	dd000715 	stw	r20,28(sp)
    66f4:	dcc00615 	stw	r19,24(sp)
    66f8:	dc800515 	stw	r18,20(sp)
    66fc:	dc400415 	stw	r17,16(sp)
    6700:	dc000315 	stw	r16,12(sp)
    6704:	282d883a 	mov	r22,r5
    6708:	d9000115 	stw	r4,4(sp)
    670c:	d8800015 	stw	r2,0(sp)
    6710:	282b003a 	cmpeq	r21,r5,zero
    6714:	e4400c17 	ldw	r17,48(fp)
    6718:	88001226 	beq	r17,zero,6764 <__call_exitprocs+0xac>
    671c:	ddc00017 	ldw	r23,0(sp)
    6720:	88800117 	ldw	r2,4(r17)
    6724:	8c802217 	ldw	r18,136(r17)
    6728:	143fffc4 	addi	r16,r2,-1
    672c:	80000b16 	blt	r16,zero,675c <__call_exitprocs+0xa4>
    6730:	9027003a 	cmpeq	r19,r18,zero
    6734:	a800171e 	bne	r21,zero,6794 <__call_exitprocs+0xdc>
    6738:	9800051e 	bne	r19,zero,6750 <__call_exitprocs+0x98>
    673c:	8409883a 	add	r4,r16,r16
    6740:	2105883a 	add	r2,r4,r4
    6744:	1485883a 	add	r2,r2,r18
    6748:	10c02017 	ldw	r3,128(r2)
    674c:	b0c01226 	beq	r22,r3,6798 <__call_exitprocs+0xe0>
    6750:	843fffc4 	addi	r16,r16,-1
    6754:	00bfffc4 	movi	r2,-1
    6758:	80bff61e 	bne	r16,r2,6734 <__call_exitprocs+0x7c>
    675c:	d8800217 	ldw	r2,8(sp)
    6760:	10003226 	beq	r2,zero,682c <__call_exitprocs+0x174>
    6764:	dfc00c17 	ldw	ra,48(sp)
    6768:	df000b17 	ldw	fp,44(sp)
    676c:	ddc00a17 	ldw	r23,40(sp)
    6770:	dd800917 	ldw	r22,36(sp)
    6774:	dd400817 	ldw	r21,32(sp)
    6778:	dd000717 	ldw	r20,28(sp)
    677c:	dcc00617 	ldw	r19,24(sp)
    6780:	dc800517 	ldw	r18,20(sp)
    6784:	dc400417 	ldw	r17,16(sp)
    6788:	dc000317 	ldw	r16,12(sp)
    678c:	dec00d04 	addi	sp,sp,52
    6790:	f800283a 	ret
    6794:	8409883a 	add	r4,r16,r16
    6798:	88c00117 	ldw	r3,4(r17)
    679c:	2105883a 	add	r2,r4,r4
    67a0:	1445883a 	add	r2,r2,r17
    67a4:	18ffffc4 	addi	r3,r3,-1
    67a8:	11800217 	ldw	r6,8(r2)
    67ac:	1c001826 	beq	r3,r16,6810 <__call_exitprocs+0x158>
    67b0:	10000215 	stw	zero,8(r2)
    67b4:	303fe626 	beq	r6,zero,6750 <__call_exitprocs+0x98>
    67b8:	8d000117 	ldw	r20,4(r17)
    67bc:	9800121e 	bne	r19,zero,6808 <__call_exitprocs+0x150>
    67c0:	00c00044 	movi	r3,1
    67c4:	1c06983a 	sll	r3,r3,r16
    67c8:	90804017 	ldw	r2,256(r18)
    67cc:	1884703a 	and	r2,r3,r2
    67d0:	10000d26 	beq	r2,zero,6808 <__call_exitprocs+0x150>
    67d4:	90804117 	ldw	r2,260(r18)
    67d8:	1884703a 	and	r2,r3,r2
    67dc:	10000e1e 	bne	r2,zero,6818 <__call_exitprocs+0x160>
    67e0:	2105883a 	add	r2,r4,r4
    67e4:	1485883a 	add	r2,r2,r18
    67e8:	11400017 	ldw	r5,0(r2)
    67ec:	d9000117 	ldw	r4,4(sp)
    67f0:	303ee83a 	callr	r6
    67f4:	88800117 	ldw	r2,4(r17)
    67f8:	a0bfc61e 	bne	r20,r2,6714 <__call_exitprocs+0x5c>
    67fc:	b8800017 	ldw	r2,0(r23)
    6800:	147fd326 	beq	r2,r17,6750 <__call_exitprocs+0x98>
    6804:	003fc306 	br	6714 <__call_exitprocs+0x5c>
    6808:	303ee83a 	callr	r6
    680c:	003ff906 	br	67f4 <__call_exitprocs+0x13c>
    6810:	8c000115 	stw	r16,4(r17)
    6814:	003fe706 	br	67b4 <__call_exitprocs+0xfc>
    6818:	2105883a 	add	r2,r4,r4
    681c:	1485883a 	add	r2,r2,r18
    6820:	11000017 	ldw	r4,0(r2)
    6824:	303ee83a 	callr	r6
    6828:	003ff206 	br	67f4 <__call_exitprocs+0x13c>
    682c:	88800117 	ldw	r2,4(r17)
    6830:	10000b1e 	bne	r2,zero,6860 <__call_exitprocs+0x1a8>
    6834:	89000017 	ldw	r4,0(r17)
    6838:	20000a26 	beq	r4,zero,6864 <__call_exitprocs+0x1ac>
    683c:	b9000015 	stw	r4,0(r23)
    6840:	90000226 	beq	r18,zero,684c <__call_exitprocs+0x194>
    6844:	9009883a 	mov	r4,r18
    6848:	00000000 	call	0 <__reset-0x4000>
    684c:	8809883a 	mov	r4,r17
    6850:	00000000 	call	0 <__reset-0x4000>
    6854:	bc400017 	ldw	r17,0(r23)
    6858:	883fb11e 	bne	r17,zero,6720 <__call_exitprocs+0x68>
    685c:	003fc106 	br	6764 <__call_exitprocs+0xac>
    6860:	89000017 	ldw	r4,0(r17)
    6864:	882f883a 	mov	r23,r17
    6868:	2023883a 	mov	r17,r4
    686c:	883fac1e 	bne	r17,zero,6720 <__call_exitprocs+0x68>
    6870:	003fbc06 	br	6764 <__call_exitprocs+0xac>

00006874 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    6874:	defffd04 	addi	sp,sp,-12
    6878:	df000215 	stw	fp,8(sp)
    687c:	df000204 	addi	fp,sp,8
    6880:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    6884:	e0bfff17 	ldw	r2,-4(fp)
    6888:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    688c:	e0bffe17 	ldw	r2,-8(fp)
    6890:	1005003a 	cmpeq	r2,r2,zero
    6894:	1000021e 	bne	r2,zero,68a0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    6898:	002af070 	cmpltui	zero,zero,43969
    689c:	00000106 	br	68a4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    68a0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    68a4:	e037883a 	mov	sp,fp
    68a8:	df000017 	ldw	fp,0(sp)
    68ac:	dec00104 	addi	sp,sp,4
    68b0:	f800283a 	ret

000068b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    68b4:	defffd04 	addi	sp,sp,-12
    68b8:	dfc00215 	stw	ra,8(sp)
    68bc:	df000115 	stw	fp,4(sp)
    68c0:	df000104 	addi	fp,sp,4
    68c4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    68c8:	e13fff17 	ldw	r4,-4(fp)
    68cc:	00068740 	call	6874 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    68d0:	003fff06 	br	68d0 <_exit+0x1c>
    68d4:	000066b4 	movhi	zero,410
