
Hello.elf:     file format elf32-littlenios2
Hello.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004168

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002318 memsz 0x00002318 flags r-x
    LOAD off    0x00003338 vaddr 0x00006338 paddr 0x0000661c align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00003900 vaddr 0x00006900 paddr 0x00006900 align 2**12
         filesz 0x00000000 memsz 0x000001f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002178  00004168  00004168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  000062e0  000062e0  000032e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00006338  0000661c  00003338  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f0  00006900  00006900  00003900  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000361c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000578  00000000  00000000  00003648  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000853  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008989  00000000  00000000  00004413  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a86  00000000  00000000  0000cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006968  00000000  00000000  0000f822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000838  00000000  00000000  0001618c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001680  00000000  00000000  000169c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001f32  00000000  00000000  00018044  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00019f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  00019f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001bc43  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001bc46  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001bc52  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001bc53  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001bc54  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001bc58  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001bc5c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001bc60  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001bc6b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001bc76  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0001bc81  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000c  00000000  00000000  0001bc8b  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00038bc2  00000000  00000000  0001bc97  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004168 l    d  .text	00000000 .text
000062e0 l    d  .rodata	00000000 .rodata
00006338 l    d  .rwdata	00000000 .rwdata
00006900 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000041a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000049d4 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006338 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000532c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006418 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00005840 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005960 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005afc l     F .text	00000078 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00006108 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000048ec g     F .text	0000001c putchar
0000553c g     F .text	00000050 alt_main
00004910 g     F .text	00000090 _puts_r
000069f0 g     O .bss	00000100 alt_irq
0000661c g       *ABS*	00000000 __flash_rwdata_start
00004854 g     F .text	00000054 printf
00006900 g     O .bss	00000004 x
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006914 g     O .bss	00000004 errno
0000691c g     O .bss	00000004 alt_argv
0000e5ec g       *ABS*	00000000 _gp
0000646c g     O .rwdata	00000180 alt_fd_list
00004908 g     F .text	00000008 _putchar_r
00005ee0 g     F .text	00000070 alt_find_dev
00005b74 g     F .text	00000098 alt_io_redirect
000049a0 g     F .text	00000014 puts
00006904 g     O .bss	00000004 jx
00005748 g     F .text	0000006c altera_avalon_jtag_uart_read
000048a8 g     F .text	00000044 _printf_r
00006930 g     O .bss	00000020 mat1
00005468 g     F .text	00000008 __udivsi3
0000445c g     F .text	000002f0 mult_mat
00006608 g     O .rwdata	00000004 alt_max_fd
0000474c g     F .text	00000070 get_random
000065f4 g     O .rwdata	00000004 _global_impure_ptr
00006af0 g       *ABS*	00000000 __bss_end
00005a94 g     F .text	00000068 alt_iic_isr_register
00005e2c g     F .text	000000ac alt_tick
000059dc g     F .text	00000018 alt_ic_irq_enabled
00005df8 g     F .text	00000034 alt_alarm_stop
00006924 g     O .bss	00000004 alt_irq_active
000040ec g     F .exceptions	0000007c alt_irq_handler
00006444 g     O .rwdata	00000028 alt_dev_null
0000595c g     F .text	00000004 alt_dcache_flush_all
000041a4 g     F .text	00000120 init_mat
0000661c g       *ABS*	00000000 __ram_rwdata_end
00006600 g     O .rwdata	00000008 alt_dev_list
0000558c g     F .text	00000110 write
00005240 g     F .text	00000074 _putc_r
00006338 g       *ABS*	00000000 __ram_rodata_end
00005470 g     F .text	00000008 __umodsi3
00006af0 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000057f0 g     F .text	00000050 alt_avalon_timer_sc_init
000057b4 g     F .text	0000003c altera_avalon_jtag_uart_write
00004a54 g     F .text	0000069c ___vfprintf_internal_r
00006908 g     O .bss	00000004 kx
0000610c g     F .text	000001bc __call_exitprocs
00004168 g     F .text	0000003c _start
00006928 g     O .bss	00000004 _alt_tick_rate
0000692c g     O .bss	00000004 _alt_nticks
0000569c g     F .text	0000003c alt_sys_init
0000481c g     F .text	00000038 __mulsi3
00006338 g       *ABS*	00000000 __ram_rwdata_start
000062e0 g       *ABS*	00000000 __ram_rodata_start
00005720 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000600c g     F .text	000000a0 alt_get_fd
00006950 g     O .bss	00000020 mat2
000060cc g     F .text	0000003c memcmp
00006af0 g       *ABS*	00000000 __alt_stack_base
00005f50 g     F .text	000000bc alt_find_file
000065ec g     O .rwdata	00000001 lfsr
00005968 g     F .text	00000070 alt_dev_llist_insert
0000690c g     O .bss	00000004 t1
00005114 g     F .text	000000bc __sfvwrite_small_dev
00006900 g       *ABS*	00000000 __bss_start
000047bc g     F .text	00000060 main
00004000 g       *ABS*	00000000 __alt_mem_RAM
00006920 g     O .bss	00000004 alt_envp
000056f8 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
0000660c g     O .rwdata	00000004 alt_errno
000051d0 g     F .text	00000070 putc
000053a8 g     F .text	00000060 __divsi3
000062e0 g       *ABS*	00000000 __flash_rodata_start
000042c4 g     F .text	00000198 print_mat
000056d8 g     F .text	00000020 alt_irq_init
00005d90 g     F .text	00000068 alt_release_fd
000052b4 g     F .text	00000078 _write_r
000065f0 g     O .rwdata	00000004 _impure_ptr
00006918 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
000065f8 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005a74 g     F .text	00000020 alt_ic_isr_register
0000661c g       *ABS*	00000000 _edata
00006af0 g       *ABS*	00000000 _end
00006910 g     O .bss	00000004 ix
00004168 g       *ABS*	00000000 __ram_exceptions_end
00005a34 g     F .text	00000040 alt_ic_irq_disable
00006970 g     O .bss	00000080 res
00005ed8 g     F .text	00000008 altera_nios2_qsys_irq_init
000060ac g     F .text	00000020 exit
00005408 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
000062c8 g     F .text	00000014 _exit
000049b4 g     F .text	00000020 strlen
00005c0c g     F .text	00000184 open
000059d8 g     F .text	00000004 alt_icache_flush_all
00006610 g     O .rwdata	00000004 alt_priority_mask
000059f4 g     F .text	00000040 alt_ic_irq_enable
000050f0 g     F .text	00000024 __vfprintf_internal
00006614 g     O .rwdata	00000008 alt_alarm_list
0000587c g     F .text	000000e0 close
00005478 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08505a14 	ori	at,at,16744
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    4044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040ec0 	call	40ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000306 	br	4098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    4094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    4098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    40c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    40e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40e8:	ef80083a 	eret

000040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40ec:	defffe04 	addi	sp,sp,-8
    40f0:	dfc00115 	stw	ra,4(sp)
    40f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    40f8:	000d313a 	rdctl	r6,ipending
    40fc:	04000034 	movhi	r16,0
    4100:	841a7c04 	addi	r16,r16,27120
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    4104:	3080004c 	andi	r2,r6,1
    4108:	1005003a 	cmpeq	r2,r2,zero
    410c:	10000a1e 	bne	r2,zero,4138 <alt_irq_handler+0x4c>
    4110:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4114:	200490fa 	slli	r2,r4,3
    4118:	1405883a 	add	r2,r2,r16
    411c:	10c00017 	ldw	r3,0(r2)
    4120:	11000117 	ldw	r4,4(r2)
    4124:	183ee83a 	callr	r3
    4128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    412c:	10000a26 	beq	r2,zero,4158 <alt_irq_handler+0x6c>
    4130:	100d883a 	mov	r6,r2
    4134:	003ff306 	br	4104 <alt_irq_handler+0x18>
    4138:	00c00044 	movi	r3,1
    413c:	0009883a 	mov	r4,zero
    4140:	180b883a 	mov	r5,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4144:	18c7883a 	add	r3,r3,r3
      i++;
    4148:	2149883a 	add	r4,r4,r5
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    414c:	30c4703a 	and	r2,r6,r3
    4150:	103ff01e 	bne	r2,zero,4114 <alt_irq_handler+0x28>
    4154:	003ffb06 	br	4144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4158:	dfc00117 	ldw	ra,4(sp)
    415c:	dc000017 	ldw	r16,0(sp)
    4160:	dec00204 	addi	sp,sp,8
    4164:	f800283a 	ret

Disassembly of section .text:

00004168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4168:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    416c:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    4174:	d6b97b14 	ori	gp,gp,58860
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    417c:	109a4014 	ori	r2,r2,26880

    movhi r3, %hi(__bss_end)
    4180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    4184:	18dabc14 	ori	r3,r3,27376

    beq r2, r3, 1f
    4188:	10c00326 	beq	r2,r3,4198 <_start+0x30>

0:
    stw zero, (r2)
    418c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    4194:	10fffd36 	bltu	r2,r3,418c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4198:	00054780 	call	5478 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    419c:	000553c0 	call	553c <alt_main>

000041a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41a0:	003fff06 	br	41a0 <alt_after_alt_main>

000041a4 <init_mat>:
int ix, jx, kx;




void init_mat(int mod){
    41a4:	defffa04 	addi	sp,sp,-24
    41a8:	dfc00515 	stw	ra,20(sp)
    41ac:	df000415 	stw	fp,16(sp)
    41b0:	dc800315 	stw	r18,12(sp)
    41b4:	dc400215 	stw	r17,8(sp)
    41b8:	dc000115 	stw	r16,4(sp)
    41bc:	df000104 	addi	fp,sp,4
    41c0:	e13fff15 	stw	r4,-4(fp)
	for (ix=0;ix<4;ix++){
    41c4:	d020c915 	stw	zero,-31964(gp)
    41c8:	00003306 	br	4298 <init_mat+0xf4>
		for (jx=0;jx<4;jx++){
    41cc:	d020c615 	stw	zero,-31976(gp)
    41d0:	00002b06 	br	4280 <init_mat+0xdc>
			for (kx=0;kx<2;kx++){
    41d4:	d020c715 	stw	zero,-31972(gp)
    41d8:	00002306 	br	4268 <init_mat+0xc4>
			if (mod==0) mat1[ix] [jx] [kx] = get_random();
    41dc:	e0bfff17 	ldw	r2,-4(fp)
    41e0:	1004c03a 	cmpne	r2,r2,zero
    41e4:	10000f1e 	bne	r2,zero,4224 <init_mat+0x80>
    41e8:	d420c917 	ldw	r16,-31964(gp)
    41ec:	d460c617 	ldw	r17,-31976(gp)
    41f0:	d4a0c717 	ldw	r18,-31972(gp)
    41f4:	000474c0 	call	474c <get_random>
    41f8:	1009883a 	mov	r4,r2
    41fc:	00c00034 	movhi	r3,0
    4200:	18da4c04 	addi	r3,r3,26928
    4204:	8405883a 	add	r2,r16,r16
    4208:	1085883a 	add	r2,r2,r2
    420c:	1445883a 	add	r2,r2,r17
    4210:	1085883a 	add	r2,r2,r2
    4214:	10c5883a 	add	r2,r2,r3
    4218:	1485883a 	add	r2,r2,r18
    421c:	11000005 	stb	r4,0(r2)
    4220:	00000e06 	br	425c <init_mat+0xb8>
			else mat2[ix] [jx] [kx] = get_random();
    4224:	d420c917 	ldw	r16,-31964(gp)
    4228:	d460c617 	ldw	r17,-31976(gp)
    422c:	d4a0c717 	ldw	r18,-31972(gp)
    4230:	000474c0 	call	474c <get_random>
    4234:	1009883a 	mov	r4,r2
    4238:	00c00034 	movhi	r3,0
    423c:	18da5404 	addi	r3,r3,26960
    4240:	8405883a 	add	r2,r16,r16
    4244:	1085883a 	add	r2,r2,r2
    4248:	1445883a 	add	r2,r2,r17
    424c:	1085883a 	add	r2,r2,r2
    4250:	10c5883a 	add	r2,r2,r3
    4254:	1485883a 	add	r2,r2,r18
    4258:	11000005 	stb	r4,0(r2)


void init_mat(int mod){
	for (ix=0;ix<4;ix++){
		for (jx=0;jx<4;jx++){
			for (kx=0;kx<2;kx++){
    425c:	d0a0c717 	ldw	r2,-31972(gp)
    4260:	10800044 	addi	r2,r2,1
    4264:	d0a0c715 	stw	r2,-31972(gp)
    4268:	d0a0c717 	ldw	r2,-31972(gp)
    426c:	10800090 	cmplti	r2,r2,2
    4270:	103fda1e 	bne	r2,zero,41dc <init_mat+0x38>



void init_mat(int mod){
	for (ix=0;ix<4;ix++){
		for (jx=0;jx<4;jx++){
    4274:	d0a0c617 	ldw	r2,-31976(gp)
    4278:	10800044 	addi	r2,r2,1
    427c:	d0a0c615 	stw	r2,-31976(gp)
    4280:	d0a0c617 	ldw	r2,-31976(gp)
    4284:	10800110 	cmplti	r2,r2,4
    4288:	103fd21e 	bne	r2,zero,41d4 <init_mat+0x30>




void init_mat(int mod){
	for (ix=0;ix<4;ix++){
    428c:	d0a0c917 	ldw	r2,-31964(gp)
    4290:	10800044 	addi	r2,r2,1
    4294:	d0a0c915 	stw	r2,-31964(gp)
    4298:	d0a0c917 	ldw	r2,-31964(gp)
    429c:	10800110 	cmplti	r2,r2,4
    42a0:	103fca1e 	bne	r2,zero,41cc <init_mat+0x28>
			else mat2[ix] [jx] [kx] = get_random();
			}

		}
	}
}
    42a4:	e037883a 	mov	sp,fp
    42a8:	dfc00417 	ldw	ra,16(sp)
    42ac:	df000317 	ldw	fp,12(sp)
    42b0:	dc800217 	ldw	r18,8(sp)
    42b4:	dc400117 	ldw	r17,4(sp)
    42b8:	dc000017 	ldw	r16,0(sp)
    42bc:	dec00504 	addi	sp,sp,20
    42c0:	f800283a 	ret

000042c4 <print_mat>:


void print_mat(int mod){
    42c4:	defffd04 	addi	sp,sp,-12
    42c8:	dfc00215 	stw	ra,8(sp)
    42cc:	df000115 	stw	fp,4(sp)
    42d0:	df000104 	addi	fp,sp,4
    42d4:	e13fff15 	stw	r4,-4(fp)
for (ix=0;ix<4;ix++){
    42d8:	d020c915 	stw	zero,-31964(gp)
    42dc:	00005406 	br	4430 <print_mat+0x16c>
		for (jx=0;jx<4;jx++){
    42e0:	d020c615 	stw	zero,-31976(gp)
    42e4:	00004a06 	br	4410 <print_mat+0x14c>
			for (kx=0;kx<2;kx++){
    42e8:	d020c715 	stw	zero,-31972(gp)
    42ec:	00004006 	br	43f0 <print_mat+0x12c>
				if (mod==0) printf("%d ", mat1[ix] [jx] [kx]);
    42f0:	e0bfff17 	ldw	r2,-4(fp)
    42f4:	1004c03a 	cmpne	r2,r2,zero
    42f8:	1000131e 	bne	r2,zero,4348 <print_mat+0x84>
    42fc:	d0a0c917 	ldw	r2,-31964(gp)
    4300:	d0e0c617 	ldw	r3,-31976(gp)
    4304:	d160c717 	ldw	r5,-31972(gp)
    4308:	01000034 	movhi	r4,0
    430c:	211a4c04 	addi	r4,r4,26928
    4310:	1085883a 	add	r2,r2,r2
    4314:	1085883a 	add	r2,r2,r2
    4318:	10c5883a 	add	r2,r2,r3
    431c:	1085883a 	add	r2,r2,r2
    4320:	1105883a 	add	r2,r2,r4
    4324:	1145883a 	add	r2,r2,r5
    4328:	10800003 	ldbu	r2,0(r2)
    432c:	11403fcc 	andi	r5,r2,255
    4330:	2940201c 	xori	r5,r5,128
    4334:	297fe004 	addi	r5,r5,-128
    4338:	01000034 	movhi	r4,0
    433c:	2118b804 	addi	r4,r4,25312
    4340:	00048540 	call	4854 <printf>
    4344:	00002706 	br	43e4 <print_mat+0x120>
				else if (mod==1) printf("%d ", mat2[ix] [jx] [kx]);
    4348:	e0bfff17 	ldw	r2,-4(fp)
    434c:	10800058 	cmpnei	r2,r2,1
    4350:	1000131e 	bne	r2,zero,43a0 <print_mat+0xdc>
    4354:	d0a0c917 	ldw	r2,-31964(gp)
    4358:	d0e0c617 	ldw	r3,-31976(gp)
    435c:	d160c717 	ldw	r5,-31972(gp)
    4360:	01000034 	movhi	r4,0
    4364:	211a5404 	addi	r4,r4,26960
    4368:	1085883a 	add	r2,r2,r2
    436c:	1085883a 	add	r2,r2,r2
    4370:	10c5883a 	add	r2,r2,r3
    4374:	1085883a 	add	r2,r2,r2
    4378:	1105883a 	add	r2,r2,r4
    437c:	1145883a 	add	r2,r2,r5
    4380:	10800003 	ldbu	r2,0(r2)
    4384:	11403fcc 	andi	r5,r2,255
    4388:	2940201c 	xori	r5,r5,128
    438c:	297fe004 	addi	r5,r5,-128
    4390:	01000034 	movhi	r4,0
    4394:	2118b804 	addi	r4,r4,25312
    4398:	00048540 	call	4854 <printf>
    439c:	00001106 	br	43e4 <print_mat+0x120>
				else printf("%d ", res[ix] [jx] [kx]);
    43a0:	d0a0c917 	ldw	r2,-31964(gp)
    43a4:	d0e0c617 	ldw	r3,-31976(gp)
    43a8:	d120c717 	ldw	r4,-31972(gp)
    43ac:	01400034 	movhi	r5,0
    43b0:	295a5c04 	addi	r5,r5,26992
    43b4:	1085883a 	add	r2,r2,r2
    43b8:	1085883a 	add	r2,r2,r2
    43bc:	10c5883a 	add	r2,r2,r3
    43c0:	1085883a 	add	r2,r2,r2
    43c4:	1105883a 	add	r2,r2,r4
    43c8:	1085883a 	add	r2,r2,r2
    43cc:	1085883a 	add	r2,r2,r2
    43d0:	1145883a 	add	r2,r2,r5
    43d4:	11400017 	ldw	r5,0(r2)
    43d8:	01000034 	movhi	r4,0
    43dc:	2118b804 	addi	r4,r4,25312
    43e0:	00048540 	call	4854 <printf>


void print_mat(int mod){
for (ix=0;ix<4;ix++){
		for (jx=0;jx<4;jx++){
			for (kx=0;kx<2;kx++){
    43e4:	d0a0c717 	ldw	r2,-31972(gp)
    43e8:	10800044 	addi	r2,r2,1
    43ec:	d0a0c715 	stw	r2,-31972(gp)
    43f0:	d0a0c717 	ldw	r2,-31972(gp)
    43f4:	10800090 	cmplti	r2,r2,2
    43f8:	103fbd1e 	bne	r2,zero,42f0 <print_mat+0x2c>
				if (mod==0) printf("%d ", mat1[ix] [jx] [kx]);
				else if (mod==1) printf("%d ", mat2[ix] [jx] [kx]);
				else printf("%d ", res[ix] [jx] [kx]);
			}
		    printf("\t");
    43fc:	01000244 	movi	r4,9
    4400:	00048ec0 	call	48ec <putchar>
}


void print_mat(int mod){
for (ix=0;ix<4;ix++){
		for (jx=0;jx<4;jx++){
    4404:	d0a0c617 	ldw	r2,-31976(gp)
    4408:	10800044 	addi	r2,r2,1
    440c:	d0a0c615 	stw	r2,-31976(gp)
    4410:	d0a0c617 	ldw	r2,-31976(gp)
    4414:	10800110 	cmplti	r2,r2,4
    4418:	103fb31e 	bne	r2,zero,42e8 <print_mat+0x24>
				else if (mod==1) printf("%d ", mat2[ix] [jx] [kx]);
				else printf("%d ", res[ix] [jx] [kx]);
			}
		    printf("\t");
		}
		printf("\n");
    441c:	01000284 	movi	r4,10
    4420:	00048ec0 	call	48ec <putchar>
	}
}


void print_mat(int mod){
for (ix=0;ix<4;ix++){
    4424:	d0a0c917 	ldw	r2,-31964(gp)
    4428:	10800044 	addi	r2,r2,1
    442c:	d0a0c915 	stw	r2,-31964(gp)
    4430:	d0a0c917 	ldw	r2,-31964(gp)
    4434:	10800110 	cmplti	r2,r2,4
    4438:	103fa91e 	bne	r2,zero,42e0 <print_mat+0x1c>
			}
		    printf("\t");
		}
		printf("\n");
	}
	printf("----------------- \n");
    443c:	01000034 	movhi	r4,0
    4440:	2118b904 	addi	r4,r4,25316
    4444:	00049a00 	call	49a0 <puts>
}
    4448:	e037883a 	mov	sp,fp
    444c:	dfc00117 	ldw	ra,4(sp)
    4450:	df000017 	ldw	fp,0(sp)
    4454:	dec00204 	addi	sp,sp,8
    4458:	f800283a 	ret

0000445c <mult_mat>:
void mult_mat(){
    445c:	defffb04 	addi	sp,sp,-20
    4460:	dfc00415 	stw	ra,16(sp)
    4464:	df000315 	stw	fp,12(sp)
    4468:	dc000215 	stw	r16,8(sp)
    446c:	df000204 	addi	fp,sp,8
	int aux=0, aux_1=0;
    4470:	e03fff15 	stw	zero,-4(fp)
    4474:	e03ffe15 	stw	zero,-8(fp)
for (jx=0;jx<4;jx++){
    4478:	d020c615 	stw	zero,-31976(gp)
    447c:	0000aa06 	br	4728 <mult_mat+0x2cc>
		for (ix=0;ix<4;ix++){
    4480:	d020c915 	stw	zero,-31964(gp)
    4484:	0000a206 	br	4710 <mult_mat+0x2b4>
			aux=0;
    4488:	e03fff15 	stw	zero,-4(fp)
			aux_1=0;
    448c:	e03ffe15 	stw	zero,-8(fp)
			for (kx=0;kx<4;kx++){
    4490:	d020c715 	stw	zero,-31972(gp)
    4494:	00008106 	br	469c <mult_mat+0x240>
				aux+=  mat1[ix] [kx] [0]* mat2[kx] [jx] [0]	- mat1[ix] [kx] [1]* mat2[kx] [jx] [1];
    4498:	d0a0c917 	ldw	r2,-31964(gp)
    449c:	d0e0c717 	ldw	r3,-31972(gp)
    44a0:	01000034 	movhi	r4,0
    44a4:	211a4c04 	addi	r4,r4,26928
    44a8:	1085883a 	add	r2,r2,r2
    44ac:	1085883a 	add	r2,r2,r2
    44b0:	10c5883a 	add	r2,r2,r3
    44b4:	1085883a 	add	r2,r2,r2
    44b8:	1105883a 	add	r2,r2,r4
    44bc:	10800003 	ldbu	r2,0(r2)
    44c0:	11803fcc 	andi	r6,r2,255
    44c4:	3180201c 	xori	r6,r6,128
    44c8:	31bfe004 	addi	r6,r6,-128
    44cc:	d0a0c717 	ldw	r2,-31972(gp)
    44d0:	d0e0c617 	ldw	r3,-31976(gp)
    44d4:	01000034 	movhi	r4,0
    44d8:	211a5404 	addi	r4,r4,26960
    44dc:	1085883a 	add	r2,r2,r2
    44e0:	1085883a 	add	r2,r2,r2
    44e4:	10c5883a 	add	r2,r2,r3
    44e8:	1085883a 	add	r2,r2,r2
    44ec:	1105883a 	add	r2,r2,r4
    44f0:	10800003 	ldbu	r2,0(r2)
    44f4:	11403fcc 	andi	r5,r2,255
    44f8:	2940201c 	xori	r5,r5,128
    44fc:	297fe004 	addi	r5,r5,-128
    4500:	3009883a 	mov	r4,r6
    4504:	000481c0 	call	481c <__mulsi3>
    4508:	1021883a 	mov	r16,r2
    450c:	d0a0c917 	ldw	r2,-31964(gp)
    4510:	d0e0c717 	ldw	r3,-31972(gp)
    4514:	01000034 	movhi	r4,0
    4518:	211a4c04 	addi	r4,r4,26928
    451c:	1085883a 	add	r2,r2,r2
    4520:	1085883a 	add	r2,r2,r2
    4524:	10c5883a 	add	r2,r2,r3
    4528:	1085883a 	add	r2,r2,r2
    452c:	1105883a 	add	r2,r2,r4
    4530:	10800044 	addi	r2,r2,1
    4534:	10800003 	ldbu	r2,0(r2)
    4538:	11803fcc 	andi	r6,r2,255
    453c:	3180201c 	xori	r6,r6,128
    4540:	31bfe004 	addi	r6,r6,-128
    4544:	d0a0c717 	ldw	r2,-31972(gp)
    4548:	d0e0c617 	ldw	r3,-31976(gp)
    454c:	01000034 	movhi	r4,0
    4550:	211a5404 	addi	r4,r4,26960
    4554:	1085883a 	add	r2,r2,r2
    4558:	1085883a 	add	r2,r2,r2
    455c:	10c5883a 	add	r2,r2,r3
    4560:	1085883a 	add	r2,r2,r2
    4564:	1105883a 	add	r2,r2,r4
    4568:	10800044 	addi	r2,r2,1
    456c:	10800003 	ldbu	r2,0(r2)
    4570:	11403fcc 	andi	r5,r2,255
    4574:	2940201c 	xori	r5,r5,128
    4578:	297fe004 	addi	r5,r5,-128
    457c:	3009883a 	mov	r4,r6
    4580:	000481c0 	call	481c <__mulsi3>
    4584:	8087c83a 	sub	r3,r16,r2
    4588:	e0bfff17 	ldw	r2,-4(fp)
    458c:	10c5883a 	add	r2,r2,r3
    4590:	e0bfff15 	stw	r2,-4(fp)
				aux_1+=  mat1[ix] [kx] [1]* mat2[kx] [jx] [0] + 	 mat1[ix] [kx] [0]* mat2[kx] [jx] [1];
    4594:	d0a0c917 	ldw	r2,-31964(gp)
    4598:	d0e0c717 	ldw	r3,-31972(gp)
    459c:	01000034 	movhi	r4,0
    45a0:	211a4c04 	addi	r4,r4,26928
    45a4:	1085883a 	add	r2,r2,r2
    45a8:	1085883a 	add	r2,r2,r2
    45ac:	10c5883a 	add	r2,r2,r3
    45b0:	1085883a 	add	r2,r2,r2
    45b4:	1105883a 	add	r2,r2,r4
    45b8:	10800044 	addi	r2,r2,1
    45bc:	10800003 	ldbu	r2,0(r2)
    45c0:	11803fcc 	andi	r6,r2,255
    45c4:	3180201c 	xori	r6,r6,128
    45c8:	31bfe004 	addi	r6,r6,-128
    45cc:	d0a0c717 	ldw	r2,-31972(gp)
    45d0:	d0e0c617 	ldw	r3,-31976(gp)
    45d4:	01000034 	movhi	r4,0
    45d8:	211a5404 	addi	r4,r4,26960
    45dc:	1085883a 	add	r2,r2,r2
    45e0:	1085883a 	add	r2,r2,r2
    45e4:	10c5883a 	add	r2,r2,r3
    45e8:	1085883a 	add	r2,r2,r2
    45ec:	1105883a 	add	r2,r2,r4
    45f0:	10800003 	ldbu	r2,0(r2)
    45f4:	11403fcc 	andi	r5,r2,255
    45f8:	2940201c 	xori	r5,r5,128
    45fc:	297fe004 	addi	r5,r5,-128
    4600:	3009883a 	mov	r4,r6
    4604:	000481c0 	call	481c <__mulsi3>
    4608:	1021883a 	mov	r16,r2
    460c:	d0a0c917 	ldw	r2,-31964(gp)
    4610:	d0e0c717 	ldw	r3,-31972(gp)
    4614:	01000034 	movhi	r4,0
    4618:	211a4c04 	addi	r4,r4,26928
    461c:	1085883a 	add	r2,r2,r2
    4620:	1085883a 	add	r2,r2,r2
    4624:	10c5883a 	add	r2,r2,r3
    4628:	1085883a 	add	r2,r2,r2
    462c:	1105883a 	add	r2,r2,r4
    4630:	10800003 	ldbu	r2,0(r2)
    4634:	11803fcc 	andi	r6,r2,255
    4638:	3180201c 	xori	r6,r6,128
    463c:	31bfe004 	addi	r6,r6,-128
    4640:	d0a0c717 	ldw	r2,-31972(gp)
    4644:	d0e0c617 	ldw	r3,-31976(gp)
    4648:	01000034 	movhi	r4,0
    464c:	211a5404 	addi	r4,r4,26960
    4650:	1085883a 	add	r2,r2,r2
    4654:	1085883a 	add	r2,r2,r2
    4658:	10c5883a 	add	r2,r2,r3
    465c:	1085883a 	add	r2,r2,r2
    4660:	1105883a 	add	r2,r2,r4
    4664:	10800044 	addi	r2,r2,1
    4668:	10800003 	ldbu	r2,0(r2)
    466c:	11403fcc 	andi	r5,r2,255
    4670:	2940201c 	xori	r5,r5,128
    4674:	297fe004 	addi	r5,r5,-128
    4678:	3009883a 	mov	r4,r6
    467c:	000481c0 	call	481c <__mulsi3>
    4680:	8087883a 	add	r3,r16,r2
    4684:	e0bffe17 	ldw	r2,-8(fp)
    4688:	10c5883a 	add	r2,r2,r3
    468c:	e0bffe15 	stw	r2,-8(fp)
	int aux=0, aux_1=0;
for (jx=0;jx<4;jx++){
		for (ix=0;ix<4;ix++){
			aux=0;
			aux_1=0;
			for (kx=0;kx<4;kx++){
    4690:	d0a0c717 	ldw	r2,-31972(gp)
    4694:	10800044 	addi	r2,r2,1
    4698:	d0a0c715 	stw	r2,-31972(gp)
    469c:	d0a0c717 	ldw	r2,-31972(gp)
    46a0:	10800110 	cmplti	r2,r2,4
    46a4:	103f7c1e 	bne	r2,zero,4498 <mult_mat+0x3c>
				aux+=  mat1[ix] [kx] [0]* mat2[kx] [jx] [0]	- mat1[ix] [kx] [1]* mat2[kx] [jx] [1];
				aux_1+=  mat1[ix] [kx] [1]* mat2[kx] [jx] [0] + 	 mat1[ix] [kx] [0]* mat2[kx] [jx] [1];
			}
			res[ix] [jx] [0]=aux;
    46a8:	d0a0c917 	ldw	r2,-31964(gp)
    46ac:	d0e0c617 	ldw	r3,-31976(gp)
    46b0:	01000034 	movhi	r4,0
    46b4:	211a5c04 	addi	r4,r4,26992
    46b8:	1085883a 	add	r2,r2,r2
    46bc:	1085883a 	add	r2,r2,r2
    46c0:	10c5883a 	add	r2,r2,r3
    46c4:	100490fa 	slli	r2,r2,3
    46c8:	1107883a 	add	r3,r2,r4
    46cc:	e0bfff17 	ldw	r2,-4(fp)
    46d0:	18800015 	stw	r2,0(r3)
			res[ix] [jx] [1]=aux_1;
    46d4:	d0a0c917 	ldw	r2,-31964(gp)
    46d8:	d0e0c617 	ldw	r3,-31976(gp)
    46dc:	01000034 	movhi	r4,0
    46e0:	211a5c04 	addi	r4,r4,26992
    46e4:	1085883a 	add	r2,r2,r2
    46e8:	1085883a 	add	r2,r2,r2
    46ec:	10c5883a 	add	r2,r2,r3
    46f0:	100490fa 	slli	r2,r2,3
    46f4:	1105883a 	add	r2,r2,r4
    46f8:	10c00104 	addi	r3,r2,4
    46fc:	e0bffe17 	ldw	r2,-8(fp)
    4700:	18800015 	stw	r2,0(r3)
	printf("----------------- \n");
}
void mult_mat(){
	int aux=0, aux_1=0;
for (jx=0;jx<4;jx++){
		for (ix=0;ix<4;ix++){
    4704:	d0a0c917 	ldw	r2,-31964(gp)
    4708:	10800044 	addi	r2,r2,1
    470c:	d0a0c915 	stw	r2,-31964(gp)
    4710:	d0a0c917 	ldw	r2,-31964(gp)
    4714:	10800110 	cmplti	r2,r2,4
    4718:	103f5b1e 	bne	r2,zero,4488 <mult_mat+0x2c>
	}
	printf("----------------- \n");
}
void mult_mat(){
	int aux=0, aux_1=0;
for (jx=0;jx<4;jx++){
    471c:	d0a0c617 	ldw	r2,-31976(gp)
    4720:	10800044 	addi	r2,r2,1
    4724:	d0a0c615 	stw	r2,-31976(gp)
    4728:	d0a0c617 	ldw	r2,-31976(gp)
    472c:	10800110 	cmplti	r2,r2,4
    4730:	103f531e 	bne	r2,zero,4480 <mult_mat+0x24>
			res[ix] [jx] [0]=aux;
			res[ix] [jx] [1]=aux_1;
			}

		}
	}
    4734:	e037883a 	mov	sp,fp
    4738:	dfc00217 	ldw	ra,8(sp)
    473c:	df000117 	ldw	fp,4(sp)
    4740:	dc000017 	ldw	r16,0(sp)
    4744:	dec00304 	addi	sp,sp,12
    4748:	f800283a 	ret

0000474c <get_random>:





int8_t get_random(){
    474c:	defffe04 	addi	sp,sp,-8
    4750:	df000115 	stw	fp,4(sp)
    4754:	df000104 	addi	fp,sp,4



        unsigned lsb = lfsr & 1;  /* Get LSB (i.e., the output bit). */
    4758:	d0a00003 	ldbu	r2,-32768(gp)
    475c:	10803fcc 	andi	r2,r2,255
    4760:	1080004c 	andi	r2,r2,1
    4764:	e0bfff15 	stw	r2,-4(fp)
        lfsr >>= 1;               /* Shift register */
    4768:	d0a00003 	ldbu	r2,-32768(gp)
    476c:	10803fcc 	andi	r2,r2,255
    4770:	1080201c 	xori	r2,r2,128
    4774:	10bfe004 	addi	r2,r2,-128
    4778:	1005d07a 	srai	r2,r2,1
    477c:	d0a00005 	stb	r2,-32768(gp)
        if (lsb == 1)             /* Only apply toggle mask if output bit is 1. */
    4780:	e0bfff17 	ldw	r2,-4(fp)
    4784:	10800058 	cmpnei	r2,r2,1
    4788:	1000041e 	bne	r2,zero,479c <get_random+0x50>
            lfsr ^= 0xA2;
    478c:	d0e00003 	ldbu	r3,-32768(gp)
    4790:	00bfe884 	movi	r2,-94
    4794:	1884f03a 	xor	r2,r3,r2
    4798:	d0a00005 	stb	r2,-32768(gp)

        return lfsr;
    479c:	d0a00003 	ldbu	r2,-32768(gp)
    47a0:	10803fcc 	andi	r2,r2,255
    47a4:	1080201c 	xori	r2,r2,128
    47a8:	10bfe004 	addi	r2,r2,-128


}
    47ac:	e037883a 	mov	sp,fp
    47b0:	df000017 	ldw	fp,0(sp)
    47b4:	dec00104 	addi	sp,sp,4
    47b8:	f800283a 	ret

000047bc <main>:




int main()
{
    47bc:	defffd04 	addi	sp,sp,-12
    47c0:	dfc00215 	stw	ra,8(sp)
    47c4:	df000115 	stw	fp,4(sp)
    47c8:	df000104 	addi	fp,sp,4
		mult_mat();
		print_mat(0);
		print_mat(1);
		print_mat(2);*/

	int *random=0x1000;
    47cc:	00840004 	movi	r2,4096
    47d0:	e0bfff15 	stw	r2,-4(fp)
	printf("Hello from Nios II!\n");
    47d4:	01000034 	movhi	r4,0
    47d8:	2118be04 	addi	r4,r4,25336
    47dc:	00049a00 	call	49a0 <puts>
	printf("%d \n");
    47e0:	01000034 	movhi	r4,0
    47e4:	2118c304 	addi	r4,r4,25356
    47e8:	00048540 	call	4854 <printf>
	printf("%d \n");
    47ec:	01000034 	movhi	r4,0
    47f0:	2118c304 	addi	r4,r4,25356
    47f4:	00048540 	call	4854 <printf>
	printf("%d \n");
    47f8:	01000034 	movhi	r4,0
    47fc:	2118c304 	addi	r4,r4,25356
    4800:	00048540 	call	4854 <printf>

  return 0;
    4804:	0005883a 	mov	r2,zero
}
    4808:	e037883a 	mov	sp,fp
    480c:	dfc00117 	ldw	ra,4(sp)
    4810:	df000017 	ldw	fp,0(sp)
    4814:	dec00204 	addi	sp,sp,8
    4818:	f800283a 	ret

0000481c <__mulsi3>:
    481c:	20000a26 	beq	r4,zero,4848 <__mulsi3+0x2c>
    4820:	0007883a 	mov	r3,zero
    4824:	2080004c 	andi	r2,r4,1
    4828:	1005003a 	cmpeq	r2,r2,zero
    482c:	2008d07a 	srli	r4,r4,1
    4830:	1000011e 	bne	r2,zero,4838 <__mulsi3+0x1c>
    4834:	1947883a 	add	r3,r3,r5
    4838:	294b883a 	add	r5,r5,r5
    483c:	203ff91e 	bne	r4,zero,4824 <__mulsi3+0x8>
    4840:	1805883a 	mov	r2,r3
    4844:	f800283a 	ret
    4848:	0007883a 	mov	r3,zero
    484c:	1805883a 	mov	r2,r3
    4850:	f800283a 	ret

00004854 <printf>:
    4854:	defffb04 	addi	sp,sp,-20
    4858:	dfc00115 	stw	ra,4(sp)
    485c:	d9400215 	stw	r5,8(sp)
    4860:	d9800315 	stw	r6,12(sp)
    4864:	d9c00415 	stw	r7,16(sp)
    4868:	00800034 	movhi	r2,0
    486c:	10997c04 	addi	r2,r2,26096
    4870:	11400017 	ldw	r5,0(r2)
    4874:	d8800204 	addi	r2,sp,8
    4878:	d8800015 	stw	r2,0(sp)
    487c:	29c00217 	ldw	r7,8(r5)
    4880:	100d883a 	mov	r6,r2
    4884:	00800034 	movhi	r2,0
    4888:	10944504 	addi	r2,r2,20756
    488c:	200b883a 	mov	r5,r4
    4890:	38800115 	stw	r2,4(r7)
    4894:	3809883a 	mov	r4,r7
    4898:	00050f00 	call	50f0 <__vfprintf_internal>
    489c:	dfc00117 	ldw	ra,4(sp)
    48a0:	dec00504 	addi	sp,sp,20
    48a4:	f800283a 	ret

000048a8 <_printf_r>:
    48a8:	defffc04 	addi	sp,sp,-16
    48ac:	dfc00115 	stw	ra,4(sp)
    48b0:	d9800215 	stw	r6,8(sp)
    48b4:	d9c00315 	stw	r7,12(sp)
    48b8:	22000217 	ldw	r8,8(r4)
    48bc:	d8800204 	addi	r2,sp,8
    48c0:	d8800015 	stw	r2,0(sp)
    48c4:	100f883a 	mov	r7,r2
    48c8:	00800034 	movhi	r2,0
    48cc:	10944504 	addi	r2,r2,20756
    48d0:	280d883a 	mov	r6,r5
    48d4:	40800115 	stw	r2,4(r8)
    48d8:	400b883a 	mov	r5,r8
    48dc:	0004a540 	call	4a54 <___vfprintf_internal_r>
    48e0:	dfc00117 	ldw	ra,4(sp)
    48e4:	dec00404 	addi	sp,sp,16
    48e8:	f800283a 	ret

000048ec <putchar>:
    48ec:	00800034 	movhi	r2,0
    48f0:	10997c04 	addi	r2,r2,26096
    48f4:	11800017 	ldw	r6,0(r2)
    48f8:	200b883a 	mov	r5,r4
    48fc:	3009883a 	mov	r4,r6
    4900:	31800217 	ldw	r6,8(r6)
    4904:	00052401 	jmpi	5240 <_putc_r>

00004908 <_putchar_r>:
    4908:	21800217 	ldw	r6,8(r4)
    490c:	00052401 	jmpi	5240 <_putc_r>

00004910 <_puts_r>:
    4910:	defffd04 	addi	sp,sp,-12
    4914:	dc000015 	stw	r16,0(sp)
    4918:	2021883a 	mov	r16,r4
    491c:	2809883a 	mov	r4,r5
    4920:	dfc00215 	stw	ra,8(sp)
    4924:	dc400115 	stw	r17,4(sp)
    4928:	2823883a 	mov	r17,r5
    492c:	00049b40 	call	49b4 <strlen>
    4930:	80c00217 	ldw	r3,8(r16)
    4934:	02000034 	movhi	r8,0
    4938:	42144504 	addi	r8,r8,20756
    493c:	880d883a 	mov	r6,r17
    4940:	100f883a 	mov	r7,r2
    4944:	8009883a 	mov	r4,r16
    4948:	180b883a 	mov	r5,r3
    494c:	1a000115 	stw	r8,4(r3)
    4950:	403ee83a 	callr	r8
    4954:	047fffc4 	movi	r17,-1
    4958:	8009883a 	mov	r4,r16
    495c:	01800034 	movhi	r6,0
    4960:	3198c504 	addi	r6,r6,25364
    4964:	01c00044 	movi	r7,1
    4968:	1440071e 	bne	r2,r17,4988 <_puts_r+0x78>
    496c:	00ffffc4 	movi	r3,-1
    4970:	1805883a 	mov	r2,r3
    4974:	dfc00217 	ldw	ra,8(sp)
    4978:	dc400117 	ldw	r17,4(sp)
    497c:	dc000017 	ldw	r16,0(sp)
    4980:	dec00304 	addi	sp,sp,12
    4984:	f800283a 	ret
    4988:	81400217 	ldw	r5,8(r16)
    498c:	28c00117 	ldw	r3,4(r5)
    4990:	183ee83a 	callr	r3
    4994:	0007883a 	mov	r3,zero
    4998:	147ff51e 	bne	r2,r17,4970 <_puts_r+0x60>
    499c:	003ff306 	br	496c <_puts_r+0x5c>

000049a0 <puts>:
    49a0:	00800034 	movhi	r2,0
    49a4:	10997c04 	addi	r2,r2,26096
    49a8:	200b883a 	mov	r5,r4
    49ac:	11000017 	ldw	r4,0(r2)
    49b0:	00049101 	jmpi	4910 <_puts_r>

000049b4 <strlen>:
    49b4:	20800007 	ldb	r2,0(r4)
    49b8:	10000526 	beq	r2,zero,49d0 <strlen+0x1c>
    49bc:	2007883a 	mov	r3,r4
    49c0:	18c00044 	addi	r3,r3,1
    49c4:	18800007 	ldb	r2,0(r3)
    49c8:	103ffd1e 	bne	r2,zero,49c0 <strlen+0xc>
    49cc:	1905c83a 	sub	r2,r3,r4
    49d0:	f800283a 	ret

000049d4 <print_repeat>:
    49d4:	defffb04 	addi	sp,sp,-20
    49d8:	dc800315 	stw	r18,12(sp)
    49dc:	dc400215 	stw	r17,8(sp)
    49e0:	dc000115 	stw	r16,4(sp)
    49e4:	dfc00415 	stw	ra,16(sp)
    49e8:	2025883a 	mov	r18,r4
    49ec:	2823883a 	mov	r17,r5
    49f0:	3821883a 	mov	r16,r7
    49f4:	d9800005 	stb	r6,0(sp)
    49f8:	9009883a 	mov	r4,r18
    49fc:	880b883a 	mov	r5,r17
    4a00:	d80d883a 	mov	r6,sp
    4a04:	01c00044 	movi	r7,1
    4a08:	04000b0e 	bge	zero,r16,4a38 <print_repeat+0x64>
    4a0c:	88c00117 	ldw	r3,4(r17)
    4a10:	843fffc4 	addi	r16,r16,-1
    4a14:	183ee83a 	callr	r3
    4a18:	103ff726 	beq	r2,zero,49f8 <print_repeat+0x24>
    4a1c:	00bfffc4 	movi	r2,-1
    4a20:	dfc00417 	ldw	ra,16(sp)
    4a24:	dc800317 	ldw	r18,12(sp)
    4a28:	dc400217 	ldw	r17,8(sp)
    4a2c:	dc000117 	ldw	r16,4(sp)
    4a30:	dec00504 	addi	sp,sp,20
    4a34:	f800283a 	ret
    4a38:	0005883a 	mov	r2,zero
    4a3c:	dfc00417 	ldw	ra,16(sp)
    4a40:	dc800317 	ldw	r18,12(sp)
    4a44:	dc400217 	ldw	r17,8(sp)
    4a48:	dc000117 	ldw	r16,4(sp)
    4a4c:	dec00504 	addi	sp,sp,20
    4a50:	f800283a 	ret

00004a54 <___vfprintf_internal_r>:
    4a54:	deffe304 	addi	sp,sp,-116
    4a58:	df001b15 	stw	fp,108(sp)
    4a5c:	ddc01a15 	stw	r23,104(sp)
    4a60:	dd001715 	stw	r20,92(sp)
    4a64:	dc801515 	stw	r18,84(sp)
    4a68:	dc001315 	stw	r16,76(sp)
    4a6c:	dfc01c15 	stw	ra,112(sp)
    4a70:	dd801915 	stw	r22,100(sp)
    4a74:	dd401815 	stw	r21,96(sp)
    4a78:	dcc01615 	stw	r19,88(sp)
    4a7c:	dc401415 	stw	r17,80(sp)
    4a80:	d9001015 	stw	r4,64(sp)
    4a84:	2829883a 	mov	r20,r5
    4a88:	d9c01115 	stw	r7,68(sp)
    4a8c:	3025883a 	mov	r18,r6
    4a90:	0021883a 	mov	r16,zero
    4a94:	d8000f15 	stw	zero,60(sp)
    4a98:	d8000e15 	stw	zero,56(sp)
    4a9c:	0039883a 	mov	fp,zero
    4aa0:	d8000915 	stw	zero,36(sp)
    4aa4:	d8000d15 	stw	zero,52(sp)
    4aa8:	d8000c15 	stw	zero,48(sp)
    4aac:	d8000b15 	stw	zero,44(sp)
    4ab0:	002f883a 	mov	r23,zero
    4ab4:	91400003 	ldbu	r5,0(r18)
    4ab8:	01c00044 	movi	r7,1
    4abc:	94800044 	addi	r18,r18,1
    4ac0:	29003fcc 	andi	r4,r5,255
    4ac4:	2100201c 	xori	r4,r4,128
    4ac8:	213fe004 	addi	r4,r4,-128
    4acc:	20001526 	beq	r4,zero,4b24 <___vfprintf_internal_r+0xd0>
    4ad0:	81c03526 	beq	r16,r7,4ba8 <___vfprintf_internal_r+0x154>
    4ad4:	3c002016 	blt	r7,r16,4b58 <___vfprintf_internal_r+0x104>
    4ad8:	803ff61e 	bne	r16,zero,4ab4 <___vfprintf_internal_r+0x60>
    4adc:	00800944 	movi	r2,37
    4ae0:	2081501e 	bne	r4,r2,5024 <___vfprintf_internal_r+0x5d0>
    4ae4:	073fffc4 	movi	fp,-1
    4ae8:	00800284 	movi	r2,10
    4aec:	d9c00c15 	stw	r7,48(sp)
    4af0:	d8000f15 	stw	zero,60(sp)
    4af4:	d8000e15 	stw	zero,56(sp)
    4af8:	df000915 	stw	fp,36(sp)
    4afc:	d8800d15 	stw	r2,52(sp)
    4b00:	d8000b15 	stw	zero,44(sp)
    4b04:	91400003 	ldbu	r5,0(r18)
    4b08:	3821883a 	mov	r16,r7
    4b0c:	94800044 	addi	r18,r18,1
    4b10:	29003fcc 	andi	r4,r5,255
    4b14:	2100201c 	xori	r4,r4,128
    4b18:	213fe004 	addi	r4,r4,-128
    4b1c:	01c00044 	movi	r7,1
    4b20:	203feb1e 	bne	r4,zero,4ad0 <___vfprintf_internal_r+0x7c>
    4b24:	b805883a 	mov	r2,r23
    4b28:	dfc01c17 	ldw	ra,112(sp)
    4b2c:	df001b17 	ldw	fp,108(sp)
    4b30:	ddc01a17 	ldw	r23,104(sp)
    4b34:	dd801917 	ldw	r22,100(sp)
    4b38:	dd401817 	ldw	r21,96(sp)
    4b3c:	dd001717 	ldw	r20,92(sp)
    4b40:	dcc01617 	ldw	r19,88(sp)
    4b44:	dc801517 	ldw	r18,84(sp)
    4b48:	dc401417 	ldw	r17,80(sp)
    4b4c:	dc001317 	ldw	r16,76(sp)
    4b50:	dec01d04 	addi	sp,sp,116
    4b54:	f800283a 	ret
    4b58:	00800084 	movi	r2,2
    4b5c:	80801726 	beq	r16,r2,4bbc <___vfprintf_internal_r+0x168>
    4b60:	008000c4 	movi	r2,3
    4b64:	80bfd31e 	bne	r16,r2,4ab4 <___vfprintf_internal_r+0x60>
    4b68:	2c7ff404 	addi	r17,r5,-48
    4b6c:	88c03fcc 	andi	r3,r17,255
    4b70:	00800244 	movi	r2,9
    4b74:	10c02136 	bltu	r2,r3,4bfc <___vfprintf_internal_r+0x1a8>
    4b78:	d8c00917 	ldw	r3,36(sp)
    4b7c:	18012716 	blt	r3,zero,501c <___vfprintf_internal_r+0x5c8>
    4b80:	d9000917 	ldw	r4,36(sp)
    4b84:	01400284 	movi	r5,10
    4b88:	000481c0 	call	481c <__mulsi3>
    4b8c:	1007883a 	mov	r3,r2
    4b90:	88803fcc 	andi	r2,r17,255
    4b94:	1080201c 	xori	r2,r2,128
    4b98:	10bfe004 	addi	r2,r2,-128
    4b9c:	1887883a 	add	r3,r3,r2
    4ba0:	d8c00915 	stw	r3,36(sp)
    4ba4:	003fc306 	br	4ab4 <___vfprintf_internal_r+0x60>
    4ba8:	00800c04 	movi	r2,48
    4bac:	2080b326 	beq	r4,r2,4e7c <___vfprintf_internal_r+0x428>
    4bb0:	00800944 	movi	r2,37
    4bb4:	20812726 	beq	r4,r2,5054 <___vfprintf_internal_r+0x600>
    4bb8:	04000084 	movi	r16,2
    4bbc:	2c7ff404 	addi	r17,r5,-48
    4bc0:	88c03fcc 	andi	r3,r17,255
    4bc4:	00800244 	movi	r2,9
    4bc8:	10c00a36 	bltu	r2,r3,4bf4 <___vfprintf_internal_r+0x1a0>
    4bcc:	e000b416 	blt	fp,zero,4ea0 <___vfprintf_internal_r+0x44c>
    4bd0:	e009883a 	mov	r4,fp
    4bd4:	01400284 	movi	r5,10
    4bd8:	000481c0 	call	481c <__mulsi3>
    4bdc:	1007883a 	mov	r3,r2
    4be0:	88803fcc 	andi	r2,r17,255
    4be4:	1080201c 	xori	r2,r2,128
    4be8:	10bfe004 	addi	r2,r2,-128
    4bec:	18b9883a 	add	fp,r3,r2
    4bf0:	003fb006 	br	4ab4 <___vfprintf_internal_r+0x60>
    4bf4:	00800b84 	movi	r2,46
    4bf8:	2080a326 	beq	r4,r2,4e88 <___vfprintf_internal_r+0x434>
    4bfc:	00801b04 	movi	r2,108
    4c00:	2080a326 	beq	r4,r2,4e90 <___vfprintf_internal_r+0x43c>
    4c04:	d8c00917 	ldw	r3,36(sp)
    4c08:	1800a716 	blt	r3,zero,4ea8 <___vfprintf_internal_r+0x454>
    4c0c:	d8000f15 	stw	zero,60(sp)
    4c10:	28bfea04 	addi	r2,r5,-88
    4c14:	10803fcc 	andi	r2,r2,255
    4c18:	00c00804 	movi	r3,32
    4c1c:	18802836 	bltu	r3,r2,4cc0 <___vfprintf_internal_r+0x26c>
    4c20:	1085883a 	add	r2,r2,r2
    4c24:	1085883a 	add	r2,r2,r2
    4c28:	00c00034 	movhi	r3,0
    4c2c:	18d30f04 	addi	r3,r3,19516
    4c30:	10c5883a 	add	r2,r2,r3
    4c34:	11000017 	ldw	r4,0(r2)
    4c38:	2000683a 	jmp	r4
    4c3c:	00004cc8 	cmpgei	zero,zero,307
    4c40:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c44:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c48:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c4c:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c50:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c54:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c58:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c5c:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c60:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c64:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c68:	00004ef4 	movhi	zero,315
    4c6c:	00004cdc 	xori	zero,zero,307
    4c70:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c74:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c78:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c7c:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c80:	00004cdc 	xori	zero,zero,307
    4c84:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c88:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c8c:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c90:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c94:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4c98:	00004f5c 	xori	zero,zero,317
    4c9c:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4ca0:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4ca4:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4ca8:	00004f6c 	andhi	zero,zero,317
    4cac:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4cb0:	00004e40 	call	4e4 <__alt_mem_RAM-0x3b1c>
    4cb4:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4cb8:	00004cc0 	call	4cc <__alt_mem_RAM-0x3b34>
    4cbc:	00004e38 	rdprs	zero,zero,312
    4cc0:	0021883a 	mov	r16,zero
    4cc4:	003f7b06 	br	4ab4 <___vfprintf_internal_r+0x60>
    4cc8:	00c00404 	movi	r3,16
    4ccc:	00800044 	movi	r2,1
    4cd0:	d8c00d15 	stw	r3,52(sp)
    4cd4:	d8000c15 	stw	zero,48(sp)
    4cd8:	d8800b15 	stw	r2,44(sp)
    4cdc:	d8c00e17 	ldw	r3,56(sp)
    4ce0:	1805003a 	cmpeq	r2,r3,zero
    4ce4:	10005a1e 	bne	r2,zero,4e50 <___vfprintf_internal_r+0x3fc>
    4ce8:	d8800c17 	ldw	r2,48(sp)
    4cec:	1000781e 	bne	r2,zero,4ed0 <___vfprintf_internal_r+0x47c>
    4cf0:	d8801117 	ldw	r2,68(sp)
    4cf4:	d8000a15 	stw	zero,40(sp)
    4cf8:	14400017 	ldw	r17,0(r2)
    4cfc:	11c00104 	addi	r7,r2,4
    4d00:	d9c01115 	stw	r7,68(sp)
    4d04:	88005a26 	beq	r17,zero,4e70 <___vfprintf_internal_r+0x41c>
    4d08:	d8c00b17 	ldw	r3,44(sp)
    4d0c:	dcc00044 	addi	r19,sp,1
    4d10:	05800244 	movi	r22,9
    4d14:	182b003a 	cmpeq	r21,r3,zero
    4d18:	dcc01215 	stw	r19,72(sp)
    4d1c:	00000506 	br	4d34 <___vfprintf_internal_r+0x2e0>
    4d20:	21000c04 	addi	r4,r4,48
    4d24:	99000005 	stb	r4,0(r19)
    4d28:	9cc00044 	addi	r19,r19,1
    4d2c:	80000f26 	beq	r16,zero,4d6c <___vfprintf_internal_r+0x318>
    4d30:	8023883a 	mov	r17,r16
    4d34:	d9400d17 	ldw	r5,52(sp)
    4d38:	8809883a 	mov	r4,r17
    4d3c:	00054680 	call	5468 <__udivsi3>
    4d40:	d9000d17 	ldw	r4,52(sp)
    4d44:	100b883a 	mov	r5,r2
    4d48:	1021883a 	mov	r16,r2
    4d4c:	000481c0 	call	481c <__mulsi3>
    4d50:	8889c83a 	sub	r4,r17,r2
    4d54:	b13ff20e 	bge	r22,r4,4d20 <___vfprintf_internal_r+0x2cc>
    4d58:	a8009f1e 	bne	r21,zero,4fd8 <___vfprintf_internal_r+0x584>
    4d5c:	21000dc4 	addi	r4,r4,55
    4d60:	99000005 	stb	r4,0(r19)
    4d64:	9cc00044 	addi	r19,r19,1
    4d68:	803ff11e 	bne	r16,zero,4d30 <___vfprintf_internal_r+0x2dc>
    4d6c:	d8801217 	ldw	r2,72(sp)
    4d70:	98a3c83a 	sub	r17,r19,r2
    4d74:	d8c00917 	ldw	r3,36(sp)
    4d78:	1c4bc83a 	sub	r5,r3,r17
    4d7c:	0140130e 	bge	zero,r5,4dcc <___vfprintf_internal_r+0x378>
    4d80:	d8c00044 	addi	r3,sp,1
    4d84:	18800804 	addi	r2,r3,32
    4d88:	9880102e 	bgeu	r19,r2,4dcc <___vfprintf_internal_r+0x378>
    4d8c:	00800c04 	movi	r2,48
    4d90:	28ffffc4 	addi	r3,r5,-1
    4d94:	98800005 	stb	r2,0(r19)
    4d98:	99000044 	addi	r4,r19,1
    4d9c:	00c0080e 	bge	zero,r3,4dc0 <___vfprintf_internal_r+0x36c>
    4da0:	d8c00044 	addi	r3,sp,1
    4da4:	18800804 	addi	r2,r3,32
    4da8:	2080052e 	bgeu	r4,r2,4dc0 <___vfprintf_internal_r+0x36c>
    4dac:	00800c04 	movi	r2,48
    4db0:	20800005 	stb	r2,0(r4)
    4db4:	21000044 	addi	r4,r4,1
    4db8:	9945883a 	add	r2,r19,r5
    4dbc:	20bff81e 	bne	r4,r2,4da0 <___vfprintf_internal_r+0x34c>
    4dc0:	d8801217 	ldw	r2,72(sp)
    4dc4:	2027883a 	mov	r19,r4
    4dc8:	20a3c83a 	sub	r17,r4,r2
    4dcc:	d8c00a17 	ldw	r3,40(sp)
    4dd0:	1c45883a 	add	r2,r3,r17
    4dd4:	e0a1c83a 	sub	r16,fp,r2
    4dd8:	d8800f17 	ldw	r2,60(sp)
    4ddc:	10008026 	beq	r2,zero,4fe0 <___vfprintf_internal_r+0x58c>
    4de0:	1805003a 	cmpeq	r2,r3,zero
    4de4:	1000ae26 	beq	r2,zero,50a0 <___vfprintf_internal_r+0x64c>
    4de8:	0400a516 	blt	zero,r16,5080 <___vfprintf_internal_r+0x62c>
    4dec:	b805883a 	mov	r2,r23
    4df0:	0440950e 	bge	zero,r17,5048 <___vfprintf_internal_r+0x5f4>
    4df4:	102f883a 	mov	r23,r2
    4df8:	1461883a 	add	r16,r2,r17
    4dfc:	00000206 	br	4e08 <___vfprintf_internal_r+0x3b4>
    4e00:	bdc00044 	addi	r23,r23,1
    4e04:	85ffae26 	beq	r16,r23,4cc0 <___vfprintf_internal_r+0x26c>
    4e08:	9cffffc4 	addi	r19,r19,-1
    4e0c:	98800003 	ldbu	r2,0(r19)
    4e10:	a0c00117 	ldw	r3,4(r20)
    4e14:	d9001017 	ldw	r4,64(sp)
    4e18:	d8800005 	stb	r2,0(sp)
    4e1c:	a00b883a 	mov	r5,r20
    4e20:	d80d883a 	mov	r6,sp
    4e24:	01c00044 	movi	r7,1
    4e28:	183ee83a 	callr	r3
    4e2c:	103ff426 	beq	r2,zero,4e00 <___vfprintf_internal_r+0x3ac>
    4e30:	05ffffc4 	movi	r23,-1
    4e34:	003f3b06 	br	4b24 <___vfprintf_internal_r+0xd0>
    4e38:	00c00404 	movi	r3,16
    4e3c:	d8c00d15 	stw	r3,52(sp)
    4e40:	d8000c15 	stw	zero,48(sp)
    4e44:	d8c00e17 	ldw	r3,56(sp)
    4e48:	1805003a 	cmpeq	r2,r3,zero
    4e4c:	103fa626 	beq	r2,zero,4ce8 <___vfprintf_internal_r+0x294>
    4e50:	d8c00c17 	ldw	r3,48(sp)
    4e54:	1800171e 	bne	r3,zero,4eb4 <___vfprintf_internal_r+0x460>
    4e58:	d8c01117 	ldw	r3,68(sp)
    4e5c:	d8000a15 	stw	zero,40(sp)
    4e60:	1c400017 	ldw	r17,0(r3)
    4e64:	19c00104 	addi	r7,r3,4
    4e68:	d9c01115 	stw	r7,68(sp)
    4e6c:	883fa61e 	bne	r17,zero,4d08 <___vfprintf_internal_r+0x2b4>
    4e70:	dcc00044 	addi	r19,sp,1
    4e74:	dcc01215 	stw	r19,72(sp)
    4e78:	003fbe06 	br	4d74 <___vfprintf_internal_r+0x320>
    4e7c:	04000084 	movi	r16,2
    4e80:	d9c00f15 	stw	r7,60(sp)
    4e84:	003f0b06 	br	4ab4 <___vfprintf_internal_r+0x60>
    4e88:	040000c4 	movi	r16,3
    4e8c:	003f0906 	br	4ab4 <___vfprintf_internal_r+0x60>
    4e90:	00800044 	movi	r2,1
    4e94:	040000c4 	movi	r16,3
    4e98:	d8800e15 	stw	r2,56(sp)
    4e9c:	003f0506 	br	4ab4 <___vfprintf_internal_r+0x60>
    4ea0:	0007883a 	mov	r3,zero
    4ea4:	003f4e06 	br	4be0 <___vfprintf_internal_r+0x18c>
    4ea8:	00800044 	movi	r2,1
    4eac:	d8800915 	stw	r2,36(sp)
    4eb0:	003f5706 	br	4c10 <___vfprintf_internal_r+0x1bc>
    4eb4:	d8801117 	ldw	r2,68(sp)
    4eb8:	14400017 	ldw	r17,0(r2)
    4ebc:	10800104 	addi	r2,r2,4
    4ec0:	d8801115 	stw	r2,68(sp)
    4ec4:	88000716 	blt	r17,zero,4ee4 <___vfprintf_internal_r+0x490>
    4ec8:	d8000a15 	stw	zero,40(sp)
    4ecc:	003f8d06 	br	4d04 <___vfprintf_internal_r+0x2b0>
    4ed0:	d8c01117 	ldw	r3,68(sp)
    4ed4:	1c400017 	ldw	r17,0(r3)
    4ed8:	18c00104 	addi	r3,r3,4
    4edc:	d8c01115 	stw	r3,68(sp)
    4ee0:	883ff90e 	bge	r17,zero,4ec8 <___vfprintf_internal_r+0x474>
    4ee4:	00800044 	movi	r2,1
    4ee8:	0463c83a 	sub	r17,zero,r17
    4eec:	d8800a15 	stw	r2,40(sp)
    4ef0:	003f8406 	br	4d04 <___vfprintf_internal_r+0x2b0>
    4ef4:	04000044 	movi	r16,1
    4ef8:	8700080e 	bge	r16,fp,4f1c <___vfprintf_internal_r+0x4c8>
    4efc:	d9001017 	ldw	r4,64(sp)
    4f00:	a00b883a 	mov	r5,r20
    4f04:	01800804 	movi	r6,32
    4f08:	e1ffffc4 	addi	r7,fp,-1
    4f0c:	00049d40 	call	49d4 <print_repeat>
    4f10:	103fc71e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    4f14:	e5c5883a 	add	r2,fp,r23
    4f18:	15ffffc4 	addi	r23,r2,-1
    4f1c:	d8c01117 	ldw	r3,68(sp)
    4f20:	d9001017 	ldw	r4,64(sp)
    4f24:	800f883a 	mov	r7,r16
    4f28:	18800017 	ldw	r2,0(r3)
    4f2c:	a0c00117 	ldw	r3,4(r20)
    4f30:	a00b883a 	mov	r5,r20
    4f34:	d8800005 	stb	r2,0(sp)
    4f38:	d80d883a 	mov	r6,sp
    4f3c:	183ee83a 	callr	r3
    4f40:	103fbb1e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    4f44:	d8801117 	ldw	r2,68(sp)
    4f48:	bdc00044 	addi	r23,r23,1
    4f4c:	0021883a 	mov	r16,zero
    4f50:	10800104 	addi	r2,r2,4
    4f54:	d8801115 	stw	r2,68(sp)
    4f58:	003ed606 	br	4ab4 <___vfprintf_internal_r+0x60>
    4f5c:	00800204 	movi	r2,8
    4f60:	d8800d15 	stw	r2,52(sp)
    4f64:	d8000c15 	stw	zero,48(sp)
    4f68:	003fb606 	br	4e44 <___vfprintf_internal_r+0x3f0>
    4f6c:	d8c01117 	ldw	r3,68(sp)
    4f70:	1cc00017 	ldw	r19,0(r3)
    4f74:	9809883a 	mov	r4,r19
    4f78:	00049b40 	call	49b4 <strlen>
    4f7c:	e0a1c83a 	sub	r16,fp,r2
    4f80:	1023883a 	mov	r17,r2
    4f84:	0400070e 	bge	zero,r16,4fa4 <___vfprintf_internal_r+0x550>
    4f88:	d9001017 	ldw	r4,64(sp)
    4f8c:	a00b883a 	mov	r5,r20
    4f90:	01800804 	movi	r6,32
    4f94:	800f883a 	mov	r7,r16
    4f98:	00049d40 	call	49d4 <print_repeat>
    4f9c:	103fa41e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    4fa0:	bc2f883a 	add	r23,r23,r16
    4fa4:	a0c00117 	ldw	r3,4(r20)
    4fa8:	d9001017 	ldw	r4,64(sp)
    4fac:	980d883a 	mov	r6,r19
    4fb0:	a00b883a 	mov	r5,r20
    4fb4:	880f883a 	mov	r7,r17
    4fb8:	183ee83a 	callr	r3
    4fbc:	103f9c1e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    4fc0:	d8801117 	ldw	r2,68(sp)
    4fc4:	bc6f883a 	add	r23,r23,r17
    4fc8:	0021883a 	mov	r16,zero
    4fcc:	10800104 	addi	r2,r2,4
    4fd0:	d8801115 	stw	r2,68(sp)
    4fd4:	003eb706 	br	4ab4 <___vfprintf_internal_r+0x60>
    4fd8:	210015c4 	addi	r4,r4,87
    4fdc:	003f5106 	br	4d24 <___vfprintf_internal_r+0x2d0>
    4fe0:	04003b16 	blt	zero,r16,50d0 <___vfprintf_internal_r+0x67c>
    4fe4:	d8c00a17 	ldw	r3,40(sp)
    4fe8:	1805003a 	cmpeq	r2,r3,zero
    4fec:	103f7f1e 	bne	r2,zero,4dec <___vfprintf_internal_r+0x398>
    4ff0:	a0c00117 	ldw	r3,4(r20)
    4ff4:	d9001017 	ldw	r4,64(sp)
    4ff8:	00800b44 	movi	r2,45
    4ffc:	d8800005 	stb	r2,0(sp)
    5000:	a00b883a 	mov	r5,r20
    5004:	d80d883a 	mov	r6,sp
    5008:	01c00044 	movi	r7,1
    500c:	183ee83a 	callr	r3
    5010:	103f871e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    5014:	b8800044 	addi	r2,r23,1
    5018:	003f7506 	br	4df0 <___vfprintf_internal_r+0x39c>
    501c:	0007883a 	mov	r3,zero
    5020:	003edb06 	br	4b90 <___vfprintf_internal_r+0x13c>
    5024:	a0c00117 	ldw	r3,4(r20)
    5028:	d9001017 	ldw	r4,64(sp)
    502c:	d9400005 	stb	r5,0(sp)
    5030:	d80d883a 	mov	r6,sp
    5034:	a00b883a 	mov	r5,r20
    5038:	183ee83a 	callr	r3
    503c:	103f7c1e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    5040:	bdc00044 	addi	r23,r23,1
    5044:	003e9b06 	br	4ab4 <___vfprintf_internal_r+0x60>
    5048:	102f883a 	mov	r23,r2
    504c:	0021883a 	mov	r16,zero
    5050:	003e9806 	br	4ab4 <___vfprintf_internal_r+0x60>
    5054:	a0c00117 	ldw	r3,4(r20)
    5058:	d9000005 	stb	r4,0(sp)
    505c:	d9001017 	ldw	r4,64(sp)
    5060:	a00b883a 	mov	r5,r20
    5064:	d80d883a 	mov	r6,sp
    5068:	800f883a 	mov	r7,r16
    506c:	183ee83a 	callr	r3
    5070:	103f6f1e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    5074:	bc2f883a 	add	r23,r23,r16
    5078:	0021883a 	mov	r16,zero
    507c:	003e8d06 	br	4ab4 <___vfprintf_internal_r+0x60>
    5080:	d9001017 	ldw	r4,64(sp)
    5084:	a00b883a 	mov	r5,r20
    5088:	01800c04 	movi	r6,48
    508c:	800f883a 	mov	r7,r16
    5090:	00049d40 	call	49d4 <print_repeat>
    5094:	103f661e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    5098:	bc05883a 	add	r2,r23,r16
    509c:	003f5406 	br	4df0 <___vfprintf_internal_r+0x39c>
    50a0:	a0c00117 	ldw	r3,4(r20)
    50a4:	d9001017 	ldw	r4,64(sp)
    50a8:	00800b44 	movi	r2,45
    50ac:	d8800005 	stb	r2,0(sp)
    50b0:	a00b883a 	mov	r5,r20
    50b4:	d80d883a 	mov	r6,sp
    50b8:	01c00044 	movi	r7,1
    50bc:	183ee83a 	callr	r3
    50c0:	103f5b1e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    50c4:	bdc00044 	addi	r23,r23,1
    50c8:	043f480e 	bge	zero,r16,4dec <___vfprintf_internal_r+0x398>
    50cc:	003fec06 	br	5080 <___vfprintf_internal_r+0x62c>
    50d0:	d9001017 	ldw	r4,64(sp)
    50d4:	a00b883a 	mov	r5,r20
    50d8:	01800804 	movi	r6,32
    50dc:	800f883a 	mov	r7,r16
    50e0:	00049d40 	call	49d4 <print_repeat>
    50e4:	103f521e 	bne	r2,zero,4e30 <___vfprintf_internal_r+0x3dc>
    50e8:	bc2f883a 	add	r23,r23,r16
    50ec:	003fbd06 	br	4fe4 <___vfprintf_internal_r+0x590>

000050f0 <__vfprintf_internal>:
    50f0:	00800034 	movhi	r2,0
    50f4:	10997c04 	addi	r2,r2,26096
    50f8:	2013883a 	mov	r9,r4
    50fc:	11000017 	ldw	r4,0(r2)
    5100:	2805883a 	mov	r2,r5
    5104:	300f883a 	mov	r7,r6
    5108:	480b883a 	mov	r5,r9
    510c:	100d883a 	mov	r6,r2
    5110:	0004a541 	jmpi	4a54 <___vfprintf_internal_r>

00005114 <__sfvwrite_small_dev>:
    5114:	2880000b 	ldhu	r2,0(r5)
    5118:	defffa04 	addi	sp,sp,-24
    511c:	dcc00315 	stw	r19,12(sp)
    5120:	1080020c 	andi	r2,r2,8
    5124:	dc800215 	stw	r18,8(sp)
    5128:	dc400115 	stw	r17,4(sp)
    512c:	dfc00515 	stw	ra,20(sp)
    5130:	dd000415 	stw	r20,16(sp)
    5134:	dc000015 	stw	r16,0(sp)
    5138:	2825883a 	mov	r18,r5
    513c:	2027883a 	mov	r19,r4
    5140:	3023883a 	mov	r17,r6
    5144:	10002026 	beq	r2,zero,51c8 <__sfvwrite_small_dev+0xb4>
    5148:	2940008f 	ldh	r5,2(r5)
    514c:	28000f16 	blt	r5,zero,518c <__sfvwrite_small_dev+0x78>
    5150:	01c01b0e 	bge	zero,r7,51c0 <__sfvwrite_small_dev+0xac>
    5154:	3821883a 	mov	r16,r7
    5158:	05010004 	movi	r20,1024
    515c:	00000206 	br	5168 <__sfvwrite_small_dev+0x54>
    5160:	0400170e 	bge	zero,r16,51c0 <__sfvwrite_small_dev+0xac>
    5164:	9140008f 	ldh	r5,2(r18)
    5168:	880d883a 	mov	r6,r17
    516c:	9809883a 	mov	r4,r19
    5170:	800f883a 	mov	r7,r16
    5174:	a400010e 	bge	r20,r16,517c <__sfvwrite_small_dev+0x68>
    5178:	01c10004 	movi	r7,1024
    517c:	00052b40 	call	52b4 <_write_r>
    5180:	88a3883a 	add	r17,r17,r2
    5184:	80a1c83a 	sub	r16,r16,r2
    5188:	00bff516 	blt	zero,r2,5160 <__sfvwrite_small_dev+0x4c>
    518c:	9080000b 	ldhu	r2,0(r18)
    5190:	00ffffc4 	movi	r3,-1
    5194:	10801014 	ori	r2,r2,64
    5198:	9080000d 	sth	r2,0(r18)
    519c:	1805883a 	mov	r2,r3
    51a0:	dfc00517 	ldw	ra,20(sp)
    51a4:	dd000417 	ldw	r20,16(sp)
    51a8:	dcc00317 	ldw	r19,12(sp)
    51ac:	dc800217 	ldw	r18,8(sp)
    51b0:	dc400117 	ldw	r17,4(sp)
    51b4:	dc000017 	ldw	r16,0(sp)
    51b8:	dec00604 	addi	sp,sp,24
    51bc:	f800283a 	ret
    51c0:	0007883a 	mov	r3,zero
    51c4:	003ff506 	br	519c <__sfvwrite_small_dev+0x88>
    51c8:	00ffffc4 	movi	r3,-1
    51cc:	003ff306 	br	519c <__sfvwrite_small_dev+0x88>

000051d0 <putc>:
    51d0:	defffd04 	addi	sp,sp,-12
    51d4:	00800034 	movhi	r2,0
    51d8:	10997c04 	addi	r2,r2,26096
    51dc:	dc000115 	stw	r16,4(sp)
    51e0:	2021883a 	mov	r16,r4
    51e4:	11000017 	ldw	r4,0(r2)
    51e8:	dc000005 	stb	r16,0(sp)
    51ec:	00800034 	movhi	r2,0
    51f0:	10944504 	addi	r2,r2,20756
    51f4:	dfc00215 	stw	ra,8(sp)
    51f8:	28800115 	stw	r2,4(r5)
    51fc:	d80d883a 	mov	r6,sp
    5200:	01c00044 	movi	r7,1
    5204:	103ee83a 	callr	r2
    5208:	1007883a 	mov	r3,r2
    520c:	00bfffc4 	movi	r2,-1
    5210:	18800526 	beq	r3,r2,5228 <putc+0x58>
    5214:	8005883a 	mov	r2,r16
    5218:	dfc00217 	ldw	ra,8(sp)
    521c:	dc000117 	ldw	r16,4(sp)
    5220:	dec00304 	addi	sp,sp,12
    5224:	f800283a 	ret
    5228:	1821883a 	mov	r16,r3
    522c:	8005883a 	mov	r2,r16
    5230:	dfc00217 	ldw	ra,8(sp)
    5234:	dc000117 	ldw	r16,4(sp)
    5238:	dec00304 	addi	sp,sp,12
    523c:	f800283a 	ret

00005240 <_putc_r>:
    5240:	00800034 	movhi	r2,0
    5244:	10997c04 	addi	r2,r2,26096
    5248:	defffd04 	addi	sp,sp,-12
    524c:	11000017 	ldw	r4,0(r2)
    5250:	00800034 	movhi	r2,0
    5254:	10944504 	addi	r2,r2,20756
    5258:	30800115 	stw	r2,4(r6)
    525c:	dc000115 	stw	r16,4(sp)
    5260:	2821883a 	mov	r16,r5
    5264:	dfc00215 	stw	ra,8(sp)
    5268:	300b883a 	mov	r5,r6
    526c:	01c00044 	movi	r7,1
    5270:	d80d883a 	mov	r6,sp
    5274:	dc000005 	stb	r16,0(sp)
    5278:	103ee83a 	callr	r2
    527c:	1007883a 	mov	r3,r2
    5280:	00bfffc4 	movi	r2,-1
    5284:	18800526 	beq	r3,r2,529c <_putc_r+0x5c>
    5288:	8005883a 	mov	r2,r16
    528c:	dfc00217 	ldw	ra,8(sp)
    5290:	dc000117 	ldw	r16,4(sp)
    5294:	dec00304 	addi	sp,sp,12
    5298:	f800283a 	ret
    529c:	1821883a 	mov	r16,r3
    52a0:	8005883a 	mov	r2,r16
    52a4:	dfc00217 	ldw	ra,8(sp)
    52a8:	dc000117 	ldw	r16,4(sp)
    52ac:	dec00304 	addi	sp,sp,12
    52b0:	f800283a 	ret

000052b4 <_write_r>:
    52b4:	defffd04 	addi	sp,sp,-12
    52b8:	dc000015 	stw	r16,0(sp)
    52bc:	04000034 	movhi	r16,0
    52c0:	841a4504 	addi	r16,r16,26900
    52c4:	dc400115 	stw	r17,4(sp)
    52c8:	80000015 	stw	zero,0(r16)
    52cc:	2023883a 	mov	r17,r4
    52d0:	2809883a 	mov	r4,r5
    52d4:	300b883a 	mov	r5,r6
    52d8:	380d883a 	mov	r6,r7
    52dc:	dfc00215 	stw	ra,8(sp)
    52e0:	000558c0 	call	558c <write>
    52e4:	1007883a 	mov	r3,r2
    52e8:	00bfffc4 	movi	r2,-1
    52ec:	18800626 	beq	r3,r2,5308 <_write_r+0x54>
    52f0:	1805883a 	mov	r2,r3
    52f4:	dfc00217 	ldw	ra,8(sp)
    52f8:	dc400117 	ldw	r17,4(sp)
    52fc:	dc000017 	ldw	r16,0(sp)
    5300:	dec00304 	addi	sp,sp,12
    5304:	f800283a 	ret
    5308:	80800017 	ldw	r2,0(r16)
    530c:	103ff826 	beq	r2,zero,52f0 <_write_r+0x3c>
    5310:	88800015 	stw	r2,0(r17)
    5314:	1805883a 	mov	r2,r3
    5318:	dfc00217 	ldw	ra,8(sp)
    531c:	dc400117 	ldw	r17,4(sp)
    5320:	dc000017 	ldw	r16,0(sp)
    5324:	dec00304 	addi	sp,sp,12
    5328:	f800283a 	ret

0000532c <udivmodsi4>:
    532c:	29001b2e 	bgeu	r5,r4,539c <udivmodsi4+0x70>
    5330:	28001a16 	blt	r5,zero,539c <udivmodsi4+0x70>
    5334:	00800044 	movi	r2,1
    5338:	0007883a 	mov	r3,zero
    533c:	01c007c4 	movi	r7,31
    5340:	00000306 	br	5350 <udivmodsi4+0x24>
    5344:	19c01326 	beq	r3,r7,5394 <udivmodsi4+0x68>
    5348:	18c00044 	addi	r3,r3,1
    534c:	28000416 	blt	r5,zero,5360 <udivmodsi4+0x34>
    5350:	294b883a 	add	r5,r5,r5
    5354:	1085883a 	add	r2,r2,r2
    5358:	293ffa36 	bltu	r5,r4,5344 <udivmodsi4+0x18>
    535c:	10000d26 	beq	r2,zero,5394 <udivmodsi4+0x68>
    5360:	0007883a 	mov	r3,zero
    5364:	21400236 	bltu	r4,r5,5370 <udivmodsi4+0x44>
    5368:	2149c83a 	sub	r4,r4,r5
    536c:	1886b03a 	or	r3,r3,r2
    5370:	1004d07a 	srli	r2,r2,1
    5374:	280ad07a 	srli	r5,r5,1
    5378:	103ffa1e 	bne	r2,zero,5364 <udivmodsi4+0x38>
    537c:	30000226 	beq	r6,zero,5388 <udivmodsi4+0x5c>
    5380:	2005883a 	mov	r2,r4
    5384:	f800283a 	ret
    5388:	1809883a 	mov	r4,r3
    538c:	2005883a 	mov	r2,r4
    5390:	f800283a 	ret
    5394:	0007883a 	mov	r3,zero
    5398:	003ff806 	br	537c <udivmodsi4+0x50>
    539c:	00800044 	movi	r2,1
    53a0:	0007883a 	mov	r3,zero
    53a4:	003fef06 	br	5364 <udivmodsi4+0x38>

000053a8 <__divsi3>:
    53a8:	defffe04 	addi	sp,sp,-8
    53ac:	dc000015 	stw	r16,0(sp)
    53b0:	dfc00115 	stw	ra,4(sp)
    53b4:	0021883a 	mov	r16,zero
    53b8:	20000c16 	blt	r4,zero,53ec <__divsi3+0x44>
    53bc:	000d883a 	mov	r6,zero
    53c0:	28000e16 	blt	r5,zero,53fc <__divsi3+0x54>
    53c4:	000532c0 	call	532c <udivmodsi4>
    53c8:	1007883a 	mov	r3,r2
    53cc:	8005003a 	cmpeq	r2,r16,zero
    53d0:	1000011e 	bne	r2,zero,53d8 <__divsi3+0x30>
    53d4:	00c7c83a 	sub	r3,zero,r3
    53d8:	1805883a 	mov	r2,r3
    53dc:	dfc00117 	ldw	ra,4(sp)
    53e0:	dc000017 	ldw	r16,0(sp)
    53e4:	dec00204 	addi	sp,sp,8
    53e8:	f800283a 	ret
    53ec:	0109c83a 	sub	r4,zero,r4
    53f0:	04000044 	movi	r16,1
    53f4:	000d883a 	mov	r6,zero
    53f8:	283ff20e 	bge	r5,zero,53c4 <__divsi3+0x1c>
    53fc:	014bc83a 	sub	r5,zero,r5
    5400:	8021003a 	cmpeq	r16,r16,zero
    5404:	003fef06 	br	53c4 <__divsi3+0x1c>

00005408 <__modsi3>:
    5408:	deffff04 	addi	sp,sp,-4
    540c:	dfc00015 	stw	ra,0(sp)
    5410:	01800044 	movi	r6,1
    5414:	2807883a 	mov	r3,r5
    5418:	20000416 	blt	r4,zero,542c <__modsi3+0x24>
    541c:	28000c16 	blt	r5,zero,5450 <__modsi3+0x48>
    5420:	dfc00017 	ldw	ra,0(sp)
    5424:	dec00104 	addi	sp,sp,4
    5428:	000532c1 	jmpi	532c <udivmodsi4>
    542c:	0109c83a 	sub	r4,zero,r4
    5430:	28000b16 	blt	r5,zero,5460 <__modsi3+0x58>
    5434:	180b883a 	mov	r5,r3
    5438:	01800044 	movi	r6,1
    543c:	000532c0 	call	532c <udivmodsi4>
    5440:	0085c83a 	sub	r2,zero,r2
    5444:	dfc00017 	ldw	ra,0(sp)
    5448:	dec00104 	addi	sp,sp,4
    544c:	f800283a 	ret
    5450:	014bc83a 	sub	r5,zero,r5
    5454:	dfc00017 	ldw	ra,0(sp)
    5458:	dec00104 	addi	sp,sp,4
    545c:	000532c1 	jmpi	532c <udivmodsi4>
    5460:	0147c83a 	sub	r3,zero,r5
    5464:	003ff306 	br	5434 <__modsi3+0x2c>

00005468 <__udivsi3>:
    5468:	000d883a 	mov	r6,zero
    546c:	000532c1 	jmpi	532c <udivmodsi4>

00005470 <__umodsi3>:
    5470:	01800044 	movi	r6,1
    5474:	000532c1 	jmpi	532c <udivmodsi4>

00005478 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5478:	deffff04 	addi	sp,sp,-4
    547c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    5480:	01000034 	movhi	r4,0
    5484:	21198704 	addi	r4,r4,26140
    5488:	00c00034 	movhi	r3,0
    548c:	18d8ce04 	addi	r3,r3,25400

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5490:	20c00926 	beq	r4,r3,54b8 <alt_load+0x40>
    5494:	01800034 	movhi	r6,0
    5498:	31998704 	addi	r6,r6,26140
  {
    while( to != end )
    549c:	19800626 	beq	r3,r6,54b8 <alt_load+0x40>
    54a0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    54a4:	20800017 	ldw	r2,0(r4)
    54a8:	18800015 	stw	r2,0(r3)
    54ac:	1947883a 	add	r3,r3,r5
    54b0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    54b4:	30fffb1e 	bne	r6,r3,54a4 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    54b8:	01000034 	movhi	r4,0
    54bc:	21100804 	addi	r4,r4,16416
    54c0:	00c00034 	movhi	r3,0
    54c4:	18d00804 	addi	r3,r3,16416

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    54c8:	20c00926 	beq	r4,r3,54f0 <alt_load+0x78>
    54cc:	01800034 	movhi	r6,0
    54d0:	31905a04 	addi	r6,r6,16744
  {
    while( to != end )
    54d4:	19800626 	beq	r3,r6,54f0 <alt_load+0x78>
    54d8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    54dc:	20800017 	ldw	r2,0(r4)
    54e0:	18800015 	stw	r2,0(r3)
    54e4:	1947883a 	add	r3,r3,r5
    54e8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    54ec:	30fffb1e 	bne	r6,r3,54dc <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    54f0:	01000034 	movhi	r4,0
    54f4:	2118b804 	addi	r4,r4,25312
    54f8:	00c00034 	movhi	r3,0
    54fc:	18d8b804 	addi	r3,r3,25312

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5500:	20c00926 	beq	r4,r3,5528 <alt_load+0xb0>
    5504:	01800034 	movhi	r6,0
    5508:	3198ce04 	addi	r6,r6,25400
  {
    while( to != end )
    550c:	19800626 	beq	r3,r6,5528 <alt_load+0xb0>
    5510:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    5514:	20800017 	ldw	r2,0(r4)
    5518:	18800015 	stw	r2,0(r3)
    551c:	1947883a 	add	r3,r3,r5
    5520:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5524:	30fffb1e 	bne	r6,r3,5514 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5528:	000595c0 	call	595c <alt_dcache_flush_all>
  alt_icache_flush_all();
    552c:	00059d80 	call	59d8 <alt_icache_flush_all>
}
    5530:	dfc00017 	ldw	ra,0(sp)
    5534:	dec00104 	addi	sp,sp,4
    5538:	f800283a 	ret

0000553c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    553c:	defffe04 	addi	sp,sp,-8
    5540:	dfc00115 	stw	ra,4(sp)
    5544:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5548:	0009883a 	mov	r4,zero
    554c:	00056d80 	call	56d8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5550:	000569c0 	call	569c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    5554:	01800034 	movhi	r6,0
    5558:	3198c604 	addi	r6,r6,25368
    555c:	3009883a 	mov	r4,r6
    5560:	300b883a 	mov	r5,r6
    5564:	0005b740 	call	5b74 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    5568:	d120cb17 	ldw	r4,-31956(gp)
    556c:	d160cc17 	ldw	r5,-31952(gp)
    5570:	d1a0cd17 	ldw	r6,-31948(gp)
    5574:	00047bc0 	call	47bc <main>
    5578:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    557c:	01000044 	movi	r4,1
    5580:	000587c0 	call	587c <close>
  exit (result);
    5584:	8009883a 	mov	r4,r16
    5588:	00060ac0 	call	60ac <exit>

0000558c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    558c:	defffd04 	addi	sp,sp,-12
    5590:	dfc00215 	stw	ra,8(sp)
    5594:	dc400115 	stw	r17,4(sp)
    5598:	dc000015 	stw	r16,0(sp)
    559c:	2821883a 	mov	r16,r5
    55a0:	3023883a 	mov	r17,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    55a4:	20002b16 	blt	r4,zero,5654 <write+0xc8>
    55a8:	01400304 	movi	r5,12
    55ac:	000481c0 	call	481c <__mulsi3>
    55b0:	00c00034 	movhi	r3,0
    55b4:	18d91b04 	addi	r3,r3,25708
    55b8:	10c9883a 	add	r4,r2,r3
  
  if (fd)
    55bc:	20002526 	beq	r4,zero,5654 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    55c0:	20800217 	ldw	r2,8(r4)
    55c4:	108000cc 	andi	r2,r2,3
    55c8:	10001526 	beq	r2,zero,5620 <write+0x94>
    55cc:	20800017 	ldw	r2,0(r4)
    55d0:	10800617 	ldw	r2,24(r2)
    55d4:	10001226 	beq	r2,zero,5620 <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    55d8:	800b883a 	mov	r5,r16
    55dc:	880d883a 	mov	r6,r17
    55e0:	103ee83a 	callr	r2
    55e4:	1021883a 	mov	r16,r2
    55e8:	1000260e 	bge	r2,zero,5684 <write+0xf8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    55ec:	00800034 	movhi	r2,0
    55f0:	10998304 	addi	r2,r2,26124
    55f4:	10800017 	ldw	r2,0(r2)
    55f8:	1000031e 	bne	r2,zero,5608 <write+0x7c>
    55fc:	00c00034 	movhi	r3,0
    5600:	18da4504 	addi	r3,r3,26900
    5604:	00000206 	br	5610 <write+0x84>
    5608:	103ee83a 	callr	r2
    560c:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    5610:	0405c83a 	sub	r2,zero,r16
    5614:	18800015 	stw	r2,0(r3)
    5618:	043fffc4 	movi	r16,-1
    561c:	00001906 	br	5684 <write+0xf8>
    5620:	00800034 	movhi	r2,0
    5624:	10998304 	addi	r2,r2,26124
    5628:	10800017 	ldw	r2,0(r2)
    562c:	1000031e 	bne	r2,zero,563c <write+0xb0>
    5630:	00c00034 	movhi	r3,0
    5634:	18da4504 	addi	r3,r3,26900
    5638:	00000206 	br	5644 <write+0xb8>
    563c:	103ee83a 	callr	r2
    5640:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5644:	00800344 	movi	r2,13
    5648:	18800015 	stw	r2,0(r3)
    564c:	043fffc4 	movi	r16,-1
    5650:	00000c06 	br	5684 <write+0xf8>
    5654:	00800034 	movhi	r2,0
    5658:	10998304 	addi	r2,r2,26124
    565c:	10800017 	ldw	r2,0(r2)
    5660:	1000031e 	bne	r2,zero,5670 <write+0xe4>
    5664:	00c00034 	movhi	r3,0
    5668:	18da4504 	addi	r3,r3,26900
    566c:	00000206 	br	5678 <write+0xec>
    5670:	103ee83a 	callr	r2
    5674:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5678:	00801444 	movi	r2,81
    567c:	18800015 	stw	r2,0(r3)
    5680:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    5684:	8005883a 	mov	r2,r16
    5688:	dfc00217 	ldw	ra,8(sp)
    568c:	dc400117 	ldw	r17,4(sp)
    5690:	dc000017 	ldw	r16,0(sp)
    5694:	dec00304 	addi	sp,sp,12
    5698:	f800283a 	ret

0000569c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    569c:	deffff04 	addi	sp,sp,-4
    56a0:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    56a4:	01240014 	movui	r4,36864
    56a8:	000b883a 	mov	r5,zero
    56ac:	000d883a 	mov	r6,zero
    56b0:	01c0fa04 	movi	r7,1000
    56b4:	00057f00 	call	57f0 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    56b8:	01000034 	movhi	r4,0
    56bc:	21190604 	addi	r4,r4,25624
    56c0:	01400034 	movhi	r5,0
    56c4:	29598004 	addi	r5,r5,26112
    56c8:	00059680 	call	5968 <alt_dev_llist_insert>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    56cc:	dfc00017 	ldw	ra,0(sp)
    56d0:	dec00104 	addi	sp,sp,4
    56d4:	f800283a 	ret

000056d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    56d8:	deffff04 	addi	sp,sp,-4
    56dc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    56e0:	0005ed80 	call	5ed8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    56e4:	00800044 	movi	r2,1
    56e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    56ec:	dfc00017 	ldw	ra,0(sp)
    56f0:	dec00104 	addi	sp,sp,4
    56f4:	f800283a 	ret

000056f8 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    56f8:	deffff04 	addi	sp,sp,-4
    56fc:	dfc00015 	stw	ra,0(sp)
    5700:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    5704:	21000017 	ldw	r4,0(r4)
    5708:	21000a04 	addi	r4,r4,40
    570c:	11c00217 	ldw	r7,8(r2)
    5710:	00057b40 	call	57b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5714:	dfc00017 	ldw	ra,0(sp)
    5718:	dec00104 	addi	sp,sp,4
    571c:	f800283a 	ret

00005720 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5720:	deffff04 	addi	sp,sp,-4
    5724:	dfc00015 	stw	ra,0(sp)
    5728:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    572c:	21000017 	ldw	r4,0(r4)
    5730:	21000a04 	addi	r4,r4,40
    5734:	11c00217 	ldw	r7,8(r2)
    5738:	00057480 	call	5748 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    573c:	dfc00017 	ldw	ra,0(sp)
    5740:	dec00104 	addi	sp,sp,4
    5744:	f800283a 	ret

00005748 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    5748:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    574c:	2991883a 	add	r8,r5,r6

  while (ptr < end)
    5750:	2a00122e 	bgeu	r5,r8,579c <altera_avalon_jtag_uart_read+0x54>
    5754:	2807883a 	mov	r3,r5
    5758:	02a00014 	movui	r10,32768
    575c:	02c00044 	movi	r11,1
    5760:	3890000c 	andi	r2,r7,16384
    5764:	1012c03a 	cmpne	r9,r2,zero
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5768:	21800037 	ldwio	r6,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    576c:	3284703a 	and	r2,r6,r10
    5770:	10000326 	beq	r2,zero,5780 <altera_avalon_jtag_uart_read+0x38>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5774:	19800005 	stb	r6,0(r3)
    5778:	1ac7883a 	add	r3,r3,r11
    577c:	00000306 	br	578c <altera_avalon_jtag_uart_read+0x44>
    else if (ptr != buffer)
    5780:	28c0041e 	bne	r5,r3,5794 <altera_avalon_jtag_uart_read+0x4c>
      break;
    else if(flags & O_NONBLOCK)
    5784:	4800091e 	bne	r9,zero,57ac <altera_avalon_jtag_uart_read+0x64>
      break;   
    5788:	2807883a 	mov	r3,r5
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    578c:	1a3ff636 	bltu	r3,r8,5768 <altera_avalon_jtag_uart_read+0x20>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    5790:	28c00226 	beq	r5,r3,579c <altera_avalon_jtag_uart_read+0x54>
    return ptr - buffer;
    5794:	1945c83a 	sub	r2,r3,r5
    5798:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    579c:	3890000c 	andi	r2,r7,16384
    57a0:	1000021e 	bne	r2,zero,57ac <altera_avalon_jtag_uart_read+0x64>
    57a4:	00bffec4 	movi	r2,-5
    57a8:	f800283a 	ret
    57ac:	00bffd44 	movi	r2,-11
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    57b0:	f800283a 	ret

000057b4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    57b4:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    57b8:	314f883a 	add	r7,r6,r5

  while (ptr < end)
    57bc:	29c00a2e 	bgeu	r5,r7,57e8 <altera_avalon_jtag_uart_write+0x34>
    57c0:	20c00104 	addi	r3,r4,4
    57c4:	023ffff4 	movhi	r8,65535
    57c8:	02400044 	movi	r9,1
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    57cc:	18800037 	ldwio	r2,0(r3)
    57d0:	1204703a 	and	r2,r2,r8
    57d4:	10000326 	beq	r2,zero,57e4 <altera_avalon_jtag_uart_write+0x30>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    57d8:	28800007 	ldb	r2,0(r5)
    57dc:	2a4b883a 	add	r5,r5,r9
    57e0:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    57e4:	29fff936 	bltu	r5,r7,57cc <altera_avalon_jtag_uart_write+0x18>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    57e8:	3005883a 	mov	r2,r6
    57ec:	f800283a 	ret

000057f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    57f0:	defffe04 	addi	sp,sp,-8
    57f4:	dfc00115 	stw	ra,4(sp)
    57f8:	2011883a 	mov	r8,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    57fc:	00c00034 	movhi	r3,0
    5800:	18da4a04 	addi	r3,r3,26920
    5804:	18800017 	ldw	r2,0(r3)
    5808:	1000011e 	bne	r2,zero,5810 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    580c:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    5810:	008001c4 	movi	r2,7
    5814:	40800135 	stwio	r2,4(r8)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    5818:	d8000015 	stw	zero,0(sp)
    581c:	2809883a 	mov	r4,r5
    5820:	300b883a 	mov	r5,r6
    5824:	01800034 	movhi	r6,0
    5828:	31961004 	addi	r6,r6,22592
    582c:	400f883a 	mov	r7,r8
    5830:	0005a740 	call	5a74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    5834:	dfc00117 	ldw	ra,4(sp)
    5838:	dec00204 	addi	sp,sp,8
    583c:	f800283a 	ret

00005840 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    5840:	defffe04 	addi	sp,sp,-8
    5844:	dfc00115 	stw	ra,4(sp)
    5848:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    584c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    5850:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5854:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5858:	00bfff84 	movi	r2,-2
    585c:	8084703a 	and	r2,r16,r2
    5860:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    5864:	0005e2c0 	call	5e2c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5868:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    586c:	dfc00117 	ldw	ra,4(sp)
    5870:	dc000017 	ldw	r16,0(sp)
    5874:	dec00204 	addi	sp,sp,8
    5878:	f800283a 	ret

0000587c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    587c:	defffd04 	addi	sp,sp,-12
    5880:	dfc00215 	stw	ra,8(sp)
    5884:	dc400115 	stw	r17,4(sp)
    5888:	dc000015 	stw	r16,0(sp)
    588c:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5890:	20001d16 	blt	r4,zero,5908 <close+0x8c>
    5894:	01400304 	movi	r5,12
    5898:	000481c0 	call	481c <__mulsi3>
    589c:	00c00034 	movhi	r3,0
    58a0:	18d91b04 	addi	r3,r3,25708
    58a4:	10c9883a 	add	r4,r2,r3

  if (fd)
    58a8:	20001726 	beq	r4,zero,5908 <close+0x8c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    58ac:	20800017 	ldw	r2,0(r4)
    58b0:	10800417 	ldw	r2,16(r2)
    58b4:	10002126 	beq	r2,zero,593c <close+0xc0>
    58b8:	103ee83a 	callr	r2
    58bc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    58c0:	8009883a 	mov	r4,r16
    58c4:	0005d900 	call	5d90 <alt_release_fd>
    if (rval < 0)
    58c8:	88000216 	blt	r17,zero,58d4 <close+0x58>
    58cc:	0005883a 	mov	r2,zero
    58d0:	00001d06 	br	5948 <close+0xcc>
    58d4:	00800034 	movhi	r2,0
    58d8:	10998304 	addi	r2,r2,26124
    58dc:	10800017 	ldw	r2,0(r2)
    58e0:	1000031e 	bne	r2,zero,58f0 <close+0x74>
    58e4:	00c00034 	movhi	r3,0
    58e8:	18da4504 	addi	r3,r3,26900
    58ec:	00000206 	br	58f8 <close+0x7c>
    58f0:	103ee83a 	callr	r2
    58f4:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    58f8:	0445c83a 	sub	r2,zero,r17
    58fc:	18800015 	stw	r2,0(r3)
    5900:	00bfffc4 	movi	r2,-1
    5904:	00001006 	br	5948 <close+0xcc>
    5908:	00800034 	movhi	r2,0
    590c:	10998304 	addi	r2,r2,26124
    5910:	10800017 	ldw	r2,0(r2)
    5914:	1000031e 	bne	r2,zero,5924 <close+0xa8>
    5918:	00c00034 	movhi	r3,0
    591c:	18da4504 	addi	r3,r3,26900
    5920:	00000206 	br	592c <close+0xb0>
    5924:	103ee83a 	callr	r2
    5928:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    592c:	00801444 	movi	r2,81
    5930:	18800015 	stw	r2,0(r3)
    5934:	00bfffc4 	movi	r2,-1
    5938:	00000306 	br	5948 <close+0xcc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    593c:	8009883a 	mov	r4,r16
    5940:	0005d900 	call	5d90 <alt_release_fd>
    5944:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    5948:	dfc00217 	ldw	ra,8(sp)
    594c:	dc400117 	ldw	r17,4(sp)
    5950:	dc000017 	ldw	r16,0(sp)
    5954:	dec00304 	addi	sp,sp,12
    5958:	f800283a 	ret

0000595c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    595c:	f800283a 	ret

00005960 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    5960:	3005883a 	mov	r2,r6
    5964:	f800283a 	ret

00005968 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5968:	deffff04 	addi	sp,sp,-4
    596c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5970:	20000226 	beq	r4,zero,597c <alt_dev_llist_insert+0x14>
    5974:	20800217 	ldw	r2,8(r4)
    5978:	10000d1e 	bne	r2,zero,59b0 <alt_dev_llist_insert+0x48>
    597c:	00800034 	movhi	r2,0
    5980:	10998304 	addi	r2,r2,26124
    5984:	10800017 	ldw	r2,0(r2)
    5988:	1000031e 	bne	r2,zero,5998 <alt_dev_llist_insert+0x30>
    598c:	00c00034 	movhi	r3,0
    5990:	18da4504 	addi	r3,r3,26900
    5994:	00000206 	br	59a0 <alt_dev_llist_insert+0x38>
    5998:	103ee83a 	callr	r2
    599c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    59a0:	00800584 	movi	r2,22
    59a4:	18800015 	stw	r2,0(r3)
    59a8:	00bffa84 	movi	r2,-22
    59ac:	00000706 	br	59cc <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    59b0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    59b4:	28800017 	ldw	r2,0(r5)
    59b8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    59bc:	28800017 	ldw	r2,0(r5)
    59c0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    59c4:	29000015 	stw	r4,0(r5)
    59c8:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    59cc:	dfc00017 	ldw	ra,0(sp)
    59d0:	dec00104 	addi	sp,sp,4
    59d4:	f800283a 	ret

000059d8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    59d8:	f800283a 	ret

000059dc <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    59dc:	000530fa 	rdctl	r2,ienable
    59e0:	00c00044 	movi	r3,1
    59e4:	1946983a 	sll	r3,r3,r5
    59e8:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
    59ec:	1004c03a 	cmpne	r2,r2,zero
    59f0:	f800283a 	ret

000059f4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    59f4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    59f8:	00bfff84 	movi	r2,-2
    59fc:	3084703a 	and	r2,r6,r2
    5a00:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    5a04:	00c00034 	movhi	r3,0
    5a08:	18da4904 	addi	r3,r3,26916
    5a0c:	19000017 	ldw	r4,0(r3)
    5a10:	00800044 	movi	r2,1
    5a14:	1144983a 	sll	r2,r2,r5
    5a18:	1104b03a 	or	r2,r2,r4
    5a1c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5a20:	18800017 	ldw	r2,0(r3)
    5a24:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a28:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    5a2c:	0005883a 	mov	r2,zero
    5a30:	f800283a 	ret

00005a34 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a34:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a38:	00bfff84 	movi	r2,-2
    5a3c:	3084703a 	and	r2,r6,r2
    5a40:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    5a44:	00c00034 	movhi	r3,0
    5a48:	18da4904 	addi	r3,r3,26916
    5a4c:	19000017 	ldw	r4,0(r3)
    5a50:	00bfff84 	movi	r2,-2
    5a54:	1144183a 	rol	r2,r2,r5
    5a58:	1104703a 	and	r2,r2,r4
    5a5c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5a60:	18800017 	ldw	r2,0(r3)
    5a64:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a68:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    5a6c:	0005883a 	mov	r2,zero
    5a70:	f800283a 	ret

00005a74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5a74:	defffe04 	addi	sp,sp,-8
    5a78:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5a7c:	d8800217 	ldw	r2,8(sp)
    5a80:	d8800015 	stw	r2,0(sp)
    5a84:	0005a940 	call	5a94 <alt_iic_isr_register>
}  
    5a88:	dfc00117 	ldw	ra,4(sp)
    5a8c:	dec00204 	addi	sp,sp,8
    5a90:	f800283a 	ret

00005a94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5a94:	defffe04 	addi	sp,sp,-8
    5a98:	dfc00115 	stw	ra,4(sp)
    5a9c:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5aa0:	008007c4 	movi	r2,31
    5aa4:	1140020e 	bge	r2,r5,5ab0 <alt_iic_isr_register+0x1c>
    5aa8:	00bffa84 	movi	r2,-22
    5aac:	00000f06 	br	5aec <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ab0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ab4:	00bfff84 	movi	r2,-2
    5ab8:	8084703a 	and	r2,r16,r2
    5abc:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    5ac0:	280490fa 	slli	r2,r5,3
    5ac4:	00c00034 	movhi	r3,0
    5ac8:	18da7c04 	addi	r3,r3,27120
    5acc:	10c5883a 	add	r2,r2,r3
    5ad0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    5ad4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5ad8:	30000226 	beq	r6,zero,5ae4 <alt_iic_isr_register+0x50>
    5adc:	00059f40 	call	59f4 <alt_ic_irq_enable>
    5ae0:	00000106 	br	5ae8 <alt_iic_isr_register+0x54>
    5ae4:	0005a340 	call	5a34 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ae8:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    5aec:	dfc00117 	ldw	ra,4(sp)
    5af0:	dc000017 	ldw	r16,0(sp)
    5af4:	dec00204 	addi	sp,sp,8
    5af8:	f800283a 	ret

00005afc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5afc:	defffd04 	addi	sp,sp,-12
    5b00:	dfc00215 	stw	ra,8(sp)
    5b04:	dc400115 	stw	r17,4(sp)
    5b08:	dc000015 	stw	r16,0(sp)
    5b0c:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
    5b10:	2809883a 	mov	r4,r5
    5b14:	300b883a 	mov	r5,r6
    5b18:	380d883a 	mov	r6,r7
    5b1c:	0005c0c0 	call	5c0c <open>
    5b20:	1021883a 	mov	r16,r2

  if (old >= 0)
    5b24:	10000e16 	blt	r2,zero,5b60 <alt_open_fd+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
    5b28:	1009883a 	mov	r4,r2
    5b2c:	01400304 	movi	r5,12
    5b30:	000481c0 	call	481c <__mulsi3>
    5b34:	00c00034 	movhi	r3,0
    5b38:	18d91b04 	addi	r3,r3,25708
    5b3c:	10c5883a 	add	r2,r2,r3
    5b40:	10c00017 	ldw	r3,0(r2)
    5b44:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    5b48:	10c00117 	ldw	r3,4(r2)
    5b4c:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5b50:	10800217 	ldw	r2,8(r2)
    5b54:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
    5b58:	8009883a 	mov	r4,r16
    5b5c:	0005d900 	call	5d90 <alt_release_fd>
  }
} 
    5b60:	dfc00217 	ldw	ra,8(sp)
    5b64:	dc400117 	ldw	r17,4(sp)
    5b68:	dc000017 	ldw	r16,0(sp)
    5b6c:	dec00304 	addi	sp,sp,12
    5b70:	f800283a 	ret

00005b74 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5b74:	defffa04 	addi	sp,sp,-24
    5b78:	dfc00515 	stw	ra,20(sp)
    5b7c:	dd000415 	stw	r20,16(sp)
    5b80:	dcc00315 	stw	r19,12(sp)
    5b84:	dc800215 	stw	r18,8(sp)
    5b88:	dc400115 	stw	r17,4(sp)
    5b8c:	dc000015 	stw	r16,0(sp)
    5b90:	2005883a 	mov	r2,r4
    5b94:	2827883a 	mov	r19,r5
    5b98:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5b9c:	04000034 	movhi	r16,0
    5ba0:	84191e04 	addi	r16,r16,25720
    5ba4:	04800044 	movi	r18,1
    5ba8:	04407fc4 	movi	r17,511
    5bac:	8009883a 	mov	r4,r16
    5bb0:	100b883a 	mov	r5,r2
    5bb4:	900d883a 	mov	r6,r18
    5bb8:	880f883a 	mov	r7,r17
    5bbc:	0005afc0 	call	5afc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5bc0:	843ffd04 	addi	r16,r16,-12
    5bc4:	8009883a 	mov	r4,r16
    5bc8:	980b883a 	mov	r5,r19
    5bcc:	000d883a 	mov	r6,zero
    5bd0:	880f883a 	mov	r7,r17
    5bd4:	0005afc0 	call	5afc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5bd8:	81000604 	addi	r4,r16,24
    5bdc:	a00b883a 	mov	r5,r20
    5be0:	900d883a 	mov	r6,r18
    5be4:	880f883a 	mov	r7,r17
    5be8:	0005afc0 	call	5afc <alt_open_fd>
}  
    5bec:	dfc00517 	ldw	ra,20(sp)
    5bf0:	dd000417 	ldw	r20,16(sp)
    5bf4:	dcc00317 	ldw	r19,12(sp)
    5bf8:	dc800217 	ldw	r18,8(sp)
    5bfc:	dc400117 	ldw	r17,4(sp)
    5c00:	dc000017 	ldw	r16,0(sp)
    5c04:	dec00604 	addi	sp,sp,24
    5c08:	f800283a 	ret

00005c0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5c0c:	defff904 	addi	sp,sp,-28
    5c10:	dfc00615 	stw	ra,24(sp)
    5c14:	dd400515 	stw	r21,20(sp)
    5c18:	dd000415 	stw	r20,16(sp)
    5c1c:	dcc00315 	stw	r19,12(sp)
    5c20:	dc800215 	stw	r18,8(sp)
    5c24:	dc400115 	stw	r17,4(sp)
    5c28:	dc000015 	stw	r16,0(sp)
    5c2c:	2029883a 	mov	r20,r4
    5c30:	2827883a 	mov	r19,r5
    5c34:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5c38:	01400034 	movhi	r5,0
    5c3c:	29598004 	addi	r5,r5,26112
    5c40:	0005ee00 	call	5ee0 <alt_find_dev>
    5c44:	1021883a 	mov	r16,r2
    5c48:	10000226 	beq	r2,zero,5c54 <open+0x48>
    5c4c:	0025883a 	mov	r18,zero
    5c50:	00000a06 	br	5c7c <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5c54:	a009883a 	mov	r4,r20
    5c58:	0005f500 	call	5f50 <alt_find_file>
    5c5c:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5c60:	1000051e 	bne	r2,zero,5c78 <open+0x6c>
    5c64:	047fffc4 	movi	r17,-1
    5c68:	043ffb44 	movi	r16,-19
    5c6c:	00002d06 	br	5d24 <open+0x118>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5c70:	043ffcc4 	movi	r16,-13
    5c74:	00002b06 	br	5d24 <open+0x118>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5c78:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    5c7c:	8009883a 	mov	r4,r16
    5c80:	000600c0 	call	600c <alt_get_fd>
    5c84:	1023883a 	mov	r17,r2
    5c88:	10003516 	blt	r2,zero,5d60 <open+0x154>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    5c8c:	1009883a 	mov	r4,r2
    5c90:	01400304 	movi	r5,12
    5c94:	000481c0 	call	481c <__mulsi3>
    5c98:	02000034 	movhi	r8,0
    5c9c:	42191b04 	addi	r8,r8,25708
    5ca0:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5ca4:	00900034 	movhi	r2,16384
    5ca8:	10bfffc4 	addi	r2,r2,-1
    5cac:	9886703a 	and	r3,r19,r2
    5cb0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5cb4:	9004c03a 	cmpne	r2,r18,zero
    5cb8:	1000121e 	bne	r2,zero,5d04 <open+0xf8>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5cbc:	18900034 	orhi	r2,r3,16384
    5cc0:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5cc4:	00800034 	movhi	r2,0
    5cc8:	10998204 	addi	r2,r2,26120
    5ccc:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5cd0:	21800017 	ldw	r6,0(r4)
    5cd4:	000b883a 	mov	r5,zero
    5cd8:	4007883a 	mov	r3,r8
    5cdc:	02400044 	movi	r9,1
    5ce0:	02000304 	movi	r8,12
    5ce4:	18800017 	ldw	r2,0(r3)
    5ce8:	1180031e 	bne	r2,r6,5cf8 <open+0xec>
    5cec:	18800217 	ldw	r2,8(r3)
    5cf0:	1000010e 	bge	r2,zero,5cf8 <open+0xec>
    5cf4:	193fde1e 	bne	r3,r4,5c70 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5cf8:	2a4b883a 	add	r5,r5,r9
    5cfc:	1a07883a 	add	r3,r3,r8
    5d00:	397ff82e 	bgeu	r7,r5,5ce4 <open+0xd8>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5d04:	80800317 	ldw	r2,12(r16)
    5d08:	10001726 	beq	r2,zero,5d68 <open+0x15c>
    5d0c:	a00b883a 	mov	r5,r20
    5d10:	980d883a 	mov	r6,r19
    5d14:	a80f883a 	mov	r7,r21
    5d18:	103ee83a 	callr	r2
    5d1c:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5d20:	1000110e 	bge	r2,zero,5d68 <open+0x15c>
  {
    alt_release_fd (index);  
    5d24:	8809883a 	mov	r4,r17
    5d28:	0005d900 	call	5d90 <alt_release_fd>
    5d2c:	00800034 	movhi	r2,0
    5d30:	10998304 	addi	r2,r2,26124
    5d34:	10800017 	ldw	r2,0(r2)
    5d38:	1000031e 	bne	r2,zero,5d48 <open+0x13c>
    5d3c:	00c00034 	movhi	r3,0
    5d40:	18da4504 	addi	r3,r3,26900
    5d44:	00000206 	br	5d50 <open+0x144>
    5d48:	103ee83a 	callr	r2
    5d4c:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    5d50:	0405c83a 	sub	r2,zero,r16
    5d54:	18800015 	stw	r2,0(r3)
    5d58:	047fffc4 	movi	r17,-1
    5d5c:	00000206 	br	5d68 <open+0x15c>
    5d60:	1021883a 	mov	r16,r2
    5d64:	003fef06 	br	5d24 <open+0x118>
  }
  
  /* return the reference upon success */

  return index;
}
    5d68:	8805883a 	mov	r2,r17
    5d6c:	dfc00617 	ldw	ra,24(sp)
    5d70:	dd400517 	ldw	r21,20(sp)
    5d74:	dd000417 	ldw	r20,16(sp)
    5d78:	dcc00317 	ldw	r19,12(sp)
    5d7c:	dc800217 	ldw	r18,8(sp)
    5d80:	dc400117 	ldw	r17,4(sp)
    5d84:	dc000017 	ldw	r16,0(sp)
    5d88:	dec00704 	addi	sp,sp,28
    5d8c:	f800283a 	ret

00005d90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5d90:	defffc04 	addi	sp,sp,-16
    5d94:	dfc00315 	stw	ra,12(sp)
    5d98:	dc800215 	stw	r18,8(sp)
    5d9c:	dc400115 	stw	r17,4(sp)
    5da0:	dc000015 	stw	r16,0(sp)
    5da4:	2025883a 	mov	r18,r4
  if (fd > 2)
    5da8:	00800084 	movi	r2,2
    5dac:	11000c0e 	bge	r2,r4,5de0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    5db0:	04400034 	movhi	r17,0
    5db4:	8c591b04 	addi	r17,r17,25708
    5db8:	04000304 	movi	r16,12
    5dbc:	800b883a 	mov	r5,r16
    5dc0:	000481c0 	call	481c <__mulsi3>
    5dc4:	1445883a 	add	r2,r2,r17
    5dc8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    5dcc:	9009883a 	mov	r4,r18
    5dd0:	800b883a 	mov	r5,r16
    5dd4:	000481c0 	call	481c <__mulsi3>
    5dd8:	1445883a 	add	r2,r2,r17
    5ddc:	10000015 	stw	zero,0(r2)
  }
}
    5de0:	dfc00317 	ldw	ra,12(sp)
    5de4:	dc800217 	ldw	r18,8(sp)
    5de8:	dc400117 	ldw	r17,4(sp)
    5dec:	dc000017 	ldw	r16,0(sp)
    5df0:	dec00404 	addi	sp,sp,16
    5df4:	f800283a 	ret

00005df8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5df8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5dfc:	00bfff84 	movi	r2,-2
    5e00:	2884703a 	and	r2,r5,r2
    5e04:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5e08:	20c00017 	ldw	r3,0(r4)
    5e0c:	20800117 	ldw	r2,4(r4)
    5e10:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    5e14:	20800117 	ldw	r2,4(r4)
    5e18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5e1c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    5e20:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e24:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    5e28:	f800283a 	ret

00005e2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5e2c:	defffd04 	addi	sp,sp,-12
    5e30:	dfc00215 	stw	ra,8(sp)
    5e34:	dc400115 	stw	r17,4(sp)
    5e38:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5e3c:	d4200a17 	ldw	r16,-32728(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5e40:	d0a0d017 	ldw	r2,-31936(gp)
    5e44:	10800044 	addi	r2,r2,1
    5e48:	d0a0d015 	stw	r2,-31936(gp)
    5e4c:	00001b06 	br	5ebc <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    5e50:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5e54:	80800403 	ldbu	r2,16(r16)
    5e58:	10000326 	beq	r2,zero,5e68 <alt_tick+0x3c>
    5e5c:	d0a0d017 	ldw	r2,-31936(gp)
    5e60:	1000011e 	bne	r2,zero,5e68 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    5e64:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5e68:	d0e0d017 	ldw	r3,-31936(gp)
    5e6c:	80800217 	ldw	r2,8(r16)
    5e70:	18801136 	bltu	r3,r2,5eb8 <alt_tick+0x8c>
    5e74:	80800403 	ldbu	r2,16(r16)
    5e78:	10000f1e 	bne	r2,zero,5eb8 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    5e7c:	80800317 	ldw	r2,12(r16)
    5e80:	81000517 	ldw	r4,20(r16)
    5e84:	103ee83a 	callr	r2
    5e88:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5e8c:	1000031e 	bne	r2,zero,5e9c <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    5e90:	8009883a 	mov	r4,r16
    5e94:	0005df80 	call	5df8 <alt_alarm_stop>
    5e98:	00000706 	br	5eb8 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    5e9c:	80800217 	ldw	r2,8(r16)
    5ea0:	1885883a 	add	r2,r3,r2
    5ea4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5ea8:	d0e0d017 	ldw	r3,-31936(gp)
    5eac:	10c0022e 	bgeu	r2,r3,5eb8 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    5eb0:	00800044 	movi	r2,1
    5eb4:	80800405 	stb	r2,16(r16)
    5eb8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5ebc:	d0a00a04 	addi	r2,gp,-32728
    5ec0:	80bfe31e 	bne	r16,r2,5e50 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    5ec4:	dfc00217 	ldw	ra,8(sp)
    5ec8:	dc400117 	ldw	r17,4(sp)
    5ecc:	dc000017 	ldw	r16,0(sp)
    5ed0:	dec00304 	addi	sp,sp,12
    5ed4:	f800283a 	ret

00005ed8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5ed8:	000170fa 	wrctl	ienable,zero
}
    5edc:	f800283a 	ret

00005ee0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5ee0:	defffb04 	addi	sp,sp,-20
    5ee4:	dfc00415 	stw	ra,16(sp)
    5ee8:	dcc00315 	stw	r19,12(sp)
    5eec:	dc800215 	stw	r18,8(sp)
    5ef0:	dc400115 	stw	r17,4(sp)
    5ef4:	dc000015 	stw	r16,0(sp)
    5ef8:	2027883a 	mov	r19,r4
    5efc:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    5f00:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    5f04:	00049b40 	call	49b4 <strlen>
    5f08:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5f0c:	8c000726 	beq	r17,r16,5f2c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5f10:	89000217 	ldw	r4,8(r17)
    5f14:	980b883a 	mov	r5,r19
    5f18:	900d883a 	mov	r6,r18
    5f1c:	00060cc0 	call	60cc <memcmp>
    5f20:	10000326 	beq	r2,zero,5f30 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    5f24:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5f28:	847ff91e 	bne	r16,r17,5f10 <alt_find_dev+0x30>
    5f2c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    5f30:	8805883a 	mov	r2,r17
    5f34:	dfc00417 	ldw	ra,16(sp)
    5f38:	dcc00317 	ldw	r19,12(sp)
    5f3c:	dc800217 	ldw	r18,8(sp)
    5f40:	dc400117 	ldw	r17,4(sp)
    5f44:	dc000017 	ldw	r16,0(sp)
    5f48:	dec00504 	addi	sp,sp,20
    5f4c:	f800283a 	ret

00005f50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5f50:	defff904 	addi	sp,sp,-28
    5f54:	dfc00615 	stw	ra,24(sp)
    5f58:	dd400515 	stw	r21,20(sp)
    5f5c:	dd000415 	stw	r20,16(sp)
    5f60:	dcc00315 	stw	r19,12(sp)
    5f64:	dc800215 	stw	r18,8(sp)
    5f68:	dc400115 	stw	r17,4(sp)
    5f6c:	dc000015 	stw	r16,0(sp)
    5f70:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5f74:	00800034 	movhi	r2,0
    5f78:	10997e04 	addi	r2,r2,26104
    5f7c:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5f80:	102b883a 	mov	r21,r2
    5f84:	88801626 	beq	r17,r2,5fe0 <alt_find_file+0x90>
    5f88:	053fffc4 	movi	r20,-1
    5f8c:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    5f90:	8c000217 	ldw	r16,8(r17)
    5f94:	8009883a 	mov	r4,r16
    5f98:	00049b40 	call	49b4 <strlen>
    5f9c:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    5fa0:	8085883a 	add	r2,r16,r2
    5fa4:	1505883a 	add	r2,r2,r20
    5fa8:	10800007 	ldb	r2,0(r2)
    5fac:	14c0011e 	bne	r2,r19,5fb4 <alt_find_file+0x64>
    {
      len -= 1;
    5fb0:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5fb4:	1c85883a 	add	r2,r3,r18
    5fb8:	10800007 	ldb	r2,0(r2)
    5fbc:	14c00126 	beq	r2,r19,5fc4 <alt_find_file+0x74>
    5fc0:	1000051e 	bne	r2,zero,5fd8 <alt_find_file+0x88>
    5fc4:	8009883a 	mov	r4,r16
    5fc8:	900b883a 	mov	r5,r18
    5fcc:	180d883a 	mov	r6,r3
    5fd0:	00060cc0 	call	60cc <memcmp>
    5fd4:	10000326 	beq	r2,zero,5fe4 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    5fd8:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5fdc:	8d7fec1e 	bne	r17,r21,5f90 <alt_find_file+0x40>
    5fe0:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    5fe4:	8805883a 	mov	r2,r17
    5fe8:	dfc00617 	ldw	ra,24(sp)
    5fec:	dd400517 	ldw	r21,20(sp)
    5ff0:	dd000417 	ldw	r20,16(sp)
    5ff4:	dcc00317 	ldw	r19,12(sp)
    5ff8:	dc800217 	ldw	r18,8(sp)
    5ffc:	dc400117 	ldw	r17,4(sp)
    6000:	dc000017 	ldw	r16,0(sp)
    6004:	dec00704 	addi	sp,sp,28
    6008:	f800283a 	ret

0000600c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    600c:	defffb04 	addi	sp,sp,-20
    6010:	dfc00415 	stw	ra,16(sp)
    6014:	dcc00315 	stw	r19,12(sp)
    6018:	dc800215 	stw	r18,8(sp)
    601c:	dc400115 	stw	r17,4(sp)
    6020:	dc000015 	stw	r16,0(sp)
    6024:	2025883a 	mov	r18,r4
    6028:	0021883a 	mov	r16,zero
    602c:	00c00034 	movhi	r3,0
    6030:	18d91b04 	addi	r3,r3,25708
    6034:	04c00034 	movhi	r19,0
    6038:	9cd98204 	addi	r19,r19,26120
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    603c:	18800017 	ldw	r2,0(r3)
    6040:	10000e1e 	bne	r2,zero,607c <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
    6044:	8009883a 	mov	r4,r16
    6048:	01400304 	movi	r5,12
    604c:	000481c0 	call	481c <__mulsi3>
    6050:	00c00034 	movhi	r3,0
    6054:	18d91b04 	addi	r3,r3,25708
    6058:	10c5883a 	add	r2,r2,r3
    605c:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    6060:	98800017 	ldw	r2,0(r19)
    6064:	14000216 	blt	r2,r16,6070 <alt_get_fd+0x64>
    6068:	8005883a 	mov	r2,r16
    606c:	00000806 	br	6090 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    6070:	9c000015 	stw	r16,0(r19)
    6074:	8005883a 	mov	r2,r16
    6078:	00000506 	br	6090 <alt_get_fd+0x84>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    607c:	84000044 	addi	r16,r16,1
    6080:	18c00304 	addi	r3,r3,12
    6084:	00800804 	movi	r2,32
    6088:	80bfec1e 	bne	r16,r2,603c <alt_get_fd+0x30>
    608c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    6090:	dfc00417 	ldw	ra,16(sp)
    6094:	dcc00317 	ldw	r19,12(sp)
    6098:	dc800217 	ldw	r18,8(sp)
    609c:	dc400117 	ldw	r17,4(sp)
    60a0:	dc000017 	ldw	r16,0(sp)
    60a4:	dec00504 	addi	sp,sp,20
    60a8:	f800283a 	ret

000060ac <exit>:
    60ac:	defffe04 	addi	sp,sp,-8
    60b0:	dc400015 	stw	r17,0(sp)
    60b4:	000b883a 	mov	r5,zero
    60b8:	2023883a 	mov	r17,r4
    60bc:	dfc00115 	stw	ra,4(sp)
    60c0:	000610c0 	call	610c <__call_exitprocs>
    60c4:	8809883a 	mov	r4,r17
    60c8:	00062c80 	call	62c8 <_exit>

000060cc <memcmp>:
    60cc:	31ffffc4 	addi	r7,r6,-1
    60d0:	3000061e 	bne	r6,zero,60ec <memcmp+0x20>
    60d4:	00000a06 	br	6100 <memcmp+0x34>
    60d8:	39ffffc4 	addi	r7,r7,-1
    60dc:	00bfffc4 	movi	r2,-1
    60e0:	21000044 	addi	r4,r4,1
    60e4:	29400044 	addi	r5,r5,1
    60e8:	38800526 	beq	r7,r2,6100 <memcmp+0x34>
    60ec:	20c00003 	ldbu	r3,0(r4)
    60f0:	28800003 	ldbu	r2,0(r5)
    60f4:	18bff826 	beq	r3,r2,60d8 <memcmp+0xc>
    60f8:	1885c83a 	sub	r2,r3,r2
    60fc:	f800283a 	ret
    6100:	0005883a 	mov	r2,zero
    6104:	f800283a 	ret

00006108 <register_fini>:
    6108:	f800283a 	ret

0000610c <__call_exitprocs>:
    610c:	defff304 	addi	sp,sp,-52
    6110:	00800034 	movhi	r2,0
    6114:	10997d04 	addi	r2,r2,26100
    6118:	df000b15 	stw	fp,44(sp)
    611c:	17000017 	ldw	fp,0(r2)
    6120:	00800034 	movhi	r2,0
    6124:	10800004 	addi	r2,r2,0
    6128:	1005003a 	cmpeq	r2,r2,zero
    612c:	d8800215 	stw	r2,8(sp)
    6130:	e0800c04 	addi	r2,fp,48
    6134:	dd800915 	stw	r22,36(sp)
    6138:	dd400815 	stw	r21,32(sp)
    613c:	dfc00c15 	stw	ra,48(sp)
    6140:	ddc00a15 	stw	r23,40(sp)
    6144:	dd000715 	stw	r20,28(sp)
    6148:	dcc00615 	stw	r19,24(sp)
    614c:	dc800515 	stw	r18,20(sp)
    6150:	dc400415 	stw	r17,16(sp)
    6154:	dc000315 	stw	r16,12(sp)
    6158:	282d883a 	mov	r22,r5
    615c:	d9000115 	stw	r4,4(sp)
    6160:	d8800015 	stw	r2,0(sp)
    6164:	282b003a 	cmpeq	r21,r5,zero
    6168:	e4400c17 	ldw	r17,48(fp)
    616c:	88001226 	beq	r17,zero,61b8 <__call_exitprocs+0xac>
    6170:	ddc00017 	ldw	r23,0(sp)
    6174:	88800117 	ldw	r2,4(r17)
    6178:	8c802217 	ldw	r18,136(r17)
    617c:	143fffc4 	addi	r16,r2,-1
    6180:	80000b16 	blt	r16,zero,61b0 <__call_exitprocs+0xa4>
    6184:	9027003a 	cmpeq	r19,r18,zero
    6188:	a800171e 	bne	r21,zero,61e8 <__call_exitprocs+0xdc>
    618c:	9800051e 	bne	r19,zero,61a4 <__call_exitprocs+0x98>
    6190:	8409883a 	add	r4,r16,r16
    6194:	2105883a 	add	r2,r4,r4
    6198:	1485883a 	add	r2,r2,r18
    619c:	10c02017 	ldw	r3,128(r2)
    61a0:	b0c01226 	beq	r22,r3,61ec <__call_exitprocs+0xe0>
    61a4:	843fffc4 	addi	r16,r16,-1
    61a8:	00bfffc4 	movi	r2,-1
    61ac:	80bff61e 	bne	r16,r2,6188 <__call_exitprocs+0x7c>
    61b0:	d8800217 	ldw	r2,8(sp)
    61b4:	10003226 	beq	r2,zero,6280 <__call_exitprocs+0x174>
    61b8:	dfc00c17 	ldw	ra,48(sp)
    61bc:	df000b17 	ldw	fp,44(sp)
    61c0:	ddc00a17 	ldw	r23,40(sp)
    61c4:	dd800917 	ldw	r22,36(sp)
    61c8:	dd400817 	ldw	r21,32(sp)
    61cc:	dd000717 	ldw	r20,28(sp)
    61d0:	dcc00617 	ldw	r19,24(sp)
    61d4:	dc800517 	ldw	r18,20(sp)
    61d8:	dc400417 	ldw	r17,16(sp)
    61dc:	dc000317 	ldw	r16,12(sp)
    61e0:	dec00d04 	addi	sp,sp,52
    61e4:	f800283a 	ret
    61e8:	8409883a 	add	r4,r16,r16
    61ec:	88c00117 	ldw	r3,4(r17)
    61f0:	2105883a 	add	r2,r4,r4
    61f4:	1445883a 	add	r2,r2,r17
    61f8:	18ffffc4 	addi	r3,r3,-1
    61fc:	11800217 	ldw	r6,8(r2)
    6200:	1c001826 	beq	r3,r16,6264 <__call_exitprocs+0x158>
    6204:	10000215 	stw	zero,8(r2)
    6208:	303fe626 	beq	r6,zero,61a4 <__call_exitprocs+0x98>
    620c:	8d000117 	ldw	r20,4(r17)
    6210:	9800121e 	bne	r19,zero,625c <__call_exitprocs+0x150>
    6214:	00c00044 	movi	r3,1
    6218:	1c06983a 	sll	r3,r3,r16
    621c:	90804017 	ldw	r2,256(r18)
    6220:	1884703a 	and	r2,r3,r2
    6224:	10000d26 	beq	r2,zero,625c <__call_exitprocs+0x150>
    6228:	90804117 	ldw	r2,260(r18)
    622c:	1884703a 	and	r2,r3,r2
    6230:	10000e1e 	bne	r2,zero,626c <__call_exitprocs+0x160>
    6234:	2105883a 	add	r2,r4,r4
    6238:	1485883a 	add	r2,r2,r18
    623c:	11400017 	ldw	r5,0(r2)
    6240:	d9000117 	ldw	r4,4(sp)
    6244:	303ee83a 	callr	r6
    6248:	88800117 	ldw	r2,4(r17)
    624c:	a0bfc61e 	bne	r20,r2,6168 <__call_exitprocs+0x5c>
    6250:	b8800017 	ldw	r2,0(r23)
    6254:	147fd326 	beq	r2,r17,61a4 <__call_exitprocs+0x98>
    6258:	003fc306 	br	6168 <__call_exitprocs+0x5c>
    625c:	303ee83a 	callr	r6
    6260:	003ff906 	br	6248 <__call_exitprocs+0x13c>
    6264:	8c000115 	stw	r16,4(r17)
    6268:	003fe706 	br	6208 <__call_exitprocs+0xfc>
    626c:	2105883a 	add	r2,r4,r4
    6270:	1485883a 	add	r2,r2,r18
    6274:	11000017 	ldw	r4,0(r2)
    6278:	303ee83a 	callr	r6
    627c:	003ff206 	br	6248 <__call_exitprocs+0x13c>
    6280:	88800117 	ldw	r2,4(r17)
    6284:	10000b1e 	bne	r2,zero,62b4 <__call_exitprocs+0x1a8>
    6288:	89000017 	ldw	r4,0(r17)
    628c:	20000a26 	beq	r4,zero,62b8 <__call_exitprocs+0x1ac>
    6290:	b9000015 	stw	r4,0(r23)
    6294:	90000226 	beq	r18,zero,62a0 <__call_exitprocs+0x194>
    6298:	9009883a 	mov	r4,r18
    629c:	00000000 	call	0 <__alt_mem_RAM-0x4000>
    62a0:	8809883a 	mov	r4,r17
    62a4:	00000000 	call	0 <__alt_mem_RAM-0x4000>
    62a8:	bc400017 	ldw	r17,0(r23)
    62ac:	883fb11e 	bne	r17,zero,6174 <__call_exitprocs+0x68>
    62b0:	003fc106 	br	61b8 <__call_exitprocs+0xac>
    62b4:	89000017 	ldw	r4,0(r17)
    62b8:	882f883a 	mov	r23,r17
    62bc:	2023883a 	mov	r17,r4
    62c0:	883fac1e 	bne	r17,zero,6174 <__call_exitprocs+0x68>
    62c4:	003fbc06 	br	61b8 <__call_exitprocs+0xac>

000062c8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    62c8:	20000226 	beq	r4,zero,62d4 <_exit+0xc>
    ALT_SIM_FAIL();
    62cc:	002af070 	cmpltui	zero,zero,43969
    62d0:	00000106 	br	62d8 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    62d4:	002af0b0 	cmpltui	zero,zero,43970
    62d8:	003fff06 	br	62d8 <_exit+0x10>
    62dc:	00006108 	cmpgei	zero,zero,388
